/// <reference path="android-declarations.d.ts"/>

declare module com {
	export module arcgismaps {
		export class ApiKey {
			public static class: java.lang.Class<com.arcgismaps.ApiKey>;
			public static "hashCode-impl"(param0: string): number;
			public equals(param0: any): boolean;
			public static "getCoreApiKey-impl$arcgis_maps_any_release"(param0: string): string;
			public toString(): string;
			public static "equals-impl"(param0: string, param1: any): boolean;
			public static "equals-impl0"(param0: string, param1: string): boolean;
			public static "toString-impl"(param0: string): string;
			public hashCode(): number;
			
		}
		export module ApiKey {
			export class Companion {
				public static class: java.lang.Class<com.arcgismaps.ApiKey.Companion>;
				public "create-y3sK56w"(param0: string): string;
				public static create(param0: string): com.arcgismaps.ApiKey;
				//public static create(param0: any);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class ApiKeyResource {
			public static class: java.lang.Class<com.arcgismaps.ApiKeyResource>;
			/**
			 * Constructs a new instance of the com.arcgismaps.ApiKeyResource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				"getApiKey-6IiKQno"(): string;
				"setApiKey-lGpodAQ"(param0: string): void;
			});
			public constructor();
			public "setApiKey-lGpodAQ"(param0: string): void;
			public "getApiKey-6IiKQno"(): string;
		}
	}
}

declare module com {
	export module arcgismaps {
		export class ApiKeyResourceImpl extends com.arcgismaps.ApiKeyResource {
			public static class: java.lang.Class<com.arcgismaps.ApiKeyResourceImpl>;
			public "setApiKey-lGpodAQ"(param0: string): void;
			public "getApiKey-6IiKQno"(): string;
			public getCoreApiKeyResource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAPIKeyResource;
			public constructor(param0: com.arcgismaps.internal.jni.CoreAPIKeyResource);
		}
	}
}

declare module com {
	export module arcgismaps {
		export module ApiKeyResourceKt {

			export class WhenMappings {
				public static class: java.lang.Class<com.arcgismaps.ApiKeyResourceKt.WhenMappings>;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class ArcGISEnvironment {
			public static class: java.lang.Class<com.arcgismaps.ArcGISEnvironment>;
			public static INSTANCE: com.arcgismaps.ArcGISEnvironment;
			public static TAG: string;
			public static apiKey: com.arcgismaps.ApiKey;
			public getArcadeConsoleMessage(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.arcade.ArcadeConsoleMessageEvent>;
			public setServiceCurveGeometryMode(param0: com.arcgismaps.ServiceCurveGeometryMode): void;
			public setApplicationContext(param0: globalAndroid.content.Context): void;
			public getApiVersion(): string;
			public getApplicationContext(): globalAndroid.content.Context;
			public getSdkVersion$arcgis_maps_any_release(): com.arcgismaps.internal.SdkVersion;
			public static setLicense(param0: com.arcgismaps.LicenseInfo): com.arcgismaps.LicenseResult;
			public "setApiKey-lGpodAQ"(param0: string): void;
			public getAuthenticationManager(): com.arcgismaps.httpcore.authentication.AuthenticationManager;
			public getDefaultTempFolder$arcgis_maps_any_release(): java.io.File;
			public "getApiKey-6IiKQno"(): string;
			public getScope$arcgis_maps_any_release(): kotlinx.coroutines.CoroutineScope;
			public setScope$arcgis_maps_any_release(param0: kotlinx.coroutines.CoroutineScope): void;
			public configureArcGISHttpClient(param0: any): void;
			public static initialize(): void;
			public getServiceCurveGeometryMode(): com.arcgismaps.ServiceCurveGeometryMode;
			public getArcGISHttpClient(): com.arcgismaps.httpcore.ArcGISHttpClient;
			public static "setLicense-G51JFYw"(param0: string, param1: java.util.List<com.arcgismaps.LicenseKey>): com.arcgismaps.LicenseResult;
			public getLicense(): com.arcgismaps.License;
		}
	}
}

declare module com {
	export module arcgismaps {
		export class BuildConfig {
			public static class: java.lang.Class<com.arcgismaps.BuildConfig>;
			public static DEBUG: boolean;
			public static LIBRARY_PACKAGE_NAME: string;
			public static BUILD_TYPE: string;
			public static versionCode: number;
			public static versionName: string;
			public constructor();
		}
	}
}

declare module com {
	export module arcgismaps {
		export class Color {
			public static class: java.lang.Class<com.arcgismaps.Color>;
			public static "constructor-impl"(param0: com.arcgismaps.internal.jni.CoreColor): number;
			public equals(param0: any): boolean;
			public static "getAlpha-impl"(param0: number): number;
			public getArgb(): number;
			public static "getBlue-impl"(param0: number): number;
			public static "getRed-impl"(param0: number): number;
			public static "toString-impl"(param0: number): string;
			public static "component3-impl"(param0: number): number;
			public static "hashCode-impl"(param0: number): number;
			public static "component1-impl"(param0: number): number;
			public static "equals-impl"(param0: number, param1: any): boolean;
			public static "getCoreColor-impl$arcgis_maps_any_release"(param0: number): com.arcgismaps.internal.jni.CoreColor;
			public toString(): string;
			public static "equals-impl0"(param0: number, param1: number): boolean;
			public static "constructor-impl"(param0: number): number;
			public static "getGreen-impl"(param0: number): number;
			public static "component4-impl"(param0: number): number;
			public static "component2-impl"(param0: number): number;
			public hashCode(): number;
		}
		export module Color {
			export class Companion {
				public static class: java.lang.Class<com.arcgismaps.Color.Companion>;
				public "getTransparent-I-ELunk"(): number;
				public "getGreen-I-ELunk"(): number;
				public "getCyan-I-ELunk"(): number;
				public "getBlack-I-ELunk"(): number;
				public "getWhite-I-ELunk"(): number;
				public "getRed-I-ELunk"(): number;
				public "fromRgba-_smiY9w"(param0: number, param1: number, param2: number, param3: number): number;
			}
			export class Factory extends com.arcgismaps.ColorFactory {
				public static class: java.lang.Class<com.arcgismaps.Color.Factory>;
				public static INSTANCE: com.arcgismaps.Color.Factory;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class ColorFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreColor,com.arcgismaps.Color> {
			public static class: java.lang.Class<com.arcgismaps.ColorFactory>;
			public constructor();
			public "convertToPublic-as9Rv6M"(param0: com.arcgismaps.internal.jni.CoreColor): com.arcgismaps.Color;
		}
		export module ColorFactory {
			export class WhenMappings {
				public static class: java.lang.Class<com.arcgismaps.ColorFactory.WhenMappings>;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export abstract class DateTimeFormat {
			public static class: java.lang.Class<com.arcgismaps.DateTimeFormat>;
			public getCoreDateTimeFormat$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDateTimeFormat;
		}
		export module DateTimeFormat {
			export class DayShortMonthYear extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.DayShortMonthYear>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.DayShortMonthYear;
			}
			export class Factory {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.Factory>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.Factory;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDateTimeFormat): com.arcgismaps.DateTimeFormat;
			}
			export module Factory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.Factory.WhenMappings>;
				}
			}
			export class LongDate extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.LongDate>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.LongDate;
			}
			export class LongMonthDayYear extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.LongMonthDayYear>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.LongMonthDayYear;
			}
			export class LongMonthYear extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.LongMonthYear>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.LongMonthYear;
			}
			export class LongTime extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.LongTime>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.LongTime;
			}
			export class ShortDate extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDate>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDate;
			}
			export class ShortDateLe extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDateLe>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDateLe;
			}
			export class ShortDateLeLongTime extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDateLeLongTime>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDateLeLongTime;
			}
			export class ShortDateLeLongTime24 extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDateLeLongTime24>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDateLeLongTime24;
			}
			export class ShortDateLeShortTime extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDateLeShortTime>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDateLeShortTime;
			}
			export class ShortDateLeShortTime24 extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDateLeShortTime24>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDateLeShortTime24;
			}
			export class ShortDateLongTime extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDateLongTime>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDateLongTime;
			}
			export class ShortDateLongTime24 extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDateLongTime24>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDateLongTime24;
			}
			export class ShortDateShortTime extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDateShortTime>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDateShortTime;
			}
			export class ShortDateShortTime24 extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortDateShortTime24>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortDateShortTime24;
			}
			export class ShortMonthYear extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortMonthYear>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortMonthYear;
			}
			export class ShortTime extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.ShortTime>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.ShortTime;
			}
			export class Year extends com.arcgismaps.DateTimeFormat {
				public static class: java.lang.Class<com.arcgismaps.DateTimeFormat.Year>;
				public static INSTANCE: com.arcgismaps.DateTimeFormat.Year;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class ExtensionLicense {
			public static class: java.lang.Class<com.arcgismaps.ExtensionLicense>;
			public getName(): string;
			public getStatus(): com.arcgismaps.LicenseStatus;
			public getExpiry(): java.time.Instant;
			public getCoreExtensionLicense$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExtensionLicense;
			public isPermanent(): boolean;
			public constructor(param0: com.arcgismaps.internal.jni.CoreExtensionLicense);
		}
		export module ExtensionLicense {
			export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreExtensionLicense,com.arcgismaps.ExtensionLicense> {
				public static class: java.lang.Class<com.arcgismaps.ExtensionLicense.Factory>;
				public static INSTANCE: com.arcgismaps.ExtensionLicense.Factory;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export abstract class FilePathSerializationParameterDirection {
			public static class: java.lang.Class<com.arcgismaps.FilePathSerializationParameterDirection>;
			public getCoreFilePathSerializationParameterDirection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection;
		}
		export module FilePathSerializationParameterDirection {
			export class Factory {
				public static class: java.lang.Class<com.arcgismaps.FilePathSerializationParameterDirection.Factory>;
				public static INSTANCE: com.arcgismaps.FilePathSerializationParameterDirection.Factory;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection): com.arcgismaps.FilePathSerializationParameterDirection;
			}
			export module Factory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.FilePathSerializationParameterDirection.Factory.WhenMappings>;
				}
			}
			export class FromJson extends com.arcgismaps.FilePathSerializationParameterDirection {
				public static class: java.lang.Class<com.arcgismaps.FilePathSerializationParameterDirection.FromJson>;
				public static INSTANCE: com.arcgismaps.FilePathSerializationParameterDirection.FromJson;
			}
			export class ToJson extends com.arcgismaps.FilePathSerializationParameterDirection {
				public static class: java.lang.Class<com.arcgismaps.FilePathSerializationParameterDirection.ToJson>;
				public static INSTANCE: com.arcgismaps.FilePathSerializationParameterDirection.ToJson;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class Guid {
			public static class: java.lang.Class<com.arcgismaps.Guid>;
			public static "hashCode-impl"(param0: string): number;
			public equals(param0: any): boolean;
			public toString(): string;
			public static "equals-impl"(param0: string, param1: any): boolean;
			public static "equals-impl0"(param0: string, param1: string): boolean;
			public static "getCoreGuid-impl$arcgis_maps_any_release"(param0: string): com.arcgismaps.internal.jni.CoreGUID;
			public static "constructor-impl"(param0: string): string;
			public static "toString-impl"(param0: string): string;
			public hashCode(): number;
		}
		export module Guid {
			export class Factory extends com.arcgismaps.GuidFactory {
				public static class: java.lang.Class<com.arcgismaps.Guid.Factory>;
				public static INSTANCE: com.arcgismaps.Guid.Factory;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class GuidFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGUID,com.arcgismaps.Guid> {
			public static class: java.lang.Class<com.arcgismaps.GuidFactory>;
			public "convertToPublic-LySpZFM"(param0: com.arcgismaps.internal.jni.CoreGUID): string;
			public constructor();
		}
	}
}

declare module com {
	export module arcgismaps {
		export class License {
			public static class: java.lang.Class<com.arcgismaps.License>;
			public constructor(param0: com.arcgismaps.internal.jni.CoreLicense);
			public getLevel(): com.arcgismaps.LicenseLevel;
			public getStatus(): com.arcgismaps.LicenseStatus;
			public getCoreLicense$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLicense;
			public getExpiry(): java.time.Instant;
			public getExtensions(): java.util.List<com.arcgismaps.ExtensionLicense>;
			public getType(): com.arcgismaps.LicenseType;
			public isPermanent(): boolean;
		}
		export module License {
			export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLicense,com.arcgismaps.License> {
				public static class: java.lang.Class<com.arcgismaps.License.Factory>;
				public static INSTANCE: com.arcgismaps.License.Factory;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class LicenseInfo extends com.arcgismaps.io.JsonSerializable {
			public static class: java.lang.Class<com.arcgismaps.LicenseInfo>;
			public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
			public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
			public constructor(param0: com.arcgismaps.internal.jni.CoreLicenseInfo);
			public toJson(): string;
			public getCoreLicenseInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLicenseInfo;
			public constructor(param0: string);
		}
		export module LicenseInfo {
			export class Companion {
				public static class: java.lang.Class<com.arcgismaps.LicenseInfo.Companion>;
				public fromJsonOrNull(param0: string): com.arcgismaps.LicenseInfo;
			}
			export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLicenseInfo,com.arcgismaps.LicenseInfo> {
				public static class: java.lang.Class<com.arcgismaps.LicenseInfo.Factory>;
				public static INSTANCE: com.arcgismaps.LicenseInfo.Factory;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class LicenseKey {
			public static class: java.lang.Class<com.arcgismaps.LicenseKey>;
			public static "hashCode-impl"(param0: string): number;
			public equals(param0: any): boolean;
			public toString(): string;
			public static "equals-impl"(param0: string, param1: any): boolean;
			public static "equals-impl0"(param0: string, param1: string): boolean;
			public static "getCoreLicenseKey-impl$arcgis_maps_any_release"(param0: string): string;
			public static "toString-impl"(param0: string): string;
			public hashCode(): number;
		}
		export module LicenseKey {
			export class Companion {
				public static class: java.lang.Class<com.arcgismaps.LicenseKey.Companion>;
				public "create-I3GUxaw"(param0: string): string;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export abstract class LicenseLevel {
			public static class: java.lang.Class<com.arcgismaps.LicenseLevel>;
			public getCoreLicenseLevel$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLicenseLevel;
		}
		export module LicenseLevel {
			export class Advanced extends com.arcgismaps.LicenseLevel {
				public static class: java.lang.Class<com.arcgismaps.LicenseLevel.Advanced>;
				public static INSTANCE: com.arcgismaps.LicenseLevel.Advanced;
			}
			export class Basic extends com.arcgismaps.LicenseLevel {
				public static class: java.lang.Class<com.arcgismaps.LicenseLevel.Basic>;
				public static INSTANCE: com.arcgismaps.LicenseLevel.Basic;
			}
			export class Developer extends com.arcgismaps.LicenseLevel {
				public static class: java.lang.Class<com.arcgismaps.LicenseLevel.Developer>;
				public static INSTANCE: com.arcgismaps.LicenseLevel.Developer;
			}
			export class Factory {
				public static class: java.lang.Class<com.arcgismaps.LicenseLevel.Factory>;
				public static INSTANCE: com.arcgismaps.LicenseLevel.Factory;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLicenseLevel): com.arcgismaps.LicenseLevel;
			}
			export module Factory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.LicenseLevel.Factory.WhenMappings>;
				}
			}
			export class Lite extends com.arcgismaps.LicenseLevel {
				public static class: java.lang.Class<com.arcgismaps.LicenseLevel.Lite>;
				public static INSTANCE: com.arcgismaps.LicenseLevel.Lite;
			}
			export class Standard extends com.arcgismaps.LicenseLevel {
				public static class: java.lang.Class<com.arcgismaps.LicenseLevel.Standard>;
				public static INSTANCE: com.arcgismaps.LicenseLevel.Standard;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class LicenseResult {
			public static class: java.lang.Class<com.arcgismaps.LicenseResult>;
			public constructor(param0: com.arcgismaps.internal.jni.CoreLicenseResult);
			public getCoreLicenseResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLicenseResult;
			public getLicenseStatus(): com.arcgismaps.LicenseStatus;
			public getExtensionsStatus(): java.util.Map<string,com.arcgismaps.LicenseStatus>;
		}
		export module LicenseResult {
			export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLicenseResult,com.arcgismaps.LicenseResult> {
				public static class: java.lang.Class<com.arcgismaps.LicenseResult.Factory>;
				public static INSTANCE: com.arcgismaps.LicenseResult.Factory;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export abstract class LicenseStatus {
			public static class: java.lang.Class<com.arcgismaps.LicenseStatus>;
			public getCoreLicenseStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLicenseStatus;
		}
		export module LicenseStatus {
			export class Expired extends com.arcgismaps.LicenseStatus {
				public static class: java.lang.Class<com.arcgismaps.LicenseStatus.Expired>;
				public static INSTANCE: com.arcgismaps.LicenseStatus.Expired;
			}
			export class Factory {
				public static class: java.lang.Class<com.arcgismaps.LicenseStatus.Factory>;
				public static INSTANCE: com.arcgismaps.LicenseStatus.Factory;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLicenseStatus): com.arcgismaps.LicenseStatus;
			}
			export module Factory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.LicenseStatus.Factory.WhenMappings>;
				}
			}
			export class Invalid extends com.arcgismaps.LicenseStatus {
				public static class: java.lang.Class<com.arcgismaps.LicenseStatus.Invalid>;
				public static INSTANCE: com.arcgismaps.LicenseStatus.Invalid;
			}
			export class LoginRequired extends com.arcgismaps.LicenseStatus {
				public static class: java.lang.Class<com.arcgismaps.LicenseStatus.LoginRequired>;
				public static INSTANCE: com.arcgismaps.LicenseStatus.LoginRequired;
			}
			export class Valid extends com.arcgismaps.LicenseStatus {
				public static class: java.lang.Class<com.arcgismaps.LicenseStatus.Valid>;
				public static INSTANCE: com.arcgismaps.LicenseStatus.Valid;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export abstract class LicenseType {
			public static class: java.lang.Class<com.arcgismaps.LicenseType>;
			public getCoreLicenseType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLicenseType;
		}
		export module LicenseType {
			export class Developer extends com.arcgismaps.LicenseType {
				public static class: java.lang.Class<com.arcgismaps.LicenseType.Developer>;
				public static INSTANCE: com.arcgismaps.LicenseType.Developer;
			}
			export class Factory {
				public static class: java.lang.Class<com.arcgismaps.LicenseType.Factory>;
				public static INSTANCE: com.arcgismaps.LicenseType.Factory;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLicenseType): com.arcgismaps.LicenseType;
			}
			export module Factory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.LicenseType.Factory.WhenMappings>;
				}
			}
			export class LicenseKey extends com.arcgismaps.LicenseType {
				public static class: java.lang.Class<com.arcgismaps.LicenseType.LicenseKey>;
				public static INSTANCE: com.arcgismaps.LicenseType.LicenseKey;
			}
			export class NamedUser extends com.arcgismaps.LicenseType {
				public static class: java.lang.Class<com.arcgismaps.LicenseType.NamedUser>;
				public static INSTANCE: com.arcgismaps.LicenseType.NamedUser;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export abstract class LoadStatus {
			public static class: java.lang.Class<com.arcgismaps.LoadStatus>;
			public toString(): string;
			public isTerminal(): boolean;
			public getCoreLoadStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLoadStatus;
		}
		export module LoadStatus {
			export class Companion {
				public static class: java.lang.Class<com.arcgismaps.LoadStatus.Companion>;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLoadStatus, param1: com.arcgismaps.internal.jni.CoreError): com.arcgismaps.LoadStatus;
			}
			export module Companion {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.LoadStatus.Companion.WhenMappings>;
				}
			}
			export class FailedToLoad extends com.arcgismaps.LoadStatus {
				public static class: java.lang.Class<com.arcgismaps.LoadStatus.FailedToLoad>;
				public getError(): java.lang.Throwable;
				public component1(): java.lang.Throwable;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public toString(): string;
				public constructor(param0: java.lang.Throwable);
				public copy(param0: java.lang.Throwable): com.arcgismaps.LoadStatus.FailedToLoad;
			}
			export class Loaded extends com.arcgismaps.LoadStatus {
				public static class: java.lang.Class<com.arcgismaps.LoadStatus.Loaded>;
				public static INSTANCE: com.arcgismaps.LoadStatus.Loaded;
			}
			export class Loading extends com.arcgismaps.LoadStatus {
				public static class: java.lang.Class<com.arcgismaps.LoadStatus.Loading>;
				public static INSTANCE: com.arcgismaps.LoadStatus.Loading;
			}
			export class NotLoaded extends com.arcgismaps.LoadStatus {
				public static class: java.lang.Class<com.arcgismaps.LoadStatus.NotLoaded>;
				public static INSTANCE: com.arcgismaps.LoadStatus.NotLoaded;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class Loadable {
			public static class: java.lang.Class<com.arcgismaps.Loadable>;
			/**
			 * Constructs a new instance of the com.arcgismaps.Loadable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				"load-IoAF18A"(param0: any): any;
				"retryLoad-IoAF18A"(param0: any): any;
				cancelLoad(): void;
			});
			public constructor();
			public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
			public "retryLoad-IoAF18A"(param0: any): any;
			public cancelLoad(): void;
			public "load-IoAF18A"(param0: any): any;
		}
	}
}

declare module com {
	export module arcgismaps {
		export class LoadableImplWithCore extends com.arcgismaps.Loadable {
			public static class: java.lang.Class<com.arcgismaps.LoadableImplWithCore>;
			public constructor(param0: com.arcgismaps.internal.jni.CoreLoadable);
			public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
			public "retryLoad-IoAF18A"(param0: any): any;
			public getCoreLoadable(): com.arcgismaps.internal.jni.CoreLoadable;
			public updateStatus(param0: com.arcgismaps.LoadStatus): void;
			public cancelLoad(): void;
			public "load-IoAF18A"(param0: any): any;
		}
	}
}

declare module com {
	export module arcgismaps {
		export class LoadableImplWithData<T>  extends com.arcgismaps.Loadable {
			public static class: java.lang.Class<com.arcgismaps.LoadableImplWithData<any>>;
			public constructor(param0: com.arcgismaps.LoadStatus, param1: com.arcgismaps.LoadableImplWithData.Fetcher, param2: any);
			public constructor(param0: com.arcgismaps.LoadStatus, param1: com.arcgismaps.httpcore.BaseRequest, param2: any, param3: any);
			public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
			public "retryLoad-IoAF18A"(param0: any): any;
			public cancelLoad(): void;
			public "load-IoAF18A"(param0: any): any;
			public constructor();
			public constructor(param0: any);
			public getOrNull(): any;
		}
		export module LoadableImplWithData {
			export class Companion {
				public static class: java.lang.Class<com.arcgismaps.LoadableImplWithData.Companion>;
				public createWithPortalGroupLoadableData(param0: com.arcgismaps.portal.PortalGroupLoadableData, param1: com.arcgismaps.portal.Portal): com.arcgismaps.LoadableImplWithData<com.arcgismaps.portal.PortalGroupLoadableData>;
				public createForPortalUser(param0: string, param1: string, param2: com.arcgismaps.portal.PortalUserLoadableData): com.arcgismaps.LoadableImplWithData<com.arcgismaps.portal.PortalUserLoadableData>;
				public createForPortalGroup(param0: string, param1: string, param2: com.arcgismaps.portal.PortalGroupLoadableData, param3: com.arcgismaps.LoadStatus): com.arcgismaps.LoadableImplWithData<com.arcgismaps.portal.PortalGroupLoadableData>;
			}
			export class Fetcher {
				public static class: java.lang.Class<com.arcgismaps.LoadableImplWithData.Fetcher>;
				/**
				 * Constructs a new instance of the com.arcgismaps.LoadableImplWithData$Fetcher interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					"fetch-IoAF18A"(param0: any): any;
					cancel(): void;
				});
				public constructor();
				public cancel(): void;
				public "fetch-IoAF18A"(param0: any): any;
			}
			export class ResponseFetcher extends com.arcgismaps.LoadableImplWithData.Fetcher {
				public static class: java.lang.Class<com.arcgismaps.LoadableImplWithData.ResponseFetcher>;
				public cancel(): void;
				public constructor(param0: com.arcgismaps.httpcore.BaseRequest);
				public "fetch-IoAF18A"(param0: any): any;
			}
			export module ResponseFetcher {
				export class CancellableRequest {
					public static class: java.lang.Class<com.arcgismaps.LoadableImplWithData.ResponseFetcher.CancellableRequest>;
					public constructor(param0: com.arcgismaps.httpcore.BaseRequest);
					public cancel(): void;
					public getRequest(): com.arcgismaps.httpcore.BaseRequest;
					public setOnCancelRequest(param0: any): void;
					public getOnCancelRequest(): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class NumberUtil {
			public static class: java.lang.Class<com.arcgismaps.NumberUtil>;
			public static INSTANCE: com.arcgismaps.NumberUtil;
			public getFloatValue(param0: any): number;
			public formatNumber(param0: number, param1: number, param2: boolean, param3: boolean): string;
			public getIntegerValue(param0: any): number;
			public getLongValue(param0: any): number;
			public getDoubleValue(param0: any): number;
			public isNumeric(param0: any): boolean;
			public approxEqual(param0: number, param1: number, param2: number): boolean;
		}
	}
}

declare module com {
	export module arcgismaps {
		export class PlatformHelpersProvider {
			public static class: java.lang.Class<com.arcgismaps.PlatformHelpersProvider>;
			public static INSTANCE: com.arcgismaps.PlatformHelpersProvider;
			public getCorePlatformHelpersProvider(): com.arcgismaps.internal.jni.CorePlatformHelpersProvider;
		}
	}
}

declare module com {
	export module arcgismaps {
		export class ResourceProvider {
			public static class: java.lang.Class<com.arcgismaps.ResourceProvider>;
			public static INSTANCE: com.arcgismaps.ResourceProvider;
			public getCoreResourceProvider(): com.arcgismaps.internal.jni.CoreResourceProvider;
		}
	}
}

declare module com {
	export module arcgismaps {
		export class Resourceable {
			public static class: java.lang.Class<com.arcgismaps.Resourceable>;
			/**
			 * Constructs a new instance of the com.arcgismaps.Resourceable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
			});
			public constructor();
		}
	}
}

declare module com {
	export module arcgismaps {
		export class ResourceableImpl extends com.arcgismaps.Resourceable {
			public static class: java.lang.Class<com.arcgismaps.ResourceableImpl>;
			public constructor(param0: com.arcgismaps.internal.jni.CoreResourceable);
			public getCoreResourceable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreResourceable;
		}
	}
}

declare module com {
	export module arcgismaps {
		export abstract class ScreenCoordinateType {
			public static class: java.lang.Class<com.arcgismaps.ScreenCoordinateType>;
			public getCoreScreenCoordinateType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreScreenCoordinateType;
		}
		export module ScreenCoordinateType {
			export class Dips extends com.arcgismaps.ScreenCoordinateType {
				public static class: java.lang.Class<com.arcgismaps.ScreenCoordinateType.Dips>;
				public static INSTANCE: com.arcgismaps.ScreenCoordinateType.Dips;
			}
			export class Factory {
				public static class: java.lang.Class<com.arcgismaps.ScreenCoordinateType.Factory>;
				public static INSTANCE: com.arcgismaps.ScreenCoordinateType.Factory;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreScreenCoordinateType): com.arcgismaps.ScreenCoordinateType;
			}
			export module Factory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.ScreenCoordinateType.Factory.WhenMappings>;
				}
			}
			export class Pixels extends com.arcgismaps.ScreenCoordinateType {
				public static class: java.lang.Class<com.arcgismaps.ScreenCoordinateType.Pixels>;
				public static INSTANCE: com.arcgismaps.ScreenCoordinateType.Pixels;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export abstract class ServiceCurveGeometryMode {
			public static class: java.lang.Class<com.arcgismaps.ServiceCurveGeometryMode>;
			public getCoreServiceCurveGeometryMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode;
		}
		export module ServiceCurveGeometryMode {
			export class DensifyCurves extends com.arcgismaps.ServiceCurveGeometryMode {
				public static class: java.lang.Class<com.arcgismaps.ServiceCurveGeometryMode.DensifyCurves>;
				public static INSTANCE: com.arcgismaps.ServiceCurveGeometryMode.DensifyCurves;
			}
			export class Factory {
				public static class: java.lang.Class<com.arcgismaps.ServiceCurveGeometryMode.Factory>;
				public static INSTANCE: com.arcgismaps.ServiceCurveGeometryMode.Factory;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode): com.arcgismaps.ServiceCurveGeometryMode;
			}
			export module Factory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.ServiceCurveGeometryMode.Factory.WhenMappings>;
				}
			}
			export class TrueCurveClient extends com.arcgismaps.ServiceCurveGeometryMode {
				public static class: java.lang.Class<com.arcgismaps.ServiceCurveGeometryMode.TrueCurveClient>;
				public static INSTANCE: com.arcgismaps.ServiceCurveGeometryMode.TrueCurveClient;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export abstract class UnitSystem extends com.arcgismaps.internal.io.StringEncodable {
			public static class: java.lang.Class<com.arcgismaps.UnitSystem>;
			public getEncoding(): string;
			public getCoreUnitSystem$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnitSystem;
		}
		export module UnitSystem {
			export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoder<com.arcgismaps.UnitSystem> {
				public static class: java.lang.Class<com.arcgismaps.UnitSystem.Companion>;
				public getDecoder(): java.util.Map<string,com.arcgismaps.UnitSystem>;
				public getDecoder(): java.util.Map<string,any>;
				public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.UnitSystem>;
			}
			export class Factory {
				public static class: java.lang.Class<com.arcgismaps.UnitSystem.Factory>;
				public static INSTANCE: com.arcgismaps.UnitSystem.Factory;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUnitSystem): com.arcgismaps.UnitSystem;
			}
			export module Factory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.UnitSystem.Factory.WhenMappings>;
				}
			}
			export class Imperial extends com.arcgismaps.UnitSystem {
				public static class: java.lang.Class<com.arcgismaps.UnitSystem.Imperial>;
				public static INSTANCE: com.arcgismaps.UnitSystem.Imperial;
				public getEncoding(): string;
			}
			export class Metric extends com.arcgismaps.UnitSystem {
				public static class: java.lang.Class<com.arcgismaps.UnitSystem.Metric>;
				public static INSTANCE: com.arcgismaps.UnitSystem.Metric;
				public getEncoding(): string;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export class UnitSystemSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.UnitSystem> {
			public static class: java.lang.Class<com.arcgismaps.UnitSystemSerializer>;
			public static INSTANCE: com.arcgismaps.UnitSystemSerializer;
		}
	}
}

declare module com {
	export module arcgismaps {
		export class UnitSystemStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.UnitSystem> {
			public static class: java.lang.Class<com.arcgismaps.UnitSystemStringSerializer>;
			public static INSTANCE: com.arcgismaps.UnitSystemStringSerializer;
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export abstract class Analysis {
				public static class: java.lang.Class<com.arcgismaps.analysis.Analysis>;
				public isVisible(): boolean;
				public getCoreAnalysis$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAnalysis;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.analysis.AnalysisType;
				public setVisible(param0: boolean): void;
			}
			export module Analysis {
				export class Factory extends com.arcgismaps.analysis.AnalysisFactory {
					public static class: java.lang.Class<com.arcgismaps.analysis.Analysis.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.Analysis.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export class AnalysisFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreAnalysis,com.arcgismaps.analysis.Analysis> {
				public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAnalysis): com.arcgismaps.analysis.Analysis;
				public constructor();
			}
			export module AnalysisFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export abstract class AnalysisType {
				public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisType>;
				public getCoreAnalysisType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAnalysisType;
			}
			export module AnalysisType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisType.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.AnalysisType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAnalysisType): com.arcgismaps.analysis.AnalysisType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisType.Factory.WhenMappings>;
					}
				}
				export class GeoElementLineOfSight extends com.arcgismaps.analysis.AnalysisType {
					public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisType.GeoElementLineOfSight>;
					public static INSTANCE: com.arcgismaps.analysis.AnalysisType.GeoElementLineOfSight;
				}
				export class GeoElementViewshed extends com.arcgismaps.analysis.AnalysisType {
					public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisType.GeoElementViewshed>;
					public static INSTANCE: com.arcgismaps.analysis.AnalysisType.GeoElementViewshed;
				}
				export class LocationDistanceMeasurement extends com.arcgismaps.analysis.AnalysisType {
					public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisType.LocationDistanceMeasurement>;
					public static INSTANCE: com.arcgismaps.analysis.AnalysisType.LocationDistanceMeasurement;
				}
				export class LocationLineOfSight extends com.arcgismaps.analysis.AnalysisType {
					public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisType.LocationLineOfSight>;
					public static INSTANCE: com.arcgismaps.analysis.AnalysisType.LocationLineOfSight;
				}
				export class LocationViewshed extends com.arcgismaps.analysis.AnalysisType {
					public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisType.LocationViewshed>;
					public static INSTANCE: com.arcgismaps.analysis.AnalysisType.LocationViewshed;
				}
				export class Unknown extends com.arcgismaps.analysis.AnalysisType {
					public static class: java.lang.Class<com.arcgismaps.analysis.AnalysisType.Unknown>;
					public static INSTANCE: com.arcgismaps.analysis.AnalysisType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export class GeoElementLineOfSight extends com.arcgismaps.analysis.LineOfSight {
				public static class: java.lang.Class<com.arcgismaps.analysis.GeoElementLineOfSight>;
				public getCoreGeoElementLineOfSight$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoElementLineOfSight;
				public getObserverGeoElement(): com.arcgismaps.mapping.GeoElement;
				public getObserverOffsetX(): number;
				public setObserverOffsetZ(param0: number): void;
				public getTargetOffsetX(): number;
				public getTargetGeoElement(): com.arcgismaps.mapping.GeoElement;
				public setObserverOffsetY(param0: number): void;
				public setTargetOffsetX(param0: number): void;
				public setObserverOffsetX(param0: number): void;
				public getObserverOffsetZ(): number;
				public constructor(param0: com.arcgismaps.mapping.GeoElement, param1: com.arcgismaps.mapping.GeoElement);
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeoElementLineOfSight, param1: boolean);
				public getTargetOffsetZ(): number;
				public setTargetOffsetZ(param0: number): void;
				public getObserverOffsetY(): number;
				public setTargetOffsetY(param0: number): void;
				public getTargetOffsetY(): number;
			}
			export module GeoElementLineOfSight {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGeoElementLineOfSight,com.arcgismaps.analysis.GeoElementLineOfSight> {
					public static class: java.lang.Class<com.arcgismaps.analysis.GeoElementLineOfSight.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.GeoElementLineOfSight.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export class GeoElementViewshed extends com.arcgismaps.analysis.Viewshed {
				public static class: java.lang.Class<com.arcgismaps.analysis.GeoElementViewshed>;
				public constructor(param0: com.arcgismaps.mapping.GeoElement, param1: number, param2: number, param3: number, param4: number, param5: java.lang.Double, param6: java.lang.Double);
				public getPitchOffset(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeoElementViewshed, param1: boolean);
				public getOffsetY(): number;
				public getCoreGeoElementViewshed$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoElementViewshed;
				public setHeadingOffset(param0: number): void;
				public setPitchOffset(param0: number): void;
				public getOffsetX(): number;
				public getGeoElement(): com.arcgismaps.mapping.GeoElement;
				public getOffsetZ(): number;
				public getHeadingOffset(): number;
				public setOffsetX(param0: number): void;
				public setOffsetY(param0: number): void;
				public setOffsetZ(param0: number): void;
			}
			export module GeoElementViewshed {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGeoElementViewshed,com.arcgismaps.analysis.GeoElementViewshed> {
					public static class: java.lang.Class<com.arcgismaps.analysis.GeoElementViewshed.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.GeoElementViewshed.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export abstract class LineOfSight extends com.arcgismaps.analysis.Analysis {
				public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSight>;
				public getCoreLineOfSight$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLineOfSight;
				public getTargetVisibility(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.analysis.LineOfSightTargetVisibility>;
			}
			export module LineOfSight {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSight.Companion>;
					public "setVisibleColor-iGKdAYA"(param0: number): void;
					public "getObstructedColor-I-ELunk"(): number;
					public "getVisibleColor-I-ELunk"(): number;
					public getLineWidth(): number;
					public setLineWidth(param0: number): void;
					public "setObstructedColor-iGKdAYA"(param0: number): void;
				}
				export class Factory extends com.arcgismaps.analysis.LineOfSightFactory {
					public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSight.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.LineOfSight.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export class LineOfSightFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreLineOfSight,com.arcgismaps.analysis.LineOfSight> {
				public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSightFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLineOfSight): com.arcgismaps.analysis.LineOfSight;
				public constructor();
			}
			export module LineOfSightFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSightFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export abstract class LineOfSightTargetVisibility {
				public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSightTargetVisibility>;
				public getCoreLineOfSightTargetVisibility$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility;
			}
			export module LineOfSightTargetVisibility {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSightTargetVisibility.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.LineOfSightTargetVisibility.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility): com.arcgismaps.analysis.LineOfSightTargetVisibility;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSightTargetVisibility.Factory.WhenMappings>;
					}
				}
				export class Obstructed extends com.arcgismaps.analysis.LineOfSightTargetVisibility {
					public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSightTargetVisibility.Obstructed>;
					public static INSTANCE: com.arcgismaps.analysis.LineOfSightTargetVisibility.Obstructed;
				}
				export class Unknown extends com.arcgismaps.analysis.LineOfSightTargetVisibility {
					public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSightTargetVisibility.Unknown>;
					public static INSTANCE: com.arcgismaps.analysis.LineOfSightTargetVisibility.Unknown;
				}
				export class Visible extends com.arcgismaps.analysis.LineOfSightTargetVisibility {
					public static class: java.lang.Class<com.arcgismaps.analysis.LineOfSightTargetVisibility.Visible>;
					public static INSTANCE: com.arcgismaps.analysis.LineOfSightTargetVisibility.Visible;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export class LocationDistanceMeasurement extends com.arcgismaps.analysis.Analysis {
				public static class: java.lang.Class<com.arcgismaps.analysis.LocationDistanceMeasurement>;
				public setStartLocation(param0: com.arcgismaps.geometry.Point): void;
				public getUnitSystem(): com.arcgismaps.UnitSystem;
				public setUnitSystem(param0: com.arcgismaps.UnitSystem): void;
				public getStartLocation(): com.arcgismaps.geometry.Point;
				public setEndLocation(param0: com.arcgismaps.geometry.Point): void;
				public getCoreLocationDistanceMeasurement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationDistanceMeasurement;
				public getHorizontalDistance(): com.arcgismaps.geometry.Distance;
				public constructor(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.Point);
				public getEndLocation(): com.arcgismaps.geometry.Point;
				public getDirectDistance(): com.arcgismaps.geometry.Distance;
				public getVerticalDistance(): com.arcgismaps.geometry.Distance;
				public getMeasurementChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.analysis.LocationDistanceMeasurementChanged>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLocationDistanceMeasurement, param1: boolean);
			}
			export module LocationDistanceMeasurement {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreLocationDistanceMeasurement,com.arcgismaps.analysis.LocationDistanceMeasurement> {
					public static class: java.lang.Class<com.arcgismaps.analysis.LocationDistanceMeasurement.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.LocationDistanceMeasurement.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export class LocationDistanceMeasurementChanged {
				public static class: java.lang.Class<com.arcgismaps.analysis.LocationDistanceMeasurementChanged>;
				public component2(): com.arcgismaps.geometry.Distance;
				public getDirectDistance(): com.arcgismaps.geometry.Distance;
				public component1(): com.arcgismaps.geometry.Distance;
				public getVerticalDistance(): com.arcgismaps.geometry.Distance;
				public hashCode(): number;
				public component3(): com.arcgismaps.geometry.Distance;
				public equals(param0: any): boolean;
				public copy(param0: com.arcgismaps.geometry.Distance, param1: com.arcgismaps.geometry.Distance, param2: com.arcgismaps.geometry.Distance): com.arcgismaps.analysis.LocationDistanceMeasurementChanged;
				public toString(): string;
				public constructor(param0: com.arcgismaps.geometry.Distance, param1: com.arcgismaps.geometry.Distance, param2: com.arcgismaps.geometry.Distance);
				public getHorizontalDistance(): com.arcgismaps.geometry.Distance;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export class LocationLineOfSight extends com.arcgismaps.analysis.LineOfSight {
				public static class: java.lang.Class<com.arcgismaps.analysis.LocationLineOfSight>;
				public constructor(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.Point);
				public getCoreLocationLineOfSight$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationLineOfSight;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLocationLineOfSight, param1: boolean);
				public getTargetLocation(): com.arcgismaps.geometry.Point;
				public setObserverLocation(param0: com.arcgismaps.geometry.Point): void;
				public getObserverLocation(): com.arcgismaps.geometry.Point;
				public setTargetLocation(param0: com.arcgismaps.geometry.Point): void;
			}
			export module LocationLineOfSight {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreLocationLineOfSight,com.arcgismaps.analysis.LocationLineOfSight> {
					public static class: java.lang.Class<com.arcgismaps.analysis.LocationLineOfSight.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.LocationLineOfSight.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export class LocationViewshed extends com.arcgismaps.analysis.Viewshed {
				public static class: java.lang.Class<com.arcgismaps.analysis.LocationViewshed>;
				public getCoreLocationViewshed$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationViewshed;
				public updateFromCamera(param0: com.arcgismaps.mapping.view.Camera): void;
				public setHeading(param0: number): void;
				public getPitch(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLocationViewshed, param1: boolean);
				public getHeading(): number;
				public constructor(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number, param4: number, param5: java.lang.Double, param6: java.lang.Double);
				public setLocation(param0: com.arcgismaps.geometry.Point): void;
				public setPitch(param0: number): void;
				public constructor(param0: com.arcgismaps.mapping.view.Camera, param1: java.lang.Double, param2: java.lang.Double);
				public getLocation(): com.arcgismaps.geometry.Point;
			}
			export module LocationViewshed {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreLocationViewshed,com.arcgismaps.analysis.LocationViewshed> {
					public static class: java.lang.Class<com.arcgismaps.analysis.LocationViewshed.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.LocationViewshed.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export abstract class Viewshed extends com.arcgismaps.analysis.Analysis {
				public static class: java.lang.Class<com.arcgismaps.analysis.Viewshed>;
				public setMinDistance(param0: java.lang.Double): void;
				public getCoreViewshed$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreViewshed;
				public getHorizontalAngle(): number;
				public getMinDistance(): java.lang.Double;
				public setHorizontalAngle(param0: number): void;
				public setMaxDistance(param0: java.lang.Double): void;
				public getFrustumOutlineVisible(): boolean;
				public setVerticalAngle(param0: number): void;
				public setFrustumOutlineVisible(param0: boolean): void;
				public getMaxDistance(): java.lang.Double;
				public getVerticalAngle(): number;
			}
			export module Viewshed {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.analysis.Viewshed.Companion>;
					public "setVisibleColor-iGKdAYA"(param0: number): void;
					public "getObstructedColor-I-ELunk"(): number;
					public "setFrustumOutlineColor-iGKdAYA"(param0: number): void;
					public "getFrustumOutlineColor-I-ELunk"(): number;
					public "getVisibleColor-I-ELunk"(): number;
					public "setObstructedColor-iGKdAYA"(param0: number): void;
				}
				export class Factory extends com.arcgismaps.analysis.ViewshedFactory {
					public static class: java.lang.Class<com.arcgismaps.analysis.Viewshed.Factory>;
					public static INSTANCE: com.arcgismaps.analysis.Viewshed.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module analysis {
			export class ViewshedFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreViewshed,com.arcgismaps.analysis.Viewshed> {
				public static class: java.lang.Class<com.arcgismaps.analysis.ViewshedFactory>;
				public convertToPublic(param0: any): any;
				public constructor();
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreViewshed): com.arcgismaps.analysis.Viewshed;
			}
			export module ViewshedFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.analysis.ViewshedFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module annotations {
			export class ArcGISMapsApiExperimental {
				public static class: java.lang.Class<com.arcgismaps.annotations.ArcGISMapsApiExperimental>;
				/**
				 * Constructs a new instance of the com.arcgismaps.annotations.ArcGISMapsApiExperimental interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcade {
			export class ArcadeConsoleMessageContext {
				public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeConsoleMessageContext>;
				public getProfile(): com.arcgismaps.arcade.ArcadeProfile;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcadeConsoleMessageContext);
				public getInformation(): java.util.Map<string,string>;
				public getCoreArcadeConsoleMessageContext$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcadeConsoleMessageContext;
			}
			export module ArcadeConsoleMessageContext {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcadeConsoleMessageContext,com.arcgismaps.arcade.ArcadeConsoleMessageContext> {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeConsoleMessageContext.Factory>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeConsoleMessageContext.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcade {
			export class ArcadeConsoleMessageEvent {
				public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeConsoleMessageEvent>;
				public copy(param0: com.arcgismaps.arcade.ArcadeConsoleMessageContext, param1: string): com.arcgismaps.arcade.ArcadeConsoleMessageEvent;
				public constructor(param0: com.arcgismaps.arcade.ArcadeConsoleMessageContext, param1: string);
				public hashCode(): number;
				public component2(): string;
				public equals(param0: any): boolean;
				public getContext(): com.arcgismaps.arcade.ArcadeConsoleMessageContext;
				public getMessage(): string;
				public toString(): string;
				public component1(): com.arcgismaps.arcade.ArcadeConsoleMessageContext;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcade {
			export class ArcadeEvaluationResult {
				public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeEvaluationResult>;
				public getResult(): any;
				public getCoreArcadeEvaluationResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcadeEvaluationResult;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcadeEvaluationResult);
				public castTo(param0: com.arcgismaps.arcade.ArcadeExpressionReturnType): any;
			}
			export module ArcadeEvaluationResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcadeEvaluationResult,com.arcgismaps.arcade.ArcadeEvaluationResult> {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeEvaluationResult.Factory>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeEvaluationResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcade {
			export class ArcadeEvaluator extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeEvaluator>;
				public "getAttributes-0E7RQCE"(param0: string, param1: com.arcgismaps.data.FeatureTable, param2: any): any;
				public getProfile(): com.arcgismaps.arcade.ArcadeProfile;
				public getProfileVariablesUsed(): java.util.List<string>;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getExpression(): com.arcgismaps.arcade.ArcadeExpression;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcadeEvaluator);
				public "load-IoAF18A"(param0: any): any;
				public "getAttributes-0E7RQCE"(param0: string, param1: com.arcgismaps.mapping.GeoElement, param2: any): any;
				public "retryLoad-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.arcade.ArcadeExpression, param1: com.arcgismaps.arcade.ArcadeProfile);
				public isStable(): boolean;
				public getCoreArcadeEvaluator$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcadeEvaluator;
				public "evaluate-gIAlu-s"(param0: java.util.Map<string,any>, param1: any): any;
			}
			export module ArcadeEvaluator {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcadeEvaluator,com.arcgismaps.arcade.ArcadeEvaluator> {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeEvaluator.Factory>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeEvaluator.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcade {
			export class ArcadeExpression extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpression>;
				public getCoreArcadeExpression$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcadeExpression;
				public getReturnType(): com.arcgismaps.arcade.ArcadeExpressionReturnType;
				public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcadeExpression);
				public getName(): string;
				public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public getExpression(): string;
				public toJson(): string;
				public getTitle(): string;
				public constructor(param0: string, param1: string, param2: string, param3: com.arcgismaps.arcade.ArcadeExpressionReturnType);
			}
			export module ArcadeExpression {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpression.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.arcade.ArcadeExpression;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcadeExpression,com.arcgismaps.arcade.ArcadeExpression> {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpression.Factory>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpression.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcade {
			export abstract class ArcadeExpressionReturnType {
				public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType>;
				public getCoreArcadeExpressionReturnType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
			}
			export module ArcadeExpressionReturnType {
				export class Any extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.Any>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.Any;
				}
				export class Automatic extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.Automatic>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.Automatic;
				}
				export class Boolean extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.Boolean>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.Boolean;
				}
				export class Date extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.Date>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.Date;
				}
				export class DateOnly extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.DateOnly>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.DateOnly;
				}
				export class Dictionary extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.Dictionary>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.Dictionary;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.Factory>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType): com.arcgismaps.arcade.ArcadeExpressionReturnType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.Factory.WhenMappings>;
					}
				}
				export class Number extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.Number>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.Number;
				}
				export class String extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.String>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.String;
				}
				export class TimeOnly extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.TimeOnly>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.TimeOnly;
				}
				export class TimestampOffset extends com.arcgismaps.arcade.ArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeExpressionReturnType.TimestampOffset>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeExpressionReturnType.TimestampOffset;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcade {
			export abstract class ArcadeProfile {
				public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile>;
				public getCoreArcadeProfile$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcadeProfile;
			}
			export module ArcadeProfile {
				export class Alias extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Alias>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Alias;
				}
				export class AttributeRuleCalculation extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.AttributeRuleCalculation>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.AttributeRuleCalculation;
				}
				export class AttributeRuleConstraint extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.AttributeRuleConstraint>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.AttributeRuleConstraint;
				}
				export class AttributeRuleValidation extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.AttributeRuleValidation>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.AttributeRuleValidation;
				}
				export class Constraint extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Constraint>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Constraint;
				}
				export class DashboardData extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.DashboardData>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.DashboardData;
				}
				export class DashboardFormatting extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.DashboardFormatting>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.DashboardFormatting;
				}
				export class DictionaryRenderer extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.DictionaryRenderer>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.DictionaryRenderer;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Factory>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcadeProfile): com.arcgismaps.arcade.ArcadeProfile;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Factory.WhenMappings>;
					}
				}
				export class FeatureZ extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.FeatureZ>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.FeatureZ;
				}
				export class FieldCalculation extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.FieldCalculation>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.FieldCalculation;
				}
				export class FieldMapping extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.FieldMapping>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.FieldMapping;
				}
				export class FormCalculation extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.FormCalculation>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.FormCalculation;
				}
				export class Geoanalytics extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Geoanalytics>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Geoanalytics;
				}
				export class GeotriggerNotification extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.GeotriggerNotification>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.GeotriggerNotification;
				}
				export class Labeling extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Labeling>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Labeling;
				}
				export class Layout extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Layout>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Layout;
				}
				export class LocationUpdateConstraint extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.LocationUpdateConstraint>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.LocationUpdateConstraint;
				}
				export class MeasureVisualization extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.MeasureVisualization>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.MeasureVisualization;
				}
				export class Popup extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Popup>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Popup;
				}
				export class PopupElement extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.PopupElement>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.PopupElement;
				}
				export class QuickCapture extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.QuickCapture>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.QuickCapture;
				}
				export class Restricted extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Restricted>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Restricted;
				}
				export class Task extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Task>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Task;
				}
				export class Unrestricted extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Unrestricted>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Unrestricted;
				}
				export class Velocity extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Velocity>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Velocity;
				}
				export class Visualization extends com.arcgismaps.arcade.ArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.arcade.ArcadeProfile.Visualization>;
					public static INSTANCE: com.arcgismaps.arcade.ArcadeProfile.Visualization;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class AntialiasingMode {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.AntialiasingMode>;
				public getCoreAntialiasingMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAntialiasingMode;
			}
			export module AntialiasingMode {
				export class Best extends com.arcgismaps.arcgisservices.AntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.AntialiasingMode.Best>;
					public static INSTANCE: com.arcgismaps.arcgisservices.AntialiasingMode.Best;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.AntialiasingMode.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.AntialiasingMode.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAntialiasingMode): com.arcgismaps.arcgisservices.AntialiasingMode;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.AntialiasingMode.Factory.WhenMappings>;
					}
				}
				export class Fast extends com.arcgismaps.arcgisservices.AntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.AntialiasingMode.Fast>;
					public static INSTANCE: com.arcgismaps.arcgisservices.AntialiasingMode.Fast;
				}
				export class Fastest extends com.arcgismaps.arcgisservices.AntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.AntialiasingMode.Fastest>;
					public static INSTANCE: com.arcgismaps.arcgisservices.AntialiasingMode.Fastest;
				}
				export class None extends com.arcgismaps.arcgisservices.AntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.AntialiasingMode.None>;
					public static INSTANCE: com.arcgismaps.arcgisservices.AntialiasingMode.None;
				}
				export class Normal extends com.arcgismaps.arcgisservices.AntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.AntialiasingMode.Normal>;
					public static INSTANCE: com.arcgismaps.arcgisservices.AntialiasingMode.Normal;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class ArcGISFeatureLayerInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfo>;
				public getFeatureSubtypes(): java.util.List<com.arcgismaps.data.FeatureSubtype>;
				public getHasM(): boolean;
				public getDefaultSubtypeCode(): any;
				public getEffectiveMinScale(): java.lang.Double;
				public getSupportsPagination(): boolean;
				public getDisplayFieldName(): string;
				public getEffectiveMaxScale(): java.lang.Double;
				public getZDefaultsEnabled(): boolean;
				public getFeatureTypes(): java.util.List<com.arcgismaps.data.FeatureType>;
				public getTimeInfo(): com.arcgismaps.arcgisservices.LayerTimeInfo;
				public getCoreArcGISFeatureLayerInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfo;
				public getOwnershipBasedAccessControl(): com.arcgismaps.arcgisservices.OwnershipBasedAccessControlInfo;
				public getSupportsAdvancedQueries(): boolean;
				public getFeatureServiceType(): com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType;
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getSupportsStatistics(): boolean;
				public getFeatureType(param0: string): com.arcgismaps.data.FeatureType;
				public getFeatureTemplates(): java.util.List<com.arcgismaps.data.FeatureTemplate>;
				public getHasAttachments(): boolean;
				public getUrl(): string;
				public isVisibleByDefault(): boolean;
				public getSubtypeField(): string;
				public getServiceLayerId(): number;
				public getAttribution(): string;
				public getAllowGeometryUpdates(): boolean;
				public getCapabilities(): com.arcgismaps.arcgisservices.FeatureServiceCapabilities;
				public getField(param0: string): com.arcgismaps.data.Field;
				public getServiceLayerName(): string;
				public getDescription(): string;
				public getMaxScale(): java.lang.Double;
				public getExtent(): com.arcgismaps.geometry.Envelope;
				public getObjectIdFieldName(): string;
				public getEditFieldsInfo(): com.arcgismaps.arcgisservices.EditFieldsInfo;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfo);
				public getDrawingInfo(): com.arcgismaps.arcgisservices.DrawingInfo;
				public getSupportsRollbackOnFailureParameter(): boolean;
				public getMinScale(): java.lang.Double;
				public getRelationshipInfos(): java.util.List<com.arcgismaps.arcgisservices.RelationshipInfo>;
				public getSupportsQueryExtent(): boolean;
				public getGlobalIdFieldName(): string;
				public getHasZ(): boolean;
				public getZDefault(): number;
				public getMaxRecordCount(): number;
				public getSupportsObacForAnonymousUsers(): boolean;
				public getVersion(): string;
				public getTypeIdFieldName(): string;
				public getCimVersion(): string;
				public getSourceServiceType(): com.arcgismaps.arcgisservices.ServiceType;
				public getDataIsVersioned(): boolean;
			}
			export module ArcGISFeatureLayerInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfo,com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class ArcGISFeatureLayerInfoServiceType {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType>;
				public getCoreArcGISFeatureLayerInfoServiceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
			}
			export module ArcGISFeatureLayerInfoServiceType {
				export class AnnotationLayer extends com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.AnnotationLayer>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.AnnotationLayer;
				}
				export class DimensionLayer extends com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.DimensionLayer>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.DimensionLayer;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType): com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.Factory.WhenMappings>;
					}
				}
				export class GroupLayer extends com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.GroupLayer>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.GroupLayer;
				}
				export class Layer extends com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.Layer>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.Layer;
				}
				export class Table extends com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.Table>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.Table;
				}
				export class Unknown extends com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.Unknown>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class ArcGISFeatureServiceInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureServiceInfo>;
				public getAttribution(): string;
				public getAllowGeometryUpdates(): boolean;
				public getDocumentInfo(): com.arcgismaps.arcgisservices.ServiceDocumentInfo;
				public getDescription(): string;
				public getFeatureServiceCapabilities(): com.arcgismaps.arcgisservices.FeatureServiceCapabilities;
				public getZDefaultsEnabled(): boolean;
				public getFullExtent(): com.arcgismaps.geometry.Envelope;
				public getHasSyncEnabled(): boolean;
				public getHasVersionedData(): boolean;
				public getCanUseServiceGeodatabaseApplyEdits(): boolean;
				public getTableInfos(): java.util.List<com.arcgismaps.arcgisservices.IdInfo>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureServiceInfo);
				public getInitialExtent(): com.arcgismaps.geometry.Envelope;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getZDefault(): number;
				public getMaxRecordCount(): number;
				public getAllowTrueCurvesUpdates(): boolean;
				public getEditorTrackingInfo(): com.arcgismaps.arcgisservices.EditorTrackingInfo;
				public getServiceDescription(): string;
				public getUnit(): com.arcgismaps.geometry.MeasurementUnit;
				public getUrl(): string;
				public getSupportsDisconnectedEditing(): boolean;
				public getLayerInfos(): java.util.List<com.arcgismaps.arcgisservices.IdInfo>;
				public getSupportsTrueCurve(): boolean;
				public getVersion(): string;
				public getCoreArcGISFeatureServiceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISFeatureServiceInfo;
				public getHasStaticData(): boolean;
				public getSyncCapabilities(): com.arcgismaps.arcgisservices.SyncCapabilities;
				public getOnlyAllowTrueCurveUpdatesByTrueCurveClients(): boolean;
			}
			export module ArcGISFeatureServiceInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISFeatureServiceInfo,com.arcgismaps.arcgisservices.ArcGISFeatureServiceInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISFeatureServiceInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISFeatureServiceInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class ArcGISImageServiceInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISImageServiceInfo>;
				public getAttribution(): string;
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getMinScale(): java.lang.Double;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getMaxScale(): java.lang.Double;
				public getName(): string;
				public getUrl(): string;
				public getCoreArcGISImageServiceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISImageServiceInfo;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISImageServiceInfo);
				public getFullExtent(): com.arcgismaps.geometry.Envelope;
				public getPixelType(): com.arcgismaps.arcgisservices.PixelType;
				public getRenderingRuleInfos(): java.util.List<com.arcgismaps.arcgisservices.RenderingRuleInfo>;
				public getTimeInfo(): com.arcgismaps.arcgisservices.LayerTimeInfo;
				public getCurrentVersion(): string;
			}
			export module ArcGISImageServiceInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISImageServiceInfo,com.arcgismaps.arcgisservices.ArcGISImageServiceInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISImageServiceInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISImageServiceInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class ArcGISMapServiceInfo extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceInfo>;
				public getAttribution(): string;
				public getHasSingleFusedMapCache(): boolean;
				public getDocumentInfo(): com.arcgismaps.arcgisservices.ServiceDocumentInfo;
				public getDescription(): string;
				public getMaxScale(): java.lang.Double;
				public getSupportsDynamicLayers(): boolean;
				public getMaxExportTilesCount(): number;
				public getServiceSourceType(): com.arcgismaps.arcgisservices.ServiceType;
				public getFullExtent(): com.arcgismaps.geometry.Envelope;
				public getExportTileCacheCompactV2Allowed(): boolean;
				public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public getExportTilesAllowed(): boolean;
				public getTableInfos(): java.util.List<com.arcgismaps.arcgisservices.IdInfo>;
				public getInitialExtent(): com.arcgismaps.geometry.Envelope;
				public getMapName(): string;
				public getMinScale(): java.lang.Double;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getMaxRecordCount(): number;
				public getSupportedImageFormatTypes(): java.util.List<string>;
				public getServiceDescription(): string;
				public getUnit(): com.arcgismaps.geometry.MeasurementUnit;
				public getUrl(): string;
				public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public toJson(): string;
				public getMaxImageHeight(): number;
				public getCoreArcGISMapServiceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISMapServiceInfo;
				public getCapabilities(): com.arcgismaps.arcgisservices.MapServiceCapabilities;
				public getLayerInfos(): java.util.List<com.arcgismaps.arcgisservices.IdInfo>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISMapServiceInfo);
				public getMaxImageWidth(): number;
				public getTimeInfo(): com.arcgismaps.arcgisservices.ServiceTimeInfo;
				public getCurrentVersion(): string;
				public getTileInfo(): com.arcgismaps.mapping.layers.TileInfo;
				public getTileServers(): java.util.List<string>;
			}
			export module ArcGISMapServiceInfo {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceInfo.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.arcgisservices.ArcGISMapServiceInfo;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISMapServiceInfo,com.arcgismaps.arcgisservices.ArcGISMapServiceInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISMapServiceInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class ArcGISMapServiceSublayerInfo extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerInfo>;
				public getAttribution(): string;
				public getDefinitionExpression(): string;
				public getFeatureSubtypes(): java.util.List<com.arcgismaps.data.FeatureSubtype>;
				public getHasM(): boolean;
				public getDefaultSubtypeCode(): any;
				public getEffectiveMinScale(): java.lang.Double;
				public getField(param0: string): com.arcgismaps.data.Field;
				public getServiceLayerName(): string;
				public getDescription(): string;
				public getMaxScale(): java.lang.Double;
				public getDisplayFieldName(): string;
				public getEffectiveMaxScale(): java.lang.Double;
				public getExtent(): com.arcgismaps.geometry.Envelope;
				public getFeatureTypes(): java.util.List<com.arcgismaps.data.FeatureType>;
				public getTimeInfo(): com.arcgismaps.arcgisservices.LayerTimeInfo;
				public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public getOwnershipBasedAccessControl(): com.arcgismaps.arcgisservices.OwnershipBasedAccessControlInfo;
				public getSupportsAdvancedQueries(): boolean;
				public getCanScaleSymbols(): boolean;
				public isDataVersioned(): boolean;
				public getDrawingInfo(): com.arcgismaps.arcgisservices.DrawingInfo;
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getMinScale(): java.lang.Double;
				public getRelationshipInfos(): java.util.List<com.arcgismaps.arcgisservices.RelationshipInfo>;
				public getSupportsStatistics(): boolean;
				public getCanModifyLayer(): boolean;
				public getHasLabels(): boolean;
				public getHasAttachments(): boolean;
				public getHasZ(): boolean;
				public getMaxRecordCount(): number;
				public getUrl(): string;
				public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerInfo);
				public toJson(): string;
				public getParentLayerInfo(): com.arcgismaps.arcgisservices.IdInfo;
				public getSublayerInfos(): java.util.List<com.arcgismaps.arcgisservices.IdInfo>;
				public getCapabilities(): com.arcgismaps.arcgisservices.MapServiceCapabilities;
				public getVersion(): string;
				public getSublayerType(): com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType;
				public getTypeIdFieldName(): string;
				public getSubtypeField(): string;
				public getServiceLayerId(): number;
				public getCoreArcGISMapServiceSublayerInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerInfo;
				public getDefaultVisibility(): boolean;
				public getUseStandardizedQueries(): boolean;
			}
			export module ArcGISMapServiceSublayerInfo {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerInfo.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerInfo;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerInfo,com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class ArcGISMapServiceSublayerType {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType>;
				public getCoreArcGISMapServiceSublayerType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
			}
			export module ArcGISMapServiceSublayerType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType): com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.Factory.WhenMappings>;
					}
				}
				export class FeatureLayer extends com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.FeatureLayer>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.FeatureLayer;
				}
				export class GroupLayer extends com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.GroupLayer>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.GroupLayer;
				}
				export class NetworkAnalysisLayer extends com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.NetworkAnalysisLayer>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.NetworkAnalysisLayer;
				}
				export class RasterLayer extends com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.RasterLayer>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.RasterLayer;
				}
				export class Table extends com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.Table>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.Table;
				}
				export class Unknown extends com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.Unknown>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class CacheStorageFormat {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.CacheStorageFormat>;
				public getCoreCacheStorageFormat$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCacheStorageFormat;
			}
			export module CacheStorageFormat {
				export class Compact extends com.arcgismaps.arcgisservices.CacheStorageFormat {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.CacheStorageFormat.Compact>;
					public static INSTANCE: com.arcgismaps.arcgisservices.CacheStorageFormat.Compact;
				}
				export class CompactV2 extends com.arcgismaps.arcgisservices.CacheStorageFormat {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.CacheStorageFormat.CompactV2>;
					public static INSTANCE: com.arcgismaps.arcgisservices.CacheStorageFormat.CompactV2;
				}
				export class Exploded extends com.arcgismaps.arcgisservices.CacheStorageFormat {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.CacheStorageFormat.Exploded>;
					public static INSTANCE: com.arcgismaps.arcgisservices.CacheStorageFormat.Exploded;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.CacheStorageFormat.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.CacheStorageFormat.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreCacheStorageFormat): com.arcgismaps.arcgisservices.CacheStorageFormat;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.CacheStorageFormat.Factory.WhenMappings>;
					}
				}
				export class Unknown extends com.arcgismaps.arcgisservices.CacheStorageFormat {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.CacheStorageFormat.Unknown>;
					public static INSTANCE: com.arcgismaps.arcgisservices.CacheStorageFormat.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class DrawingInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.DrawingInfo>;
				public getShowLabels(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreDrawingInfo);
				public getRenderer(): com.arcgismaps.mapping.symbology.Renderer;
				public getLabelingInfo(): java.util.List<com.arcgismaps.mapping.labeling.LabelingInfo>;
				public getCoreDrawingInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDrawingInfo;
				public getScaleSymbols(): boolean;
				public getTransparency(): number;
			}
			export module DrawingInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDrawingInfo,com.arcgismaps.arcgisservices.DrawingInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.DrawingInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.DrawingInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class EditFieldsInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.EditFieldsInfo>;
				public getCreatorField(): string;
				public getEditDateField(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreEditFieldsInfo);
				public getCreationDateField(): string;
				public getRealm(): string;
				public getEditorField(): string;
				public getCoreEditFieldsInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEditFieldsInfo;
			}
			export module EditFieldsInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreEditFieldsInfo,com.arcgismaps.arcgisservices.EditFieldsInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.EditFieldsInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.EditFieldsInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class EditorTrackingInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.EditorTrackingInfo>;
				public getOwnershipBasedAccessControlEnabled(): boolean;
				public getEditorTrackingEnabled(): boolean;
				public getAllowOthersToUpdate(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreEditorTrackingInfo);
				public getCoreEditorTrackingInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEditorTrackingInfo;
				public getAllowAnonymousToDelete(): boolean;
				public getAllowOthersToDelete(): boolean;
				public getAllowAnonymousToUpdate(): boolean;
			}
			export module EditorTrackingInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreEditorTrackingInfo,com.arcgismaps.arcgisservices.EditorTrackingInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.EditorTrackingInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.EditorTrackingInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class FeatureServiceCapabilities {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.FeatureServiceCapabilities>;
				public getSupportsQuery(): boolean;
				public getSupportsDelete(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureServiceCapabilities);
				public getSupportsEditing(): boolean;
				public getSupportsUpdate(): boolean;
				public getSupportsCreate(): boolean;
				public getSupportsSync(): boolean;
				public getCoreFeatureServiceCapabilities$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureServiceCapabilities;
			}
			export module FeatureServiceCapabilities {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureServiceCapabilities,com.arcgismaps.arcgisservices.FeatureServiceCapabilities> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.FeatureServiceCapabilities.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.FeatureServiceCapabilities.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class FeatureServiceLayerIdInfo extends com.arcgismaps.arcgisservices.IdInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.FeatureServiceLayerIdInfo>;
				public isVisibleByDefault(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureServiceLayerIdInfo);
				public getMinScale(): java.lang.Double;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public getMaxScale(): java.lang.Double;
				public getCoreFeatureServiceLayerIdInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureServiceLayerIdInfo;
				public getServiceType(): com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfoServiceType;
			}
			export module FeatureServiceLayerIdInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureServiceLayerIdInfo,com.arcgismaps.arcgisservices.FeatureServiceLayerIdInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.FeatureServiceLayerIdInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.FeatureServiceLayerIdInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class FeatureServiceSessionType {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.FeatureServiceSessionType>;
				public getCoreFeatureServiceSessionType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureServiceSessionType;
			}
			export module FeatureServiceSessionType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.FeatureServiceSessionType.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.FeatureServiceSessionType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureServiceSessionType): com.arcgismaps.arcgisservices.FeatureServiceSessionType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.FeatureServiceSessionType.Factory.WhenMappings>;
					}
				}
				export class Persistent extends com.arcgismaps.arcgisservices.FeatureServiceSessionType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.FeatureServiceSessionType.Persistent>;
					public static INSTANCE: com.arcgismaps.arcgisservices.FeatureServiceSessionType.Persistent;
				}
				export class Transient extends com.arcgismaps.arcgisservices.FeatureServiceSessionType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.FeatureServiceSessionType.Transient>;
					public static INSTANCE: com.arcgismaps.arcgisservices.FeatureServiceSessionType.Transient;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class IdInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfo>;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.arcgisservices.IdInfoType;
				public getId(): java.lang.Long;
				public getName(): string;
				public getCoreIdInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreIdInfo;
			}
			export module IdInfo {
				export class Factory extends com.arcgismaps.arcgisservices.IdInfoFactory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.IdInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class IdInfoFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreIdInfo,com.arcgismaps.arcgisservices.IdInfo> {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoFactory>;
				public convertToPublic(param0: any): any;
				public constructor(param0: any);
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreIdInfo): com.arcgismaps.arcgisservices.IdInfo;
				public constructor();
			}
			export module IdInfoFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class IdInfoImpl extends com.arcgismaps.arcgisservices.IdInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoImpl>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreIdInfo);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class IdInfoType {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoType>;
				public getCoreIdInfoType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreIdInfoType;
			}
			export module IdInfoType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoType.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.IdInfoType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreIdInfoType): com.arcgismaps.arcgisservices.IdInfoType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoType.Factory.WhenMappings>;
					}
				}
				export class FeatureServiceLayerIdInfo extends com.arcgismaps.arcgisservices.IdInfoType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoType.FeatureServiceLayerIdInfo>;
					public static INSTANCE: com.arcgismaps.arcgisservices.IdInfoType.FeatureServiceLayerIdInfo;
				}
				export class IdInfo extends com.arcgismaps.arcgisservices.IdInfoType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoType.IdInfo>;
					public static INSTANCE: com.arcgismaps.arcgisservices.IdInfoType.IdInfo;
				}
				export class MapServiceLayerIdInfo extends com.arcgismaps.arcgisservices.IdInfoType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoType.MapServiceLayerIdInfo>;
					public static INSTANCE: com.arcgismaps.arcgisservices.IdInfoType.MapServiceLayerIdInfo;
				}
				export class Unknown extends com.arcgismaps.arcgisservices.IdInfoType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.IdInfoType.Unknown>;
					public static INSTANCE: com.arcgismaps.arcgisservices.IdInfoType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class LabelingPlacement {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement>;
				public getCoreLabelingPlacement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelingPlacement;
			}
			export module LabelingPlacement {
				export class Automatic extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.Automatic>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.Automatic;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelingPlacement): com.arcgismaps.arcgisservices.LabelingPlacement;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.Factory.WhenMappings>;
					}
				}
				export class LineAboveAfter extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveAfter>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveAfter;
				}
				export class LineAboveAlong extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveAlong>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveAlong;
				}
				export class LineAboveBefore extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveBefore>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveBefore;
				}
				export class LineAboveEnd extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveEnd>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveEnd;
				}
				export class LineAboveStart extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveStart>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineAboveStart;
				}
				export class LineBelowAfter extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowAfter>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowAfter;
				}
				export class LineBelowAlong extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowAlong>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowAlong;
				}
				export class LineBelowBefore extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowBefore>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowBefore;
				}
				export class LineBelowEnd extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowEnd>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowEnd;
				}
				export class LineBelowStart extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowStart>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineBelowStart;
				}
				export class LineCenterAfter extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterAfter>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterAfter;
				}
				export class LineCenterAlong extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterAlong>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterAlong;
				}
				export class LineCenterBefore extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterBefore>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterBefore;
				}
				export class LineCenterEnd extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterEnd>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterEnd;
				}
				export class LineCenterStart extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterStart>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.LineCenterStart;
				}
				export class PointAboveCenter extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PointAboveCenter>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PointAboveCenter;
				}
				export class PointAboveLeft extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PointAboveLeft>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PointAboveLeft;
				}
				export class PointAboveRight extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PointAboveRight>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PointAboveRight;
				}
				export class PointBelowCenter extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PointBelowCenter>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PointBelowCenter;
				}
				export class PointBelowLeft extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PointBelowLeft>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PointBelowLeft;
				}
				export class PointBelowRight extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PointBelowRight>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PointBelowRight;
				}
				export class PointCenterCenter extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PointCenterCenter>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PointCenterCenter;
				}
				export class PointCenterLeft extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PointCenterLeft>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PointCenterLeft;
				}
				export class PointCenterRight extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PointCenterRight>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PointCenterRight;
				}
				export class PolygonAlwaysHorizontal extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.PolygonAlwaysHorizontal>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.PolygonAlwaysHorizontal;
				}
				export class Unknown extends com.arcgismaps.arcgisservices.LabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LabelingPlacement.Unknown>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LabelingPlacement.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class LayerTimeInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.LayerTimeInfo>;
				public getTimeReference(): com.arcgismaps.arcgisservices.TimeReference;
				public getInterval(): com.arcgismaps.mapping.TimeValue;
				public getTrackIdField(): string;
				public getTimeExtent(): com.arcgismaps.mapping.TimeExtent;
				public getHasLiveData(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLayerTimeInfo);
				public getCoreLayerTimeInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLayerTimeInfo;
				public getStartTimeField(): string;
				public getEndTimeField(): string;
			}
			export module LayerTimeInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLayerTimeInfo,com.arcgismaps.arcgisservices.LayerTimeInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LayerTimeInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LayerTimeInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class LevelOfDetail {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.LevelOfDetail>;
				public constructor(param0: number, param1: number, param2: number);
				public getResolution(): number;
				public getLevel(): number;
				public getCoreLevelOfDetail$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLevelOfDetail;
				public getScale(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLevelOfDetail);
			}
			export module LevelOfDetail {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLevelOfDetail,com.arcgismaps.arcgisservices.LevelOfDetail> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.LevelOfDetail.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.LevelOfDetail.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class MapServiceCapabilities {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.MapServiceCapabilities>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMapServiceCapabilities);
				public getSupportsQuery(): boolean;
				public getSupportsData(): boolean;
				public getSupportsTilemap(): boolean;
				public getSupportsMap(): boolean;
				public getSupportsTilesOnly(): boolean;
				public getCoreMapServiceCapabilities$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMapServiceCapabilities;
			}
			export module MapServiceCapabilities {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMapServiceCapabilities,com.arcgismaps.arcgisservices.MapServiceCapabilities> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.MapServiceCapabilities.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.MapServiceCapabilities.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class MapServiceLayerIdInfo extends com.arcgismaps.arcgisservices.IdInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.MapServiceLayerIdInfo>;
				public isVisibleByDefault(): boolean;
				public getServiceType(): com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMapServiceLayerIdInfo);
				public getMinScale(): java.lang.Double;
				public getParentLayerId(): java.lang.Long;
				public getCoreMapServiceLayerIdInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMapServiceLayerIdInfo;
				public getSublayerIds(): java.util.List<java.lang.Long>;
				public getMaxScale(): java.lang.Double;
			}
			export module MapServiceLayerIdInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMapServiceLayerIdInfo,com.arcgismaps.arcgisservices.MapServiceLayerIdInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.MapServiceLayerIdInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.MapServiceLayerIdInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class OwnershipBasedAccessControlInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.OwnershipBasedAccessControlInfo>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreOwnershipBasedAccessControlInfo);
				public getAllowOthersToUpdate(): boolean;
				public getAllowOthersToQuery(): boolean;
				public getCoreOwnershipBasedAccessControlInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOwnershipBasedAccessControlInfo;
				public getAllowAnonymousToDelete(): boolean;
				public getAllowOthersToDelete(): boolean;
				public getAllowAnonymousToUpdate(): boolean;
			}
			export module OwnershipBasedAccessControlInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOwnershipBasedAccessControlInfo,com.arcgismaps.arcgisservices.OwnershipBasedAccessControlInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.OwnershipBasedAccessControlInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.OwnershipBasedAccessControlInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class PixelType {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType>;
				public getCorePixelType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePixelType;
			}
			export module PixelType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CorePixelType): com.arcgismaps.arcgisservices.PixelType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.Factory.WhenMappings>;
					}
				}
				export class Float32 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.Float32>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.Float32;
				}
				export class Float64 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.Float64>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.Float64;
				}
				export class Int16 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.Int16>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.Int16;
				}
				export class Int32 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.Int32>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.Int32;
				}
				export class Int8 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.Int8>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.Int8;
				}
				export class UInt1 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.UInt1>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.UInt1;
				}
				export class UInt16 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.UInt16>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.UInt16;
				}
				export class UInt2 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.UInt2>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.UInt2;
				}
				export class UInt32 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.UInt32>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.UInt32;
				}
				export class UInt4 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.UInt4>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.UInt4;
				}
				export class UInt8 extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.UInt8>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.UInt8;
				}
				export class Unknown extends com.arcgismaps.arcgisservices.PixelType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.PixelType.Unknown>;
					public static INSTANCE: com.arcgismaps.arcgisservices.PixelType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class RelationshipCardinality {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipCardinality>;
				public getCoreRelationshipCardinality$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRelationshipCardinality;
			}
			export module RelationshipCardinality {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipCardinality.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.RelationshipCardinality.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRelationshipCardinality): com.arcgismaps.arcgisservices.RelationshipCardinality;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipCardinality.Factory.WhenMappings>;
					}
				}
				export class ManyToMany extends com.arcgismaps.arcgisservices.RelationshipCardinality {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipCardinality.ManyToMany>;
					public static INSTANCE: com.arcgismaps.arcgisservices.RelationshipCardinality.ManyToMany;
				}
				export class OneToMany extends com.arcgismaps.arcgisservices.RelationshipCardinality {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipCardinality.OneToMany>;
					public static INSTANCE: com.arcgismaps.arcgisservices.RelationshipCardinality.OneToMany;
				}
				export class OneToOne extends com.arcgismaps.arcgisservices.RelationshipCardinality {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipCardinality.OneToOne>;
					public static INSTANCE: com.arcgismaps.arcgisservices.RelationshipCardinality.OneToOne;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class RelationshipInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipInfo>;
				public getCardinality(): com.arcgismaps.arcgisservices.RelationshipCardinality;
				public getKeyFieldInRelationshipTable(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRelationshipInfo);
				public getRole(): com.arcgismaps.arcgisservices.RelationshipRole;
				public getRelatedTableId(): number;
				public getId(): number;
				public getCoreRelationshipInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRelationshipInfo;
				public getName(): string;
				public getKeyField(): string;
				public getRelationshipTableId(): java.lang.Long;
				public isComposite(): boolean;
			}
			export module RelationshipInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRelationshipInfo,com.arcgismaps.arcgisservices.RelationshipInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.RelationshipInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class RelationshipRole {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipRole>;
				public getCoreRelationshipRole$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRelationshipRole;
			}
			export module RelationshipRole {
				export class Destination extends com.arcgismaps.arcgisservices.RelationshipRole {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipRole.Destination>;
					public static INSTANCE: com.arcgismaps.arcgisservices.RelationshipRole.Destination;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipRole.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.RelationshipRole.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRelationshipRole): com.arcgismaps.arcgisservices.RelationshipRole;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipRole.Factory.WhenMappings>;
					}
				}
				export class Origin extends com.arcgismaps.arcgisservices.RelationshipRole {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.RelationshipRole.Origin>;
					public static INSTANCE: com.arcgismaps.arcgisservices.RelationshipRole.Origin;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class RenderingRuleInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.RenderingRuleInfo>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRenderingRuleInfo);
				public getHelp(): string;
				public getDescription(): string;
				public getName(): string;
				public constructor(param0: string);
				public getCoreRenderingRuleInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRenderingRuleInfo;
			}
			export module RenderingRuleInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRenderingRuleInfo,com.arcgismaps.arcgisservices.RenderingRuleInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.RenderingRuleInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.RenderingRuleInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class ServiceDocumentInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceDocumentInfo>;
				public getCategory(): string;
				public getAntialiasingMode(): com.arcgismaps.arcgisservices.AntialiasingMode;
				public getTextAntialiasingMode(): com.arcgismaps.arcgisservices.TextAntialiasingMode;
				public getComments(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreServiceDocumentInfo);
				public getAuthor(): string;
				public getKeywords(): java.util.List<string>;
				public getSubject(): string;
				public getTitle(): string;
				public getCoreServiceDocumentInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceDocumentInfo;
			}
			export module ServiceDocumentInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceDocumentInfo,com.arcgismaps.arcgisservices.ServiceDocumentInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceDocumentInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ServiceDocumentInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class ServiceTimeInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceTimeInfo>;
				public getCoreServiceTimeInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceTimeInfo;
				public getTimeWindow(): com.arcgismaps.mapping.TimeValue;
				public getTimeReference(): com.arcgismaps.arcgisservices.TimeReference;
				public getDefaultInterval(): com.arcgismaps.mapping.TimeValue;
				public constructor(param0: com.arcgismaps.internal.jni.CoreServiceTimeInfo);
				public getTimeExtent(): com.arcgismaps.mapping.TimeExtent;
				public hashCode(): number;
				public getHasLiveData(): boolean;
				public equals(param0: any): boolean;
				public getTimeRelation(): com.arcgismaps.arcgisservices.TimeRelation;
			}
			export module ServiceTimeInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceTimeInfo,com.arcgismaps.arcgisservices.ServiceTimeInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceTimeInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ServiceTimeInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class ServiceType {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceType>;
				public getCoreServiceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceType;
			}
			export module ServiceType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceType.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ServiceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreServiceType): com.arcgismaps.arcgisservices.ServiceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceType.Factory.WhenMappings>;
					}
				}
				export class FeatureService extends com.arcgismaps.arcgisservices.ServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceType.FeatureService>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ServiceType.FeatureService;
				}
				export class ImageService extends com.arcgismaps.arcgisservices.ServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceType.ImageService>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ServiceType.ImageService;
				}
				export class MapService extends com.arcgismaps.arcgisservices.ServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceType.MapService>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ServiceType.MapService;
				}
				export class Unknown extends com.arcgismaps.arcgisservices.ServiceType {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceType.Unknown>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ServiceType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class ServiceVersionInfo {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceVersionInfo>;
				public getCommonAncestorDate(): java.time.Instant;
				public getCoreServiceVersionInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceVersionInfo;
				public getModifiedDate(): java.time.Instant;
				public "getVersionId-sLYn7dI"(): string;
				public getReconcileDate(): java.time.Instant;
				public getCreationDate(): java.time.Instant;
				public constructor(param0: com.arcgismaps.internal.jni.CoreServiceVersionInfo);
				public getEvaluationDate(): java.time.Instant;
				public getDescription(): string;
				public getName(): string;
				public getAccess(): com.arcgismaps.arcgisservices.VersionAccess;
				public isOwner(): boolean;
			}
			export module ServiceVersionInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceVersionInfo,com.arcgismaps.arcgisservices.ServiceVersionInfo> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceVersionInfo.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ServiceVersionInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class ServiceVersionParameters {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceVersionParameters>;
				public setName(param0: string): void;
				public setAccess(param0: com.arcgismaps.arcgisservices.VersionAccess): void;
				public setDescription(param0: string): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreServiceVersionParameters);
				public getDescription(): string;
				public getName(): string;
				public getAccess(): com.arcgismaps.arcgisservices.VersionAccess;
				public getCoreServiceVersionParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceVersionParameters;
				public constructor();
			}
			export module ServiceVersionParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceVersionParameters,com.arcgismaps.arcgisservices.ServiceVersionParameters> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.ServiceVersionParameters.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.ServiceVersionParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class SyncCapabilities {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.SyncCapabilities>;
				public getSupportsUtilityNetworkSystem(): boolean;
				public getSupportsRollbackOnFailure(): boolean;
				public getSupportsAsync(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreSyncCapabilities);
				public getCoreSyncCapabilities$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSyncCapabilities;
				public getSupportsSyncModelGeodatabase(): boolean;
				public getSupportsAnnotations(): boolean;
				public getSupportsContingentValues(): boolean;
				public getSupportsDimensions(): boolean;
				public getSupportsSyncModelLayer(): boolean;
				public getSupportsAttachmentsSyncDirection(): boolean;
				public getSupportsRegisteringExistingData(): boolean;
				public getSupportsUtilityNetworkTopology(): boolean;
				public getSupportsSyncModelNone(): boolean;
				public getSupportsSyncDirectionControl(): boolean;
			}
			export module SyncCapabilities {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSyncCapabilities,com.arcgismaps.arcgisservices.SyncCapabilities> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.SyncCapabilities.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.SyncCapabilities.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class TextAntialiasingMode {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.TextAntialiasingMode>;
				public getCoreTextAntialiasingMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTextAntialiasingMode;
			}
			export module TextAntialiasingMode {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TextAntialiasingMode.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TextAntialiasingMode.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreTextAntialiasingMode): com.arcgismaps.arcgisservices.TextAntialiasingMode;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.TextAntialiasingMode.Factory.WhenMappings>;
					}
				}
				export class Force extends com.arcgismaps.arcgisservices.TextAntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TextAntialiasingMode.Force>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TextAntialiasingMode.Force;
				}
				export class None extends com.arcgismaps.arcgisservices.TextAntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TextAntialiasingMode.None>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TextAntialiasingMode.None;
				}
				export class Normal extends com.arcgismaps.arcgisservices.TextAntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TextAntialiasingMode.Normal>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TextAntialiasingMode.Normal;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class TileKey {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.TileKey>;
				public constructor(param0: number, param1: number, param2: number);
				public getLevel(): number;
				public getRow(): number;
				public getColumn(): number;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getCoreTileKey$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTileKey;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTileKey);
			}
			export module TileKey {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTileKey,com.arcgismaps.arcgisservices.TileKey> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TileKey.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TileKey.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class TimeAware {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeAware>;
				/**
				 * Constructs a new instance of the com.arcgismaps.arcgisservices.TimeAware interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					isTimeFilteringEnabled(): boolean;
					setTimeFilteringEnabled(param0: boolean): void;
					getSupportsTimeFiltering(): boolean;
					getTimeInterval(): com.arcgismaps.mapping.TimeValue;
					getTimeOffset(): com.arcgismaps.mapping.TimeValue;
					setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
					getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
				});
				public constructor();
				public getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
				public setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
				public isTimeFilteringEnabled(): boolean;
				public setTimeFilteringEnabled(param0: boolean): void;
				public getTimeInterval(): com.arcgismaps.mapping.TimeValue;
				public getTimeOffset(): com.arcgismaps.mapping.TimeValue;
				public getSupportsTimeFiltering(): boolean;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class TimeAwareImpl extends com.arcgismaps.arcgisservices.TimeAware {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeAwareImpl>;
				public getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
				public setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
				public getCoreTimeAware$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTimeAware;
				public isTimeFilteringEnabled(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTimeAware);
				public setTimeFilteringEnabled(param0: boolean): void;
				public getTimeInterval(): com.arcgismaps.mapping.TimeValue;
				public getTimeOffset(): com.arcgismaps.mapping.TimeValue;
				public getSupportsTimeFiltering(): boolean;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export class TimeReference {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeReference>;
				public getRespectsDaylightSavings(): boolean;
				public getCoreTimeReference$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTimeReference;
				public getTimeZone(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTimeReference);
			}
			export module TimeReference {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTimeReference,com.arcgismaps.arcgisservices.TimeReference> {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeReference.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeReference.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class TimeRelation {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeRelation>;
				public getCoreTimeRelation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTimeRelation;
			}
			export module TimeRelation {
				export class AfterStartOverlapsEnd extends com.arcgismaps.arcgisservices.TimeRelation {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeRelation.AfterStartOverlapsEnd>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeRelation.AfterStartOverlapsEnd;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeRelation.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeRelation.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreTimeRelation): com.arcgismaps.arcgisservices.TimeRelation;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeRelation.Factory.WhenMappings>;
					}
				}
				export class Overlaps extends com.arcgismaps.arcgisservices.TimeRelation {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeRelation.Overlaps>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeRelation.Overlaps;
				}
				export class OverlapsStartWithinEnd extends com.arcgismaps.arcgisservices.TimeRelation {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeRelation.OverlapsStartWithinEnd>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeRelation.OverlapsStartWithinEnd;
				}
				export class Unknown extends com.arcgismaps.arcgisservices.TimeRelation {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeRelation.Unknown>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeRelation.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class TimeUnit {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit>;
				public getCoreTimeUnit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTimeUnit;
			}
			export module TimeUnit {
				export class Centuries extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Centuries>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Centuries;
				}
				export class Days extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Days>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Days;
				}
				export class Decades extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Decades>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Decades;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreTimeUnit): com.arcgismaps.arcgisservices.TimeUnit;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Factory.WhenMappings>;
					}
				}
				export class Hours extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Hours>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Hours;
				}
				export class Milliseconds extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Milliseconds>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Milliseconds;
				}
				export class Minutes extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Minutes>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Minutes;
				}
				export class Months extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Months>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Months;
				}
				export class Seconds extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Seconds>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Seconds;
				}
				export class Unknown extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Unknown>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Unknown;
				}
				export class Weeks extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Weeks>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Weeks;
				}
				export class Years extends com.arcgismaps.arcgisservices.TimeUnit {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.TimeUnit.Years>;
					public static INSTANCE: com.arcgismaps.arcgisservices.TimeUnit.Years;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module arcgisservices {
			export abstract class VersionAccess {
				public static class: java.lang.Class<com.arcgismaps.arcgisservices.VersionAccess>;
				public getCoreVersionAccess$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVersionAccess;
			}
			export module VersionAccess {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.VersionAccess.Factory>;
					public static INSTANCE: com.arcgismaps.arcgisservices.VersionAccess.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreVersionAccess): com.arcgismaps.arcgisservices.VersionAccess;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.arcgisservices.VersionAccess.Factory.WhenMappings>;
					}
				}
				export class Private extends com.arcgismaps.arcgisservices.VersionAccess {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.VersionAccess.Private>;
					public static INSTANCE: com.arcgismaps.arcgisservices.VersionAccess.Private;
				}
				export class Protected extends com.arcgismaps.arcgisservices.VersionAccess {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.VersionAccess.Protected>;
					public static INSTANCE: com.arcgismaps.arcgisservices.VersionAccess.Protected;
				}
				export class Public extends com.arcgismaps.arcgisservices.VersionAccess {
					public static class: java.lang.Class<com.arcgismaps.arcgisservices.VersionAccess.Public>;
					public static INSTANCE: com.arcgismaps.arcgisservices.VersionAccess.Public;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ArcGISFeature extends com.arcgismaps.data.Feature implements com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.data.ArcGISFeature>;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public "updateAttachment-yxL6bBk"(param0: com.arcgismaps.data.Attachment, param1: string, param2: string, param3: androidNative.Array<number>, param4: any): any;
				public "fetchAttachments-IoAF18A"(param0: any): any;
				public getFeatureSubtype(): com.arcgismaps.data.FeatureSubtype;
				public "unrelateFeature-IoAF18A"(param0: com.arcgismaps.data.ArcGISFeature): any;
				public "load-IoAF18A"(param0: any): any;
				public "addAttachment-BWLJW6A"(param0: string, param1: string, param2: androidNative.Array<number>, param3: any): any;
				public "retryLoad-IoAF18A"(param0: any): any;
				public "deleteAttachments-gIAlu-s"(param0: java.lang.Iterable<com.arcgismaps.data.Attachment>, param1: any): any;
				public getCanEditAttachments(): boolean;
				public getCoreArcGISFeature$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISFeature;
				public "deleteAttachment-gIAlu-s"(param0: com.arcgismaps.data.Attachment, param1: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISFeature, param1: boolean);
				public getCanUpdateGeometry(): boolean;
				public "relateFeature-gIAlu-s"(param0: com.arcgismaps.data.ArcGISFeature, param1: com.arcgismaps.arcgisservices.RelationshipInfo): any;
				public getAttributes(): java.util.Map<string,any>;
			}
			export module ArcGISFeature {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreArcGISFeature,com.arcgismaps.data.ArcGISFeature> {
					public static class: java.lang.Class<com.arcgismaps.data.ArcGISFeature.Factory>;
					public static INSTANCE: com.arcgismaps.data.ArcGISFeature.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class ArcGISFeatureTable extends com.arcgismaps.data.FeatureTable {
				public static class: java.lang.Class<com.arcgismaps.data.ArcGISFeatureTable>;
				public getCoreArcGISFeatureTable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
				public getFeatureSubtypes(): java.util.List<com.arcgismaps.data.FeatureSubtype>;
				public cancelLoad(): void;
				public getDefaultSubtypeCode(): any;
				public createFeature(param0: com.arcgismaps.data.FeatureType, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.data.ArcGISFeature;
				public getFeatureTypes(): java.util.List<com.arcgismaps.data.FeatureType>;
				public createFeature(param0: com.arcgismaps.data.FeatureSubtype, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.data.ArcGISFeature;
				public "queryRelatedFeatureCount-0E7RQCE"(param0: com.arcgismaps.data.ArcGISFeature, param1: com.arcgismaps.data.RelatedQueryParameters, param2: any): any;
				public getUsername(): string;
				public createFeature(param0: com.arcgismaps.data.FeatureTemplate, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.data.ArcGISFeature;
				public getUseAdvancedSymbology(): boolean;
				public tryGetRelatedTables(param0: com.arcgismaps.arcgisservices.RelationshipInfo): java.util.List<com.arcgismaps.data.ArcGISFeatureTable>;
				public getFeatureTemplate(param0: string): com.arcgismaps.data.FeatureTemplate;
				public "getDeletedFeatures-IoAF18A"(param0: any): any;
				public getUnknownJson(): java.util.Map<string,any>;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public "getUpdatedFeatures-IoAF18A"(param0: any): any;
				public getFeatureType(param0: string): com.arcgismaps.data.FeatureType;
				public getFeatureTemplates(): java.util.List<com.arcgismaps.data.FeatureTemplate>;
				public getHasAttachments(): boolean;
				public validateContingencyConstraints(param0: com.arcgismaps.data.ArcGISFeature): java.util.List<com.arcgismaps.data.ContingencyConstraintViolation>;
				public getContingentValuesOrNull(param0: com.arcgismaps.data.ArcGISFeature, param1: string): com.arcgismaps.data.ContingentValuesResult;
				public getUnsupportedJson(): java.util.Map<string,any>;
				public "load-IoAF18A"(param0: any): any;
				public isPopupEnabled(): boolean;
				public getFeatureFormDefinition(): com.arcgismaps.mapping.featureforms.FeatureFormDefinition;
				public getSubtypeField(): string;
				public "getLocalEdits-IoAF18A"(param0: any): any;
				public getServiceLayerId(): number;
				public getEditableAttributeFields(): java.util.List<com.arcgismaps.data.Field>;
				public createFeature(): com.arcgismaps.data.Feature;
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public getObjectIdField(): string;
				public createFeature(param0: java.util.Map<string,any>, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.data.Feature;
				public getLayerInfo(): com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfo;
				public getTypeIdField(): string;
				public "getDeletedFeaturesCount-IoAF18A"(param0: any): any;
				public "getUpdatedFeaturesCount-IoAF18A"(param0: any): any;
				public "getAddedFeaturesCount-IoAF18A"(param0: any): any;
				public "validateRelationshipConstraints-gIAlu-s"(param0: com.arcgismaps.data.ArcGISFeature, param1: any): any;
				public getRelatedTables(): java.util.List<com.arcgismaps.data.ArcGISFeatureTable>;
				public hasLocalEdits(): boolean;
				public "getLocalEditsCount-IoAF18A"(param0: any): any;
				public setUseAdvancedSymbology(param0: boolean): void;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getContingentValuesDefinition(): com.arcgismaps.data.ContingentValuesDefinition;
				public getGlobalIdField(): string;
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public "getAddedFeatures-IoAF18A"(param0: any): any;
				public "queryRelatedFeatures-0E7RQCE"(param0: com.arcgismaps.data.ArcGISFeature, param1: com.arcgismaps.data.RelatedQueryParameters, param2: any): any;
				public setPopupEnabled(param0: boolean): void;
			}
			export module ArcGISFeatureTable {
				export class Factory extends com.arcgismaps.data.ArcGISFeatureTableFactory {
					public static class: java.lang.Class<com.arcgismaps.data.ArcGISFeatureTable.Factory>;
					public static INSTANCE: com.arcgismaps.data.ArcGISFeatureTable.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ArcGISFeatureTableFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreArcGISFeatureTable,com.arcgismaps.data.ArcGISFeatureTable> {
				public static class: java.lang.Class<com.arcgismaps.data.ArcGISFeatureTableFactory>;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable): com.arcgismaps.data.ArcGISFeatureTable;
				public convertToPublic(param0: any): any;
				public constructor();
			}
			export module ArcGISFeatureTableFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.data.ArcGISFeatureTableFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class Attachment {
				public static class: java.lang.Class<com.arcgismaps.data.Attachment>;
				public getCoreAttachment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAttachment;
				public getContentType(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreAttachment);
				public getSize(): number;
				public getId(): number;
				public "fetchData-IoAF18A"(param0: any): any;
				public getHasFetchedData(): boolean;
				public getName(): string;
			}
			export module Attachment {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreAttachment,com.arcgismaps.data.Attachment> {
					public static class: java.lang.Class<com.arcgismaps.data.Attachment.Factory>;
					public static INSTANCE: com.arcgismaps.data.Attachment.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class CodedValue {
				public static class: java.lang.Class<com.arcgismaps.data.CodedValue>;
				public getCoreCodedValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCodedValue;
				public getCode(): any;
				public getName(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreCodedValue);
			}
			export module CodedValue {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreCodedValue,com.arcgismaps.data.CodedValue> {
					public static class: java.lang.Class<com.arcgismaps.data.CodedValue.Factory>;
					public static INSTANCE: com.arcgismaps.data.CodedValue.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class CodedValueDescription {
				public static class: java.lang.Class<com.arcgismaps.data.CodedValueDescription>;
				public setName(param0: string): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreCodedValueDescription);
				public getName(): string;
				public constructor(param0: string, param1: any);
				public getCoreCodedValueDescription$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCodedValueDescription;
				public getValue(): any;
				public setValue(param0: any): void;
			}
			export module CodedValueDescription {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreCodedValueDescription,com.arcgismaps.data.CodedValueDescription> {
					public static class: java.lang.Class<com.arcgismaps.data.CodedValueDescription.Factory>;
					public static INSTANCE: com.arcgismaps.data.CodedValueDescription.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class CodedValueDomain extends com.arcgismaps.data.Domain {
				public static class: java.lang.Class<com.arcgismaps.data.CodedValueDomain>;
				public getCoreCodedValueDomain$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCodedValueDomain;
				public toJson(): string;
				public getCodedValues(): java.util.List<com.arcgismaps.data.CodedValue>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreCodedValueDomain);
			}
			export module CodedValueDomain {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreCodedValueDomain,com.arcgismaps.data.CodedValueDomain> {
					public static class: java.lang.Class<com.arcgismaps.data.CodedValueDomain.Factory>;
					public static INSTANCE: com.arcgismaps.data.CodedValueDomain.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class CodedValueDomainDescription extends com.arcgismaps.data.DomainDescription {
				public static class: java.lang.Class<com.arcgismaps.data.CodedValueDomainDescription>;
				public constructor(param0: string, param1: com.arcgismaps.data.FieldType, param2: java.lang.Iterable<com.arcgismaps.data.CodedValueDescription>);
				public getValues(): java.util.List<com.arcgismaps.data.CodedValueDescription>;
				public getCoreCodedValueDomainDescription$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCodedValueDomainDescription;
				public constructor(param0: com.arcgismaps.internal.jni.CoreCodedValueDomainDescription);
			}
			export module CodedValueDomainDescription {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreCodedValueDomainDescription,com.arcgismaps.data.CodedValueDomainDescription> {
					public static class: java.lang.Class<com.arcgismaps.data.CodedValueDomainDescription.Factory>;
					public static INSTANCE: com.arcgismaps.data.CodedValueDomainDescription.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class Contingency {
				public static class: java.lang.Class<com.arcgismaps.data.Contingency>;
				public isRetired(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreContingency);
				public getId(): number;
				public getCoreContingency$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingency;
				public getValues(): java.util.Map<string,com.arcgismaps.data.ContingentValue>;
				public getSubtype(): com.arcgismaps.data.FeatureSubtype;
			}
			export module Contingency {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreContingency,com.arcgismaps.data.Contingency> {
					public static class: java.lang.Class<com.arcgismaps.data.Contingency.Factory>;
					public static INSTANCE: com.arcgismaps.data.Contingency.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ContingencyConstraintViolation {
				public static class: java.lang.Class<com.arcgismaps.data.ContingencyConstraintViolation>;
				public getFieldGroup(): com.arcgismaps.data.FieldGroup;
				public getType(): com.arcgismaps.data.ContingencyConstraintViolationType;
				public getCoreContingencyConstraintViolation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingencyConstraintViolation;
				public constructor(param0: com.arcgismaps.internal.jni.CoreContingencyConstraintViolation);
			}
			export module ContingencyConstraintViolation {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreContingencyConstraintViolation,com.arcgismaps.data.ContingencyConstraintViolation> {
					public static class: java.lang.Class<com.arcgismaps.data.ContingencyConstraintViolation.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingencyConstraintViolation.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class ContingencyConstraintViolationType {
				public static class: java.lang.Class<com.arcgismaps.data.ContingencyConstraintViolationType>;
				public getCoreContingencyConstraintViolationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingencyConstraintViolationType;
			}
			export module ContingencyConstraintViolationType {
				export class Error extends com.arcgismaps.data.ContingencyConstraintViolationType {
					public static class: java.lang.Class<com.arcgismaps.data.ContingencyConstraintViolationType.Error>;
					public static INSTANCE: com.arcgismaps.data.ContingencyConstraintViolationType.Error;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.ContingencyConstraintViolationType.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingencyConstraintViolationType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreContingencyConstraintViolationType): com.arcgismaps.data.ContingencyConstraintViolationType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.ContingencyConstraintViolationType.Factory.WhenMappings>;
					}
				}
				export class Warning extends com.arcgismaps.data.ContingencyConstraintViolationType {
					public static class: java.lang.Class<com.arcgismaps.data.ContingencyConstraintViolationType.Warning>;
					public static INSTANCE: com.arcgismaps.data.ContingencyConstraintViolationType.Warning;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ContingentAnyValue extends com.arcgismaps.data.ContingentValue {
				public static class: java.lang.Class<com.arcgismaps.data.ContingentAnyValue>;
				public getCoreContingentAnyValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingentAnyValue;
				public constructor(param0: com.arcgismaps.internal.jni.CoreContingentAnyValue, param1: boolean);
			}
			export module ContingentAnyValue {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreContingentAnyValue,com.arcgismaps.data.ContingentAnyValue> {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentAnyValue.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingentAnyValue.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ContingentCodedValue extends com.arcgismaps.data.ContingentValue {
				public static class: java.lang.Class<com.arcgismaps.data.ContingentCodedValue>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreContingentCodedValue, param1: boolean);
				public getCoreContingentCodedValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingentCodedValue;
				public getCodedValue(): com.arcgismaps.data.CodedValue;
			}
			export module ContingentCodedValue {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreContingentCodedValue,com.arcgismaps.data.ContingentCodedValue> {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentCodedValue.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingentCodedValue.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ContingentNullValue extends com.arcgismaps.data.ContingentValue {
				public static class: java.lang.Class<com.arcgismaps.data.ContingentNullValue>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreContingentNullValue, param1: boolean);
				public getCoreContingentNullValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingentNullValue;
			}
			export module ContingentNullValue {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreContingentNullValue,com.arcgismaps.data.ContingentNullValue> {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentNullValue.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingentNullValue.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ContingentRangeValue extends com.arcgismaps.data.ContingentValue {
				public static class: java.lang.Class<com.arcgismaps.data.ContingentRangeValue>;
				public getCoreContingentRangeValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingentRangeValue;
				public getMaxValue(): any;
				public getMinValue(): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreContingentRangeValue, param1: boolean);
			}
			export module ContingentRangeValue {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreContingentRangeValue,com.arcgismaps.data.ContingentRangeValue> {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentRangeValue.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingentRangeValue.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class ContingentValue {
				public static class: java.lang.Class<com.arcgismaps.data.ContingentValue>;
				public getCoreContingentValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingentValue;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.data.ContingentValueType;
			}
			export module ContingentValue {
				export class Factory extends com.arcgismaps.data.ContingentValueFactory {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentValue.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingentValue.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ContingentValueFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreContingentValue,com.arcgismaps.data.ContingentValue> {
				public static class: java.lang.Class<com.arcgismaps.data.ContingentValueFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreContingentValue): com.arcgismaps.data.ContingentValue;
				public constructor();
			}
			export module ContingentValueFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentValueFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class ContingentValueType {
				public static class: java.lang.Class<com.arcgismaps.data.ContingentValueType>;
				public getCoreContingentValueType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingentValueType;
			}
			export module ContingentValueType {
				export class ContingentAnyValue extends com.arcgismaps.data.ContingentValueType {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentValueType.ContingentAnyValue>;
					public static INSTANCE: com.arcgismaps.data.ContingentValueType.ContingentAnyValue;
				}
				export class ContingentCodedValue extends com.arcgismaps.data.ContingentValueType {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentValueType.ContingentCodedValue>;
					public static INSTANCE: com.arcgismaps.data.ContingentValueType.ContingentCodedValue;
				}
				export class ContingentNullValue extends com.arcgismaps.data.ContingentValueType {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentValueType.ContingentNullValue>;
					public static INSTANCE: com.arcgismaps.data.ContingentValueType.ContingentNullValue;
				}
				export class ContingentRangeValue extends com.arcgismaps.data.ContingentValueType {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentValueType.ContingentRangeValue>;
					public static INSTANCE: com.arcgismaps.data.ContingentValueType.ContingentRangeValue;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentValueType.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingentValueType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreContingentValueType): com.arcgismaps.data.ContingentValueType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.ContingentValueType.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ContingentValuesDefinition extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.data.ContingentValuesDefinition>;
				public getCoreContingentValuesDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingentValuesDefinition;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getFieldGroups(): java.util.List<com.arcgismaps.data.FieldGroup>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreContingentValuesDefinition);
				public "load-IoAF18A"(param0: any): any;
			}
			export module ContingentValuesDefinition {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreContingentValuesDefinition,com.arcgismaps.data.ContingentValuesDefinition> {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentValuesDefinition.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingentValuesDefinition.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ContingentValuesResult {
				public static class: java.lang.Class<com.arcgismaps.data.ContingentValuesResult>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreContingentValuesResult);
				public getCoreContingentValuesResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreContingentValuesResult;
				public getByFieldGroup(): java.util.Map<string,java.util.List<com.arcgismaps.data.ContingentValue>>;
				public getAllGroups(): java.util.List<com.arcgismaps.data.ContingentValue>;
			}
			export module ContingentValuesResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreContingentValuesResult,com.arcgismaps.data.ContingentValuesResult> {
					public static class: java.lang.Class<com.arcgismaps.data.ContingentValuesResult.Factory>;
					public static INSTANCE: com.arcgismaps.data.ContingentValuesResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class Domain extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.data.Domain>;
				public getFieldType(): com.arcgismaps.data.FieldType;
				public hashCode(): number;
				public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public equals(param0: any): boolean;
				public getName(): string;
				public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public getCoreDomain$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDomain;
				public toJson(): string;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.data.DomainType;
			}
			export module Domain {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.data.Domain.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.data.Domain;
				}
				export class Factory extends com.arcgismaps.data.DomainFactory {
					public static class: java.lang.Class<com.arcgismaps.data.Domain.Factory>;
					public static INSTANCE: com.arcgismaps.data.Domain.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class DomainDescription {
				public static class: java.lang.Class<com.arcgismaps.data.DomainDescription>;
				public setName(param0: string): void;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.data.DomainDescriptionType;
				public getFieldType(): com.arcgismaps.data.FieldType;
				public setFieldType(param0: com.arcgismaps.data.FieldType): void;
				public getName(): string;
				public getCoreDomainDescription$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDomainDescription;
			}
			export module DomainDescription {
				export class Factory extends com.arcgismaps.data.DomainDescriptionFactory {
					public static class: java.lang.Class<com.arcgismaps.data.DomainDescription.Factory>;
					public static INSTANCE: com.arcgismaps.data.DomainDescription.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class DomainDescriptionFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreDomainDescription,com.arcgismaps.data.DomainDescription> {
				public static class: java.lang.Class<com.arcgismaps.data.DomainDescriptionFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDomainDescription): com.arcgismaps.data.DomainDescription;
				public constructor();
			}
			export module DomainDescriptionFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.data.DomainDescriptionFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class DomainDescriptionType {
				public static class: java.lang.Class<com.arcgismaps.data.DomainDescriptionType>;
				public getCoreDomainDescriptionType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDomainDescriptionType;
			}
			export module DomainDescriptionType {
				export class CodedValueDomainDescription extends com.arcgismaps.data.DomainDescriptionType {
					public static class: java.lang.Class<com.arcgismaps.data.DomainDescriptionType.CodedValueDomainDescription>;
					public static INSTANCE: com.arcgismaps.data.DomainDescriptionType.CodedValueDomainDescription;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.DomainDescriptionType.Factory>;
					public static INSTANCE: com.arcgismaps.data.DomainDescriptionType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDomainDescriptionType): com.arcgismaps.data.DomainDescriptionType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.DomainDescriptionType.Factory.WhenMappings>;
					}
				}
				export class RangeDomainDescription extends com.arcgismaps.data.DomainDescriptionType {
					public static class: java.lang.Class<com.arcgismaps.data.DomainDescriptionType.RangeDomainDescription>;
					public static INSTANCE: com.arcgismaps.data.DomainDescriptionType.RangeDomainDescription;
				}
				export class Unknown extends com.arcgismaps.data.DomainDescriptionType {
					public static class: java.lang.Class<com.arcgismaps.data.DomainDescriptionType.Unknown>;
					public static INSTANCE: com.arcgismaps.data.DomainDescriptionType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class DomainFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreDomain,com.arcgismaps.data.Domain> {
				public static class: java.lang.Class<com.arcgismaps.data.DomainFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDomain): com.arcgismaps.data.Domain;
				public constructor();
			}
			export module DomainFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.data.DomainFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class DomainType {
				public static class: java.lang.Class<com.arcgismaps.data.DomainType>;
				public getCoreDomainType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDomainType;
			}
			export module DomainType {
				export class CodedValueDomain extends com.arcgismaps.data.DomainType {
					public static class: java.lang.Class<com.arcgismaps.data.DomainType.CodedValueDomain>;
					public static INSTANCE: com.arcgismaps.data.DomainType.CodedValueDomain;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.DomainType.Factory>;
					public static INSTANCE: com.arcgismaps.data.DomainType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDomainType): com.arcgismaps.data.DomainType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.DomainType.Factory.WhenMappings>;
					}
				}
				export class InheritedDomain extends com.arcgismaps.data.DomainType {
					public static class: java.lang.Class<com.arcgismaps.data.DomainType.InheritedDomain>;
					public static INSTANCE: com.arcgismaps.data.DomainType.InheritedDomain;
				}
				export class RangeDomain extends com.arcgismaps.data.DomainType {
					public static class: java.lang.Class<com.arcgismaps.data.DomainType.RangeDomain>;
					public static INSTANCE: com.arcgismaps.data.DomainType.RangeDomain;
				}
				export class Unknown extends com.arcgismaps.data.DomainType {
					public static class: java.lang.Class<com.arcgismaps.data.DomainType.Unknown>;
					public static INSTANCE: com.arcgismaps.data.DomainType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class DrawingTool {
				public static class: java.lang.Class<com.arcgismaps.data.DrawingTool>;
				public getCoreDrawingTool$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDrawingTool;
			}
			export module DrawingTool {
				export class AutoCompletePolygon extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.AutoCompletePolygon>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.AutoCompletePolygon;
				}
				export class Circle extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Circle>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Circle;
				}
				export class DownArrow extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.DownArrow>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.DownArrow;
				}
				export class Ellipse extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Ellipse>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Ellipse;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Factory>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDrawingTool): com.arcgismaps.data.DrawingTool;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Factory.WhenMappings>;
					}
				}
				export class FreeHand extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.FreeHand>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.FreeHand;
				}
				export class LeftArrow extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.LeftArrow>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.LeftArrow;
				}
				export class Line extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Line>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Line;
				}
				export class None extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.None>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.None;
				}
				export class Point extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Point>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Point;
				}
				export class Polygon extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Polygon>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Polygon;
				}
				export class Rectangle extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Rectangle>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Rectangle;
				}
				export class RightArrow extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.RightArrow>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.RightArrow;
				}
				export class Text extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Text>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Text;
				}
				export class Triangle extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Triangle>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Triangle;
				}
				export class Unknown extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.Unknown>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.Unknown;
				}
				export class UpArrow extends com.arcgismaps.data.DrawingTool {
					public static class: java.lang.Class<com.arcgismaps.data.DrawingTool.UpArrow>;
					public static INSTANCE: com.arcgismaps.data.DrawingTool.UpArrow;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class EditOperation {
				public static class: java.lang.Class<com.arcgismaps.data.EditOperation>;
				public getCoreEditOperation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEditOperation;
			}
			export module EditOperation {
				export class Add extends com.arcgismaps.data.EditOperation {
					public static class: java.lang.Class<com.arcgismaps.data.EditOperation.Add>;
					public static INSTANCE: com.arcgismaps.data.EditOperation.Add;
				}
				export class Delete extends com.arcgismaps.data.EditOperation {
					public static class: java.lang.Class<com.arcgismaps.data.EditOperation.Delete>;
					public static INSTANCE: com.arcgismaps.data.EditOperation.Delete;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.EditOperation.Factory>;
					public static INSTANCE: com.arcgismaps.data.EditOperation.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreEditOperation): com.arcgismaps.data.EditOperation;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.EditOperation.Factory.WhenMappings>;
					}
				}
				export class Unknown extends com.arcgismaps.data.EditOperation {
					public static class: java.lang.Class<com.arcgismaps.data.EditOperation.Unknown>;
					public static INSTANCE: com.arcgismaps.data.EditOperation.Unknown;
				}
				export class Update extends com.arcgismaps.data.EditOperation {
					public static class: java.lang.Class<com.arcgismaps.data.EditOperation.Update>;
					public static INSTANCE: com.arcgismaps.data.EditOperation.Update;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class EditResult {
				public static class: java.lang.Class<com.arcgismaps.data.EditResult>;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.data.EditResultType;
				public getCompletedWithErrors(): boolean;
				public getGlobalId(): string;
				public getError(): java.lang.Throwable;
				public getObjectId(): number;
				public getCoreEditResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEditResult;
				public getEditOperation(): com.arcgismaps.data.EditOperation;
			}
			export module EditResult {
				export class Factory extends com.arcgismaps.data.EditResultFactory {
					public static class: java.lang.Class<com.arcgismaps.data.EditResult.Factory>;
					public static INSTANCE: com.arcgismaps.data.EditResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class EditResultFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreEditResult,com.arcgismaps.data.EditResult> {
				public static class: java.lang.Class<com.arcgismaps.data.EditResultFactory>;
				public convertToPublic(param0: any): any;
				public constructor(param0: any);
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreEditResult): com.arcgismaps.data.EditResult;
				public constructor();
			}
			export module EditResultFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.data.EditResultFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class EditResultImpl extends com.arcgismaps.data.EditResult {
				public static class: java.lang.Class<com.arcgismaps.data.EditResultImpl>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreEditResult);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class EditResultType {
				public static class: java.lang.Class<com.arcgismaps.data.EditResultType>;
				public getCoreEditResultType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEditResultType;
			}
			export module EditResultType {
				export class EditResult extends com.arcgismaps.data.EditResultType {
					public static class: java.lang.Class<com.arcgismaps.data.EditResultType.EditResult>;
					public static INSTANCE: com.arcgismaps.data.EditResultType.EditResult;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.EditResultType.Factory>;
					public static INSTANCE: com.arcgismaps.data.EditResultType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreEditResultType): com.arcgismaps.data.EditResultType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.EditResultType.Factory.WhenMappings>;
					}
				}
				export class FeatureEditResult extends com.arcgismaps.data.EditResultType {
					public static class: java.lang.Class<com.arcgismaps.data.EditResultType.FeatureEditResult>;
					public static INSTANCE: com.arcgismaps.data.EditResultType.FeatureEditResult;
				}
				export class Unknown extends com.arcgismaps.data.EditResultType {
					public static class: java.lang.Class<com.arcgismaps.data.EditResultType.Unknown>;
					public static INSTANCE: com.arcgismaps.data.EditResultType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class Feature extends com.arcgismaps.mapping.GeoElement {
				public static class: java.lang.Class<com.arcgismaps.data.Feature>;
				public setGeometry(param0: com.arcgismaps.geometry.Geometry): void;
				public invalidateAttributes$arcgis_maps_any_release(): void;
				public close(): void;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public isAddedToTable$arcgis_maps_any_release(): boolean;
				public getFeatureTable(): com.arcgismaps.data.FeatureTable;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.data.FeatureObjectType;
				public refresh(): boolean;
				public invalidateGeometryAndAttributes$arcgis_maps_any_release(): void;
				public getCoreFeature$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeature;
				public getAttributes(): java.util.Map<string,any>;
			}
			export module Feature {
				export class Factory extends com.arcgismaps.data.FeatureFactory {
					public static class: java.lang.Class<com.arcgismaps.data.Feature.Factory>;
					public static INSTANCE: com.arcgismaps.data.Feature.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureCollection implements com.arcgismaps.io.JsonSerializable, com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureCollection>;
				public getCoreFeatureCollection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureCollection;
				public "save-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public setItem(param0: com.arcgismaps.mapping.Item): void;
				public getTables(): java.util.List<com.arcgismaps.data.FeatureCollectionTable>;
				public getItem(): com.arcgismaps.mapping.Item;
				public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.data.FeatureCollectionTable>);
				public toJson(): string;
				public "load-IoAF18A"(param0: any): any;
				public constructor();
				public "retryLoad-IoAF18A"(param0: any): any;
				public "saveAs-bMdYcbs"(param0: com.arcgismaps.portal.Portal, param1: com.arcgismaps.portal.PortalFolder, param2: string, param3: string, param4: java.lang.Iterable<string>, param5: globalAndroid.graphics.drawable.BitmapDrawable, param6: any): any;
				public constructor(param0: com.arcgismaps.mapping.Item);
				public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureCollection);
			}
			export module FeatureCollection {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureCollection.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.data.FeatureCollection;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureCollection,com.arcgismaps.data.FeatureCollection> {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureCollection.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureCollection.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureCollectionTable extends com.arcgismaps.data.FeatureTable implements com.arcgismaps.data.FeatureSet {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureCollectionTable>;
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public getRenderer(): com.arcgismaps.mapping.symbology.Renderer;
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getLayerInfo(): com.arcgismaps.arcgisservices.ArcGISFeatureLayerInfo;
				public getSymbolOverride(param0: com.arcgismaps.data.Feature): com.arcgismaps.mapping.symbology.Symbol;
				public iterator(): java.util.Iterator<com.arcgismaps.data.Feature>;
				public "load-IoAF18A"(param0: any): any;
				public isPopupEnabled(): boolean;
				public setRenderer(param0: com.arcgismaps.mapping.symbology.Renderer): void;
				public setSymbolOverride(param0: com.arcgismaps.data.Feature, param1: com.arcgismaps.mapping.symbology.Symbol): void;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getCoreFeatureCollectionTable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureCollectionTable;
				public constructor(param0: com.arcgismaps.data.FeatureSet);
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public constructor(param0: java.lang.Iterable<any>, param1: java.lang.Iterable<com.arcgismaps.data.Field>);
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.data.Field>, param1: com.arcgismaps.geometry.GeometryType, param2: com.arcgismaps.geometry.SpatialReference, param3: boolean, param4: boolean);
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureCollectionTable, param1: boolean);
				public setPopupEnabled(param0: boolean): void;
			}
			export module FeatureCollectionTable {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFeatureCollectionTable,com.arcgismaps.data.FeatureCollectionTable> {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureCollectionTable.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureCollectionTable.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureEditResult extends com.arcgismaps.data.EditResult {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureEditResult>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureEditResult);
				public getCoreFeatureEditResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureEditResult;
				public getAttachmentResults(): java.util.List<com.arcgismaps.data.EditResult>;
			}
			export module FeatureEditResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureEditResult,com.arcgismaps.data.FeatureEditResult> {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureEditResult.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureEditResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureFactory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFeature,com.arcgismaps.data.Feature> {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureFactory>;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeature): com.arcgismaps.data.Feature;
				public convertToPublic(param0: any): any;
				public constructor(param0: any);
				public constructor();
			}
			export module FeatureFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureImpl extends com.arcgismaps.data.Feature {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureImpl>;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeature, param1: boolean);
				public getAttributes(): java.util.Map<string,any>;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class FeatureObjectType {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureObjectType>;
				public getCoreFeatureObjectType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureObjectType;
			}
			export module FeatureObjectType {
				export class ArcGISFeature extends com.arcgismaps.data.FeatureObjectType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureObjectType.ArcGISFeature>;
					public static INSTANCE: com.arcgismaps.data.FeatureObjectType.ArcGISFeature;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureObjectType.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureObjectType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureObjectType): com.arcgismaps.data.FeatureObjectType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.FeatureObjectType.Factory.WhenMappings>;
					}
				}
				export class Feature extends com.arcgismaps.data.FeatureObjectType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureObjectType.Feature>;
					public static INSTANCE: com.arcgismaps.data.FeatureObjectType.Feature;
				}
				export class Unknown extends com.arcgismaps.data.FeatureObjectType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureObjectType.Unknown>;
					public static INSTANCE: com.arcgismaps.data.FeatureObjectType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureQueryResult extends com.arcgismaps.data.FeatureSet {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureQueryResult>;
				public getCoreFeatureQueryResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureQueryResult;
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public isTransferLimitExceeded(): boolean;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public iterator(): java.util.Iterator<com.arcgismaps.data.Feature>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureQueryResult);
			}
			export module FeatureQueryResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureQueryResult,com.arcgismaps.data.FeatureQueryResult> {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureQueryResult.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureQueryResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class FeatureRequestMode {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureRequestMode>;
				public getCoreFeatureRequestMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureRequestMode;
			}
			export module FeatureRequestMode {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureRequestMode.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureRequestMode.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureRequestMode): com.arcgismaps.data.FeatureRequestMode;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.FeatureRequestMode.Factory.WhenMappings>;
					}
				}
				export class ManualCache extends com.arcgismaps.data.FeatureRequestMode {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureRequestMode.ManualCache>;
					public static INSTANCE: com.arcgismaps.data.FeatureRequestMode.ManualCache;
				}
				export class OnInteractionCache extends com.arcgismaps.data.FeatureRequestMode {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureRequestMode.OnInteractionCache>;
					public static INSTANCE: com.arcgismaps.data.FeatureRequestMode.OnInteractionCache;
				}
				export class OnInteractionNoCache extends com.arcgismaps.data.FeatureRequestMode {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureRequestMode.OnInteractionNoCache>;
					public static INSTANCE: com.arcgismaps.data.FeatureRequestMode.OnInteractionNoCache;
				}
				export class Undefined extends com.arcgismaps.data.FeatureRequestMode {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureRequestMode.Undefined>;
					public static INSTANCE: com.arcgismaps.data.FeatureRequestMode.Undefined;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureSet extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureSet>;
				/**
				 * Constructs a new instance of the com.arcgismaps.data.FeatureSet interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getFields(): java.util.List<com.arcgismaps.data.Field>;
					getGeometryType(): com.arcgismaps.geometry.GeometryType;
					getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				});
				public constructor();
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureSetImpl extends com.arcgismaps.data.FeatureSet {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureSetImpl>;
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getCoreFeatureSet$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureSet;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureSet);
				public iterator(): java.util.Iterator<com.arcgismaps.data.Feature>;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export module FeatureSetKt {

				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureSetKt.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureSubtype {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureSubtype>;
				public getPrototypeAttributes(): java.util.Map<string,any>;
				public getCoreFeatureSubtype$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureSubtype;
				public getDomains(): java.util.Map<string,com.arcgismaps.data.Domain>;
				public getCode(): any;
				public getName(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureSubtype);
				public getFieldOverrides(): java.util.List<com.arcgismaps.data.Field>;
			}
			export module FeatureSubtype {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureSubtype,com.arcgismaps.data.FeatureSubtype> {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureSubtype.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureSubtype.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class FeatureTable implements com.arcgismaps.Loadable, com.arcgismaps.mapping.popup.PopupSource {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureTable>;
				public "queryStatistics-gIAlu-s"(param0: com.arcgismaps.data.StatisticsQueryParameters, param1: any): any;
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public getHasGeometry(): boolean;
				public createFeature(): com.arcgismaps.data.Feature;
				public getCoreFeatureTable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureTable;
				public "addFeatures-gIAlu-s"(param0: java.lang.Iterable<any>, param1: any): any;
				public cancelLoad(): void;
				public getHasM(): boolean;
				public getField(param0: string): com.arcgismaps.data.Field;
				public createFeature(param0: java.util.Map<string,any>, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.data.Feature;
				public "queryExtent-gIAlu-s"(param0: com.arcgismaps.data.QueryParameters, param1: any): any;
				public "updateFeature-gIAlu-s"(param0: com.arcgismaps.data.Feature, param1: any): any;
				public getDisplayName(): string;
				public getExtent(): com.arcgismaps.geometry.Envelope;
				public "queryFeatures-gIAlu-s"(param0: com.arcgismaps.data.QueryParameters, param1: any): any;
				public setDisplayName(param0: string): void;
				public "deleteFeature-gIAlu-s"(param0: com.arcgismaps.data.Feature, param1: any): any;
				public "updateFeatures-gIAlu-s"(param0: java.lang.Iterable<any>, param1: any): any;
				public "queryFeatureCount-gIAlu-s"(param0: com.arcgismaps.data.QueryParameters, param1: any): any;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public "addFeature-gIAlu-s"(param0: com.arcgismaps.data.Feature, param1: any): any;
				public canEditGeometry(): boolean;
				public getNumberOfFeatures(): number;
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public canAdd(): boolean;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getHasZ(): boolean;
				public "deleteFeatures-gIAlu-s"(param0: java.lang.Iterable<any>, param1: any): any;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.data.FeatureTableType;
				public getLayer(): com.arcgismaps.mapping.layers.Layer;
				public canUpdate(param0: com.arcgismaps.data.Feature): boolean;
				public "load-IoAF18A"(param0: any): any;
				public isPopupEnabled(): boolean;
				public isEditable(): boolean;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getTableName(): string;
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public canDelete(param0: com.arcgismaps.data.Feature): boolean;
				public setPopupEnabled(param0: boolean): void;
			}
			export module FeatureTable {
				export class Factory extends com.arcgismaps.data.FeatureTableFactory {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTable.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureTable.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureTableEditResult {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureTableEditResult>;
				public getCoreFeatureTableEditResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureTableEditResult;
				public getFeatureTable(): com.arcgismaps.data.FeatureTable;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTableEditResult);
				public getEditResults(): java.util.List<com.arcgismaps.data.FeatureEditResult>;
			}
			export module FeatureTableEditResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureTableEditResult,com.arcgismaps.data.FeatureTableEditResult> {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableEditResult.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableEditResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureTableFactory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFeatureTable,com.arcgismaps.data.FeatureTable> {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureTableFactory>;
				public convertToPublic(param0: any): any;
				public constructor(param0: any);
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureTable): com.arcgismaps.data.FeatureTable;
				public constructor();
			}
			export module FeatureTableFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureTableImpl extends com.arcgismaps.data.FeatureTable {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureTableImpl>;
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTable, param1: boolean);
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public "load-IoAF18A"(param0: any): any;
				public isPopupEnabled(): boolean;
				public setPopupEnabled(param0: boolean): void;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class FeatureTableType {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType>;
				public getCoreFeatureTableType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureTableType;
			}
			export module FeatureTableType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureTableType): com.arcgismaps.data.FeatureTableType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.Factory.WhenMappings>;
					}
				}
				export class FeatureCollectionTable extends com.arcgismaps.data.FeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.FeatureCollectionTable>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.FeatureCollectionTable;
				}
				export class FeatureTable extends com.arcgismaps.data.FeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.FeatureTable>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.FeatureTable;
				}
				export class GeoPackageFeatureTable extends com.arcgismaps.data.FeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.GeoPackageFeatureTable>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.GeoPackageFeatureTable;
				}
				export class GeodatabaseFeatureTable extends com.arcgismaps.data.FeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.GeodatabaseFeatureTable>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.GeodatabaseFeatureTable;
				}
				export class OgcFeatureCollectionTable extends com.arcgismaps.data.FeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.OgcFeatureCollectionTable>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.OgcFeatureCollectionTable;
				}
				export class ServiceFeatureTable extends com.arcgismaps.data.FeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.ServiceFeatureTable>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.ServiceFeatureTable;
				}
				export class ShapefileFeatureTable extends com.arcgismaps.data.FeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.ShapefileFeatureTable>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.ShapefileFeatureTable;
				}
				export class Unknown extends com.arcgismaps.data.FeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.Unknown>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.Unknown;
				}
				export class WfsFeatureTable extends com.arcgismaps.data.FeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTableType.WfsFeatureTable>;
					public static INSTANCE: com.arcgismaps.data.FeatureTableType.WfsFeatureTable;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureTemplate {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureTemplate>;
				public getPrototypeAttributes(): java.util.Map<string,any>;
				public getCoreFeatureTemplate$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureTemplate;
				public getDrawingTool(): com.arcgismaps.data.DrawingTool;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTemplate);
				public getDescription(): string;
				public getName(): string;
			}
			export module FeatureTemplate {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureTemplate,com.arcgismaps.data.FeatureTemplate> {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureTemplate.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureTemplate.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FeatureType {
				public static class: java.lang.Class<com.arcgismaps.data.FeatureType>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureType);
				public getDomains(): java.util.Map<string,com.arcgismaps.data.Domain>;
				public getId(): any;
				public getName(): string;
				public getTemplates(): java.util.List<com.arcgismaps.data.FeatureTemplate>;
				public getCoreFeatureType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureType;
			}
			export module FeatureType {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureType,com.arcgismaps.data.FeatureType> {
					public static class: java.lang.Class<com.arcgismaps.data.FeatureType.Factory>;
					public static INSTANCE: com.arcgismaps.data.FeatureType.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class Field {
				public static class: java.lang.Class<com.arcgismaps.data.Field>;
				public getEditable(): boolean;
				public getCoreField$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreField;
				public getAlias(): string;
				public constructor(param0: com.arcgismaps.data.FieldType, param1: string, param2: string, param3: number, param4: com.arcgismaps.data.Domain, param5: boolean, param6: boolean);
				public getDomain(): com.arcgismaps.data.Domain;
				public getFieldType(): com.arcgismaps.data.FieldType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreField);
				public getNullable(): boolean;
				public getName(): string;
				public toJson(): string;
				public getLength(): number;
			}
			export module Field {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.data.Field.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.data.Field;
					public createDateOnly(param0: string, param1: string): com.arcgismaps.data.Field;
					public createTimestampOffset(param0: string, param1: string): com.arcgismaps.data.Field;
					public createTimeOnly(param0: string, param1: string): com.arcgismaps.data.Field;
					public createBigInt(param0: string, param1: string): com.arcgismaps.data.Field;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreField,com.arcgismaps.data.Field> {
					public static class: java.lang.Class<com.arcgismaps.data.Field.Factory>;
					public static INSTANCE: com.arcgismaps.data.Field.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FieldDescription {
				public static class: java.lang.Class<com.arcgismaps.data.FieldDescription>;
				public setName(param0: string): void;
				public constructor(param0: string, param1: com.arcgismaps.data.FieldType);
				public setNullable(param0: boolean): void;
				public getAlias(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFieldDescription);
				public setLength(param0: number): void;
				public getNullable(): boolean;
				public getName(): string;
				public getCoreFieldDescription$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFieldDescription;
				public setAlias(param0: string): void;
				public setDomainName(param0: string): void;
				public getLength(): number;
				public getEditable(): boolean;
				public setEditable(param0: boolean): void;
				public getFieldType(): com.arcgismaps.data.FieldType;
				public setFieldType(param0: com.arcgismaps.data.FieldType): void;
				public getDomainName(): string;
			}
			export module FieldDescription {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFieldDescription,com.arcgismaps.data.FieldDescription> {
					public static class: java.lang.Class<com.arcgismaps.data.FieldDescription.Factory>;
					public static INSTANCE: com.arcgismaps.data.FieldDescription.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class FieldGroup {
				public static class: java.lang.Class<com.arcgismaps.data.FieldGroup>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFieldGroup);
				public getContingencies(): java.util.List<com.arcgismaps.data.Contingency>;
				public getFields(): java.util.List<string>;
				public getName(): string;
				public getCoreFieldGroup$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFieldGroup;
				public isEditingRestrictive(): boolean;
			}
			export module FieldGroup {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFieldGroup,com.arcgismaps.data.FieldGroup> {
					public static class: java.lang.Class<com.arcgismaps.data.FieldGroup.Factory>;
					public static INSTANCE: com.arcgismaps.data.FieldGroup.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class FieldType {
				public static class: java.lang.Class<com.arcgismaps.data.FieldType>;
				public getCoreFieldType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFieldType;
			}
			export module FieldType {
				export class Blob extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Blob>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Blob;
				}
				export class Date extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Date>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Date;
				}
				export class DateOnly extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.DateOnly>;
					public static INSTANCE: com.arcgismaps.data.FieldType.DateOnly;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Factory>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFieldType): com.arcgismaps.data.FieldType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.FieldType.Factory.WhenMappings>;
					}
				}
				export class Float32 extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Float32>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Float32;
				}
				export class Float64 extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Float64>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Float64;
				}
				export class Geometry extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Geometry>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Geometry;
				}
				export class GlobalId extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.GlobalId>;
					public static INSTANCE: com.arcgismaps.data.FieldType.GlobalId;
				}
				export class Guid extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Guid>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Guid;
				}
				export class Int16 extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Int16>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Int16;
				}
				export class Int32 extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Int32>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Int32;
				}
				export class Int64 extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Int64>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Int64;
				}
				export class Oid extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Oid>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Oid;
				}
				export class Raster extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Raster>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Raster;
				}
				export class Text extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Text>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Text;
				}
				export class TimeOnly extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.TimeOnly>;
					public static INSTANCE: com.arcgismaps.data.FieldType.TimeOnly;
				}
				export class TimestampOffset extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.TimestampOffset>;
					public static INSTANCE: com.arcgismaps.data.FieldType.TimestampOffset;
				}
				export class Unknown extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Unknown>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Unknown;
				}
				export class Xml extends com.arcgismaps.data.FieldType {
					public static class: java.lang.Class<com.arcgismaps.data.FieldType.Xml>;
					public static INSTANCE: com.arcgismaps.data.FieldType.Xml;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class GeoPackage extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.data.GeoPackage>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeoPackage, param1: boolean);
				public getCoreGeoPackage$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoPackage;
				public close(): void;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getGeoPackageFeatureTables(): java.util.List<com.arcgismaps.data.GeoPackageFeatureTable>;
				public getGeoPackageRasters(): java.util.List<com.arcgismaps.raster.GeoPackageRaster>;
				public getPath(): string;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
			}
			export module GeoPackage {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGeoPackage,com.arcgismaps.data.GeoPackage> {
					public static class: java.lang.Class<com.arcgismaps.data.GeoPackage.Factory>;
					public static INSTANCE: com.arcgismaps.data.GeoPackage.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class GeoPackageFeatureTable extends com.arcgismaps.data.FeatureTable {
				public static class: java.lang.Class<com.arcgismaps.data.GeoPackageFeatureTable>;
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeoPackageFeatureTable, param1: boolean);
				public getCoreGeoPackageFeatureTable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoPackageFeatureTable;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public getDescription(): string;
				public getGeoPackage(): com.arcgismaps.data.GeoPackage;
				public "load-IoAF18A"(param0: any): any;
				public isPopupEnabled(): boolean;
				public setPopupEnabled(param0: boolean): void;
			}
			export module GeoPackageFeatureTable {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGeoPackageFeatureTable,com.arcgismaps.data.GeoPackageFeatureTable> {
					public static class: java.lang.Class<com.arcgismaps.data.GeoPackageFeatureTable.Factory>;
					public static INSTANCE: com.arcgismaps.data.GeoPackageFeatureTable.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class Geodatabase extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.data.Geodatabase>;
				public getAnnotationTables(): java.util.List<com.arcgismaps.data.GeodatabaseFeatureTable>;
				public cancelLoad(): void;
				public isInTransaction(): kotlinx.coroutines.flow.StateFlow<java.lang.Boolean>;
				public "commitTransaction-d1pmJ48"(): any;
				public getAnnotationTable(param0: number): com.arcgismaps.data.GeodatabaseFeatureTable;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeodatabase, param1: boolean);
				public "beginTransaction-d1pmJ48"(): any;
				public getFeatureTable(param0: string): com.arcgismaps.data.GeodatabaseFeatureTable;
				public "createDomain-gIAlu-s"(param0: com.arcgismaps.data.DomainDescription, param1: any): any;
				public getUtilityNetworks(): java.util.List<com.arcgismaps.utilitynetworks.UtilityNetwork>;
				public constructor(param0: string);
				public getDimensionTables(): java.util.List<com.arcgismaps.data.GeodatabaseFeatureTable>;
				public getFeatureTable(param0: number): com.arcgismaps.data.GeodatabaseFeatureTable;
				public "getSyncId-sLYn7dI"(): string;
				public getSyncModel(): com.arcgismaps.tasks.geodatabase.SyncModel;
				public getFeatureTables(): java.util.List<com.arcgismaps.data.GeodatabaseFeatureTable>;
				public getServiceUrl(): string;
				public close(): void;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public getDimensionTable(param0: number): com.arcgismaps.data.GeodatabaseFeatureTable;
				public getMinServerGeneration(): number;
				public getPath(): string;
				public hasLocalEdits(): boolean;
				public "load-IoAF18A"(param0: any): any;
				public getUtilityNetwork(param0: string): com.arcgismaps.utilitynetworks.UtilityNetwork;
				public getGeometryUsedInGeneration(): com.arcgismaps.geometry.Geometry;
				public "createTable-gIAlu-s"(param0: com.arcgismaps.data.TableDescription, param1: any): any;
				public "deleteDomain-gIAlu-s"(param0: string, param1: any): any;
				public "retryLoad-IoAF18A"(param0: any): any;
				public "deleteTable-gIAlu-s"(param0: string, param1: any): any;
				public getAnnotationTable(param0: string): com.arcgismaps.data.GeodatabaseFeatureTable;
				public isSyncEnabled(): boolean;
				public getDimensionTable(param0: string): com.arcgismaps.data.GeodatabaseFeatureTable;
				public "rollbackTransaction-d1pmJ48"(): any;
				public getCoreGeodatabase$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodatabase;
				public getDomains(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.data.Domain>>;
			}
			export module Geodatabase {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.data.Geodatabase.Companion>;
					public "create-gIAlu-s"(param0: string, param1: any): any;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGeodatabase,com.arcgismaps.data.Geodatabase> {
					public static class: java.lang.Class<com.arcgismaps.data.Geodatabase.Factory>;
					public static INSTANCE: com.arcgismaps.data.Geodatabase.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class GeodatabaseDataset {
				public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseDataset>;
				/**
				 * Constructs a new instance of the com.arcgismaps.data.GeodatabaseDataset interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getGeodatabase(): com.arcgismaps.data.Geodatabase;
					getName(): string;
					getType(): com.arcgismaps.data.GeodatabaseDatasetType;
				});
				public constructor();
				public getType(): com.arcgismaps.data.GeodatabaseDatasetType;
				public getName(): string;
				public getGeodatabase(): com.arcgismaps.data.Geodatabase;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class GeodatabaseDatasetImpl extends com.arcgismaps.data.GeodatabaseDataset {
				public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseDatasetImpl>;
				public getCoreGeodatabaseDataset$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodatabaseDataset;
				public getType(): com.arcgismaps.data.GeodatabaseDatasetType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeodatabaseDataset);
				public getName(): string;
				public getGeodatabase(): com.arcgismaps.data.Geodatabase;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export module GeodatabaseDatasetKt {

				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseDatasetKt.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class GeodatabaseDatasetType {
				public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseDatasetType>;
				public getCoreGeodatabaseDatasetType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType;
			}
			export module GeodatabaseDatasetType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseDatasetType.Factory>;
					public static INSTANCE: com.arcgismaps.data.GeodatabaseDatasetType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType): com.arcgismaps.data.GeodatabaseDatasetType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseDatasetType.Factory.WhenMappings>;
					}
				}
				export class TransportationNetworkDataset extends com.arcgismaps.data.GeodatabaseDatasetType {
					public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseDatasetType.TransportationNetworkDataset>;
					public static INSTANCE: com.arcgismaps.data.GeodatabaseDatasetType.TransportationNetworkDataset;
				}
				export class Unknown extends com.arcgismaps.data.GeodatabaseDatasetType {
					public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseDatasetType.Unknown>;
					public static INSTANCE: com.arcgismaps.data.GeodatabaseDatasetType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class GeodatabaseFeatureTable extends com.arcgismaps.data.ArcGISFeatureTable {
				public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseFeatureTable>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable, param1: boolean);
				public constructor(param0: com.arcgismaps.data.GeodatabaseFeatureTable, param1: com.arcgismaps.arcgisservices.RelationshipInfo);
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getGeodatabase(): com.arcgismaps.data.Geodatabase;
				public getCoreGeodatabaseFeatureTable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable;
				public "load-IoAF18A"(param0: any): any;
				public isPopupEnabled(): boolean;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public hasLocalEditsSince(param0: java.time.Instant): boolean;
				public setPopupEnabled(param0: boolean): void;
			}
			export module GeodatabaseFeatureTable {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable,com.arcgismaps.data.GeodatabaseFeatureTable> {
					public static class: java.lang.Class<com.arcgismaps.data.GeodatabaseFeatureTable.Factory>;
					public static INSTANCE: com.arcgismaps.data.GeodatabaseFeatureTable.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class InheritedDomain extends com.arcgismaps.data.Domain {
				public static class: java.lang.Class<com.arcgismaps.data.InheritedDomain>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreInheritedDomain);
				public toJson(): string;
				public getCoreInheritedDomain$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreInheritedDomain;
			}
			export module InheritedDomain {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreInheritedDomain,com.arcgismaps.data.InheritedDomain> {
					public static class: java.lang.Class<com.arcgismaps.data.InheritedDomain.Factory>;
					public static INSTANCE: com.arcgismaps.data.InheritedDomain.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class LocalFeatureEdit {
				public static class: java.lang.Class<com.arcgismaps.data.LocalFeatureEdit>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLocalFeatureEdit);
				public getEditDateTime(): java.time.Instant;
				public getCoreLocalFeatureEdit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocalFeatureEdit;
				public getFeature(): com.arcgismaps.data.Feature;
				public getOperation(): com.arcgismaps.data.EditOperation;
			}
			export module LocalFeatureEdit {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLocalFeatureEdit,com.arcgismaps.data.LocalFeatureEdit> {
					public static class: java.lang.Class<com.arcgismaps.data.LocalFeatureEdit.Factory>;
					public static INSTANCE: com.arcgismaps.data.LocalFeatureEdit.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class LocalFeatureEditsResult extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.data.LocalFeatureEditsResult>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLocalFeatureEditsResult);
				public iterator(): java.util.Iterator<com.arcgismaps.data.LocalFeatureEdit>;
				public getCoreLocalFeatureEditsResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocalFeatureEditsResult;
			}
			export module LocalFeatureEditsResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLocalFeatureEditsResult,com.arcgismaps.data.LocalFeatureEditsResult> {
					public static class: java.lang.Class<com.arcgismaps.data.LocalFeatureEditsResult.Factory>;
					public static INSTANCE: com.arcgismaps.data.LocalFeatureEditsResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class OgcFeatureCollectionTable extends com.arcgismaps.data.FeatureTable {
				public static class: java.lang.Class<com.arcgismaps.data.OgcFeatureCollectionTable>;
				public getCoreOgcFeatureCollectionTable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOGCFeatureCollectionTable;
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public getFeatureCollectionInfo(): com.arcgismaps.mapping.layers.OgcFeatureCollectionInfo;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getUrl(): string;
				public "load-IoAF18A"(param0: any): any;
				public isPopupEnabled(): boolean;
				public "retryLoad-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreOGCFeatureCollectionTable, param1: boolean);
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public constructor(param0: com.arcgismaps.mapping.layers.OgcFeatureCollectionInfo);
				public "populateFromService-BWLJW6A"(param0: com.arcgismaps.data.QueryParameters, param1: boolean, param2: java.lang.Iterable<string>, param3: any): any;
				public constructor(param0: string, param1: string);
				public setPopupEnabled(param0: boolean): void;
				public getFeatureRequestMode(): com.arcgismaps.data.FeatureRequestMode;
				public setFeatureRequestMode(param0: com.arcgismaps.data.FeatureRequestMode): void;
			}
			export module OgcFeatureCollectionTable {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreOGCFeatureCollectionTable,com.arcgismaps.data.OgcFeatureCollectionTable> {
					public static class: java.lang.Class<com.arcgismaps.data.OgcFeatureCollectionTable.Factory>;
					public static INSTANCE: com.arcgismaps.data.OgcFeatureCollectionTable.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class OrderBy {
				public static class: java.lang.Class<com.arcgismaps.data.OrderBy>;
				public getFieldName(): string;
				public getSortOrder(): com.arcgismaps.data.SortOrder;
				public getCoreOrderBy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOrderBy;
				public constructor(param0: string, param1: com.arcgismaps.data.SortOrder);
				public setFieldName(param0: string): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreOrderBy);
				public setSortOrder(param0: com.arcgismaps.data.SortOrder): void;
			}
			export module OrderBy {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOrderBy,com.arcgismaps.data.OrderBy> {
					public static class: java.lang.Class<com.arcgismaps.data.OrderBy.Factory>;
					public static INSTANCE: com.arcgismaps.data.OrderBy.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class QueryFeatureFields {
				public static class: java.lang.Class<com.arcgismaps.data.QueryFeatureFields>;
				public getCoreQueryFeatureFields$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreQueryFeatureFields;
			}
			export module QueryFeatureFields {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.QueryFeatureFields.Factory>;
					public static INSTANCE: com.arcgismaps.data.QueryFeatureFields.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreQueryFeatureFields): com.arcgismaps.data.QueryFeatureFields;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.QueryFeatureFields.Factory.WhenMappings>;
					}
				}
				export class IdsOnly extends com.arcgismaps.data.QueryFeatureFields {
					public static class: java.lang.Class<com.arcgismaps.data.QueryFeatureFields.IdsOnly>;
					public static INSTANCE: com.arcgismaps.data.QueryFeatureFields.IdsOnly;
				}
				export class LoadAll extends com.arcgismaps.data.QueryFeatureFields {
					public static class: java.lang.Class<com.arcgismaps.data.QueryFeatureFields.LoadAll>;
					public static INSTANCE: com.arcgismaps.data.QueryFeatureFields.LoadAll;
				}
				export class Minimum extends com.arcgismaps.data.QueryFeatureFields {
					public static class: java.lang.Class<com.arcgismaps.data.QueryFeatureFields.Minimum>;
					public static INSTANCE: com.arcgismaps.data.QueryFeatureFields.Minimum;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class QueryParameters {
				public static class: java.lang.Class<com.arcgismaps.data.QueryParameters>;
				public getOutFields$arcgis_maps_any_release(): java.util.List<string>;
				public setResultOffset(param0: number): void;
				public getTimeExtent(): com.arcgismaps.mapping.TimeExtent;
				public setTimeExtent(param0: com.arcgismaps.mapping.TimeExtent): void;
				public getSpatialRelationship(): com.arcgismaps.data.SpatialRelationship;
				public setReturnGeometry(param0: boolean): void;
				public getOutSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public constructor();
				public setGeometry(param0: com.arcgismaps.geometry.Geometry): void;
				public getObjectIds(): java.util.List<java.lang.Long>;
				public setWhereClause(param0: string): void;
				public getMaxFeatures(): number;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public setMaxAllowableOffset(param0: number): void;
				public getWhereClause(): string;
				public setSpatialRelationship(param0: com.arcgismaps.data.SpatialRelationship): void;
				public setMaxFeatures(param0: number): void;
				public getResultOffset(): number;
				public getReturnGeometry(): boolean;
				public getUrlParameters$arcgis_maps_any_release(): java.util.Map<string,string>;
				public getMaxAllowableOffset(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreQueryParameters);
				public setOutSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
				public getCoreQueryParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreQueryParameters;
				public getOrderByFields(): java.util.List<com.arcgismaps.data.OrderBy>;
			}
			export module QueryParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreQueryParameters,com.arcgismaps.data.QueryParameters> {
					public static class: java.lang.Class<com.arcgismaps.data.QueryParameters.Factory>;
					public static INSTANCE: com.arcgismaps.data.QueryParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class RangeDomain extends com.arcgismaps.data.Domain {
				public static class: java.lang.Class<com.arcgismaps.data.RangeDomain>;
				public getMaxValue(): any;
				public getCoreRangeDomain$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRangeDomain;
				public getMinValue(): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRangeDomain);
				public toJson(): string;
			}
			export module RangeDomain {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRangeDomain,com.arcgismaps.data.RangeDomain> {
					public static class: java.lang.Class<com.arcgismaps.data.RangeDomain.Factory>;
					public static INSTANCE: com.arcgismaps.data.RangeDomain.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class RangeDomainDescription extends com.arcgismaps.data.DomainDescription {
				public static class: java.lang.Class<com.arcgismaps.data.RangeDomainDescription>;
				public getCoreRangeDomainDescription$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRangeDomainDescription;
				public setMinValue(param0: any): void;
				public getMaxValue(): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRangeDomainDescription);
				public getMinValue(): any;
				public setMaxValue(param0: any): void;
				public constructor(param0: string, param1: com.arcgismaps.data.FieldType, param2: any, param3: any);
			}
			export module RangeDomainDescription {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRangeDomainDescription,com.arcgismaps.data.RangeDomainDescription> {
					public static class: java.lang.Class<com.arcgismaps.data.RangeDomainDescription.Factory>;
					public static INSTANCE: com.arcgismaps.data.RangeDomainDescription.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class RelatedFeatureQueryResult extends com.arcgismaps.data.FeatureSet {
				public static class: java.lang.Class<com.arcgismaps.data.RelatedFeatureQueryResult>;
				public getFeature(): com.arcgismaps.data.ArcGISFeature;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRelatedFeatureQueryResult);
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public isTransferLimitExceeded(): boolean;
				public getRelatedTable(): com.arcgismaps.data.ArcGISFeatureTable;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public iterator(): java.util.Iterator<com.arcgismaps.data.Feature>;
				public getCoreRelatedFeatureQueryResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRelatedFeatureQueryResult;
				public getRelationshipInfo(): com.arcgismaps.arcgisservices.RelationshipInfo;
			}
			export module RelatedFeatureQueryResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRelatedFeatureQueryResult,com.arcgismaps.data.RelatedFeatureQueryResult> {
					public static class: java.lang.Class<com.arcgismaps.data.RelatedFeatureQueryResult.Factory>;
					public static INSTANCE: com.arcgismaps.data.RelatedFeatureQueryResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class RelatedQueryParameters {
				public static class: java.lang.Class<com.arcgismaps.data.RelatedQueryParameters>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRelatedQueryParameters);
				public setResultOffset(param0: number): void;
				public getWhereClause(): string;
				public setRelationshipInfo(param0: com.arcgismaps.arcgisservices.RelationshipInfo): void;
				public setReturnGeometry(param0: boolean): void;
				public setMaxFeatures(param0: number): void;
				public constructor(param0: com.arcgismaps.arcgisservices.RelationshipInfo);
				public getResultOffset(): number;
				public getReturnGeometry(): boolean;
				public getRelationshipInfo(): com.arcgismaps.arcgisservices.RelationshipInfo;
				public getCoreRelatedQueryParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRelatedQueryParameters;
				public setWhereClause(param0: string): void;
				public getMaxFeatures(): number;
				public getOrderByFields(): java.util.List<com.arcgismaps.data.OrderBy>;
			}
			export module RelatedQueryParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRelatedQueryParameters,com.arcgismaps.data.RelatedQueryParameters> {
					public static class: java.lang.Class<com.arcgismaps.data.RelatedQueryParameters.Factory>;
					public static INSTANCE: com.arcgismaps.data.RelatedQueryParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class RelationshipConstraintViolation {
				public static class: java.lang.Class<com.arcgismaps.data.RelationshipConstraintViolation>;
				public getCoreRelationshipConstraintViolationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType;
			}
			export module RelationshipConstraintViolation {
				export class Cardinality extends com.arcgismaps.data.RelationshipConstraintViolation {
					public static class: java.lang.Class<com.arcgismaps.data.RelationshipConstraintViolation.Cardinality>;
					public static INSTANCE: com.arcgismaps.data.RelationshipConstraintViolation.Cardinality;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.RelationshipConstraintViolation.Factory>;
					public static INSTANCE: com.arcgismaps.data.RelationshipConstraintViolation.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType): com.arcgismaps.data.RelationshipConstraintViolation;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.RelationshipConstraintViolation.Factory.WhenMappings>;
					}
				}
				export class None extends com.arcgismaps.data.RelationshipConstraintViolation {
					public static class: java.lang.Class<com.arcgismaps.data.RelationshipConstraintViolation.None>;
					public static INSTANCE: com.arcgismaps.data.RelationshipConstraintViolation.None;
				}
				export class Orphaned extends com.arcgismaps.data.RelationshipConstraintViolation {
					public static class: java.lang.Class<com.arcgismaps.data.RelationshipConstraintViolation.Orphaned>;
					public static INSTANCE: com.arcgismaps.data.RelationshipConstraintViolation.Orphaned;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ServiceFeatureTable extends com.arcgismaps.data.ArcGISFeatureTable implements com.arcgismaps.ApiKeyResource {
				public static class: java.lang.Class<com.arcgismaps.data.ServiceFeatureTable>;
				public getGeodatabaseVersion(): string;
				public getDefinitionExpression(): string;
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public constructor(param0: com.arcgismaps.mapping.PortalItem, param1: number);
				public cancelLoad(): void;
				public getBufferFactor(): number;
				public setGeodatabaseVersion(param0: string): void;
				public clearCache(param0: boolean): void;
				public constructor(param0: string);
				public getUri(): string;
				public "applyEdits-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreServiceFeatureTable, param1: boolean);
				public setDefinitionExpression(param0: string): void;
				public "populateFromService-BWLJW6A"(param0: com.arcgismaps.data.QueryParameters, param1: boolean, param2: java.lang.Iterable<string>, param3: any): any;
				public "setApiKey-lGpodAQ"(param0: string): void;
				public getCoreServiceFeatureTable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceFeatureTable;
				public getFeatureRequestMode(): com.arcgismaps.data.FeatureRequestMode;
				public setFeatureRequestMode(param0: com.arcgismaps.data.FeatureRequestMode): void;
				public "getApiKey-6IiKQno"(): string;
				public "queryFeatures-0E7RQCE"(param0: com.arcgismaps.data.QueryParameters, param1: com.arcgismaps.data.QueryFeatureFields, param2: any): any;
				public setUsername$arcgis_maps_any_release(param0: string): void;
				public constructor(param0: com.arcgismaps.mapping.PortalItem);
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public "undoLocalEdits-IoAF18A"(param0: any): any;
				public getServiceGeodatabase(): com.arcgismaps.data.ServiceGeodatabase;
				public "queryRelatedFeatures-BWLJW6A"(param0: com.arcgismaps.data.ArcGISFeature, param1: com.arcgismaps.data.RelatedQueryParameters, param2: com.arcgismaps.data.QueryFeatureFields, param3: any): any;
				public "loadOrRefreshFeatures-gIAlu-s"(param0: java.lang.Iterable<any>, param1: any): any;
				public "load-IoAF18A"(param0: any): any;
				public isPopupEnabled(): boolean;
				public "retryLoad-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.data.ServiceFeatureTable, param1: com.arcgismaps.arcgisservices.RelationshipInfo);
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public getPortalItem(): com.arcgismaps.mapping.PortalItem;
				public setBufferFactor(param0: number): void;
				public setPopupEnabled(param0: boolean): void;
			}
			export module ServiceFeatureTable {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreServiceFeatureTable,com.arcgismaps.data.ServiceFeatureTable> {
					public static class: java.lang.Class<com.arcgismaps.data.ServiceFeatureTable.Factory>;
					public static INSTANCE: com.arcgismaps.data.ServiceFeatureTable.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ServiceGeodatabase extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.data.ServiceGeodatabase>;
				public getSupportsBranchVersioning(): boolean;
				public "createVersion-gIAlu-s"(param0: com.arcgismaps.arcgisservices.ServiceVersionParameters, param1: any): any;
				public cancelLoad(): void;
				public getConnectedTables(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.data.ServiceFeatureTable>>;
				public getCoreServiceGeodatabase$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceGeodatabase;
				public "switchVersion-gIAlu-s"(param0: string, param1: any): any;
				public "applyEdits-IoAF18A"(param0: any): any;
				public "fetchVersions-IoAF18A"(param0: any): any;
				public getServiceInfo(): com.arcgismaps.arcgisservices.ArcGISFeatureServiceInfo;
				public getTable(param0: number): com.arcgismaps.data.ServiceFeatureTable;
				public constructor(param0: com.arcgismaps.internal.jni.CoreServiceGeodatabase, param1: boolean);
				public constructor(param0: com.arcgismaps.mapping.PortalItem, param1: string, param2: com.arcgismaps.arcgisservices.FeatureServiceSessionType);
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public "undoLocalEdits-IoAF18A"(param0: any): any;
				public getUrl(): string;
				public hasLocalEdits(): boolean;
				public getSessionType(): com.arcgismaps.arcgisservices.FeatureServiceSessionType;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string, param1: string, param2: com.arcgismaps.arcgisservices.FeatureServiceSessionType);
				public "retryLoad-IoAF18A"(param0: any): any;
				public getVersionName(): string;
				public "close-IoAF18A"(param0: any): any;
				public getDefaultVersionName(): string;
				public getPortalItem(): com.arcgismaps.mapping.PortalItem;
				public setSessionType(param0: com.arcgismaps.arcgisservices.FeatureServiceSessionType): void;
			}
			export module ServiceGeodatabase {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreServiceGeodatabase,com.arcgismaps.data.ServiceGeodatabase> {
					public static class: java.lang.Class<com.arcgismaps.data.ServiceGeodatabase.Factory>;
					public static INSTANCE: com.arcgismaps.data.ServiceGeodatabase.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ShapefileFeatureTable extends com.arcgismaps.data.FeatureTable {
				public static class: java.lang.Class<com.arcgismaps.data.ShapefileFeatureTable>;
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public close(): void;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getPath(): string;
				public getCoreShapefileFeatureTable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreShapefileFeatureTable;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
				public isPopupEnabled(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreShapefileFeatureTable, param1: boolean);
				public "retryLoad-IoAF18A"(param0: any): any;
				public getInfo(): com.arcgismaps.data.ShapefileInfo;
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public getSpatialIndexEnabled(): boolean;
				public setPopupEnabled(param0: boolean): void;
			}
			export module ShapefileFeatureTable {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreShapefileFeatureTable,com.arcgismaps.data.ShapefileFeatureTable> {
					public static class: java.lang.Class<com.arcgismaps.data.ShapefileFeatureTable.Factory>;
					public static INSTANCE: com.arcgismaps.data.ShapefileFeatureTable.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class ShapefileInfo {
				public static class: java.lang.Class<com.arcgismaps.data.ShapefileInfo>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreShapefileInfo);
				public getTags(): java.util.List<string>;
				public getCredits(): string;
				public getCopyrightText(): string;
				public getDescription(): string;
				public getCoreShapefileInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreShapefileInfo;
				public getThumbnail(): globalAndroid.graphics.drawable.BitmapDrawable;
				public getSummary(): string;
			}
			export module ShapefileInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreShapefileInfo,com.arcgismaps.data.ShapefileInfo> {
					public static class: java.lang.Class<com.arcgismaps.data.ShapefileInfo.Factory>;
					public static INSTANCE: com.arcgismaps.data.ShapefileInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class SortOrder {
				public static class: java.lang.Class<com.arcgismaps.data.SortOrder>;
				public getCoreSortOrder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSortOrder;
			}
			export module SortOrder {
				export class Ascending extends com.arcgismaps.data.SortOrder {
					public static class: java.lang.Class<com.arcgismaps.data.SortOrder.Ascending>;
					public static INSTANCE: com.arcgismaps.data.SortOrder.Ascending;
				}
				export class Descending extends com.arcgismaps.data.SortOrder {
					public static class: java.lang.Class<com.arcgismaps.data.SortOrder.Descending>;
					public static INSTANCE: com.arcgismaps.data.SortOrder.Descending;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.SortOrder.Factory>;
					public static INSTANCE: com.arcgismaps.data.SortOrder.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSortOrder): com.arcgismaps.data.SortOrder;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.SortOrder.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class SpatialRelationship {
				public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship>;
				public getCoreSpatialRelationship$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSpatialRelationship;
			}
			export module SpatialRelationship {
				export class Contains extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Contains>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Contains;
				}
				export class Crosses extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Crosses>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Crosses;
				}
				export class Disjoint extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Disjoint>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Disjoint;
				}
				export class EnvelopeIntersects extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.EnvelopeIntersects>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.EnvelopeIntersects;
				}
				export class Equals extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Equals>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Equals;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Factory>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSpatialRelationship): com.arcgismaps.data.SpatialRelationship;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Factory.WhenMappings>;
					}
				}
				export class IndexIntersects extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.IndexIntersects>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.IndexIntersects;
				}
				export class Intersects extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Intersects>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Intersects;
				}
				export class Overlaps extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Overlaps>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Overlaps;
				}
				export class Relate extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Relate>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Relate;
				}
				export class Touches extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Touches>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Touches;
				}
				export class Unknown extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Unknown>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Unknown;
				}
				export class Within extends com.arcgismaps.data.SpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.data.SpatialRelationship.Within>;
					public static INSTANCE: com.arcgismaps.data.SpatialRelationship.Within;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class StatisticDefinition {
				public static class: java.lang.Class<com.arcgismaps.data.StatisticDefinition>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreStatisticDefinition);
				public getOutputAlias(): string;
				public setOutputAlias(param0: string): void;
				public getStatisticType(): com.arcgismaps.data.StatisticType;
				public getCoreStatisticDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStatisticDefinition;
				public setStatisticType(param0: com.arcgismaps.data.StatisticType): void;
				public setOnFieldName(param0: string): void;
				public constructor(param0: string, param1: com.arcgismaps.data.StatisticType, param2: string);
				public getOnFieldName(): string;
			}
			export module StatisticDefinition {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreStatisticDefinition,com.arcgismaps.data.StatisticDefinition> {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticDefinition.Factory>;
					public static INSTANCE: com.arcgismaps.data.StatisticDefinition.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class StatisticRecord {
				public static class: java.lang.Class<com.arcgismaps.data.StatisticRecord>;
				public getGroup(): java.util.Map<string,any>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreStatisticRecord);
				public getCoreStatisticRecord$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStatisticRecord;
				public getStatistics(): java.util.Map<string,any>;
			}
			export module StatisticRecord {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreStatisticRecord,com.arcgismaps.data.StatisticRecord> {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticRecord.Factory>;
					public static INSTANCE: com.arcgismaps.data.StatisticRecord.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export abstract class StatisticType {
				public static class: java.lang.Class<com.arcgismaps.data.StatisticType>;
				public getCoreStatisticType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStatisticType;
			}
			export module StatisticType {
				export class Average extends com.arcgismaps.data.StatisticType {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticType.Average>;
					public static INSTANCE: com.arcgismaps.data.StatisticType.Average;
				}
				export class Count extends com.arcgismaps.data.StatisticType {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticType.Count>;
					public static INSTANCE: com.arcgismaps.data.StatisticType.Count;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticType.Factory>;
					public static INSTANCE: com.arcgismaps.data.StatisticType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreStatisticType): com.arcgismaps.data.StatisticType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.data.StatisticType.Factory.WhenMappings>;
					}
				}
				export class Maximum extends com.arcgismaps.data.StatisticType {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticType.Maximum>;
					public static INSTANCE: com.arcgismaps.data.StatisticType.Maximum;
				}
				export class Minimum extends com.arcgismaps.data.StatisticType {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticType.Minimum>;
					public static INSTANCE: com.arcgismaps.data.StatisticType.Minimum;
				}
				export class StandardDeviation extends com.arcgismaps.data.StatisticType {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticType.StandardDeviation>;
					public static INSTANCE: com.arcgismaps.data.StatisticType.StandardDeviation;
				}
				export class Sum extends com.arcgismaps.data.StatisticType {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticType.Sum>;
					public static INSTANCE: com.arcgismaps.data.StatisticType.Sum;
				}
				export class Variance extends com.arcgismaps.data.StatisticType {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticType.Variance>;
					public static INSTANCE: com.arcgismaps.data.StatisticType.Variance;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class StatisticsQueryParameters {
				public static class: java.lang.Class<com.arcgismaps.data.StatisticsQueryParameters>;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public constructor(param0: com.arcgismaps.internal.jni.CoreStatisticsQueryParameters);
				public getGroupByFieldNames(): java.util.List<string>;
				public getTimeExtent(): com.arcgismaps.mapping.TimeExtent;
				public getWhereClause(): string;
				public getStatisticDefinitions(): java.util.List<com.arcgismaps.data.StatisticDefinition>;
				public setTimeExtent(param0: com.arcgismaps.mapping.TimeExtent): void;
				public getSpatialRelationship(): com.arcgismaps.data.SpatialRelationship;
				public setSpatialRelationship(param0: com.arcgismaps.data.SpatialRelationship): void;
				public setGeometry(param0: com.arcgismaps.geometry.Geometry): void;
				public setWhereClause(param0: string): void;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.data.StatisticDefinition>);
				public getCoreStatisticsQueryParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStatisticsQueryParameters;
				public getOrderByFields(): java.util.List<com.arcgismaps.data.OrderBy>;
			}
			export module StatisticsQueryParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreStatisticsQueryParameters,com.arcgismaps.data.StatisticsQueryParameters> {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticsQueryParameters.Factory>;
					public static INSTANCE: com.arcgismaps.data.StatisticsQueryParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class StatisticsQueryResult extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.data.StatisticsQueryResult>;
				public getCoreStatisticsQueryResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStatisticsQueryResult;
				public iterator(): java.util.Iterator<com.arcgismaps.data.StatisticRecord>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreStatisticsQueryResult);
			}
			export module StatisticsQueryResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreStatisticsQueryResult,com.arcgismaps.data.StatisticsQueryResult> {
					public static class: java.lang.Class<com.arcgismaps.data.StatisticsQueryResult.Factory>;
					public static INSTANCE: com.arcgismaps.data.StatisticsQueryResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class TableDescription {
				public static class: java.lang.Class<com.arcgismaps.data.TableDescription>;
				public getFieldDescriptions(): java.util.List<com.arcgismaps.data.FieldDescription>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getHasM(): boolean;
				public getHasAttachments(): boolean;
				public getHasZ(): boolean;
				public setHasM(param0: boolean): void;
				public setSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
				public setTableName(param0: string): void;
				public constructor(param0: string);
				public setHasZ(param0: boolean): void;
				public getCoreTableDescription$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTableDescription;
				public getTableName(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTableDescription);
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public setHasAttachments(param0: boolean): void;
				public constructor(param0: string, param1: com.arcgismaps.geometry.SpatialReference, param2: com.arcgismaps.geometry.GeometryType);
				public setGeometryType(param0: com.arcgismaps.geometry.GeometryType): void;
			}
			export module TableDescription {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTableDescription,com.arcgismaps.data.TableDescription> {
					public static class: java.lang.Class<com.arcgismaps.data.TableDescription.Factory>;
					public static INSTANCE: com.arcgismaps.data.TableDescription.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class TransportationNetworkDataset extends com.arcgismaps.data.GeodatabaseDataset {
				public static class: java.lang.Class<com.arcgismaps.data.TransportationNetworkDataset>;
				public getAlias(): string;
				public getCoreTransportationNetworkDataset$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTransportationNetworkDataset;
				public getType(): com.arcgismaps.data.GeodatabaseDatasetType;
				public getName(): string;
				public getGeodatabase(): com.arcgismaps.data.Geodatabase;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTransportationNetworkDataset);
			}
			export module TransportationNetworkDataset {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTransportationNetworkDataset,com.arcgismaps.data.TransportationNetworkDataset> {
					public static class: java.lang.Class<com.arcgismaps.data.TransportationNetworkDataset.Factory>;
					public static INSTANCE: com.arcgismaps.data.TransportationNetworkDataset.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module data {
			export class WfsFeatureTable extends com.arcgismaps.data.FeatureTable {
				public static class: java.lang.Class<com.arcgismaps.data.WfsFeatureTable>;
				public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
				public constructor(param0: com.arcgismaps.mapping.layers.WfsLayerInfo);
				public getCoreWfsFeatureTable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWFSFeatureTable;
				public getLayerInfo(): com.arcgismaps.mapping.layers.WfsLayerInfo;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public setFilterAxisOrder(param0: com.arcgismaps.mapping.layers.OgcAxisOrder): void;
				public getFilterAxisOrder(): com.arcgismaps.mapping.layers.OgcAxisOrder;
				public getPreferredSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getUrl(): string;
				public getAxisOrder(): com.arcgismaps.mapping.layers.OgcAxisOrder;
				public "populateFromService-0E7RQCE"(param0: string, param1: boolean, param2: any): any;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreWFSFeatureTable, param1: boolean);
				public isPopupEnabled(): boolean;
				public setAxisOrder(param0: com.arcgismaps.mapping.layers.OgcAxisOrder): void;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
				public "populateFromService-BWLJW6A"(param0: com.arcgismaps.data.QueryParameters, param1: boolean, param2: java.lang.Iterable<string>, param3: any): any;
				public constructor(param0: string, param1: string);
				public setPopupEnabled(param0: boolean): void;
				public getFeatureRequestMode(): com.arcgismaps.data.FeatureRequestMode;
				public setFeatureRequestMode(param0: com.arcgismaps.data.FeatureRequestMode): void;
				public setPreferredSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
			}
			export module WfsFeatureTable {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreWFSFeatureTable,com.arcgismaps.data.WfsFeatureTable> {
					public static class: java.lang.Class<com.arcgismaps.data.WfsFeatureTable.Factory>;
					public static INSTANCE: com.arcgismaps.data.WfsFeatureTable.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export abstract class ArcGISAuthenticationException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException>;
			}
			export module ArcGISAuthenticationException {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.Companion>;
					public create$arcgis_maps_any_release(param0: com.arcgismaps.internal.jni.CoreError): com.arcgismaps.exceptions.ArcGISAuthenticationException;
				}
				export class CredentialCannotBeSharedException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.CredentialCannotBeSharedException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class ForbiddenException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.ForbiddenException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class InvalidApiKeyException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.InvalidApiKeyException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class InvalidCredentialException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.InvalidCredentialException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class InvalidTokenException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.InvalidTokenException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class OAuthException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.OAuthException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class SslRequiredException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.SslRequiredException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class TokenExpiredException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.TokenExpiredException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class TokenRequiredException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.TokenRequiredException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class UnableToDetermineTokenUrlException extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationException.UnableToDetermineTokenUrlException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class ArcGISAuthenticationExceptionImpl extends com.arcgismaps.exceptions.ArcGISAuthenticationException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISAuthenticationExceptionImpl>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export abstract class ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISException>;
				public getAdditionalMessage(): string;
				public getErrorCode(): number;
				public getMessage(): string;
			}
			export module ArcGISException {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISException.Companion>;
					public create$arcgis_maps_any_release(param0: number, param1: string, param2: string, param3: java.lang.Throwable): com.arcgismaps.exceptions.ArcGISException;
					public create$arcgis_maps_any_release(param0: com.arcgismaps.internal.jni.CoreError): com.arcgismaps.exceptions.ArcGISException;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class ArcGISExceptionImpl extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.ArcGISExceptionImpl>;
				public constructor(param0: number, param1: string, param2: string, param3: java.lang.Throwable);
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class ExpirationException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.ExpirationException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export abstract class FeatureFormValidationException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException>;
			}
			export module FeatureFormValidationException {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.Companion>;
					public create$arcgis_maps_any_release(param0: com.arcgismaps.internal.jni.CoreError): com.arcgismaps.exceptions.FeatureFormValidationException;
				}
				export module Companion {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.Companion.WhenMappings>;
					}
				}
				export class IncorrectValueTypeException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.IncorrectValueTypeException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class LessThanMinimumDateTimeException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.LessThanMinimumDateTimeException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class MaxCharConstraintException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.MaxCharConstraintException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class MaxDateTimeConstraintException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.MaxDateTimeConstraintException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class MaxNumericConstraintException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.MaxNumericConstraintException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class MinCharConstraintException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.MinCharConstraintException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class MinNumericConstraintException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.MinNumericConstraintException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class NullNotAllowedException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.NullNotAllowedException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class OutOfDomainException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.OutOfDomainException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class RequiredException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.RequiredException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
				export class UnknownFeatureFormException extends com.arcgismaps.exceptions.FeatureFormValidationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.FeatureFormValidationException.UnknownFeatureFormException>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreError);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class GeocodeException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.GeocodeException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class GeodatabaseException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.GeodatabaseException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class GeotriggerException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.GeotriggerException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class JsonException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.JsonException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class LicensingException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.LicensingException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class MappingException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.MappingException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class MotionSensorException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.MotionSensorException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class NetworkAnalystException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.NetworkAnalystException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export abstract class NetworkAuthenticationException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.NetworkAuthenticationException>;
				public getResponseCode(): number;
			}
			export module NetworkAuthenticationException {
				export class ForbiddenException extends com.arcgismaps.exceptions.NetworkAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.NetworkAuthenticationException.ForbiddenException>;
					public constructor(param0: string, param1: java.lang.Throwable);
				}
				export class UnauthorizedException extends com.arcgismaps.exceptions.NetworkAuthenticationException {
					public static class: java.lang.Class<com.arcgismaps.exceptions.NetworkAuthenticationException.UnauthorizedException>;
					public constructor(param0: string, param1: java.lang.Throwable);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class ObjectAlreadyOwnedException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.ObjectAlreadyOwnedException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class OperationCancelledException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.OperationCancelledException>;
				public constructor(param0: string);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class ServiceException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.ServiceException>;
				public constructor(param0: java.lang.Integer, param1: string, param2: java.lang.Throwable);
				public getCode(): java.lang.Integer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class SymbolDictionaryException extends com.arcgismaps.exceptions.ArcGISException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.SymbolDictionaryException>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreError);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module exceptions {
			export class WebSocketException {
				public static class: java.lang.Class<com.arcgismaps.exceptions.WebSocketException>;
				public constructor(param0: string, param1: number);
				public getCode(): number;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class AngularUnit extends com.arcgismaps.geometry.MeasurementUnit {
				public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnit>;
				public constructor(param0: com.arcgismaps.geometry.AngularUnitId);
				public fromRadians(param0: number): number;
				public getCoreAngularUnit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAngularUnit;
				public constructor(param0: com.arcgismaps.internal.jni.CoreAngularUnit);
				public toRadians(param0: number): number;
				public convertTo(param0: com.arcgismaps.geometry.AngularUnit, param1: number): number;
				public getAngularUnitId(): com.arcgismaps.geometry.AngularUnitId;
				public convertFrom(param0: com.arcgismaps.geometry.AngularUnit, param1: number): number;
			}
			export module AngularUnit {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnit.Companion>;
					public getDegrees(): com.arcgismaps.geometry.AngularUnit;
					public getRadians(): com.arcgismaps.geometry.AngularUnit;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreAngularUnit,com.arcgismaps.geometry.AngularUnit> {
					public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnit.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.AngularUnit.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class AngularUnitId {
				public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnitId>;
				public getCoreAngularUnitId$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAngularUnitId;
			}
			export module AngularUnitId {
				export class Degrees extends com.arcgismaps.geometry.AngularUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnitId.Degrees>;
					public static INSTANCE: com.arcgismaps.geometry.AngularUnitId.Degrees;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnitId.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.AngularUnitId.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAngularUnitId): com.arcgismaps.geometry.AngularUnitId;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnitId.Factory.WhenMappings>;
					}
				}
				export class Grads extends com.arcgismaps.geometry.AngularUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnitId.Grads>;
					public static INSTANCE: com.arcgismaps.geometry.AngularUnitId.Grads;
				}
				export class Minutes extends com.arcgismaps.geometry.AngularUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnitId.Minutes>;
					public static INSTANCE: com.arcgismaps.geometry.AngularUnitId.Minutes;
				}
				export class Other extends com.arcgismaps.geometry.AngularUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnitId.Other>;
					public static INSTANCE: com.arcgismaps.geometry.AngularUnitId.Other;
				}
				export class Radians extends com.arcgismaps.geometry.AngularUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnitId.Radians>;
					public static INSTANCE: com.arcgismaps.geometry.AngularUnitId.Radians;
				}
				export class Seconds extends com.arcgismaps.geometry.AngularUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AngularUnitId.Seconds>;
					public static INSTANCE: com.arcgismaps.geometry.AngularUnitId.Seconds;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class AreaUnit extends com.arcgismaps.geometry.MeasurementUnit {
				public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnit>;
				public convertTo(param0: com.arcgismaps.geometry.AreaUnit, param1: number): number;
				public constructor(param0: com.arcgismaps.geometry.AreaUnitId);
				public constructor(param0: com.arcgismaps.geometry.LinearUnit);
				public convertFrom(param0: com.arcgismaps.geometry.AreaUnit, param1: number): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreAreaUnit);
				public toSquareMeters(param0: number): number;
				public getCoreAreaUnit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAreaUnit;
				public fromSquareMeters(param0: number): number;
				public getAreaUnitId(): com.arcgismaps.geometry.AreaUnitId;
			}
			export module AreaUnit {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnit.Companion>;
					public getSquareFeet(): com.arcgismaps.geometry.AreaUnit;
					public getSquareKilometers(): com.arcgismaps.geometry.AreaUnit;
					public getSquareMeters(): com.arcgismaps.geometry.AreaUnit;
					public getSquareMiles(): com.arcgismaps.geometry.AreaUnit;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreAreaUnit,com.arcgismaps.geometry.AreaUnit> {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnit.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnit.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class AreaUnitId {
				public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId>;
				public getCoreAreaUnitId$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAreaUnitId;
			}
			export module AreaUnitId {
				export class Acres extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.Acres>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.Acres;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAreaUnitId): com.arcgismaps.geometry.AreaUnitId;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.Factory.WhenMappings>;
					}
				}
				export class Hectares extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.Hectares>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.Hectares;
				}
				export class Other extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.Other>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.Other;
				}
				export class SquareCentimeters extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.SquareCentimeters>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.SquareCentimeters;
				}
				export class SquareDecimeters extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.SquareDecimeters>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.SquareDecimeters;
				}
				export class SquareFeet extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.SquareFeet>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.SquareFeet;
				}
				export class SquareKilometers extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.SquareKilometers>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.SquareKilometers;
				}
				export class SquareMeters extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.SquareMeters>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.SquareMeters;
				}
				export class SquareMiles extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.SquareMiles>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.SquareMiles;
				}
				export class SquareMillimeters extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.SquareMillimeters>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.SquareMillimeters;
				}
				export class SquareYards extends com.arcgismaps.geometry.AreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.AreaUnitId.SquareYards>;
					public static INSTANCE: com.arcgismaps.geometry.AreaUnitId.SquareYards;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class CoordinateFormatter {
				public static class: java.lang.Class<com.arcgismaps.geometry.CoordinateFormatter>;
				public static INSTANCE: com.arcgismaps.geometry.CoordinateFormatter;
				public toLatitudeLongitudeOrNull(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.LatitudeLongitudeFormat, param2: number): string;
				public toUtmOrNull(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.UtmConversionMode, param2: boolean): string;
				public fromGarsOrNull(param0: string, param1: com.arcgismaps.geometry.SpatialReference, param2: com.arcgismaps.geometry.GarsConversionMode): com.arcgismaps.geometry.Point;
				public fromUsngOrNull(param0: string, param1: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.Point;
				public toMgrsOrNull(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.MgrsConversionMode, param2: number, param3: boolean): string;
				public fromMgrsOrNull(param0: string, param1: com.arcgismaps.geometry.SpatialReference, param2: com.arcgismaps.geometry.MgrsConversionMode): com.arcgismaps.geometry.Point;
				public fromUtmOrNull(param0: string, param1: com.arcgismaps.geometry.SpatialReference, param2: com.arcgismaps.geometry.UtmConversionMode): com.arcgismaps.geometry.Point;
				public toGeoRefOrNull(param0: com.arcgismaps.geometry.Point, param1: number): string;
				public fromGeoRefOrNull(param0: string, param1: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.Point;
				public fromLatitudeLongitudeOrNull(param0: string, param1: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.Point;
				public toGarsOrNull(param0: com.arcgismaps.geometry.Point): string;
				public toUsngOrNull(param0: com.arcgismaps.geometry.Point, param1: number, param2: boolean): string;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class CubicBezierSegment extends com.arcgismaps.geometry.Segment {
				public static class: java.lang.Class<com.arcgismaps.geometry.CubicBezierSegment>;
				public getCoreCubicBezierSegment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCubicBezierSegment;
				public constructor(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.Point, param2: com.arcgismaps.geometry.Point, param3: com.arcgismaps.geometry.Point, param4: com.arcgismaps.geometry.SpatialReference);
				public getControlPoint1(): com.arcgismaps.geometry.Point;
				public constructor(param0: com.arcgismaps.internal.jni.CoreCubicBezierSegment);
				public getControlPoint2(): com.arcgismaps.geometry.Point;
			}
			export module CubicBezierSegment {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreCubicBezierSegment,com.arcgismaps.geometry.CubicBezierSegment> {
					public static class: java.lang.Class<com.arcgismaps.geometry.CubicBezierSegment.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.CubicBezierSegment.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class DatumTransformation {
				public static class: java.lang.Class<com.arcgismaps.geometry.DatumTransformation>;
				public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getCoreDatumTransformation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDatumTransformation;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.geometry.DatumTransformationType;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getName(): string;
				public getInverseOrNull(): com.arcgismaps.geometry.DatumTransformation;
				public getInputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public isMissingProjectionEngineFiles(): boolean;
			}
			export module DatumTransformation {
				export class Factory extends com.arcgismaps.geometry.DatumTransformationFactory {
					public static class: java.lang.Class<com.arcgismaps.geometry.DatumTransformation.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.DatumTransformation.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class DatumTransformationFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreDatumTransformation,com.arcgismaps.geometry.DatumTransformation> {
				public static class: java.lang.Class<com.arcgismaps.geometry.DatumTransformationFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDatumTransformation): com.arcgismaps.geometry.DatumTransformation;
				public constructor();
			}
			export module DatumTransformationFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geometry.DatumTransformationFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class DatumTransformationType {
				public static class: java.lang.Class<com.arcgismaps.geometry.DatumTransformationType>;
				public getCoreDatumTransformationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDatumTransformationType;
			}
			export module DatumTransformationType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.DatumTransformationType.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.DatumTransformationType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDatumTransformationType): com.arcgismaps.geometry.DatumTransformationType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.DatumTransformationType.Factory.WhenMappings>;
					}
				}
				export class GeographicTransformation extends com.arcgismaps.geometry.DatumTransformationType {
					public static class: java.lang.Class<com.arcgismaps.geometry.DatumTransformationType.GeographicTransformation>;
					public static INSTANCE: com.arcgismaps.geometry.DatumTransformationType.GeographicTransformation;
				}
				export class HorizontalVerticalTransformation extends com.arcgismaps.geometry.DatumTransformationType {
					public static class: java.lang.Class<com.arcgismaps.geometry.DatumTransformationType.HorizontalVerticalTransformation>;
					public static INSTANCE: com.arcgismaps.geometry.DatumTransformationType.HorizontalVerticalTransformation;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class Distance {
				public static class: java.lang.Class<com.arcgismaps.geometry.Distance>;
				public getUnit(): com.arcgismaps.geometry.LinearUnit;
				public constructor(param0: com.arcgismaps.internal.jni.CoreDistance);
				public getValue(): number;
				public getCoreDistance$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDistance;
			}
			export module Distance {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDistance,com.arcgismaps.geometry.Distance> {
					public static class: java.lang.Class<com.arcgismaps.geometry.Distance.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Distance.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class EllipticArcSegment extends com.arcgismaps.geometry.Segment {
				public static class: java.lang.Class<com.arcgismaps.geometry.EllipticArcSegment>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreEllipticArcSegment);
				public getSemiMinorAxis(): number;
				public getCenterPoint(): com.arcgismaps.geometry.Point;
				public getEndAngle(): number;
				public getRotationAngle(): number;
				public isCircular(): boolean;
				public constructor(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.Point, param2: number, param3: boolean, param4: boolean, param5: number, param6: number, param7: com.arcgismaps.geometry.SpatialReference);
				public getCentralAngle(): number;
				public getSemiMajorAxis(): number;
				public isCounterClockwise(): boolean;
				public getCoreEllipticArcSegment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEllipticArcSegment;
				public constructor(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.arcgismaps.geometry.SpatialReference);
				public getStartAngle(): number;
				public getMinorMajorRatio(): number;
			}
			export module EllipticArcSegment {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.EllipticArcSegment.Companion>;
					public createCircularEllipticArc(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.Point, param2: com.arcgismaps.geometry.Point, param3: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.EllipticArcSegment;
					public createCircularEllipticArc(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number, param4: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.EllipticArcSegment;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreEllipticArcSegment,com.arcgismaps.geometry.EllipticArcSegment> {
					public static class: java.lang.Class<com.arcgismaps.geometry.EllipticArcSegment.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.EllipticArcSegment.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class Envelope extends com.arcgismaps.geometry.Geometry {
				public static class: java.lang.Class<com.arcgismaps.geometry.Envelope>;
				public getZMin(): java.lang.Double;
				public getHeight(): number;
				public getXMin(): number;
				public getZMax(): java.lang.Double;
				public getCenter(): com.arcgismaps.geometry.Point;
				public getYMax(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreEnvelope);
				public getXMax(): number;
				public getMMax(): java.lang.Double;
				public getCoreEnvelope$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEnvelope;
				public toString(): string;
				public toJson(): string;
				public getMMin(): java.lang.Double;
				public constructor(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.Point);
				public constructor(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: java.lang.Double);
				public getWidth(): number;
				public getDepth(): java.lang.Double;
				public getYMin(): number;
				public constructor(param0: number, param1: number, param2: number, param3: number, param4: java.lang.Double, param5: java.lang.Double, param6: java.lang.Double, param7: java.lang.Double, param8: com.arcgismaps.geometry.SpatialReference);
			}
			export module Envelope {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.Envelope.Companion>;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreEnvelope,com.arcgismaps.geometry.Envelope> {
					public static class: java.lang.Class<com.arcgismaps.geometry.Envelope.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Envelope.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class EnvelopeBuilder extends com.arcgismaps.geometry.GeometryBuilder<com.arcgismaps.geometry.Envelope> {
				public static class: java.lang.Class<com.arcgismaps.geometry.EnvelopeBuilder>;
				public getHeight(): number;
				public getXMin(): number;
				public getCenter(): com.arcgismaps.geometry.Point;
				public getYMax(): number;
				public centerAt(param0: com.arcgismaps.geometry.Point): void;
				public constructor(param0: com.arcgismaps.geometry.Envelope, param1: any);
				public setYMax(param0: number): void;
				public getMMax(): number;
				public union(param0: com.arcgismaps.geometry.Point): void;
				public getZMin(): number;
				public expand(param0: com.arcgismaps.geometry.Point, param1: number): void;
				public setZ(param0: number, param1: number): void;
				public setMMax(param0: number): void;
				public setMMin(param0: number): void;
				public getDepth(): java.lang.Double;
				public normalize$arcgis_maps_any_release(): void;
				public normalize$arcgis_maps_any_release(param0: com.arcgismaps.geometry.Envelope): void;
				public constructor(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: java.lang.Double, param4: any);
				public union(param0: com.arcgismaps.geometry.Envelope): void;
				public setXMax(param0: number): void;
				public offsetBy(param0: number, param1: number): void;
				public getZMax(): number;
				public setXMin(param0: number): void;
				public toGeometry(): com.arcgismaps.geometry.Envelope;
				public constructor(param0: com.arcgismaps.internal.jni.CoreEnvelopeBuilder);
				public changeAspectRatio(param0: number, param1: number): void;
				public toGeometry(): any;
				public setM(param0: number, param1: number): void;
				public getMMin(): number;
				public getXMax(): number;
				public setXy(param0: number, param1: number, param2: number, param3: number): void;
				public adjustForWrapAround$arcgis_maps_any_release(): com.arcgismaps.geometry.Envelope;
				public setYMin(param0: number): void;
				public constructor(param0: com.arcgismaps.geometry.SpatialReference, param1: any);
				public getCoreEnvelopeBuilder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEnvelopeBuilder;
				public replaceGeometry(param0: com.arcgismaps.geometry.Envelope): void;
				public getWidth(): number;
				public getYMin(): number;
				public setZMin(param0: number): void;
				public expand(param0: number): void;
				public setZMax(param0: number): void;
				public replaceGeometry(param0: any): void;
			}
			export module EnvelopeBuilder {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreEnvelopeBuilder,com.arcgismaps.geometry.EnvelopeBuilder> {
					public static class: java.lang.Class<com.arcgismaps.geometry.EnvelopeBuilder.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.EnvelopeBuilder.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class GarsConversionMode {
				public static class: java.lang.Class<com.arcgismaps.geometry.GarsConversionMode>;
				public getCoreGarsConversionMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGARSConversionMode;
			}
			export module GarsConversionMode {
				export class Center extends com.arcgismaps.geometry.GarsConversionMode {
					public static class: java.lang.Class<com.arcgismaps.geometry.GarsConversionMode.Center>;
					public static INSTANCE: com.arcgismaps.geometry.GarsConversionMode.Center;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.GarsConversionMode.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GarsConversionMode.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGARSConversionMode): com.arcgismaps.geometry.GarsConversionMode;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.GarsConversionMode.Factory.WhenMappings>;
					}
				}
				export class LowerLeft extends com.arcgismaps.geometry.GarsConversionMode {
					public static class: java.lang.Class<com.arcgismaps.geometry.GarsConversionMode.LowerLeft>;
					public static INSTANCE: com.arcgismaps.geometry.GarsConversionMode.LowerLeft;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeodesicEllipseParameters {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeodesicEllipseParameters>;
				public constructor(param0: number, param1: com.arcgismaps.geometry.AngularUnit, param2: com.arcgismaps.geometry.Point, param3: com.arcgismaps.geometry.LinearUnit, param4: number, param5: number, param6: com.arcgismaps.geometry.GeometryType, param7: number, param8: number);
				public setAxisDirection(param0: number): void;
				public getCenter(): com.arcgismaps.geometry.Point;
				public setSemiAxis2Length(param0: number): void;
				public getLinearUnit(): com.arcgismaps.geometry.LinearUnit;
				public getMaxSegmentLength(): number;
				public setMaxSegmentLength(param0: number): void;
				public getSemiAxis2Length(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeodesicEllipseParameters);
				public getCoreGeodesicEllipseParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodesicEllipseParameters;
				public setAngularUnit(param0: com.arcgismaps.geometry.AngularUnit): void;
				public getAngularUnit(): com.arcgismaps.geometry.AngularUnit;
				public setSemiAxis1Length(param0: number): void;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public setCenter(param0: com.arcgismaps.geometry.Point): void;
				public getMaxPointCount(): number;
				public getSemiAxis1Length(): number;
				public setLinearUnit(param0: com.arcgismaps.geometry.LinearUnit): void;
				public setMaxPointCount(param0: number): void;
				public getAxisDirection(): number;
			}
			export module GeodesicEllipseParameters {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodesicEllipseParameters.Companion>;
					public createForPolyline(): com.arcgismaps.geometry.GeodesicEllipseParameters;
					public createForPolygon(): com.arcgismaps.geometry.GeodesicEllipseParameters;
					public createForMultipoint(): com.arcgismaps.geometry.GeodesicEllipseParameters;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeodesicEllipseParameters,com.arcgismaps.geometry.GeodesicEllipseParameters> {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodesicEllipseParameters.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeodesicEllipseParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeodesicSectorParameters {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeodesicSectorParameters>;
				public constructor(param0: number, param1: com.arcgismaps.geometry.AngularUnit, param2: com.arcgismaps.geometry.Point, param3: com.arcgismaps.geometry.LinearUnit, param4: number, param5: number, param6: com.arcgismaps.geometry.GeometryType, param7: number, param8: number, param9: number, param10: number);
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeodesicSectorParameters);
				public setAxisDirection(param0: number): void;
				public getCenter(): com.arcgismaps.geometry.Point;
				public setSemiAxis2Length(param0: number): void;
				public setStartDirection(param0: number): void;
				public getLinearUnit(): com.arcgismaps.geometry.LinearUnit;
				public getSectorAngle(): number;
				public getMaxSegmentLength(): number;
				public setMaxSegmentLength(param0: number): void;
				public getSemiAxis2Length(): number;
				public setAngularUnit(param0: com.arcgismaps.geometry.AngularUnit): void;
				public getCoreGeodesicSectorParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodesicSectorParameters;
				public getAngularUnit(): com.arcgismaps.geometry.AngularUnit;
				public setSemiAxis1Length(param0: number): void;
				public getStartDirection(): number;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public setCenter(param0: com.arcgismaps.geometry.Point): void;
				public getMaxPointCount(): number;
				public setSectorAngle(param0: number): void;
				public getSemiAxis1Length(): number;
				public setLinearUnit(param0: com.arcgismaps.geometry.LinearUnit): void;
				public setMaxPointCount(param0: number): void;
				public getAxisDirection(): number;
			}
			export module GeodesicSectorParameters {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodesicSectorParameters.Companion>;
					public createForPolygon(): com.arcgismaps.geometry.GeodesicSectorParameters;
					public createForPolyline(): com.arcgismaps.geometry.GeodesicSectorParameters;
					public createForMultipoint(): com.arcgismaps.geometry.GeodesicSectorParameters;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeodesicSectorParameters,com.arcgismaps.geometry.GeodesicSectorParameters> {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodesicSectorParameters.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeodesicSectorParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class GeodeticCurveType {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticCurveType>;
				public getCoreGeodeticCurveType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodeticCurveType;
			}
			export module GeodeticCurveType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticCurveType.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeodeticCurveType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeodeticCurveType): com.arcgismaps.geometry.GeodeticCurveType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticCurveType.Factory.WhenMappings>;
					}
				}
				export class Geodesic extends com.arcgismaps.geometry.GeodeticCurveType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticCurveType.Geodesic>;
					public static INSTANCE: com.arcgismaps.geometry.GeodeticCurveType.Geodesic;
				}
				export class GreatElliptic extends com.arcgismaps.geometry.GeodeticCurveType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticCurveType.GreatElliptic>;
					public static INSTANCE: com.arcgismaps.geometry.GeodeticCurveType.GreatElliptic;
				}
				export class Loxodrome extends com.arcgismaps.geometry.GeodeticCurveType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticCurveType.Loxodrome>;
					public static INSTANCE: com.arcgismaps.geometry.GeodeticCurveType.Loxodrome;
				}
				export class NormalSection extends com.arcgismaps.geometry.GeodeticCurveType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticCurveType.NormalSection>;
					public static INSTANCE: com.arcgismaps.geometry.GeodeticCurveType.NormalSection;
				}
				export class ShapePreserving extends com.arcgismaps.geometry.GeodeticCurveType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticCurveType.ShapePreserving>;
					public static INSTANCE: com.arcgismaps.geometry.GeodeticCurveType.ShapePreserving;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeodeticDistanceResult {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticDistanceResult>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeodeticDistanceResult);
				public getAzimuth2(): number;
				public getAzimuthUnit(): com.arcgismaps.geometry.AngularUnit;
				public getCoreGeodeticDistanceResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodeticDistanceResult;
				public getAzimuth1(): number;
				public getDistance(): number;
				public getDistanceUnit(): com.arcgismaps.geometry.LinearUnit;
			}
			export module GeodeticDistanceResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeodeticDistanceResult,com.arcgismaps.geometry.GeodeticDistanceResult> {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeodeticDistanceResult.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeodeticDistanceResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeographicTransformation extends com.arcgismaps.geometry.DatumTransformation {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeographicTransformation>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeographicTransformation);
				public getCoreGeographicTransformation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeographicTransformation;
				public constructor(param0: com.arcgismaps.geometry.GeographicTransformationStep);
				public getSteps(): java.util.List<com.arcgismaps.geometry.GeographicTransformationStep>;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.GeographicTransformationStep>);
			}
			export module GeographicTransformation {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeographicTransformation,com.arcgismaps.geometry.GeographicTransformation> {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeographicTransformation.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeographicTransformation.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeographicTransformationStep {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeographicTransformationStep>;
				public getCoreGeographicTransformationStep$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeographicTransformationStep;
				public isInverse(): boolean;
				public getProjectionEngineFilenames(): java.util.List<string>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor(param0: number);
				public getWkText(): string;
				public constructor(param0: string);
				public getInverseOrNull(): com.arcgismaps.geometry.GeographicTransformationStep;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeographicTransformationStep);
				public isMissingProjectionEngineFiles(): boolean;
				public getWkid(): number;
			}
			export module GeographicTransformationStep {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeographicTransformationStep,com.arcgismaps.geometry.GeographicTransformationStep> {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeographicTransformationStep.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeographicTransformationStep.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class Geometry extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.geometry.Geometry>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getHasM(): boolean;
				public getHasZ(): boolean;
				public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public getExtent(): com.arcgismaps.geometry.Envelope;
				public toJson(): string;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.geometry.GeometryType;
				public equals(param0: com.arcgismaps.geometry.Geometry, param1: number): boolean;
				public getHasCurves(): boolean;
				public set_spatialReference$arcgis_maps_any_release(param0: com.arcgismaps.geometry.SpatialReference): void;
				public get_spatialReference$arcgis_maps_any_release(): com.arcgismaps.geometry.SpatialReference;
				public hashCode(): number;
				public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public equals(param0: any): boolean;
				public getCoreGeometry$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometry;
				public isEmpty(): boolean;
				public getDimension(): com.arcgismaps.geometry.GeometryDimension;
			}
			export module Geometry {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.Geometry.Companion>;
					public fromJsonOrNull(param0: string, param1: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.Geometry;
					public fromJsonOrNull(param0: string): com.arcgismaps.geometry.Geometry;
				}
				export class Factory extends com.arcgismaps.geometry.GeometryFactory {
					public static class: java.lang.Class<com.arcgismaps.geometry.Geometry.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Geometry.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class GeometryBuilder<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilder<any>>;
				public getCoreGeometryBuilder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryBuilder;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getHasM(): boolean;
				public toGeometry(): T;
				public getHasZ(): boolean;
				public getExtent(): com.arcgismaps.geometry.Envelope;
				public getHasCurves(): boolean;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.geometry.GeometryBuilderType;
				public set_spatialReference$arcgis_maps_any_release(param0: com.arcgismaps.geometry.SpatialReference): void;
				public get_spatialReference$arcgis_maps_any_release(): com.arcgismaps.geometry.SpatialReference;
				public isSketchValid(): boolean;
				public replaceGeometry(param0: T): void;
				public isEmpty(): boolean;
			}
			export module GeometryBuilder {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilder.Companion>;
					public builder(param0: com.arcgismaps.geometry.GeometryType, param1: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.GeometryBuilder<any>;
					public builder(param0: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.GeometryBuilder<any>;
				}
				export class Factory extends com.arcgismaps.geometry.GeometryBuilderFactory {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilder.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryBuilder.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeometryBuilderFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeometryBuilder,com.arcgismaps.geometry.GeometryBuilder<any>> {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryBuilder): com.arcgismaps.geometry.GeometryBuilder<any>;
				public constructor();
			}
			export module GeometryBuilderFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class GeometryBuilderType {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderType>;
				public getCoreGeometryBuilderType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryBuilderType;
			}
			export module GeometryBuilderType {
				export class EnvelopeBuilder extends com.arcgismaps.geometry.GeometryBuilderType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderType.EnvelopeBuilder>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryBuilderType.EnvelopeBuilder;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderType.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryBuilderType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryBuilderType): com.arcgismaps.geometry.GeometryBuilderType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderType.Factory.WhenMappings>;
					}
				}
				export class MultipointBuilder extends com.arcgismaps.geometry.GeometryBuilderType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderType.MultipointBuilder>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryBuilderType.MultipointBuilder;
				}
				export class PointBuilder extends com.arcgismaps.geometry.GeometryBuilderType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderType.PointBuilder>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryBuilderType.PointBuilder;
				}
				export class PolygonBuilder extends com.arcgismaps.geometry.GeometryBuilderType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderType.PolygonBuilder>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryBuilderType.PolygonBuilder;
				}
				export class PolylineBuilder extends com.arcgismaps.geometry.GeometryBuilderType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderType.PolylineBuilder>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryBuilderType.PolylineBuilder;
				}
				export class Unknown extends com.arcgismaps.geometry.GeometryBuilderType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryBuilderType.Unknown>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryBuilderType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class GeometryDimension {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryDimension>;
				public getCoreGeometryDimension$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryDimension;
			}
			export module GeometryDimension {
				export class Area extends com.arcgismaps.geometry.GeometryDimension {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryDimension.Area>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryDimension.Area;
				}
				export class Curve extends com.arcgismaps.geometry.GeometryDimension {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryDimension.Curve>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryDimension.Curve;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryDimension.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryDimension.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryDimension): com.arcgismaps.geometry.GeometryDimension;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.GeometryDimension.Factory.WhenMappings>;
					}
				}
				export class Point extends com.arcgismaps.geometry.GeometryDimension {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryDimension.Point>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryDimension.Point;
				}
				export class Unknown extends com.arcgismaps.geometry.GeometryDimension {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryDimension.Unknown>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryDimension.Unknown;
				}
				export class Volume extends com.arcgismaps.geometry.GeometryDimension {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryDimension.Volume>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryDimension.Volume;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeometryEngine {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryEngine>;
				public static INSTANCE: com.arcgismaps.geometry.GeometryEngine;
				public rotate(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: com.arcgismaps.geometry.Point): com.arcgismaps.geometry.Geometry;
				public tryCut(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Polyline): java.util.List<com.arcgismaps.geometry.Geometry>;
				public boundaryOrNull(param0: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.Geometry;
				public areaGeodetic(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.AreaUnit, param2: com.arcgismaps.geometry.GeodeticCurveType): number;
				public tryAutoComplete(param0: java.lang.Iterable<com.arcgismaps.geometry.Polygon>, param1: java.lang.Iterable<com.arcgismaps.geometry.Polyline>): java.util.List<com.arcgismaps.geometry.Polygon>;
				public labelPointOrNull(param0: com.arcgismaps.geometry.Polygon): com.arcgismaps.geometry.Point;
				public move(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: number): com.arcgismaps.geometry.Geometry;
				public bufferOrNull(param0: com.arcgismaps.geometry.Geometry, param1: number): com.arcgismaps.geometry.Polygon;
				public intersectionOrNull(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.Geometry;
				public scale(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: number, param3: com.arcgismaps.geometry.Point): com.arcgismaps.geometry.Geometry;
				public bufferGeodeticOrNull(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: com.arcgismaps.geometry.LinearUnit, param3: number, param4: com.arcgismaps.geometry.GeodeticCurveType): com.arcgismaps.geometry.Polygon;
				public nearestCoordinateGeodetic(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Point, param2: number, param3: com.arcgismaps.geometry.LinearUnit): com.arcgismaps.geometry.ProximityResult;
				public equals(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): boolean;
				public lengthGeodetic(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.LinearUnit, param2: com.arcgismaps.geometry.GeodeticCurveType): number;
				public relate(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry, param2: string): boolean;
				public union(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.Geometry;
				public isSimple(param0: com.arcgismaps.geometry.Geometry): boolean;
				public distanceGeodeticOrNull(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.Point, param2: com.arcgismaps.geometry.LinearUnit, param3: com.arcgismaps.geometry.AngularUnit, param4: com.arcgismaps.geometry.GeodeticCurveType): com.arcgismaps.geometry.GeodeticDistanceResult;
				public tryBufferGeodetic(param0: java.lang.Iterable<any>, param1: java.lang.Iterable<java.lang.Double>, param2: com.arcgismaps.geometry.LinearUnit, param3: number, param4: com.arcgismaps.geometry.GeodeticCurveType, param5: boolean): java.util.List<com.arcgismaps.geometry.Polygon>;
				public tryIntersections(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): java.util.List<com.arcgismaps.geometry.Geometry>;
				public length(param0: com.arcgismaps.geometry.Geometry): number;
				public tryConvexHull(param0: java.lang.Iterable<any>, param1: boolean): java.util.List<com.arcgismaps.geometry.Geometry>;
				public crosses(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): boolean;
				public area(param0: com.arcgismaps.geometry.Geometry): number;
				public extend(param0: com.arcgismaps.geometry.Polyline, param1: com.arcgismaps.geometry.Polyline, param2: java.util.Set<any>): com.arcgismaps.geometry.Polyline;
				public overlaps(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): boolean;
				public combineExtentsOrNull(param0: java.lang.Iterable<any>): com.arcgismaps.geometry.Envelope;
				public sectorGeodesicOrNull(param0: com.arcgismaps.geometry.GeodesicSectorParameters): com.arcgismaps.geometry.Geometry;
				public within(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): boolean;
				public differenceOrNull(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.Geometry;
				public convexHullOrNull(param0: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.Geometry;
				public createWithM(param0: com.arcgismaps.geometry.Geometry, param1: java.lang.Double): com.arcgismaps.geometry.Geometry;
				public contains(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): boolean;
				public nearestCoordinate(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Point): com.arcgismaps.geometry.ProximityResult;
				public fractionAlong(param0: com.arcgismaps.geometry.Polyline, param1: com.arcgismaps.geometry.Point, param2: number): number;
				public ellipseGeodesicOrNull(param0: com.arcgismaps.geometry.GeodesicEllipseParameters): com.arcgismaps.geometry.Geometry;
				public reshape(param0: com.arcgismaps.geometry.Multipart, param1: com.arcgismaps.geometry.Polyline): com.arcgismaps.geometry.Multipart;
				public unionOrNull(param0: java.lang.Iterable<any>): com.arcgismaps.geometry.Geometry;
				public symmetricDifferenceOrNull(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.Geometry;
				public createWithZ(param0: com.arcgismaps.geometry.Geometry, param1: java.lang.Double): com.arcgismaps.geometry.Geometry;
				public createPointAlongOrNull(param0: com.arcgismaps.geometry.Polyline, param1: number): com.arcgismaps.geometry.Point;
				public disjoint(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): boolean;
				public offsetOrNull(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: com.arcgismaps.geometry.GeometryOffsetType, param3: number, param4: number): com.arcgismaps.geometry.Geometry;
				public touches(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): boolean;
				public distanceOrNull(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): java.lang.Double;
				public clipOrNull(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Envelope): com.arcgismaps.geometry.Geometry;
				public combineExtentsOrNull(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.Envelope;
				public projectOrNull(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.SpatialReference, param2: com.arcgismaps.geometry.DatumTransformation): com.arcgismaps.geometry.Geometry;
				public projectOrNull(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.Geometry;
				public densifyGeodeticOrNull(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: com.arcgismaps.geometry.LinearUnit, param3: com.arcgismaps.geometry.GeodeticCurveType): com.arcgismaps.geometry.Geometry;
				public createWithZAndM(param0: com.arcgismaps.geometry.Geometry, param1: java.lang.Double, param2: java.lang.Double): com.arcgismaps.geometry.Geometry;
				public generalizeOrNull(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: boolean): com.arcgismaps.geometry.Geometry;
				public normalizeCentralMeridian(param0: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.Geometry;
				public simplifyOrNull(param0: com.arcgismaps.geometry.Geometry): com.arcgismaps.geometry.Geometry;
				public densifyOrNull(param0: com.arcgismaps.geometry.Geometry, param1: number): com.arcgismaps.geometry.Geometry;
				public tryBuffer(param0: java.lang.Iterable<any>, param1: java.lang.Iterable<java.lang.Double>, param2: boolean): java.util.List<com.arcgismaps.geometry.Polygon>;
				public tryMoveGeodetic(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>, param1: number, param2: com.arcgismaps.geometry.LinearUnit, param3: number, param4: com.arcgismaps.geometry.AngularUnit, param5: com.arcgismaps.geometry.GeodeticCurveType): java.util.List<com.arcgismaps.geometry.Point>;
				public intersects(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Geometry): boolean;
				public nearestVertex(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.geometry.Point): com.arcgismaps.geometry.ProximityResult;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class GeometryExtendOptions {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryExtendOptions>;
				public getCoreGeometryExtendOptions$arcgis_maps_any_release(): number;
				public mask$arcgis_maps_any_release(param0: number): boolean;
			}
			export module GeometryExtendOptions {
				export class Default extends com.arcgismaps.geometry.GeometryExtendOptions {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryExtendOptions.Default>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryExtendOptions.Default;
				}
				export class DoNotExtendFromEndPoint extends com.arcgismaps.geometry.GeometryExtendOptions {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryExtendOptions.DoNotExtendFromEndPoint>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryExtendOptions.DoNotExtendFromEndPoint;
				}
				export class DoNotExtendFromStartPoint extends com.arcgismaps.geometry.GeometryExtendOptions {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryExtendOptions.DoNotExtendFromStartPoint>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryExtendOptions.DoNotExtendFromStartPoint;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryExtendOptions.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryExtendOptions.Factory;
					public convertToPublic(param0: number): java.util.Set<com.arcgismaps.geometry.GeometryExtendOptions>;
				}
				export class KeepEndAttributes extends com.arcgismaps.geometry.GeometryExtendOptions {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryExtendOptions.KeepEndAttributes>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryExtendOptions.KeepEndAttributes;
				}
				export class NoEndAttributes extends com.arcgismaps.geometry.GeometryExtendOptions {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryExtendOptions.NoEndAttributes>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryExtendOptions.NoEndAttributes;
				}
				export class RelocateEnds extends com.arcgismaps.geometry.GeometryExtendOptions {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryExtendOptions.RelocateEnds>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryExtendOptions.RelocateEnds;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeometryFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeometry,com.arcgismaps.geometry.Geometry> {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.geometry.Geometry;
				public constructor();
			}
			export module GeometryFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class GeometryOffsetType {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryOffsetType>;
				public getCoreGeometryOffsetType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryOffsetType;
			}
			export module GeometryOffsetType {
				export class Bevelled extends com.arcgismaps.geometry.GeometryOffsetType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryOffsetType.Bevelled>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryOffsetType.Bevelled;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryOffsetType.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryOffsetType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryOffsetType): com.arcgismaps.geometry.GeometryOffsetType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.GeometryOffsetType.Factory.WhenMappings>;
					}
				}
				export class Mitered extends com.arcgismaps.geometry.GeometryOffsetType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryOffsetType.Mitered>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryOffsetType.Mitered;
				}
				export class Rounded extends com.arcgismaps.geometry.GeometryOffsetType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryOffsetType.Rounded>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryOffsetType.Rounded;
				}
				export class Squared extends com.arcgismaps.geometry.GeometryOffsetType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryOffsetType.Squared>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryOffsetType.Squared;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeometrySerializer extends kotlinx.serialization.KSerializer<com.arcgismaps.geometry.Geometry> {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometrySerializer>;
				public static INSTANCE: com.arcgismaps.geometry.GeometrySerializer;
				public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.geometry.Geometry;
				public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
				public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.geometry.Geometry): void;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class GeometryTransformingSerializer extends kotlinx.serialization.json.JsonTransformingSerializer<com.arcgismaps.geometry.Geometry> {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryTransformingSerializer>;
				public static INSTANCE: com.arcgismaps.geometry.GeometryTransformingSerializer;
				public transformDeserialize(param0: kotlinx.serialization.json.JsonElement): kotlinx.serialization.json.JsonElement;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class GeometryType {
				public static class: java.lang.Class<com.arcgismaps.geometry.GeometryType>;
				public getCoreGeometryType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryType;
			}
			export module GeometryType {
				export class Envelope extends com.arcgismaps.geometry.GeometryType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryType.Envelope>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryType.Envelope;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryType.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryType): com.arcgismaps.geometry.GeometryType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.GeometryType.Factory.WhenMappings>;
					}
				}
				export class Multipoint extends com.arcgismaps.geometry.GeometryType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryType.Multipoint>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryType.Multipoint;
				}
				export class Point extends com.arcgismaps.geometry.GeometryType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryType.Point>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryType.Point;
				}
				export class Polygon extends com.arcgismaps.geometry.GeometryType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryType.Polygon>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryType.Polygon;
				}
				export class Polyline extends com.arcgismaps.geometry.GeometryType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryType.Polyline>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryType.Polyline;
				}
				export class Unknown extends com.arcgismaps.geometry.GeometryType {
					public static class: java.lang.Class<com.arcgismaps.geometry.GeometryType.Unknown>;
					public static INSTANCE: com.arcgismaps.geometry.GeometryType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class HorizontalVerticalTransformation extends com.arcgismaps.geometry.DatumTransformation {
				public static class: java.lang.Class<com.arcgismaps.geometry.HorizontalVerticalTransformation>;
				public getCoreHorizontalVerticalTransformation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformation;
				public constructor(param0: com.arcgismaps.geometry.HorizontalVerticalTransformationStep);
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.HorizontalVerticalTransformationStep>);
				public constructor(param0: com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformation);
				public getSteps(): java.util.List<com.arcgismaps.geometry.HorizontalVerticalTransformationStep>;
			}
			export module HorizontalVerticalTransformation {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformation,com.arcgismaps.geometry.HorizontalVerticalTransformation> {
					public static class: java.lang.Class<com.arcgismaps.geometry.HorizontalVerticalTransformation.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.HorizontalVerticalTransformation.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class HorizontalVerticalTransformationStep {
				public static class: java.lang.Class<com.arcgismaps.geometry.HorizontalVerticalTransformationStep>;
				public isInverse(): boolean;
				public getCoreHorizontalVerticalTransformationStep$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep;
				public getProjectionEngineFilenames(): java.util.List<string>;
				public hashCode(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep);
				public equals(param0: any): boolean;
				public getInverseOrNull(): com.arcgismaps.geometry.HorizontalVerticalTransformationStep;
				public constructor(param0: number);
				public getWkText(): string;
				public constructor(param0: string);
				public isMissingProjectionEngineFiles(): boolean;
				public getWkid(): number;
			}
			export module HorizontalVerticalTransformationStep {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep,com.arcgismaps.geometry.HorizontalVerticalTransformationStep> {
					public static class: java.lang.Class<com.arcgismaps.geometry.HorizontalVerticalTransformationStep.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.HorizontalVerticalTransformationStep.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class LatitudeLongitudeFormat {
				public static class: java.lang.Class<com.arcgismaps.geometry.LatitudeLongitudeFormat>;
				public getCoreLatitudeLongitudeFormat$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat;
			}
			export module LatitudeLongitudeFormat {
				export class DecimalDegrees extends com.arcgismaps.geometry.LatitudeLongitudeFormat {
					public static class: java.lang.Class<com.arcgismaps.geometry.LatitudeLongitudeFormat.DecimalDegrees>;
					public static INSTANCE: com.arcgismaps.geometry.LatitudeLongitudeFormat.DecimalDegrees;
				}
				export class DegreesDecimalMinutes extends com.arcgismaps.geometry.LatitudeLongitudeFormat {
					public static class: java.lang.Class<com.arcgismaps.geometry.LatitudeLongitudeFormat.DegreesDecimalMinutes>;
					public static INSTANCE: com.arcgismaps.geometry.LatitudeLongitudeFormat.DegreesDecimalMinutes;
				}
				export class DegreesMinutesSeconds extends com.arcgismaps.geometry.LatitudeLongitudeFormat {
					public static class: java.lang.Class<com.arcgismaps.geometry.LatitudeLongitudeFormat.DegreesMinutesSeconds>;
					public static INSTANCE: com.arcgismaps.geometry.LatitudeLongitudeFormat.DegreesMinutesSeconds;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.LatitudeLongitudeFormat.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.LatitudeLongitudeFormat.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat): com.arcgismaps.geometry.LatitudeLongitudeFormat;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.LatitudeLongitudeFormat.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class LineSegment extends com.arcgismaps.geometry.Segment {
				public static class: java.lang.Class<com.arcgismaps.geometry.LineSegment>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLineSegment);
				public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.arcgismaps.geometry.SpatialReference);
				public constructor(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.Point, param2: com.arcgismaps.geometry.SpatialReference);
				public constructor(param0: number, param1: number, param2: number, param3: number, param4: com.arcgismaps.geometry.SpatialReference);
				public getCoreLineSegment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLineSegment;
			}
			export module LineSegment {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.LineSegment.Companion>;
					public createLineAtAngleFromStartPoint(param0: com.arcgismaps.geometry.Point, param1: number, param2: number): com.arcgismaps.geometry.LineSegment;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLineSegment,com.arcgismaps.geometry.LineSegment> {
					public static class: java.lang.Class<com.arcgismaps.geometry.LineSegment.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.LineSegment.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class LinearUnit extends com.arcgismaps.geometry.MeasurementUnit {
				public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnit>;
				public getCoreLinearUnit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLinearUnit;
				public fromMeters(param0: number): number;
				public toMeters(param0: number): number;
				public constructor(param0: com.arcgismaps.geometry.AreaUnit);
				public constructor(param0: com.arcgismaps.internal.jni.CoreLinearUnit);
				public convertTo(param0: com.arcgismaps.geometry.LinearUnit, param1: number): number;
				public constructor(param0: com.arcgismaps.geometry.LinearUnitId);
				public convertFrom(param0: com.arcgismaps.geometry.LinearUnit, param1: number): number;
				public getLinearUnitId(): com.arcgismaps.geometry.LinearUnitId;
			}
			export module LinearUnit {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnit.Companion>;
					public getKilometers(): com.arcgismaps.geometry.LinearUnit;
					public getFeet(): com.arcgismaps.geometry.LinearUnit;
					public getMeters(): com.arcgismaps.geometry.LinearUnit;
					public getMiles(): com.arcgismaps.geometry.LinearUnit;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLinearUnit,com.arcgismaps.geometry.LinearUnit> {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnit.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnit.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class LinearUnitId {
				public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId>;
				public getCoreLinearUnitId$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLinearUnitId;
			}
			export module LinearUnitId {
				export class Centimeters extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Centimeters>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Centimeters;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLinearUnitId): com.arcgismaps.geometry.LinearUnitId;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Factory.WhenMappings>;
					}
				}
				export class Feet extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Feet>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Feet;
				}
				export class Inches extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Inches>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Inches;
				}
				export class Kilometers extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Kilometers>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Kilometers;
				}
				export class Meters extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Meters>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Meters;
				}
				export class Miles extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Miles>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Miles;
				}
				export class Millimeters extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Millimeters>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Millimeters;
				}
				export class NauticalMiles extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.NauticalMiles>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.NauticalMiles;
				}
				export class Other extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Other>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Other;
				}
				export class Yards extends com.arcgismaps.geometry.LinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.geometry.LinearUnitId.Yards>;
					public static INSTANCE: com.arcgismaps.geometry.LinearUnitId.Yards;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class MeasurementUnit {
				public static class: java.lang.Class<com.arcgismaps.geometry.MeasurementUnit>;
				public getAbbreviation(): string;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.geometry.UnitType;
				public getName(): string;
				public getCoreUnit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnit;
				public getDisplayName(): string;
				public getPluralDisplayName(): string;
				public getWkid(): number;
			}
			export module MeasurementUnit {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.MeasurementUnit.Companion>;
					public fromWkidOrNull(param0: number): com.arcgismaps.geometry.MeasurementUnit;
					public fromWkid(param0: number): com.arcgismaps.geometry.MeasurementUnit;
				}
				export class Factory extends com.arcgismaps.geometry.MeasurementUnitFactory {
					public static class: java.lang.Class<com.arcgismaps.geometry.MeasurementUnit.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.MeasurementUnit.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class MeasurementUnitFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreUnit,com.arcgismaps.geometry.MeasurementUnit> {
				public static class: java.lang.Class<com.arcgismaps.geometry.MeasurementUnitFactory>;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUnit): com.arcgismaps.geometry.MeasurementUnit;
				public convertToPublic(param0: any): any;
				public constructor();
			}
			export module MeasurementUnitFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geometry.MeasurementUnitFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class MgrsConversionMode {
				public static class: java.lang.Class<com.arcgismaps.geometry.MgrsConversionMode>;
				public getCoreMgrsConversionMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMGRSConversionMode;
			}
			export module MgrsConversionMode {
				export class Automatic extends com.arcgismaps.geometry.MgrsConversionMode {
					public static class: java.lang.Class<com.arcgismaps.geometry.MgrsConversionMode.Automatic>;
					public static INSTANCE: com.arcgismaps.geometry.MgrsConversionMode.Automatic;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.MgrsConversionMode.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.MgrsConversionMode.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMGRSConversionMode): com.arcgismaps.geometry.MgrsConversionMode;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.MgrsConversionMode.Factory.WhenMappings>;
					}
				}
				export class New180InZone01 extends com.arcgismaps.geometry.MgrsConversionMode {
					public static class: java.lang.Class<com.arcgismaps.geometry.MgrsConversionMode.New180InZone01>;
					public static INSTANCE: com.arcgismaps.geometry.MgrsConversionMode.New180InZone01;
				}
				export class New180InZone60 extends com.arcgismaps.geometry.MgrsConversionMode {
					public static class: java.lang.Class<com.arcgismaps.geometry.MgrsConversionMode.New180InZone60>;
					public static INSTANCE: com.arcgismaps.geometry.MgrsConversionMode.New180InZone60;
				}
				export class Old180InZone01 extends com.arcgismaps.geometry.MgrsConversionMode {
					public static class: java.lang.Class<com.arcgismaps.geometry.MgrsConversionMode.Old180InZone01>;
					public static INSTANCE: com.arcgismaps.geometry.MgrsConversionMode.Old180InZone01;
				}
				export class Old180InZone60 extends com.arcgismaps.geometry.MgrsConversionMode {
					public static class: java.lang.Class<com.arcgismaps.geometry.MgrsConversionMode.Old180InZone60>;
					public static INSTANCE: com.arcgismaps.geometry.MgrsConversionMode.Old180InZone60;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class Multipart extends com.arcgismaps.geometry.Geometry {
				public static class: java.lang.Class<com.arcgismaps.geometry.Multipart>;
				public getCoreMultipart$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMultipart;
				public getParts(): com.arcgismaps.geometry.PartCollection;
				public toJson(): string;
			}
			export module Multipart {
				export class Factory extends com.arcgismaps.geometry.MultipartFactory {
					public static class: java.lang.Class<com.arcgismaps.geometry.Multipart.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Multipart.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class MultipartBuilder<T>  extends com.arcgismaps.geometry.GeometryBuilder<any> {
				public static class: java.lang.Class<com.arcgismaps.geometry.MultipartBuilder<any>>;
				public getParts(): com.arcgismaps.geometry.MutablePartCollection;
				public getCoreMultipartBuilder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMultipartBuilder;
				public addPoint(param0: number, param1: number): number;
				public addPoint(param0: number, param1: number, param2: number): number;
				public addPoint(param0: com.arcgismaps.geometry.Point): number;
				public setParts(param0: com.arcgismaps.geometry.MutablePartCollection): void;
			}
			export module MultipartBuilder {
				export class Factory extends com.arcgismaps.geometry.MultipartBuilderFactory {
					public static class: java.lang.Class<com.arcgismaps.geometry.MultipartBuilder.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.MultipartBuilder.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class MultipartBuilderFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreMultipartBuilder,com.arcgismaps.geometry.MultipartBuilder<any>> {
				public static class: java.lang.Class<com.arcgismaps.geometry.MultipartBuilderFactory>;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMultipartBuilder): com.arcgismaps.geometry.MultipartBuilder<any>;
				public convertToPublic(param0: any): any;
				public constructor();
			}
			export module MultipartBuilderFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geometry.MultipartBuilderFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class MultipartFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreMultipart,com.arcgismaps.geometry.Multipart> {
				public static class: java.lang.Class<com.arcgismaps.geometry.MultipartFactory>;
				public convertToPublic(param0: any): any;
				public constructor();
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMultipart): com.arcgismaps.geometry.Multipart;
			}
			export module MultipartFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geometry.MultipartFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class Multipoint extends com.arcgismaps.geometry.Geometry {
				public static class: java.lang.Class<com.arcgismaps.geometry.Multipoint>;
				public getCoreMultipoint$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMultipoint;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMultipoint);
				public toJson(): string;
				public getPoints(): com.arcgismaps.geometry.PointCollection;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>, param1: com.arcgismaps.geometry.SpatialReference);
			}
			export module Multipoint {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMultipoint,com.arcgismaps.geometry.Multipoint> {
					public static class: java.lang.Class<com.arcgismaps.geometry.Multipoint.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Multipoint.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class MultipointBuilder extends com.arcgismaps.geometry.GeometryBuilder<com.arcgismaps.geometry.Multipoint> {
				public static class: java.lang.Class<com.arcgismaps.geometry.MultipointBuilder>;
				public toGeometry(): any;
				public constructor(param0: com.arcgismaps.geometry.Multipoint, param1: any);
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>, param1: com.arcgismaps.geometry.SpatialReference, param2: any);
				public constructor(param0: com.arcgismaps.internal.jni.CoreMultipointBuilder);
				public replaceGeometry(param0: com.arcgismaps.geometry.Multipoint): void;
				public constructor(param0: com.arcgismaps.geometry.SpatialReference, param1: any);
				public toGeometry(): com.arcgismaps.geometry.Multipoint;
				public getCoreMultipointBuilder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMultipointBuilder;
				public getPoints(): com.arcgismaps.geometry.MutablePointCollection;
				public setPoints(param0: com.arcgismaps.geometry.MutablePointCollection): void;
				public replaceGeometry(param0: any): void;
			}
			export module MultipointBuilder {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMultipointBuilder,com.arcgismaps.geometry.MultipointBuilder> {
					public static class: java.lang.Class<com.arcgismaps.geometry.MultipointBuilder.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.MultipointBuilder.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class MutablePart extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.geometry.MutablePart>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMutablePart);
				public indexOf(param0: any): number;
				public remove(param0: number): com.arcgismaps.geometry.Segment;
				public addPoints(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>): void;
				public constructor(param0: com.arcgismaps.geometry.SpatialReference);
				public getHasCurves(): boolean;
				public getEndPointIndexFromSegmentIndex(param0: number): number;
				public removePoint(param0: number): com.arcgismaps.geometry.Point;
				public getSize(): number;
				public addPoint(param0: number, param1: number, param2: number, param3: number): void;
				public getPoints(): java.lang.Iterable<com.arcgismaps.geometry.Point>;
				public addPoint(param0: number, param1: com.arcgismaps.geometry.Point): void;
				public clear(): void;
				public addPoint(param0: number, param1: number, param2: number): void;
				public getStartPointIndexFromSegmentIndex(param0: number): number;
				public setPoint(param0: number, param1: com.arcgismaps.geometry.Point): com.arcgismaps.geometry.Point;
				public isEmpty(): boolean;
				public lastIndexOf(param0: any): number;
				public getStartPoint(): com.arcgismaps.geometry.Point;
				public get(param0: number): com.arcgismaps.geometry.Segment;
				public remove(param0: any): boolean;
				public getPointCount(): number;
				public getSegmentIndexFromEndPointIndex(param0: number): number;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public remove(param0: com.arcgismaps.geometry.Segment): boolean;
				public contains(param0: any): boolean;
				public removeAt(param0: number): com.arcgismaps.geometry.Segment;
				public addPoint(param0: number, param1: number): void;
				public contains(param0: com.arcgismaps.geometry.Segment): boolean;
				public indexOf(param0: com.arcgismaps.geometry.Segment): number;
				public getSegmentCount(): number;
				public lastIndexOf(param0: com.arcgismaps.geometry.Segment): number;
				public add(param0: number, param1: com.arcgismaps.geometry.Segment): void;
				public getPoint(param0: number): com.arcgismaps.geometry.Point;
				public getCoreMutablePart$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMutablePart;
				public addPoints(param0: number, param1: java.lang.Iterable<com.arcgismaps.geometry.Point>): void;
				public getEndPoint(): com.arcgismaps.geometry.Point;
				public addPoint(param0: com.arcgismaps.geometry.Point): void;
				public getSegmentIndexFromStartPointIndex(param0: number): number;
				public set(param0: number, param1: com.arcgismaps.geometry.Segment): com.arcgismaps.geometry.Segment;
			}
			export module MutablePart {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.MutablePart.Companion>;
					public createWithSegments(param0: java.lang.Iterable<any>, param1: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.MutablePart;
					public createWithPoints(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>, param1: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.geometry.MutablePart;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMutablePart,com.arcgismaps.geometry.MutablePart> {
					public static class: java.lang.Class<com.arcgismaps.geometry.MutablePart.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.MutablePart.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class MutablePartCollection extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.geometry.MutablePartCollection>;
				public indexOf(param0: any): number;
				public contains(param0: com.arcgismaps.geometry.MutablePart): boolean;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public contains(param0: any): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMutablePartCollection);
				public constructor(param0: com.arcgismaps.geometry.SpatialReference);
				public remove(param0: com.arcgismaps.geometry.MutablePart): boolean;
				public lastIndexOf(param0: com.arcgismaps.geometry.MutablePart): number;
				public indexOf(param0: com.arcgismaps.geometry.MutablePart): number;
				public removeAt(param0: number): com.arcgismaps.geometry.MutablePart;
				public getSize(): number;
				public clear(): void;
				public add(param0: number, param1: com.arcgismaps.geometry.MutablePart): void;
				public set(param0: number, param1: com.arcgismaps.geometry.MutablePart): com.arcgismaps.geometry.MutablePart;
				public isEmpty(): boolean;
				public remove(param0: number): com.arcgismaps.geometry.MutablePart;
				public lastIndexOf(param0: any): number;
				public get(param0: number): com.arcgismaps.geometry.MutablePart;
				public getCoreMutablePartCollection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMutablePartCollection;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.MutablePart>, param1: com.arcgismaps.geometry.SpatialReference);
				public remove(param0: any): boolean;
			}
			export module MutablePartCollection {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMutablePartCollection,com.arcgismaps.geometry.MutablePartCollection> {
					public static class: java.lang.Class<com.arcgismaps.geometry.MutablePartCollection.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.MutablePartCollection.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class MutablePointCollection extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.geometry.MutablePointCollection>;
				public indexOf(param0: any): number;
				public add(param0: number, param1: number, param2: number, param3: number): void;
				public constructor(param0: com.arcgismaps.geometry.SpatialReference);
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>, param1: com.arcgismaps.geometry.SpatialReference);
				public add(param0: com.arcgismaps.geometry.PointCollection): void;
				public add(param0: number, param1: number): void;
				public set(param0: number, param1: com.arcgismaps.geometry.Point): com.arcgismaps.geometry.Point;
				public get(param0: number): com.arcgismaps.geometry.Point;
				public getSize(): number;
				public clear(): void;
				public isEmpty(): boolean;
				public lastIndexOf(param0: any): number;
				public add(param0: com.arcgismaps.geometry.MutablePointCollection): void;
				public remove(param0: any): boolean;
				public add(param0: number, param1: number, param2: number): void;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public add(param0: number, param1: com.arcgismaps.geometry.Point): void;
				public contains(param0: any): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMutablePointCollection);
				public lastIndexOf(param0: com.arcgismaps.geometry.Point): number;
				public removeAt(param0: number): com.arcgismaps.geometry.Point;
				public indexOf(param0: com.arcgismaps.geometry.Point): number;
				public remove(param0: number): com.arcgismaps.geometry.Point;
				public remove(param0: com.arcgismaps.geometry.Point): boolean;
				public contains(param0: com.arcgismaps.geometry.Point): boolean;
				public getCoreMutablePointCollection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMutablePointCollection;
			}
			export module MutablePointCollection {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMutablePointCollection,com.arcgismaps.geometry.MutablePointCollection> {
					public static class: java.lang.Class<com.arcgismaps.geometry.MutablePointCollection.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.MutablePointCollection.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class Part extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.geometry.Part>;
				public getPointCount(): number;
				public getSegmentIndexFromEndPointIndex(param0: number): number;
				public indexOf(param0: any): number;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public contains(param0: any): boolean;
				public contains(param0: com.arcgismaps.geometry.Segment): boolean;
				public indexOf(param0: com.arcgismaps.geometry.Segment): number;
				public getSegmentCount(): number;
				public lastIndexOf(param0: com.arcgismaps.geometry.Segment): number;
				public getHasCurves(): boolean;
				public getCoreImmutablePart$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreImmutablePart;
				public constructor(param0: com.arcgismaps.internal.jni.CoreImmutablePart);
				public getEndPointIndexFromSegmentIndex(param0: number): number;
				public getSize(): number;
				public getPoint(param0: number): com.arcgismaps.geometry.Point;
				public getPoints(): java.lang.Iterable<com.arcgismaps.geometry.Point>;
				public getStartPointIndexFromSegmentIndex(param0: number): number;
				public isEmpty(): boolean;
				public lastIndexOf(param0: any): number;
				public getStartPoint(): com.arcgismaps.geometry.Point;
				public get(param0: number): com.arcgismaps.geometry.Segment;
				public getEndPoint(): com.arcgismaps.geometry.Point;
				public getSegmentIndexFromStartPointIndex(param0: number): number;
			}
			export module Part {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreImmutablePart,com.arcgismaps.geometry.Part> {
					public static class: java.lang.Class<com.arcgismaps.geometry.Part.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Part.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class PartCollection extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.geometry.PartCollection>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreImmutablePartCollection);
				public indexOf(param0: any): number;
				public getCoreImmutablePartCollection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreImmutablePartCollection;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getSize(): number;
				public contains(param0: any): boolean;
				public lastIndexOf(param0: com.arcgismaps.geometry.Part): number;
				public isEmpty(): boolean;
				public contains(param0: com.arcgismaps.geometry.Part): boolean;
				public lastIndexOf(param0: any): number;
				public indexOf(param0: com.arcgismaps.geometry.Part): number;
				public get(param0: number): com.arcgismaps.geometry.Part;
			}
			export module PartCollection {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreImmutablePartCollection,com.arcgismaps.geometry.PartCollection> {
					public static class: java.lang.Class<com.arcgismaps.geometry.PartCollection.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.PartCollection.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class Point extends com.arcgismaps.geometry.Geometry {
				public static class: java.lang.Class<com.arcgismaps.geometry.Point>;
				public getZ(): java.lang.Double;
				public constructor(param0: number, param1: number, param2: number, param3: com.arcgismaps.geometry.SpatialReference);
				public constructor(param0: number, param1: number, param2: com.arcgismaps.geometry.SpatialReference);
				public getX(): number;
				public getY(): number;
				public constructor(param0: number, param1: number, param2: java.lang.Double, param3: java.lang.Double, param4: com.arcgismaps.geometry.SpatialReference);
				public getM(): java.lang.Double;
				public constructor(param0: com.arcgismaps.internal.jni.CorePoint);
				public toJson(): string;
				public getCorePoint$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePoint;
			}
			export module Point {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.Point.Companion>;
					public createCorePoint$arcgis_maps_any_release(param0: number, param1: number, param2: java.lang.Double, param3: java.lang.Double, param4: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.internal.jni.CorePoint;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePoint,com.arcgismaps.geometry.Point> {
					public static class: java.lang.Class<com.arcgismaps.geometry.Point.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Point.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class PointBuilder extends com.arcgismaps.geometry.GeometryBuilder<com.arcgismaps.geometry.Point> {
				public static class: java.lang.Class<com.arcgismaps.geometry.PointBuilder>;
				public setZ(param0: number): void;
				public toGeometry(): any;
				public setY(param0: number): void;
				public getY(): number;
				public toGeometry(): com.arcgismaps.geometry.Point;
				public constructor(param0: com.arcgismaps.geometry.SpatialReference, param1: any);
				public getCorePointBuilder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePointBuilder;
				public constructor(param0: com.arcgismaps.internal.jni.CorePointBuilder);
				public getX(): number;
				public setXy(param0: number, param1: number): void;
				public getZ(): number;
				public constructor(param0: com.arcgismaps.geometry.Point, param1: any);
				public normalize$arcgis_maps_any_release(): void;
				public normalize$arcgis_maps_any_release(param0: com.arcgismaps.geometry.Envelope): void;
				public replaceGeometry(param0: com.arcgismaps.geometry.Point): void;
				public setX(param0: number): void;
				public normalize$arcgis_maps_any_release(param0: com.arcgismaps.geometry.Point): void;
				public offsetBy(param0: number, param1: number): void;
				public setM(param0: number): void;
				public getM(): number;
				public replaceGeometry(param0: any): void;
			}
			export module PointBuilder {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePointBuilder,com.arcgismaps.geometry.PointBuilder> {
					public static class: java.lang.Class<com.arcgismaps.geometry.PointBuilder.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.PointBuilder.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class PointCollection extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.geometry.PointCollection>;
				public getCoreImmutablePointCollection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreImmutablePointCollection;
				public indexOf(param0: com.arcgismaps.geometry.Point): number;
				public indexOf(param0: any): number;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public get(param0: number): com.arcgismaps.geometry.Point;
				public getSize(): number;
				public contains(param0: any): boolean;
				public lastIndexOf(param0: com.arcgismaps.geometry.Point): number;
				public isEmpty(): boolean;
				public lastIndexOf(param0: any): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreImmutablePointCollection);
				public contains(param0: com.arcgismaps.geometry.Point): boolean;
			}
			export module PointCollection {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreImmutablePointCollection,com.arcgismaps.geometry.PointCollection> {
					public static class: java.lang.Class<com.arcgismaps.geometry.PointCollection.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.PointCollection.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class Polygon extends com.arcgismaps.geometry.Multipart {
				public static class: java.lang.Class<com.arcgismaps.geometry.Polygon>;
				public getCorePolygon$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePolygon;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.MutablePart>);
				public toJson(): string;
				public toPolyline(): com.arcgismaps.geometry.Polyline;
				public constructor(param0: com.arcgismaps.internal.jni.CorePolygon);
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>, param1: com.arcgismaps.geometry.SpatialReference);
			}
			export module Polygon {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePolygon,com.arcgismaps.geometry.Polygon> {
					public static class: java.lang.Class<com.arcgismaps.geometry.Polygon.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Polygon.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class PolygonBuilder extends com.arcgismaps.geometry.MultipartBuilder<com.arcgismaps.geometry.Polygon> {
				public static class: java.lang.Class<com.arcgismaps.geometry.PolygonBuilder>;
				public toGeometry(): any;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>, param1: com.arcgismaps.geometry.SpatialReference, param2: any);
				public replaceGeometry(param0: com.arcgismaps.geometry.Polygon): void;
				public toGeometry(): com.arcgismaps.geometry.Polygon;
				public constructor(param0: com.arcgismaps.geometry.Polygon, param1: any);
				public constructor(param0: com.arcgismaps.geometry.SpatialReference, param1: any);
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.MutablePart>, param1: any);
				public constructor(param0: com.arcgismaps.internal.jni.CorePolygonBuilder);
				public toPolyline(): com.arcgismaps.geometry.Polyline;
				public getCorePolygonBuilder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePolygonBuilder;
				public replaceGeometry(param0: any): void;
			}
			export module PolygonBuilder {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePolygonBuilder,com.arcgismaps.geometry.PolygonBuilder> {
					public static class: java.lang.Class<com.arcgismaps.geometry.PolygonBuilder.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.PolygonBuilder.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class Polyline extends com.arcgismaps.geometry.Multipart {
				public static class: java.lang.Class<com.arcgismaps.geometry.Polyline>;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.MutablePart>);
				public getCorePolyline$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePolyline;
				public toJson(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CorePolyline);
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>, param1: com.arcgismaps.geometry.SpatialReference);
			}
			export module Polyline {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePolyline,com.arcgismaps.geometry.Polyline> {
					public static class: java.lang.Class<com.arcgismaps.geometry.Polyline.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Polyline.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class PolylineBuilder extends com.arcgismaps.geometry.MultipartBuilder<com.arcgismaps.geometry.Polyline> {
				public static class: java.lang.Class<com.arcgismaps.geometry.PolylineBuilder>;
				public constructor(param0: com.arcgismaps.geometry.Polyline, param1: any);
				public toGeometry(): any;
				public getCorePolylineBuilder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePolylineBuilder;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.Point>, param1: com.arcgismaps.geometry.SpatialReference, param2: any);
				public constructor(param0: com.arcgismaps.geometry.SpatialReference, param1: any);
				public constructor(param0: com.arcgismaps.internal.jni.CorePolylineBuilder);
				public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.MutablePart>, param1: any);
				public replaceGeometry(param0: com.arcgismaps.geometry.Polyline): void;
				public toGeometry(): com.arcgismaps.geometry.Polyline;
				public replaceGeometry(param0: any): void;
			}
			export module PolylineBuilder {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePolylineBuilder,com.arcgismaps.geometry.PolylineBuilder> {
					public static class: java.lang.Class<com.arcgismaps.geometry.PolylineBuilder.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.PolylineBuilder.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class ProximityResult {
				public static class: java.lang.Class<com.arcgismaps.geometry.ProximityResult>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreProximityResult);
				public getCoreProximityResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreProximityResult;
				public getPointIndex(): number;
				public getDistance(): number;
				public getPartIndex(): number;
				public getCoordinate(): com.arcgismaps.geometry.Point;
			}
			export module ProximityResult {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.ProximityResult.Companion>;
					/** @deprecated */
					public getNpos(): number;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreProximityResult,com.arcgismaps.geometry.ProximityResult> {
					public static class: java.lang.Class<com.arcgismaps.geometry.ProximityResult.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.ProximityResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class Segment {
				public static class: java.lang.Class<com.arcgismaps.geometry.Segment>;
				public _endPoint: com.arcgismaps.geometry.Point;
				public _startPoint: com.arcgismaps.geometry.Point;
				public get_startPoint$arcgis_maps_any_release(): com.arcgismaps.geometry.Point;
				public get_endPoint$arcgis_maps_any_release(): com.arcgismaps.geometry.Point;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public isCurve(): boolean;
				public isClosed(): boolean;
				public set_startPoint$arcgis_maps_any_release(param0: com.arcgismaps.geometry.Point): void;
				public set_spatialReference$arcgis_maps_any_release(param0: com.arcgismaps.geometry.SpatialReference): void;
				public set_endPoint$arcgis_maps_any_release(param0: com.arcgismaps.geometry.Point): void;
				public get_spatialReference$arcgis_maps_any_release(): com.arcgismaps.geometry.SpatialReference;
				public hashCode(): number;
				public getCoreSegment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSegment;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.geometry.SegmentType;
				public equals(param0: any): boolean;
				public getStartPoint(): com.arcgismaps.geometry.Point;
				public getEndPoint(): com.arcgismaps.geometry.Point;
			}
			export module Segment {
				export class Factory extends com.arcgismaps.geometry.SegmentFactory {
					public static class: java.lang.Class<com.arcgismaps.geometry.Segment.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.Segment.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class SegmentFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreSegment,com.arcgismaps.geometry.Segment> {
				public static class: java.lang.Class<com.arcgismaps.geometry.SegmentFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSegment): com.arcgismaps.geometry.Segment;
				public constructor();
			}
			export module SegmentFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geometry.SegmentFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class SegmentType {
				public static class: java.lang.Class<com.arcgismaps.geometry.SegmentType>;
				public getCoreSegmentType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSegmentType;
			}
			export module SegmentType {
				export class CubicBezierSegment extends com.arcgismaps.geometry.SegmentType {
					public static class: java.lang.Class<com.arcgismaps.geometry.SegmentType.CubicBezierSegment>;
					public static INSTANCE: com.arcgismaps.geometry.SegmentType.CubicBezierSegment;
				}
				export class EllipticArcSegment extends com.arcgismaps.geometry.SegmentType {
					public static class: java.lang.Class<com.arcgismaps.geometry.SegmentType.EllipticArcSegment>;
					public static INSTANCE: com.arcgismaps.geometry.SegmentType.EllipticArcSegment;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.SegmentType.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.SegmentType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSegmentType): com.arcgismaps.geometry.SegmentType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.SegmentType.Factory.WhenMappings>;
					}
				}
				export class LineSegment extends com.arcgismaps.geometry.SegmentType {
					public static class: java.lang.Class<com.arcgismaps.geometry.SegmentType.LineSegment>;
					public static INSTANCE: com.arcgismaps.geometry.SegmentType.LineSegment;
				}
				export class Unknown extends com.arcgismaps.geometry.SegmentType {
					public static class: java.lang.Class<com.arcgismaps.geometry.SegmentType.Unknown>;
					public static INSTANCE: com.arcgismaps.geometry.SegmentType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class SpatialReference extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.geometry.SpatialReference>;
				public constructor(param0: number, param1: number);
				public getCoreSpatialReference$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSpatialReference;
				public isPannable(): boolean;
				public getVerticalUnit(): com.arcgismaps.geometry.LinearUnit;
				public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
				public getUnit(): com.arcgismaps.geometry.MeasurementUnit;
				public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public isProjected(): boolean;
				public getWkText(): string;
				public toJson(): string;
				public getConvergenceAngle(param0: com.arcgismaps.geometry.Point): number;
				public constructor(param0: string);
				public getVerticalWkid(): number;
				public hashCode(): number;
				public isGeographic(): boolean;
				public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public equals(param0: any): boolean;
				public constructor(param0: number);
				public getHasVertical(): boolean;
				public getBaseGeographic(): com.arcgismaps.geometry.SpatialReference;
				public getWkid(): number;
			}
			export module SpatialReference {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geometry.SpatialReference.Companion>;
					public wgs84(): com.arcgismaps.geometry.SpatialReference;
					public webMercator(): com.arcgismaps.geometry.SpatialReference;
					public fromJsonOrNull(param0: string): com.arcgismaps.geometry.SpatialReference;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSpatialReference,com.arcgismaps.geometry.SpatialReference> {
					public static class: java.lang.Class<com.arcgismaps.geometry.SpatialReference.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.SpatialReference.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export class TransformationCatalog {
				public static class: java.lang.Class<com.arcgismaps.geometry.TransformationCatalog>;
				public static INSTANCE: com.arcgismaps.geometry.TransformationCatalog;
				public getProjectionEngineDirectory(): string;
				public setProjectionEngineDirectory(param0: string): void;
				public getTransformationsBySuitability(param0: com.arcgismaps.geometry.SpatialReference, param1: com.arcgismaps.geometry.SpatialReference, param2: com.arcgismaps.geometry.Envelope, param3: boolean): java.util.List<com.arcgismaps.geometry.DatumTransformation>;
				public getTransformation(param0: com.arcgismaps.geometry.SpatialReference, param1: com.arcgismaps.geometry.SpatialReference, param2: com.arcgismaps.geometry.Envelope, param3: boolean): com.arcgismaps.geometry.DatumTransformation;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class UnitType {
				public static class: java.lang.Class<com.arcgismaps.geometry.UnitType>;
				public getCoreUnitType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnitType;
			}
			export module UnitType {
				export class AngularUnit extends com.arcgismaps.geometry.UnitType {
					public static class: java.lang.Class<com.arcgismaps.geometry.UnitType.AngularUnit>;
					public static INSTANCE: com.arcgismaps.geometry.UnitType.AngularUnit;
				}
				export class AreaUnit extends com.arcgismaps.geometry.UnitType {
					public static class: java.lang.Class<com.arcgismaps.geometry.UnitType.AreaUnit>;
					public static INSTANCE: com.arcgismaps.geometry.UnitType.AreaUnit;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.UnitType.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.UnitType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUnitType): com.arcgismaps.geometry.UnitType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.UnitType.Factory.WhenMappings>;
					}
				}
				export class LinearUnit extends com.arcgismaps.geometry.UnitType {
					public static class: java.lang.Class<com.arcgismaps.geometry.UnitType.LinearUnit>;
					public static INSTANCE: com.arcgismaps.geometry.UnitType.LinearUnit;
				}
				export class Unknown extends com.arcgismaps.geometry.UnitType {
					public static class: java.lang.Class<com.arcgismaps.geometry.UnitType.Unknown>;
					public static INSTANCE: com.arcgismaps.geometry.UnitType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geometry {
			export abstract class UtmConversionMode {
				public static class: java.lang.Class<com.arcgismaps.geometry.UtmConversionMode>;
				public getCoreUtmConversionMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUTMConversionMode;
			}
			export module UtmConversionMode {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geometry.UtmConversionMode.Factory>;
					public static INSTANCE: com.arcgismaps.geometry.UtmConversionMode.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUTMConversionMode): com.arcgismaps.geometry.UtmConversionMode;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geometry.UtmConversionMode.Factory.WhenMappings>;
					}
				}
				export class LatitudeBandIndicators extends com.arcgismaps.geometry.UtmConversionMode {
					public static class: java.lang.Class<com.arcgismaps.geometry.UtmConversionMode.LatitudeBandIndicators>;
					public static INSTANCE: com.arcgismaps.geometry.UtmConversionMode.LatitudeBandIndicators;
				}
				export class NorthSouthIndicators extends com.arcgismaps.geometry.UtmConversionMode {
					public static class: java.lang.Class<com.arcgismaps.geometry.UtmConversionMode.NorthSouthIndicators>;
					public static INSTANCE: com.arcgismaps.geometry.UtmConversionMode.NorthSouthIndicators;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class FeatureFenceParameters extends com.arcgismaps.geotriggers.FenceParameters {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FeatureFenceParameters>;
				public getAreaOfInterest(): com.arcgismaps.geometry.Geometry;
				public constructor(param0: com.arcgismaps.data.FeatureTable, param1: number);
				public setAreaOfInterest(param0: com.arcgismaps.geometry.Geometry): void;
				public getWhereClause(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureFenceParameters);
				public setWhereClause(param0: string): void;
				public getFeatureTable(): com.arcgismaps.data.FeatureTable;
				public getCoreFeatureFenceParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureFenceParameters;
			}
			export module FeatureFenceParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureFenceParameters,com.arcgismaps.geotriggers.FeatureFenceParameters> {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FeatureFenceParameters.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.FeatureFenceParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class FenceEnterExitSpatialRelationship {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship>;
				public getCoreFenceEnterExitSpatialRelationship$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship;
			}
			export module FenceEnterExitSpatialRelationship {
				export class EnterContainsAndExitDoesNotContain extends com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship.EnterContainsAndExitDoesNotContain>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship.EnterContainsAndExitDoesNotContain;
				}
				export class EnterContainsAndExitDoesNotIntersect extends com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship.EnterContainsAndExitDoesNotIntersect>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship.EnterContainsAndExitDoesNotIntersect;
				}
				export class EnterIntersectsAndExitDoesNotIntersect extends com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship.EnterIntersectsAndExitDoesNotIntersect>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship.EnterIntersectsAndExitDoesNotIntersect;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship): com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class FenceGeotrigger extends com.arcgismaps.geotriggers.Geotrigger {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceGeotrigger>;
				public getRuleType(): com.arcgismaps.geotriggers.FenceRuleType;
				public setFeedAccuracyMode(param0: com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode): void;
				public getEnterExitSpatialRelationship(): com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship;
				public getFeedAccuracyMode(): com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode;
				public getCoreFenceGeotrigger$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFenceGeotrigger;
				public setRuleType(param0: com.arcgismaps.geotriggers.FenceRuleType): void;
				public getFenceParameters(): com.arcgismaps.geotriggers.FenceParameters;
				public constructor(param0: com.arcgismaps.geotriggers.GeotriggerFeed, param1: com.arcgismaps.geotriggers.FenceRuleType, param2: com.arcgismaps.geotriggers.FenceParameters, param3: com.arcgismaps.arcade.ArcadeExpression, param4: string);
				public setEnterExitSpatialRelationship(param0: com.arcgismaps.geotriggers.FenceEnterExitSpatialRelationship): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFenceGeotrigger, param1: boolean);
			}
			export module FenceGeotrigger {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFenceGeotrigger,com.arcgismaps.geotriggers.FenceGeotrigger> {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceGeotrigger.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceGeotrigger.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class FenceGeotriggerFeedAccuracyMode {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode>;
				public getCoreFenceGeotriggerFeedAccuracyMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode;
			}
			export module FenceGeotriggerFeedAccuracyMode {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode): com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode.Factory.WhenMappings>;
					}
				}
				export class UseGeometry extends com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode.UseGeometry>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode.UseGeometry;
				}
				export class UseGeometryWithAccuracy extends com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode.UseGeometryWithAccuracy>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceGeotriggerFeedAccuracyMode.UseGeometryWithAccuracy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class FenceGeotriggerNotificationInfo extends com.arcgismaps.geotriggers.GeotriggerNotificationInfo {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceGeotriggerNotificationInfo>;
				public getCoreFenceGeotriggerNotificationInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFenceGeotriggerNotificationInfo;
				public getFenceId(): string;
				public getFenceGeoElement(): com.arcgismaps.mapping.GeoElement;
				public getFenceNotificationType(): com.arcgismaps.geotriggers.FenceNotificationType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFenceGeotriggerNotificationInfo);
				public getFenceGeometry(): com.arcgismaps.geometry.Geometry;
			}
			export module FenceGeotriggerNotificationInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFenceGeotriggerNotificationInfo,com.arcgismaps.geotriggers.FenceGeotriggerNotificationInfo> {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceGeotriggerNotificationInfo.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceGeotriggerNotificationInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class FenceNotificationType {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceNotificationType>;
				public getCoreFenceNotificationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFenceNotificationType;
			}
			export module FenceNotificationType {
				export class Entered extends com.arcgismaps.geotriggers.FenceNotificationType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceNotificationType.Entered>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceNotificationType.Entered;
				}
				export class Exited extends com.arcgismaps.geotriggers.FenceNotificationType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceNotificationType.Exited>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceNotificationType.Exited;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceNotificationType.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceNotificationType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFenceNotificationType): com.arcgismaps.geotriggers.FenceNotificationType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceNotificationType.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class FenceParameters {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParameters>;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.geotriggers.FenceParametersType;
				public getCoreFenceParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFenceParameters;
				public getBufferDistance(): number;
			}
			export module FenceParameters {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParameters.Companion>;
					public createFromGeoElement(param0: com.arcgismaps.mapping.GeoElement, param1: number): com.arcgismaps.geotriggers.FenceParameters;
				}
				export class Factory extends com.arcgismaps.geotriggers.FenceParametersFactory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParameters.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class FenceParametersFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreFenceParameters,com.arcgismaps.geotriggers.FenceParameters> {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParametersFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFenceParameters): com.arcgismaps.geotriggers.FenceParameters;
				public constructor();
			}
			export module FenceParametersFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParametersFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class FenceParametersType {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParametersType>;
				public getCoreFenceParametersType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFenceParametersType;
			}
			export module FenceParametersType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParametersType.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceParametersType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFenceParametersType): com.arcgismaps.geotriggers.FenceParametersType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParametersType.Factory.WhenMappings>;
					}
				}
				export class FeatureFenceParameters extends com.arcgismaps.geotriggers.FenceParametersType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParametersType.FeatureFenceParameters>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceParametersType.FeatureFenceParameters;
				}
				export class GraphicFenceParameters extends com.arcgismaps.geotriggers.FenceParametersType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParametersType.GraphicFenceParameters>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceParametersType.GraphicFenceParameters;
				}
				export class GraphicsOverlayFenceParameters extends com.arcgismaps.geotriggers.FenceParametersType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceParametersType.GraphicsOverlayFenceParameters>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceParametersType.GraphicsOverlayFenceParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class FenceRuleType {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceRuleType>;
				public getCoreFenceRuleType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFenceRuleType;
			}
			export module FenceRuleType {
				export class Enter extends com.arcgismaps.geotriggers.FenceRuleType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceRuleType.Enter>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceRuleType.Enter;
				}
				export class EnterOrExit extends com.arcgismaps.geotriggers.FenceRuleType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceRuleType.EnterOrExit>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceRuleType.EnterOrExit;
				}
				export class Exit extends com.arcgismaps.geotriggers.FenceRuleType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceRuleType.Exit>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceRuleType.Exit;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceRuleType.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.FenceRuleType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFenceRuleType): com.arcgismaps.geotriggers.FenceRuleType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geotriggers.FenceRuleType.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class Geotrigger {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.Geotrigger>;
				public _feed: com.arcgismaps.geotriggers.GeotriggerFeed;
				public setName(param0: string): void;
				public getRequestedActions(): java.util.List<string>;
				public getFeed(): com.arcgismaps.geotriggers.GeotriggerFeed;
				public set_messageExpression$arcgis_maps_any_release(param0: com.arcgismaps.arcade.ArcadeExpression): void;
				public getMessageExpression(): com.arcgismaps.arcade.ArcadeExpression;
				public getName(): string;
				public getGeotriggerId(): string;
				public get_feed$arcgis_maps_any_release(): com.arcgismaps.geotriggers.GeotriggerFeed;
				public get_messageExpression$arcgis_maps_any_release(): com.arcgismaps.arcade.ArcadeExpression;
				public setMessageExpression(param0: com.arcgismaps.arcade.ArcadeExpression): void;
				public getCoreGeotrigger$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeotrigger;
				public set_feed$arcgis_maps_any_release(param0: com.arcgismaps.geotriggers.GeotriggerFeed): void;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.geotriggers.GeotriggerType;
			}
			export module Geotrigger {
				export class Factory extends com.arcgismaps.geotriggers.GeotriggerFactory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.Geotrigger.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.Geotrigger.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class GeotriggerFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeotrigger,com.arcgismaps.geotriggers.Geotrigger> {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeotrigger): com.arcgismaps.geotriggers.Geotrigger;
				public constructor();
			}
			export module GeotriggerFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class GeotriggerFeed {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFeed>;
				public getCoreGeotriggerFeed$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeotriggerFeed;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.geotriggers.GeotriggerFeedType;
			}
			export module GeotriggerFeed {
				export class Factory extends com.arcgismaps.geotriggers.GeotriggerFeedFactory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFeed.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerFeed.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class GeotriggerFeedFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeotriggerFeed,com.arcgismaps.geotriggers.GeotriggerFeed> {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFeedFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeotriggerFeed): com.arcgismaps.geotriggers.GeotriggerFeed;
				public constructor();
			}
			export module GeotriggerFeedFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFeedFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class GeotriggerFeedType {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFeedType>;
				public getCoreGeotriggerFeedType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeotriggerFeedType;
			}
			export module GeotriggerFeedType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFeedType.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerFeedType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeotriggerFeedType): com.arcgismaps.geotriggers.GeotriggerFeedType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFeedType.Factory.WhenMappings>;
					}
				}
				export class LocationGeotriggerFeed extends com.arcgismaps.geotriggers.GeotriggerFeedType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerFeedType.LocationGeotriggerFeed>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerFeedType.LocationGeotriggerFeed;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class GeotriggerMonitor {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerMonitor>;
				public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.geotriggers.GeotriggerMonitorStatus>;
				public stop(): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeotriggerMonitor, param1: boolean);
				public getWarning(): kotlinx.coroutines.flow.StateFlow<java.lang.Throwable>;
				public getGeotrigger(): com.arcgismaps.geotriggers.Geotrigger;
				public getNotifications(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.geotriggers.GeotriggerNotificationInfo>;
				public getCoreGeotriggerMonitor$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeotriggerMonitor;
				public constructor(param0: com.arcgismaps.geotriggers.Geotrigger);
				public "start-IoAF18A"(param0: any): any;
			}
			export module GeotriggerMonitor {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGeotriggerMonitor,com.arcgismaps.geotriggers.GeotriggerMonitor> {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerMonitor.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerMonitor.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class GeotriggerMonitorStatus {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerMonitorStatus>;
				public getCoreGeotriggerMonitorStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus;
			}
			export module GeotriggerMonitorStatus {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerMonitorStatus.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerMonitorStatus.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus): com.arcgismaps.geotriggers.GeotriggerMonitorStatus;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerMonitorStatus.Factory.WhenMappings>;
					}
				}
				export class FailedToStart extends com.arcgismaps.geotriggers.GeotriggerMonitorStatus {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerMonitorStatus.FailedToStart>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerMonitorStatus.FailedToStart;
				}
				export class Started extends com.arcgismaps.geotriggers.GeotriggerMonitorStatus {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerMonitorStatus.Started>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerMonitorStatus.Started;
				}
				export class Starting extends com.arcgismaps.geotriggers.GeotriggerMonitorStatus {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerMonitorStatus.Starting>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerMonitorStatus.Starting;
				}
				export class Stopped extends com.arcgismaps.geotriggers.GeotriggerMonitorStatus {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerMonitorStatus.Stopped>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerMonitorStatus.Stopped;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class GeotriggerNotificationInfo {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerNotificationInfo>;
				public getFeedEntityId(): string;
				public getMessageProperties(): java.util.Map<string,any>;
				public getFeedLocation(): com.arcgismaps.location.Location;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.geotriggers.GeotriggerNotificationInfoType;
				public getMessage(): string;
				public getGeotriggerMonitor(): com.arcgismaps.geotriggers.GeotriggerMonitor;
				public getCoreGeotriggerNotificationInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfo;
				public getActions(): java.util.List<string>;
			}
			export module GeotriggerNotificationInfo {
				export class Factory extends com.arcgismaps.geotriggers.GeotriggerNotificationInfoFactory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerNotificationInfo.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerNotificationInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class GeotriggerNotificationInfoFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfo,com.arcgismaps.geotriggers.GeotriggerNotificationInfo> {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerNotificationInfoFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfo): com.arcgismaps.geotriggers.GeotriggerNotificationInfo;
				public constructor();
			}
			export module GeotriggerNotificationInfoFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerNotificationInfoFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class GeotriggerNotificationInfoType {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerNotificationInfoType>;
				public getCoreGeotriggerNotificationInfoType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfoType;
			}
			export module GeotriggerNotificationInfoType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerNotificationInfoType.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerNotificationInfoType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfoType): com.arcgismaps.geotriggers.GeotriggerNotificationInfoType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerNotificationInfoType.Factory.WhenMappings>;
					}
				}
				export class FenceGeotriggerNotificationInfo extends com.arcgismaps.geotriggers.GeotriggerNotificationInfoType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerNotificationInfoType.FenceGeotriggerNotificationInfo>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerNotificationInfoType.FenceGeotriggerNotificationInfo;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export abstract class GeotriggerType {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerType>;
				public getCoreGeotriggerType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeotriggerType;
			}
			export module GeotriggerType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerType.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeotriggerType): com.arcgismaps.geotriggers.GeotriggerType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerType.Factory.WhenMappings>;
					}
				}
				export class FenceGeotrigger extends com.arcgismaps.geotriggers.GeotriggerType {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggerType.FenceGeotrigger>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggerType.FenceGeotrigger;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class GeotriggersInfo extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggersInfo>;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getCoreGeotriggersInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeotriggersInfo;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeotriggersInfo);
				public "load-IoAF18A"(param0: any): any;
				public getGeotriggers(): java.util.List<com.arcgismaps.geotriggers.Geotrigger>;
			}
			export module GeotriggersInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeotriggersInfo,com.arcgismaps.geotriggers.GeotriggersInfo> {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GeotriggersInfo.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GeotriggersInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class GraphicFenceParameters extends com.arcgismaps.geotriggers.FenceParameters {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GraphicFenceParameters>;
				public constructor(param0: java.lang.Iterable<com.arcgismaps.mapping.view.Graphic>, param1: number);
				public constructor(param0: number);
				public getCoreGraphicFenceParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGraphicFenceParameters;
				public getGraphics(): java.util.List<com.arcgismaps.mapping.view.Graphic>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGraphicFenceParameters);
			}
			export module GraphicFenceParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGraphicFenceParameters,com.arcgismaps.geotriggers.GraphicFenceParameters> {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GraphicFenceParameters.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GraphicFenceParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class GraphicsOverlayFenceParameters extends com.arcgismaps.geotriggers.FenceParameters {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.GraphicsOverlayFenceParameters>;
				public getGraphicsOverlay(): com.arcgismaps.mapping.view.GraphicsOverlay;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGraphicsOverlayFenceParameters);
				public constructor(param0: com.arcgismaps.mapping.view.GraphicsOverlay, param1: number);
				public getCoreGraphicsOverlayFenceParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGraphicsOverlayFenceParameters;
			}
			export module GraphicsOverlayFenceParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGraphicsOverlayFenceParameters,com.arcgismaps.geotriggers.GraphicsOverlayFenceParameters> {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.GraphicsOverlayFenceParameters.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.GraphicsOverlayFenceParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module geotriggers {
			export class LocationGeotriggerFeed extends com.arcgismaps.geotriggers.GeotriggerFeed {
				public static class: java.lang.Class<com.arcgismaps.geotriggers.LocationGeotriggerFeed>;
				public constructor(param0: com.arcgismaps.location.LocationDataSource);
				public getFilter(): com.arcgismaps.arcade.ArcadeExpression;
				public getCoreLocationGeotriggerFeed$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationGeotriggerFeed;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLocationGeotriggerFeed);
				public setLocationDataSource(param0: com.arcgismaps.location.LocationDataSource): void;
				public setFilter(param0: com.arcgismaps.arcade.ArcadeExpression): void;
				public getLocationDataSource(): com.arcgismaps.location.LocationDataSource;
			}
			export module LocationGeotriggerFeed {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLocationGeotriggerFeed,com.arcgismaps.geotriggers.LocationGeotriggerFeed> {
					public static class: java.lang.Class<com.arcgismaps.geotriggers.LocationGeotriggerFeed.Factory>;
					public static INSTANCE: com.arcgismaps.geotriggers.LocationGeotriggerFeed.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class CacheImpl extends com.arcgismaps.httpcore.ArcGISHttpClient.Cache {
					public static class: java.lang.Class<com.arcgismaps.http.internal.CacheImpl>;
					public evictAll(): void;
					public constructor(param0: java.io.File, param1: number);
					public getHttpCache$arcgis_maps_any_release(): okhttp3.Cache;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class ChainImpl extends com.arcgismaps.httpcore.Chain {
					public static class: java.lang.Class<com.arcgismaps.http.internal.ChainImpl>;
					public proceed(param0: com.arcgismaps.httpcore.Request): com.arcgismaps.httpcore.Response;
					public constructor(param0: okhttp3.Interceptor.Chain);
					public request(): com.arcgismaps.httpcore.Request;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module ExtensionsKt {

					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.http.internal.ExtensionsKt.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class HttpClientImpl implements com.arcgismaps.httpcore.internal.HttpClient, com.arcgismaps.httpcore.internal.NetworkAuthenticationResettable, com.arcgismaps.httpcore.internal.WebSocket.Factory {
					public static class: java.lang.Class<com.arcgismaps.http.internal.HttpClientImpl>;
					public "execute-gIAlu-s"(param0: com.arcgismaps.httpcore.internal.HttpClientRequest, param1: any): any;
					public getCache(): com.arcgismaps.httpcore.ArcGISHttpClient.Cache;
					public close(): void;
					public resetNetworkAuthentication(): void;
					public newWebSocket(param0: string, param1: com.arcgismaps.httpcore.internal.WebSocket.Listener): com.arcgismaps.httpcore.internal.WebSocket;
				}
				export module HttpClientImpl {
					export class Builder {
						public static class: java.lang.Class<com.arcgismaps.http.internal.HttpClientImpl.Builder>;
						public constructor(param0: com.arcgismaps.httpcore.internal.AuthenticationDispatcher, param1: java.util.List<any>);
						public setCache$arcgis_maps_any_release(param0: com.arcgismaps.http.internal.CacheImpl): void;
						public getUserInterceptors$arcgis_maps_any_release(): java.util.List<com.arcgismaps.http.internal.OkHttpInterceptorImpl>;
						public getAuthenticationDispatcher(): com.arcgismaps.httpcore.internal.AuthenticationDispatcher;
						public getCache$arcgis_maps_any_release(): com.arcgismaps.http.internal.CacheImpl;
						public build(): com.arcgismaps.http.internal.HttpClientImpl;
						public cache(param0: java.io.File, param1: number): com.arcgismaps.http.internal.HttpClientImpl.Builder;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class HttpClientResponseBodyImpl extends com.arcgismaps.httpcore.internal.HttpClientResponseBody {
					public static class: java.lang.Class<com.arcgismaps.http.internal.HttpClientResponseBodyImpl>;
					public peek(): java.io.InputStream;
					public contentType(): string;
					public byteStream(): java.io.InputStream;
					public close(): void;
					public string(): string;
					public source(): okio.BufferedSource;
					public constructor(param0: okhttp3.ResponseBody);
					public bytes(): androidNative.Array<number>;
					public contentLength(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class HttpClientResponseImpl extends com.arcgismaps.httpcore.internal.HttpClientResponse {
					public static class: java.lang.Class<com.arcgismaps.http.internal.HttpClientResponseImpl>;
					public constructor(param0: com.arcgismaps.httpcore.internal.HttpClientRequest, param1: okhttp3.Response);
					public getBody(): com.arcgismaps.httpcore.internal.HttpClientResponseBody;
					public getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
					public close(): void;
					public getRequest(): com.arcgismaps.httpcore.internal.HttpClientRequest;
					public getMessage(): string;
					public getETag(): string;
					public getCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class OkHttpInterceptorImpl {
					public static class: java.lang.Class<com.arcgismaps.http.internal.OkHttpInterceptorImpl>;
					public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
					public constructor(param0: com.arcgismaps.httpcore.Interceptor);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class RequestImpl extends com.arcgismaps.httpcore.Request {
					public static class: java.lang.Class<com.arcgismaps.http.internal.RequestImpl>;
					public newBuilder(): com.arcgismaps.httpcore.Request.Builder;
					public getMethod(): com.arcgismaps.httpcore.Request.Method;
					public getOkHttpRequest$arcgis_maps_any_release(): okhttp3.Request;
					public getUrl(): string;
					public getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
					public constructor();
					public constructor(param0: okhttp3.Request, param1: java.util.List<com.arcgismaps.httpcore.FilePart>);
					public getFileParts$arcgis_maps_any_release(): java.util.List<com.arcgismaps.httpcore.FilePart>;
					public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
				}
				export module RequestImpl {
					export class Builder extends com.arcgismaps.httpcore.Request.Builder {
						public static class: java.lang.Class<com.arcgismaps.http.internal.RequestImpl.Builder>;
						public head(): com.arcgismaps.httpcore.Request.Builder;
						public constructor();
						public addParameters(param0: java.lang.Iterable<com.arcgismaps.httpcore.Request.Parameter>): com.arcgismaps.httpcore.Request.Builder;
						public removeParameter(param0: string): com.arcgismaps.httpcore.Request.Builder;
						public addParameter(param0: com.arcgismaps.httpcore.Request.Parameter): com.arcgismaps.httpcore.Request.Builder;
						public constructor(param0: com.arcgismaps.http.internal.RequestImpl);
						public url(param0: string): com.arcgismaps.httpcore.Request.Builder;
						public setHeader(param0: string, param1: string): com.arcgismaps.httpcore.Request.Builder;
						public removeHeader(param0: string): com.arcgismaps.httpcore.Request.Builder;
						public build(): com.arcgismaps.httpcore.Request;
						public addHeader(param0: string, param1: string): com.arcgismaps.httpcore.Request.Builder;
						public addHeader(param0: com.arcgismaps.httpcore.Request.Header): com.arcgismaps.httpcore.Request.Builder;
						public post(): com.arcgismaps.httpcore.Request.Builder;
						public addParameter(param0: string, param1: string): com.arcgismaps.httpcore.Request.Builder;
						public addHeaders(param0: java.lang.Iterable<com.arcgismaps.httpcore.Request.Header>): com.arcgismaps.httpcore.Request.Builder;
						public post$arcgis_maps_any_release(param0: androidNative.Array<number>, param1: string): com.arcgismaps.httpcore.Request.Builder;
						public post(param0: string, param1: string, param2: androidNative.Array<number>, param3: string): com.arcgismaps.httpcore.Request.Builder;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class ResponseImpl extends com.arcgismaps.httpcore.Response {
					public static class: java.lang.Class<com.arcgismaps.http.internal.ResponseImpl>;
					public getOkHttpResponse$arcgis_maps_any_release(): okhttp3.Response;
					public getETag$arcgis_maps_any_release(): string;
					public getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
					public getBody(): com.arcgismaps.httpcore.Response.Body;
					public constructor();
					public constructor(param0: okhttp3.Response);
					public close(): void;
					public getMessage$arcgis_maps_any_release(): string;
					public getHost$arcgis_maps_any_release(): string;
					public getContentType$arcgis_maps_any_release(): string;
					public getCode(): number;
				}
				export module ResponseImpl {
					export class BodyImpl extends com.arcgismaps.httpcore.Response.Body {
						public static class: java.lang.Class<com.arcgismaps.http.internal.ResponseImpl.BodyImpl>;
						public constructor();
						public contentLength(): java.lang.Long;
						public byteStream(): java.io.InputStream;
						public close(): void;
						public source$arcgis_maps_any_release(): okio.BufferedSource;
						public peek(): java.io.InputStream;
						public bytes(): androidNative.Array<number>;
						public constructor(param0: okhttp3.ResponseBody);
						public contentType(): string;
						public getOkHttpResponseBody$arcgis_maps_any_release(): okhttp3.ResponseBody;
						public string(): string;
					}
					export module BodyImpl {
						export class BuilderImpl extends com.arcgismaps.httpcore.Response.Body.Builder {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ResponseImpl.BodyImpl.BuilderImpl>;
							public constructor();
							public build(): com.arcgismaps.httpcore.Response.Body;
							public data(param0: java.io.InputStream, param1: number): com.arcgismaps.httpcore.Response.Body.Builder;
							public contentType(param0: string): com.arcgismaps.httpcore.Response.Body.Builder;
						}
					}
					export class BuilderImpl extends com.arcgismaps.httpcore.Response.Builder {
						public static class: java.lang.Class<com.arcgismaps.http.internal.ResponseImpl.BuilderImpl>;
						public addHeader(param0: com.arcgismaps.httpcore.Request.Header): com.arcgismaps.httpcore.Response.Builder;
						public body(param0: com.arcgismaps.httpcore.Response.Body): com.arcgismaps.httpcore.Response.Builder;
						public build(): com.arcgismaps.httpcore.Response;
						public constructor();
						public code(param0: number): com.arcgismaps.httpcore.Response.Builder;
						public addHeader(param0: string, param1: string): com.arcgismaps.httpcore.Response.Builder;
						public request(param0: com.arcgismaps.httpcore.Request): com.arcgismaps.httpcore.Response.Builder;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class RtcRequest extends com.arcgismaps.httpcore.BaseRequest {
					public static class: java.lang.Class<com.arcgismaps.http.internal.RtcRequest>;
					public getUrl(): string;
					public getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
					public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
					public getContentType(): string;
					public getFileParts(): java.util.List<com.arcgismaps.httpcore.FilePart>;
					public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					public getRawData(): androidNative.Array<number>;
				}
				export module RtcRequest {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.http.internal.RtcRequest.Companion>;
						public create(param0: com.arcgismaps.internal.jni.CoreRequest): com.arcgismaps.http.internal.RtcRequest;
					}
					export module Companion {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.http.internal.RtcRequest.Companion.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class RtcRequestHandler {
					public static class: java.lang.Class<com.arcgismaps.http.internal.RtcRequestHandler>;
					public constructor();
					public handleRequest(param0: com.arcgismaps.internal.jni.CoreRequest, param1: any): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class RtcTileRequest extends com.arcgismaps.http.internal.RtcRequest {
					public static class: java.lang.Class<com.arcgismaps.http.internal.RtcTileRequest>;
					public constructor();
					public handleResponse$arcgis_maps_any_release(param0: any, param1: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileRequest);
				}
				export module RtcTileRequest {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.http.internal.RtcTileRequest.Companion>;
						public getNoDataETags$arcgis_maps_any_release(): java.util.concurrent.ConcurrentHashMap<string,string>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class SslUtils {
					public static class: java.lang.Class<com.arcgismaps.http.internal.SslUtils>;
					public static INSTANCE: com.arcgismaps.http.internal.SslUtils;
					public newKeyManager$arcgis_maps_any_release(param0: java.security.KeyStore, param1: string): javax.net.ssl.X509ExtendedKeyManager;
					public getServerURL(param0: java.security.cert.X509Certificate): string;
					public newTrustManager$arcgis_maps_any_release(param0: java.security.KeyStore): javax.net.ssl.X509TrustManager;
					public newKeyStore$arcgis_maps_any_release(param0: string): java.security.KeyStore;
				}
				export module SslUtils {
					export class ServerTrustManager {
						public static class: java.lang.Class<com.arcgismaps.http.internal.SslUtils.ServerTrustManager>;
						public constructor(param0: com.arcgismaps.httpcore.internal.AuthenticationDispatcher);
						public getAuthenticationDispatcher(): com.arcgismaps.httpcore.internal.AuthenticationDispatcher;
						public checkServerTrusted(param0: androidNative.Array<java.security.cert.X509Certificate>, param1: string, param2: string): java.util.List<java.security.cert.X509Certificate>;
						public getAcceptedIssuers(): androidNative.Array<java.security.cert.X509Certificate>;
						public checkClientTrusted(param0: androidNative.Array<java.security.cert.X509Certificate>, param1: string): void;
						public checkServerTrusted(param0: androidNative.Array<java.security.cert.X509Certificate>, param1: string): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export class WebSocketImpl extends com.arcgismaps.httpcore.internal.WebSocket {
					public static class: java.lang.Class<com.arcgismaps.http.internal.WebSocketImpl>;
					public close(): void;
					public cancel(): void;
					public constructor(param0: string, param1: okhttp3.OkHttpClient, param2: com.arcgismaps.httpcore.internal.WebSocket.Listener);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module ntlm {
					export class NTLMEngine {
						public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngine>;
						/**
						 * Constructs a new instance of the com.arcgismaps.http.internal.ntlm.NTLMEngine interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							generateType1Msg(param0: string, param1: string): string;
							generateType3Msg(param0: string, param1: androidNative.Array<string>, param2: string, param3: string, param4: string): string;
						});
						public constructor();
						public generateType3Msg(param0: string, param1: androidNative.Array<string>, param2: string, param3: string, param4: string): string;
						public generateType1Msg(param0: string, param1: string): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module ntlm {
					export class NTLMEngineException {
						public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineException>;
						public constructor();
						public constructor(param0: string, param1: java.lang.Throwable);
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module ntlm {
					export class NTLMEngineImpl extends com.arcgismaps.http.internal.ntlm.NTLMEngine {
						public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl>;
						public generateType3Msg(param0: string, param1: androidNative.Array<string>, param2: string, param3: string, param4: string): string;
						public generateType1Msg(param0: string, param1: string): string;
					}
					export module NTLMEngineImpl {
						export class CipherGen {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.CipherGen>;
							public getClientChallenge2(): androidNative.Array<number>;
							public getLMHash(): androidNative.Array<number>;
							public getSecondaryKey(): androidNative.Array<number>;
							public constructor(param0: java.util.Random, param1: number, param2: string, param3: string, param4: androidNative.Array<string>, param5: androidNative.Array<number>, param6: string, param7: androidNative.Array<number>);
							public getNTLM2SessionResponse(): androidNative.Array<number>;
							public getNTLMv2Response(): androidNative.Array<number>;
							public getClientChallenge(): androidNative.Array<number>;
							public getLMResponse(): androidNative.Array<number>;
							public getNTLMHash(): androidNative.Array<number>;
							public getNTLMv2Blob(): androidNative.Array<number>;
							public getNTLM2SessionResponseUserSessionKey(): androidNative.Array<number>;
							public getLMUserSessionKey(): androidNative.Array<number>;
							public getLanManagerSessionKey(): androidNative.Array<number>;
							public getLMv2Hash(): androidNative.Array<number>;
							public constructor(param0: java.util.Random, param1: number, param2: string, param3: string, param4: androidNative.Array<string>, param5: androidNative.Array<number>, param6: string, param7: androidNative.Array<number>, param8: androidNative.Array<number>, param9: androidNative.Array<number>, param10: androidNative.Array<number>, param11: androidNative.Array<number>);
							public getNTLMv2Hash(): androidNative.Array<number>;
							public getNTLMResponse(): androidNative.Array<number>;
							public getNTLMv2UserSessionKey(): androidNative.Array<number>;
							public getLMv2Response(): androidNative.Array<number>;
							public getNTLMUserSessionKey(): androidNative.Array<number>;
							public getLM2SessionResponse(): androidNative.Array<number>;
							public getTimestamp(): androidNative.Array<number>;
						}
						export class HMACMD5 {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.HMACMD5>;
						}
						export class Handle {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.Handle>;
							public getSealingKey(): androidNative.Array<number>;
							public getSigningKey(): androidNative.Array<number>;
							public signAndEncryptMessage(param0: androidNative.Array<number>): androidNative.Array<number>;
							public decryptAndVerifySignedMessage(param0: androidNative.Array<number>): androidNative.Array<number>;
						}
						export class MD4 {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.MD4>;
						}
						export class Mode {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.Mode>;
							public static CLIENT: com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.Mode;
							public static SERVER: com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.Mode;
							public static valueOf(param0: string): com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.Mode;
							public static values(): androidNative.Array<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.Mode>;
						}
						export class NTLMMessage {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.NTLMMessage>;
							public getResponse(): string;
							public getBytes(): androidNative.Array<number>;
						}
						export class Type1Message extends com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.NTLMMessage {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.Type1Message>;
						}
						export class Type2Message extends com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.NTLMMessage {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.Type2Message>;
						}
						export class Type3Message extends com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.NTLMMessage {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NTLMEngineImpl.Type3Message>;
							public getEncryptedRandomSessionKey(): androidNative.Array<number>;
							public getExportedSessionKey(): androidNative.Array<number>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module ntlm {
					export class NetworkAuthenticationInterceptor {
						public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.NetworkAuthenticationInterceptor>;
						public intercept(param0: okhttp3.Interceptor.Chain): okhttp3.Response;
						public constructor(param0: com.arcgismaps.httpcore.internal.AuthenticationDispatcher);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module ntlm {
					export module utils {
						export class ByteArrayBuilder {
							public static class: java.lang.Class<com.arcgismaps.http.internal.ntlm.utils.ByteArrayBuilder>;
							public constructor();
							public capacity(): number;
							public ensureFreeCapacity(param0: number): void;
							public append(param0: androidNative.Array<string>, param1: number, param2: number): com.arcgismaps.http.internal.ntlm.utils.ByteArrayBuilder;
							public toString(): string;
							public append(param0: androidNative.Array<number>, param1: number, param2: number): com.arcgismaps.http.internal.ntlm.utils.ByteArrayBuilder;
							public append(param0: java.nio.CharBuffer): com.arcgismaps.http.internal.ntlm.utils.ByteArrayBuilder;
							public constructor(param0: number);
							public append(param0: androidNative.Array<number>): com.arcgismaps.http.internal.ntlm.utils.ByteArrayBuilder;
							public reset(): void;
							public charset(param0: java.nio.charset.Charset): com.arcgismaps.http.internal.ntlm.utils.ByteArrayBuilder;
							public toByteBuffer(): java.nio.ByteBuffer;
							public append(param0: string): com.arcgismaps.http.internal.ntlm.utils.ByteArrayBuilder;
							public append(param0: androidNative.Array<string>): com.arcgismaps.http.internal.ntlm.utils.ByteArrayBuilder;
							public toByteArray(): androidNative.Array<number>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module pki {
					export class PkiKeyManager {
						public static class: java.lang.Class<com.arcgismaps.http.internal.pki.PkiKeyManager>;
						public chooseClientAlias(param0: androidNative.Array<string>, param1: androidNative.Array<java.security.Principal>, param2: java.net.Socket): string;
						public chooseEngineServerAlias(param0: string, param1: androidNative.Array<java.security.Principal>, param2: javax.net.ssl.SSLEngine): string;
						public constructor(param0: com.arcgismaps.httpcore.internal.AuthenticationDispatcher);
						public getAuthenticationDispatcher(): com.arcgismaps.httpcore.internal.AuthenticationDispatcher;
						public chooseEngineClientAlias(param0: androidNative.Array<string>, param1: androidNative.Array<java.security.Principal>, param2: javax.net.ssl.SSLEngine): string;
						public getServerAliases(param0: string, param1: androidNative.Array<java.security.Principal>): androidNative.Array<string>;
						public getCertificateChain(param0: string): androidNative.Array<java.security.cert.X509Certificate>;
						public getPrivateKey(param0: string): java.security.PrivateKey;
						public getClientAliases(param0: string, param1: androidNative.Array<java.security.Principal>): androidNative.Array<string>;
						public chooseServerAlias(param0: string, param1: androidNative.Array<java.security.Principal>, param2: java.net.Socket): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalGroupRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalGroupRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public constructor(param0: string, param1: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalGroupUsersRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalGroupUsersRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public constructor(param0: string, param1: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalGroupsSearchRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalGroupsSearchRequest>;
						public constructor();
						public constructor(param0: string, param1: java.util.List<com.arcgismaps.httpcore.Request.Parameter>);
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalInfoRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalInfoRequest>;
						public constructor(param0: string, param1: com.arcgismaps.portal.Portal.Connection, param2: string);
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getConnection(): com.arcgismaps.portal.Portal.Connection;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalItemAddCommentRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalItemAddCommentRequest>;
						public constructor(param0: string, param1: string, param2: string, param3: string);
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalItemAddRatingRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalItemAddRatingRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public constructor(param0: string, param1: string, param2: number);
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalItemCommentsRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalItemCommentsRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public constructor(param0: string, param1: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalItemGroupsRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalItemGroupsRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public constructor(param0: string, param1: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalItemInfoRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalItemInfoRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public constructor(param0: string, param1: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalItemShareRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalItemShareRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: com.arcgismaps.mapping.PortalItem, param2: boolean, param3: boolean, param4: java.util.List<string>);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalItemUnshareRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalItemUnshareRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: com.arcgismaps.mapping.PortalItem, param2: java.util.List<string>);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalItemsSearchRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalItemsSearchRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: java.util.List<com.arcgismaps.httpcore.Request.Parameter>, param2: string);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export abstract class PortalRequest extends com.arcgismaps.httpcore.BaseRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalRequest>;
						public getBaseUrl(): string;
						public getRoute(): string;
						public getUrl(): string;
						public "response-gIAlu-s$arcgis_maps_any_release"(param0: com.arcgismaps.mapping.ArcGISAuthenticationMode, param1: any): any;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export abstract class PortalUserAddItemRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserAddItemRequest>;
						public constructor();
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem, param3: string, param4: boolean);
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
						public getFileParts(): java.util.List<com.arcgismaps.httpcore.FilePart>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserAddItemWithFileRequest extends com.arcgismaps.http.internal.portal.PortalUserAddItemRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserAddItemWithFileRequest>;
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem, param3: string, param4: boolean);
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem, param3: com.arcgismaps.portal.PortalItemFileContentParameters, param4: string, param5: boolean);
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
						public getFileParts(): java.util.List<com.arcgismaps.httpcore.FilePart>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserAddItemWithTextRequest extends com.arcgismaps.http.internal.portal.PortalUserAddItemRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserAddItemWithTextRequest>;
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem, param3: string, param4: boolean);
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem, param3: com.arcgismaps.portal.PortalItemJsonContentParameters, param4: string, param5: boolean);
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserAddItemWithUrlRequest extends com.arcgismaps.http.internal.portal.PortalUserAddItemRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserAddItemWithUrlRequest>;
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem, param3: string, param4: boolean);
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem, param3: com.arcgismaps.portal.PortalItemUrlContentParameters, param4: string, param5: boolean);
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserContentRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserContentRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: string, param2: string);
						public getRoute(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserCreateFolderRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserCreateFolderRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: string, param2: string);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserDeleteFolderRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserDeleteFolderRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: string, param2: string);
						public getRoute(): string;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserDeleteItemRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserDeleteItemRequest>;
						public constructor();
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem);
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserItemRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserItemRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public constructor(param0: string, param1: com.arcgismaps.mapping.PortalItem);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserItemShareRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserItemShareRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: com.arcgismaps.mapping.PortalItem, param2: boolean, param3: boolean, param4: java.util.List<string>);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserItemUnshareRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserItemUnshareRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public constructor(param0: string, param1: com.arcgismaps.mapping.PortalItem, param2: java.util.List<string>);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserMoveItemRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserMoveItemRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem, param3: string);
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserMoveItemsRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserMoveItemsRequest>;
						public constructor(param0: string, param1: string, param2: string, param3: string);
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public constructor(param0: string, param1: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class PortalUserUpdateItemRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.PortalUserUpdateItemRequest>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.PortalItem, param3: string);
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
						public getFileParts(): java.util.List<com.arcgismaps.httpcore.FilePart>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export class RelatedPortalItemsRequest extends com.arcgismaps.http.internal.portal.PortalRequest {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.RelatedPortalItemsRequest>;
						public constructor();
						public constructor(param0: string, param1: string, param2: java.lang.Iterable<any>, param3: com.arcgismaps.portal.PortalItemRelationshipDirection);
						public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
						public getRoute(): string;
						public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module http {
			export module internal {
				export module portal {
					export abstract class ThumbnailType {
						public static class: java.lang.Class<com.arcgismaps.http.internal.portal.ThumbnailType>;
						public getMimeType(): string;
						public getExtension(): string;
					}
					export module ThumbnailType {
						export class Companion {
							public static class: java.lang.Class<com.arcgismaps.http.internal.portal.ThumbnailType.Companion>;
							public fromFileNameOrNull(param0: string): com.arcgismaps.http.internal.portal.ThumbnailType;
							public fromBytes(param0: androidNative.Array<number>): com.arcgismaps.http.internal.portal.ThumbnailType;
						}
						export class Gif extends com.arcgismaps.http.internal.portal.ThumbnailType {
							public static class: java.lang.Class<com.arcgismaps.http.internal.portal.ThumbnailType.Gif>;
							public static INSTANCE: com.arcgismaps.http.internal.portal.ThumbnailType.Gif;
							public getPrefix(): androidNative.Array<number>;
						}
						export class Jpeg extends com.arcgismaps.http.internal.portal.ThumbnailType {
							public static class: java.lang.Class<com.arcgismaps.http.internal.portal.ThumbnailType.Jpeg>;
							public static INSTANCE: com.arcgismaps.http.internal.portal.ThumbnailType.Jpeg;
						}
						export class Png extends com.arcgismaps.http.internal.portal.ThumbnailType {
							public static class: java.lang.Class<com.arcgismaps.http.internal.portal.ThumbnailType.Png>;
							public static INSTANCE: com.arcgismaps.http.internal.portal.ThumbnailType.Png;
							public getPrefix(): androidNative.Array<number>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export class ArcGISHttpClient {
				public static class: java.lang.Class<com.arcgismaps.httpcore.ArcGISHttpClient>;
				public "download-yxL6bBk"(param0: string, param1: java.io.File, param2: java.lang.Iterable<com.arcgismaps.httpcore.Request.Parameter>, param3: any, param4: any): any;
				public newWebSocket$arcgis_maps_any_release(param0: string, param1: com.arcgismaps.httpcore.internal.WebSocket.Listener): com.arcgismaps.httpcore.internal.WebSocket;
				public "execute-0E7RQCE$arcgis_maps_any_release"(param0: com.arcgismaps.httpcore.BaseRequest, param1: com.arcgismaps.mapping.ArcGISAuthenticationMode, param2: any): any;
				public close(): void;
				public getUserInterceptors$arcgis_maps_any_release(): java.util.List<com.arcgismaps.httpcore.Interceptor>;
				public addAdditionalRequestHeader(param0: string, param1: string): void;
				public getAdditionalHeaders$arcgis_maps_any_release(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
				public isClosed(): boolean;
				public getAuthenticationDispatcher$arcgis_maps_any_release(): com.arcgismaps.httpcore.internal.AuthenticationDispatcher;
				public getCache(): com.arcgismaps.httpcore.ArcGISHttpClient.Cache;
				public "fetchResponse-gIAlu-s$arcgis_maps_any_release"(param0: com.arcgismaps.httpcore.BaseRequest, param1: any): any;
				public "execute-gIAlu-s"(param0: com.arcgismaps.httpcore.Request, param1: any): any;
			}
			export module ArcGISHttpClient {
				export class Builder {
					public static class: java.lang.Class<com.arcgismaps.httpcore.ArcGISHttpClient.Builder>;
					public httpClient: com.arcgismaps.httpcore.internal.HttpClient;
					public authenticationDispatcher: com.arcgismaps.httpcore.internal.AuthenticationDispatcher;
					public static DEFAULT_HTTP_CACHE_SIZE: number;
					public cache(param0: number): com.arcgismaps.httpcore.ArcGISHttpClient.Builder;
					public constructor(param0: com.arcgismaps.httpcore.internal.HttpClient, param1: com.arcgismaps.httpcore.internal.AuthenticationDispatcher);
					public getHttpClient$arcgis_maps_any_release(): com.arcgismaps.httpcore.internal.HttpClient;
					public setHttpClient$arcgis_maps_any_release(param0: com.arcgismaps.httpcore.internal.HttpClient): void;
					public setAuthenticationDispatcher$arcgis_maps_any_release(param0: com.arcgismaps.httpcore.internal.AuthenticationDispatcher): void;
					public getAuthenticationDispatcher$arcgis_maps_any_release(): com.arcgismaps.httpcore.internal.AuthenticationDispatcher;
					public getCacheMaxSize$arcgis_maps_any_release(): number;
					public setCacheMaxSize$arcgis_maps_any_release(param0: number): void;
					public setCacheDirectory$arcgis_maps_any_release(param0: java.io.File): void;
					public build$arcgis_maps_any_release(): com.arcgismaps.httpcore.ArcGISHttpClient;
					public getCacheDirectory$arcgis_maps_any_release(): java.io.File;
					public constructor();
					public interceptor(param0: com.arcgismaps.httpcore.Interceptor): com.arcgismaps.httpcore.ArcGISHttpClient.Builder;
					public cache(param0: java.io.File, param1: number): com.arcgismaps.httpcore.ArcGISHttpClient.Builder;
					public getUserInterceptors$arcgis_maps_any_release(): java.util.List<com.arcgismaps.httpcore.Interceptor>;
				}
				export module Builder {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.ArcGISHttpClient.Builder.Companion>;
						public getDEFAULT_HTTP_CACHE_LOCATION(): java.io.File;
					}
				}
				export abstract class Cache {
					public static class: java.lang.Class<com.arcgismaps.httpcore.ArcGISHttpClient.Cache>;
					public evictAll(): void;
					public constructor(param0: java.io.File, param1: number);
				}
				export class Header {
					public static class: java.lang.Class<com.arcgismaps.httpcore.ArcGISHttpClient.Header>;
					public constructor(param0: string, param1: string);
					public equals(param0: any): boolean;
					public getValue(): string;
					public toString(): string;
					public component1(): string;
					public component2(): string;
					public getName(): string;
					public copy(param0: string, param1: string): com.arcgismaps.httpcore.ArcGISHttpClient.Header;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export abstract class BaseRequest {
				public static class: java.lang.Class<com.arcgismaps.httpcore.BaseRequest>;
				public static TOKEN_PARAMETER: string;
				public static REFERER_HTTP_HEADER: string;
				public getAssociatedCoreRequest$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRequest;
				public getContentType(): string;
				public applyAdditionalHeaders$arcgis_maps_any_release(param0: java.lang.Iterable<com.arcgismaps.httpcore.Request.Header>): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRequest);
				public getUrl(): string;
				public constructor();
				public setAssociatedCoreRequest$arcgis_maps_any_release(param0: com.arcgismaps.internal.jni.CoreRequest): void;
				public getProgressListener(): any;
				public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
				public getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
				public handleResponse$arcgis_maps_any_release(param0: any, param1: any): any;
				public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
				public getFileParts(): java.util.List<com.arcgismaps.httpcore.FilePart>;
				public getRawData(): androidNative.Array<number>;
			}
			export module BaseRequest {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.httpcore.BaseRequest.Companion>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export class Chain {
				public static class: java.lang.Class<com.arcgismaps.httpcore.Chain>;
				/**
				 * Constructs a new instance of the com.arcgismaps.httpcore.Chain interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					request(): com.arcgismaps.httpcore.Request;
					proceed(param0: com.arcgismaps.httpcore.Request): com.arcgismaps.httpcore.Response;
				});
				public constructor();
				public proceed(param0: com.arcgismaps.httpcore.Request): com.arcgismaps.httpcore.Response;
				public request(): com.arcgismaps.httpcore.Request;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export class FilePart {
				public static class: java.lang.Class<com.arcgismaps.httpcore.FilePart>;
				public getContentType(): string;
				public constructor(param0: string, param1: string, param2: string, param3: androidNative.Array<number>);
				public component1(): string;
				public getName(): string;
				public toString(): string;
				public component4(): androidNative.Array<number>;
				public copy(param0: string, param1: string, param2: string, param3: androidNative.Array<number>): com.arcgismaps.httpcore.FilePart;
				public hashCode(): number;
				public component3(): string;
				public getFilename(): string;
				public getData(): androidNative.Array<number>;
				public equals(param0: any): boolean;
				public component2(): string;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export abstract class HttpOperation {
				public static class: java.lang.Class<com.arcgismaps.httpcore.HttpOperation>;
				public toString(): string;
			}
			export module HttpOperation {
				export class Get extends com.arcgismaps.httpcore.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.httpcore.HttpOperation.Get>;
					public static INSTANCE: com.arcgismaps.httpcore.HttpOperation.Get;
				}
				export class Head extends com.arcgismaps.httpcore.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.httpcore.HttpOperation.Head>;
					public static INSTANCE: com.arcgismaps.httpcore.HttpOperation.Head;
				}
				export class MultipartPost extends com.arcgismaps.httpcore.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.httpcore.HttpOperation.MultipartPost>;
					public static INSTANCE: com.arcgismaps.httpcore.HttpOperation.MultipartPost;
				}
				export class Post extends com.arcgismaps.httpcore.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.httpcore.HttpOperation.Post>;
					public static INSTANCE: com.arcgismaps.httpcore.HttpOperation.Post;
				}
				export class RawPost extends com.arcgismaps.httpcore.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.httpcore.HttpOperation.RawPost>;
					public static INSTANCE: com.arcgismaps.httpcore.HttpOperation.RawPost;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export class Interceptor {
				public static class: java.lang.Class<com.arcgismaps.httpcore.Interceptor>;
				/**
				 * Constructs a new instance of the com.arcgismaps.httpcore.Interceptor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					intercept(param0: com.arcgismaps.httpcore.Chain): com.arcgismaps.httpcore.Response;
				});
				public constructor();
				public intercept(param0: com.arcgismaps.httpcore.Chain): com.arcgismaps.httpcore.Response;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export abstract class Request {
				public static class: java.lang.Class<com.arcgismaps.httpcore.Request>;
				public getFileParts$arcgis_maps_any_release(): java.util.List<com.arcgismaps.httpcore.FilePart>;
				public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
				public getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
				public getUrl(): string;
				public newBuilder(): com.arcgismaps.httpcore.Request.Builder;
				public getMethod(): com.arcgismaps.httpcore.Request.Method;
				public constructor();
			}
			export module Request {
				export abstract class Builder {
					public static class: java.lang.Class<com.arcgismaps.httpcore.Request.Builder>;
					public head(): com.arcgismaps.httpcore.Request.Builder;
					public removeHeader(param0: string): com.arcgismaps.httpcore.Request.Builder;
					public addParameter(param0: com.arcgismaps.httpcore.Request.Parameter): com.arcgismaps.httpcore.Request.Builder;
					public post(param0: string, param1: string, param2: androidNative.Array<number>, param3: string): com.arcgismaps.httpcore.Request.Builder;
					public addParameter(param0: string, param1: string): com.arcgismaps.httpcore.Request.Builder;
					public addHeaders(param0: java.lang.Iterable<com.arcgismaps.httpcore.Request.Header>): com.arcgismaps.httpcore.Request.Builder;
					public setHeader(param0: string, param1: string): com.arcgismaps.httpcore.Request.Builder;
					public post$arcgis_maps_any_release(param0: androidNative.Array<number>, param1: string): com.arcgismaps.httpcore.Request.Builder;
					public constructor();
					public post(): com.arcgismaps.httpcore.Request.Builder;
					public addParameters(param0: java.lang.Iterable<com.arcgismaps.httpcore.Request.Parameter>): com.arcgismaps.httpcore.Request.Builder;
					public removeParameter(param0: string): com.arcgismaps.httpcore.Request.Builder;
					public addHeader(param0: string, param1: string): com.arcgismaps.httpcore.Request.Builder;
					public url(param0: string): com.arcgismaps.httpcore.Request.Builder;
					public addHeader(param0: com.arcgismaps.httpcore.Request.Header): com.arcgismaps.httpcore.Request.Builder;
					public build(): com.arcgismaps.httpcore.Request;
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.httpcore.Request.Companion>;
					public builder(): com.arcgismaps.httpcore.Request.Builder;
				}
				export class Header {
					public static class: java.lang.Class<com.arcgismaps.httpcore.Request.Header>;
					public constructor(param0: string, param1: string);
					public equals(param0: any): boolean;
					public copy(param0: string, param1: string): com.arcgismaps.httpcore.Request.Header;
					public getValue(): string;
					public toString(): string;
					public component1(): string;
					public component2(): string;
					public getName(): string;
					public hashCode(): number;
				}
				export abstract class Method {
					public static class: java.lang.Class<com.arcgismaps.httpcore.Request.Method>;
					public toString(): string;
				}
				export module Method {
					export class Get extends com.arcgismaps.httpcore.Request.Method {
						public static class: java.lang.Class<com.arcgismaps.httpcore.Request.Method.Get>;
						public static INSTANCE: com.arcgismaps.httpcore.Request.Method.Get;
					}
					export class Head extends com.arcgismaps.httpcore.Request.Method {
						public static class: java.lang.Class<com.arcgismaps.httpcore.Request.Method.Head>;
						public static INSTANCE: com.arcgismaps.httpcore.Request.Method.Head;
					}
					export class Post extends com.arcgismaps.httpcore.Request.Method {
						public static class: java.lang.Class<com.arcgismaps.httpcore.Request.Method.Post>;
						public static INSTANCE: com.arcgismaps.httpcore.Request.Method.Post;
					}
					export class Unknown extends com.arcgismaps.httpcore.Request.Method {
						public static class: java.lang.Class<com.arcgismaps.httpcore.Request.Method.Unknown>;
						public static INSTANCE: com.arcgismaps.httpcore.Request.Method.Unknown;
					}
				}
				export class Parameter {
					public static class: java.lang.Class<com.arcgismaps.httpcore.Request.Parameter>;
					public constructor(param0: string, param1: string);
					public equals(param0: any): boolean;
					public copy(param0: string, param1: string): com.arcgismaps.httpcore.Request.Parameter;
					public getValue(): string;
					public toString(): string;
					public component1(): string;
					public component2(): string;
					public getName(): string;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export abstract class Response {
				public static class: java.lang.Class<com.arcgismaps.httpcore.Response>;
				public getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
				public getETag$arcgis_maps_any_release(): string;
				public getMessage$arcgis_maps_any_release(): string;
				public getCode(): number;
				public getContentType$arcgis_maps_any_release(): string;
				public getHost$arcgis_maps_any_release(): string;
				public getBody(): com.arcgismaps.httpcore.Response.Body;
				public constructor();
			}
			export module Response {
				export abstract class Body {
					public static class: java.lang.Class<com.arcgismaps.httpcore.Response.Body>;
					public static CONTENT_LENGTH_THRESHOLD_ERROR_RESPONSE_BYTES: number;
					public static DOWNLOAD_BUFFER_SIZE_BYTES: number;
					public peek(): java.io.InputStream;
					public contentLength(): java.lang.Long;
					public contentType(): string;
					public constructor();
					public byteStream(): java.io.InputStream;
					public string(): string;
					public bytes(): androidNative.Array<number>;
					public source$arcgis_maps_any_release(): okio.BufferedSource;
				}
				export module Body {
					export abstract class Builder {
						public static class: java.lang.Class<com.arcgismaps.httpcore.Response.Body.Builder>;
						public constructor();
						public data(param0: java.io.InputStream, param1: number): com.arcgismaps.httpcore.Response.Body.Builder;
						public contentType(param0: string): com.arcgismaps.httpcore.Response.Body.Builder;
						public build(): com.arcgismaps.httpcore.Response.Body;
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.Response.Body.Companion>;
						public builder(): com.arcgismaps.httpcore.Response.Body.Builder;
					}
				}
				export abstract class Builder {
					public static class: java.lang.Class<com.arcgismaps.httpcore.Response.Builder>;
					public constructor();
					public request(param0: com.arcgismaps.httpcore.Request): com.arcgismaps.httpcore.Response.Builder;
					public addHeader(param0: com.arcgismaps.httpcore.Request.Header): com.arcgismaps.httpcore.Response.Builder;
					public addHeader(param0: string, param1: string): com.arcgismaps.httpcore.Response.Builder;
					public code(param0: number): com.arcgismaps.httpcore.Response.Builder;
					public build(): com.arcgismaps.httpcore.Response;
					public body(param0: com.arcgismaps.httpcore.Response.Body): com.arcgismaps.httpcore.Response.Builder;
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.httpcore.Response.Companion>;
					public builder(): com.arcgismaps.httpcore.Response.Builder;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export class Url {
				public static class: java.lang.Class<com.arcgismaps.httpcore.Url>;
				public static "constructor-impl"(param0: string): string;
				public static "hashCode-impl"(param0: string): number;
				public static "toString-impl"(param0: string): string;
				public static "equals-impl0"(param0: string, param1: string): boolean;
				public hashCode(): number;
				public static "equals-impl"(param0: string, param1: any): boolean;
				public equals(param0: any): boolean;
				public getUrl(): string;
				public toString(): string;
				public static "getHost-impl"(param0: string): string;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class ArcGISAuthenticationChallenge {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge>;
					public continueWithCredential$arcgis_maps_any_release(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential): void;
					public getCoreArcGISAuthenticationChallenge$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISAuthenticationChallenge;
					public getRequestUrl(): string;
					public cancel$arcgis_maps_any_release(): void;
					public isMatch$arcgis_maps_any_release(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge): boolean;
					public continueAndFailWithError$arcgis_maps_any_release(param0: java.lang.Throwable): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISAuthenticationChallenge);
					public getCause(): java.lang.Throwable;
					public continueAndFail$arcgis_maps_any_release(): void;
				}
				export module ArcGISAuthenticationChallenge {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISAuthenticationChallenge,com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class ArcGISAuthenticationChallengeHandler {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeHandler>;
					/**
					 * Constructs a new instance of the com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeHandler interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						handleArcGISAuthenticationChallenge(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge, param1: any): any;
					});
					public constructor();
					public handleArcGISAuthenticationChallenge(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge, param1: any): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export abstract class ArcGISAuthenticationChallengeResponse {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse>;
				}
				export module ArcGISAuthenticationChallengeResponse {
					export class Cancel extends com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse.Cancel>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse.Cancel;
					}
					export class ContinueAndFail extends com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse.ContinueAndFail>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse.ContinueAndFail;
					}
					export class ContinueAndFailWithError extends com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse.ContinueAndFailWithError>;
						public constructor(param0: java.lang.Throwable);
						public component1(): java.lang.Throwable;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public copy(param0: java.lang.Throwable): com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse.ContinueAndFailWithError;
						public toString(): string;
						public getError(): java.lang.Throwable;
					}
					export class ContinueWithCredential extends com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse.ContinueWithCredential>;
						public component1(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
						public constructor(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential);
						public hashCode(): number;
						public equals(param0: any): boolean;
						public copy(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential): com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse.ContinueWithCredential;
						public toString(): string;
						public getCredential(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export abstract class ArcGISCredential extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredential>;
					public toJson(): string;
					public getCoreArcGISCredential$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISCredential;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.httpcore.authentication.ArcGISCredentialType;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getUsername(): string;
					public equals(param0: any): boolean;
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public "getArcGISTokenInfo-IoAF18A$arcgis_maps_any_release"(param0: any): any;
					public getReferer(): string;
					public isValid$arcgis_maps_any_release(): boolean;
					public hashCode(): number;
					public isTokenInHeaderSupported$arcgis_maps_any_release(): boolean;
					public getServerContext(): string;
				}
				export module ArcGISCredential {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredential.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.httpcore.authentication.ArcGISCredential;
					}
					export class Factory extends com.arcgismaps.httpcore.authentication.ArcGISCredentialFactory {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredential.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredential.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class ArcGISCredentialFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreArcGISCredential,com.arcgismaps.httpcore.authentication.ArcGISCredential> {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcGISCredential): com.arcgismaps.httpcore.authentication.ArcGISCredential;
					public convertToPublic(param0: any): any;
				}
				export module ArcGISCredentialFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

// declare module com {
// 	export module arcgismaps {
// 		export module httpcore {
// 			export module authentication {
// 				export class ArcGISCredentialStore {
// 					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore>;
// 					public removeCredentials(param0: string): java.util.List<com.arcgismaps.httpcore.authentication.ArcGISCredential>;
// 					public getCredential(param0: string): com.arcgismaps.httpcore.authentication.ArcGISCredential;
// 					public getCredentialStoreChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent>;
// 					public "add-gIAlu-s"(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential, param1: string): any;
// 					public getPersistentStore$arcgis_maps_any_release(): com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore;
// 					public remove(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential): boolean;
// 					public add(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential): void;
// 					public constructor();
// 					public getCredentials(): java.util.List<com.arcgismaps.httpcore.authentication.ArcGISCredential>;
// 					public removeAll(): void;
// 					public close(): void;
// 					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISCredentialStore);
// 					public getCoreArcGISCredentialStore$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISCredentialStore;
// 				}
// 				export module ArcGISCredentialStore {
// 					export class Companion {
// 						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Companion>;
// 						public "create-0E7RQCE$arcgis_maps_any_release"(param0: kotlinx.coroutines.CoroutineScope, param1: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore, param2: any): any;
// 						public "create-gIAlu-s$arcgis_maps_any_release"(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore, param1: any): any;
// 						public "createWithPersistence-IoAF18A"(param0: any): any;
// 					}
// 					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISCredentialStore,com.arcgismaps.httpcore.authentication.ArcGISCredentialStore> {
// 						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Factory>;
// 						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Factory;
// 					}
// 					export abstract class Key extends com.arcgismaps.io.JsonSerializable {
// 						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key>;
// 						public toJson(): string;
// 					}
// 					export module Key {
// 						export class Companion {
// 							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Companion>;
// 							public fromJsonOrNull(param0: string): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key;
// 							public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key>;
// 						}
// 						export class ServerContext extends com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key {
// 							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.ServerContext>;
// 							public copy(param0: string): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.ServerContext;
// 							public hashCode(): number;
// 							public constructor(param0: string);
// 							public toJson(): string;
// 							public toString(): string;
// 							public equals(param0: any): boolean;
// 							public component1(): string;
// 							public getServerContext(): string;
// 						}
							
// 						export module ServerContext {
// 								export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.ServerContext> {
// 									public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.ServerContext.serializer>;
// 									public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.ServerContext.serializer;
// 									public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.ServerContext): void;
// 									public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
// 									public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
// 									public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
// 									public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.ServerContext;
// 								}
// 							}
// 							export class Companion {
// 								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.ServerContext.Companion>;
// 								public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.ServerContext>;
// 							}
// 						}
// 						export class Url extends com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key {
// 							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Url>;
// 							public copy(param0: string): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Url;
// 							public hashCode(): number;
// 							public constructor(param0: string);
// 							public getUrl(): string;
// 							public toJson(): string;
// 							public toString(): string;
// 							public equals(param0: any): boolean;
// 							public component1(): string;
// 						}
							
// 						export module Url {
// 								export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Url> {
// 									public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Url.serializer>;
// 									public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Url.serializer;
// 									public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
// 									public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Url;
// 									public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
// 									public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Url): void;
// 									public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
// 								}
// 							}
// 							export class Companion {
// 								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Url.Companion>;
// 								public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key.Url>;
// 							}
// 						}
// 					}
// 					export class StoreChangedEvent {
// 						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent>;
// 						public getAction(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action;
// 						public constructor(param0: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action);
// 						public copy(param0: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent;
// 						public hashCode(): number;
// 						public equals(param0: any): boolean;
// 						public component1(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action;
// 						public toString(): string;
// 					}
// 					export module StoreChangedEvent {
// 						export abstract class Action {
// 							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action>;
// 						}
// 						export module Action {
// 							export class AllCredentialsRemoved extends com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action {
// 								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action.AllCredentialsRemoved>;
// 								public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action.AllCredentialsRemoved;
// 							}
// 							export class CredentialAdded extends com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action {
// 								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action.CredentialAdded>;
// 								public getKey(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key;
// 								public toString(): string;
// 								public component1(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
// 								public constructor(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential, param1: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key);
// 								public equals(param0: any): boolean;
// 								public getAddedCredential(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
// 								public component2(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key;
// 								public hashCode(): number;
// 								public copy(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential, param1: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action.CredentialAdded;
// 							}
// 							export class CredentialRemoved extends com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action {
// 								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action.CredentialRemoved>;
// 								public getKey(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key;
// 								public toString(): string;
// 								public component1(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
// 								public constructor(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential, param1: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key);
// 								public equals(param0: any): boolean;
// 								public copy(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential, param1: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action.CredentialRemoved;
// 								public component2(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key;
// 								public hashCode(): number;
// 								public getRemovedCredential(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
// 							}
// 							export class CredentialUpdated extends com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action {
// 								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action.CredentialUpdated>;
// 								public getKey(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key;
// 								public toString(): string;
// 								public component1(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
// 								public constructor(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential, param1: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key);
// 								public equals(param0: any): boolean;
// 								public copy(param0: com.arcgismaps.httpcore.authentication.ArcGISCredential, param1: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.StoreChangedEvent.Action.CredentialUpdated;
// 								public component2(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key;
// 								public hashCode(): number;
// 								public getUpdatedCredential(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
// 							}
// 						}
// 					}
// 				}
// 			}
// 		}
	


declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export abstract class ArcGISCredentialType {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialType>;
					public getCoreArcGISCredentialType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISCredentialType;
				}
				export module ArcGISCredentialType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialType.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredentialType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcGISCredentialType): com.arcgismaps.httpcore.authentication.ArcGISCredentialType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialType.Factory.WhenMappings>;
						}
					}
					export class OAuthApplicationCredential extends com.arcgismaps.httpcore.authentication.ArcGISCredentialType {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialType.OAuthApplicationCredential>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredentialType.OAuthApplicationCredential;
					}
					export class OAuthUserCredential extends com.arcgismaps.httpcore.authentication.ArcGISCredentialType {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialType.OAuthUserCredential>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredentialType.OAuthUserCredential;
					}
					export class PregeneratedTokenCredential extends com.arcgismaps.httpcore.authentication.ArcGISCredentialType {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialType.PregeneratedTokenCredential>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredentialType.PregeneratedTokenCredential;
					}
					export class TokenCredential extends com.arcgismaps.httpcore.authentication.ArcGISCredentialType {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISCredentialType.TokenCredential>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISCredentialType.TokenCredential;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class ArcGISTokenInfo {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISTokenInfo>;
					public equals(param0: any): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISTokenInfo);
					public getExpirationDate$arcgis_maps_any_release(): java.time.Instant;
					public isExpired(): boolean;
					public getAccessToken$arcgis_maps_any_release(): string;
					public getCoreArcGISTokenInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISTokenInfo;
					public hashCode(): number;
					public isSslRequired$arcgis_maps_any_release(): boolean;
				}
				export module ArcGISTokenInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISTokenInfo,com.arcgismaps.httpcore.authentication.ArcGISTokenInfo> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ArcGISTokenInfo.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.ArcGISTokenInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class AuthenticationManager {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.AuthenticationManager>;
					public getArcGISAuthenticationChallengeHandler(): com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeHandler;
					public setArcGISCredentialStore(param0: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore): void;
					public setArcGISAuthenticationChallengeHandler(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeHandler): void;
					public getPortalNetworkSecuredInquiry$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.httpcore.authentication.PortalNetworkSecuredInquiry>;
					public setNetworkCredentialStore(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore): void;
					public getCoreAuthenticationManager$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAuthenticationManager;
					public getRefererAppId$arcgis_maps_any_release(): string;
					public getMaxRequestRetryCount$arcgis_maps_any_release(): number;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreAuthenticationManager);
					public setRefererAppId$arcgis_maps_any_release(param0: string): void;
					public getNetworkCredentialStore(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore;
					public setNetworkAuthenticationChallengeHandler(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeHandler): void;
					public getArcGISCredentialStore(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore;
					public getNetworkAuthenticationChallengeHandler(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeHandler;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class CertificateCredential extends com.arcgismaps.httpcore.authentication.NetworkCredential {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.CertificateCredential>;
					public equals(param0: any): boolean;
					public toJson(): string;
					public toString(): string;
					public component1(): string;
					public constructor(param0: string);
					public copy(param0: string): com.arcgismaps.httpcore.authentication.CertificateCredential;
					public getAlias(): string;
					public hashCode(): number;
				}
					
				export module CertificateCredential {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.httpcore.authentication.CertificateCredential> {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.CertificateCredential.serializer>;
							public static INSTANCE: com.arcgismaps.httpcore.authentication.CertificateCredential.serializer;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.httpcore.authentication.CertificateCredential;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.httpcore.authentication.CertificateCredential): void;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.CertificateCredential.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.CertificateCredential>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class EncryptedPersistentArcGISCredentialStore extends com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.EncryptedPersistentArcGISCredentialStore>;
					public getCredentials(param0: any): any;
					public remove(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
					public removeAll(param0: any): any;
					public add(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
					public update(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
				}
				export module EncryptedPersistentArcGISCredentialStore {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.EncryptedPersistentArcGISCredentialStore.Companion>;
						public create(): com.arcgismaps.httpcore.authentication.EncryptedPersistentArcGISCredentialStore;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class EncryptedPersistentNetworkCredentialStore extends com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.EncryptedPersistentNetworkCredentialStore>;
					public getCredentials(param0: any): any;
					public add(param0: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry, param1: any): any;
					public removeAll(param0: any): any;
					public remove(param0: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry, param1: any): any;
				}
				export module EncryptedPersistentNetworkCredentialStore {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.EncryptedPersistentNetworkCredentialStore.Companion>;
						public create(): com.arcgismaps.httpcore.authentication.EncryptedPersistentNetworkCredentialStore;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class MockPersistentArcGISCredentialStore extends com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.MockPersistentArcGISCredentialStore>;
					public awaitUpdate(param0: any): any;
					public getCredentials(param0: any): any;
					public constructor();
					public constructor(param0: java.util.Map<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key,com.arcgismaps.httpcore.authentication.ArcGISCredential>);
					public remove(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
					public removeAll(param0: any): any;
					public awaitRemoveAll(param0: any): any;
					public awaitRemove(param0: any): any;
					public awaitAdd(param0: any): any;
					public getCredentials(): java.util.Map<com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key,com.arcgismaps.httpcore.authentication.ArcGISCredential>;
					public add(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
					public update(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class MockPersistentNetworkCredentialStore extends com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.MockPersistentNetworkCredentialStore>;
					public getCredentials(param0: any): any;
					public add(param0: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry, param1: any): any;
					public constructor();
					public constructor(param0: java.util.Map<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key,com.arcgismaps.httpcore.authentication.NetworkCredential>);
					public removeAll(param0: any): any;
					public getAllCredentialsRemoved(): kotlinx.coroutines.flow.MutableStateFlow<java.lang.Integer>;
					public remove(param0: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry, param1: any): any;
					public getCredentials(): java.util.Map<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key,com.arcgismaps.httpcore.authentication.NetworkCredential>;
					public getCredentialAdded(): kotlinx.coroutines.flow.MutableStateFlow<java.lang.Integer>;
					public getCredentialRemoved(): kotlinx.coroutines.flow.MutableStateFlow<java.lang.Integer>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class NetworkAuthenticationChallenge {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge>;
					public getNetworkAuthenticationType(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationType;
					public getFailureCount$arcgis_maps_any_release(): number;
					public component3(): java.lang.Throwable;
					public setFailureCount$arcgis_maps_any_release(param0: number): void;
					public getCause(): java.lang.Throwable;
					public copy(param0: string, param1: com.arcgismaps.httpcore.authentication.NetworkAuthenticationType, param2: java.lang.Throwable): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge;
					public equals(param0: any): boolean;
					public toString(): string;
					public component1(): string;
					public component2(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationType;
					public constructor(param0: string, param1: com.arcgismaps.httpcore.authentication.NetworkAuthenticationType, param2: java.lang.Throwable);
					public hashCode(): number;
					public getHostname(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class NetworkAuthenticationChallengeHandler {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeHandler>;
					/**
					 * Constructs a new instance of the com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeHandler interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						handleNetworkAuthenticationChallenge(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge, param1: any): any;
					});
					public constructor();
					public handleNetworkAuthenticationChallenge(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge, param1: any): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export abstract class NetworkAuthenticationChallengeResponse {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse>;
				}
				export module NetworkAuthenticationChallengeResponse {
					export class Cancel extends com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse.Cancel>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse.Cancel;
					}
					export class ContinueAndFail extends com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse.ContinueAndFail>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse.ContinueAndFail;
					}
					export class ContinueAndFailWithError extends com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse.ContinueAndFailWithError>;
						public constructor(param0: java.lang.Throwable);
						public component1(): java.lang.Throwable;
						public copy(param0: java.lang.Throwable): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse.ContinueAndFailWithError;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public toString(): string;
						public getError(): java.lang.Throwable;
					}
					export class ContinueWithCredential extends com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse.ContinueWithCredential>;
						public component1(): com.arcgismaps.httpcore.authentication.NetworkCredential;
						public copy(param0: com.arcgismaps.httpcore.authentication.NetworkCredential): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse.ContinueWithCredential;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public constructor(param0: com.arcgismaps.httpcore.authentication.NetworkCredential);
						public getCredential(): com.arcgismaps.httpcore.authentication.NetworkCredential;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export abstract class NetworkAuthenticationType {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationType>;
				}
				export module NetworkAuthenticationType {
					export class ClientCertificate extends com.arcgismaps.httpcore.authentication.NetworkAuthenticationType {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.ClientCertificate>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.ClientCertificate;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.ClientCertificate>;
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.NetworkAuthenticationType>;
					}
					export class ServerTrust extends com.arcgismaps.httpcore.authentication.NetworkAuthenticationType {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.ServerTrust>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.ServerTrust;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.ServerTrust>;
					}
					export class UsernamePassword extends com.arcgismaps.httpcore.authentication.NetworkAuthenticationType {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.UsernamePassword>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.UsernamePassword;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.NetworkAuthenticationType.UsernamePassword>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export abstract class NetworkCredential extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredential>;
					public toJson(): string;
					public getValidationStatus$arcgis_maps_any_release(): kotlinx.coroutines.flow.MutableStateFlow<com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus>;
				}
				export module NetworkCredential {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredential.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.httpcore.authentication.NetworkCredential;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.NetworkCredential>;
					}
					export abstract class ValidationStatus {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus>;
					}
					export module ValidationStatus {
						export class Invalid extends com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus.Invalid>;
							public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus.Invalid;
						}
						export class NotValidated extends com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus.NotValidated>;
							public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus.NotValidated;
						}
						export class Valid extends com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus.Valid>;
							public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkCredential.ValidationStatus.Valid;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class NetworkCredentialStore {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore>;
					public constructor(param0: kotlinx.coroutines.CoroutineScope, param1: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore);
					public getSize$arcgis_maps_any_release(param0: any): any;
					public getPersistentStore$arcgis_maps_any_release(): com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore;
					public propose$arcgis_maps_any_release(param0: string, param1: com.arcgismaps.httpcore.authentication.NetworkCredential, param2: any): any;
					public "removeAll-IoAF18A"(param0: any): any;
					public "getCredentials-gIAlu-s"(param0: string, param1: any): any;
					public getOnStoreCleared$arcgis_maps_any_release(): any;
					public getCredential$arcgis_maps_any_release(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge, param1: any): any;
					public constructor();
					public getCredentialStoreChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent>;
					public setOnStoreCleared$arcgis_maps_any_release(param0: any): void;
					public close(): void;
					public getProposedCredential$arcgis_maps_any_release(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge, param1: any): any;
					public getProposedCredentialsSize$arcgis_maps_any_release(param0: any): any;
				}
				export module NetworkCredentialStore {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Companion>;
						public "createWithPersistence-0E7RQCE$arcgis_maps_any_release"(param0: kotlinx.coroutines.CoroutineScope, param1: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore, param2: any): any;
						public "createWithPersistence-gIAlu-s$arcgis_maps_any_release"(param0: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore, param1: any): any;
						public "createWithPersistence-IoAF18A"(param0: any): any;
					}
					export class Key extends com.arcgismaps.io.JsonSerializable {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key>;
						public getHostname(): string;
						public copy(param0: string, param1: com.arcgismaps.httpcore.authentication.NetworkAuthenticationType): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
						public component1(): string;
						public component2(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationType;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public toJson(): string;
						public toString(): string;
						public getType(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationType;
					}
						
					export module Key {
							export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key> {
								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key.serializer>;
								public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key.serializer;
								public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key): void;
								public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
								public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
								public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
								public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
							}
						}
						export class Companion {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key.Companion>;
							public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key>;
							public fromJsonOrNull(param0: string): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
							public create(param0: string, param1: com.arcgismaps.httpcore.authentication.NetworkAuthenticationType): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
						}
					}
					export class StoreChangedEvent {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent>;
						public copy(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent;
						public constructor(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action);
						public component1(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action;
						public getAction(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public toString(): string;
					}
					export module StoreChangedEvent {
						export abstract class Action {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action>;
						}
						export module Action {
							export class AllCredentialsRemoved extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action {
								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action.AllCredentialsRemoved>;
								public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action.AllCredentialsRemoved;
							}
							export class CredentialAdded extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action {
								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action.CredentialAdded>;
								public toString(): string;
								public copy(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param1: com.arcgismaps.httpcore.authentication.NetworkCredential): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action.CredentialAdded;
								public equals(param0: any): boolean;
								public getKey(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
								public component2(): com.arcgismaps.httpcore.authentication.NetworkCredential;
								public constructor(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param1: com.arcgismaps.httpcore.authentication.NetworkCredential);
								public component1(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
								public hashCode(): number;
								public getAddedCredential(): com.arcgismaps.httpcore.authentication.NetworkCredential;
							}
							export class CredentialUpdated extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action {
								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action.CredentialUpdated>;
								public toString(): string;
								public getUpdatedCredential(): com.arcgismaps.httpcore.authentication.NetworkCredential;
								public copy(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param1: com.arcgismaps.httpcore.authentication.NetworkCredential): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreChangedEvent.Action.CredentialUpdated;
								public equals(param0: any): boolean;
								public getKey(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
								public component2(): com.arcgismaps.httpcore.authentication.NetworkCredential;
								public constructor(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param1: com.arcgismaps.httpcore.authentication.NetworkCredential);
								public component1(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
								public hashCode(): number;
							}
						}
					}
					export abstract class StoreMsg {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg>;
					}
					export module StoreMsg {
						export abstract class CredentialStoreType {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType>;
						}
						export module CredentialStoreType {
							export class Proposed extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType {
								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType.Proposed>;
								public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType.Proposed;
							}
							export class Valid extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType {
								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType.Valid>;
								public static INSTANCE: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType.Valid;
							}
						}
						export class GetCredential extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.GetCredential>;
							public hashCode(): number;
							public getCredentialStoreType(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType;
							public component2(): kotlinx.coroutines.CompletableDeferred<com.arcgismaps.httpcore.authentication.NetworkCredential>;
							public component3(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType;
							public toString(): string;
							public getChallenge(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge;
							public component1(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge;
							public equals(param0: any): boolean;
							public getResponse(): kotlinx.coroutines.CompletableDeferred<com.arcgismaps.httpcore.authentication.NetworkCredential>;
							public copy(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge, param1: kotlinx.coroutines.CompletableDeferred<com.arcgismaps.httpcore.authentication.NetworkCredential>, param2: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.GetCredential;
							public constructor(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge, param1: kotlinx.coroutines.CompletableDeferred<com.arcgismaps.httpcore.authentication.NetworkCredential>, param2: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType);
						}
						export class GetCredentials extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.GetCredentials>;
							public getResponse(): kotlinx.coroutines.CompletableDeferred<java.util.List<com.arcgismaps.httpcore.authentication.NetworkCredential>>;
							public getHostname(): string;
							public hashCode(): number;
							public component2(): kotlinx.coroutines.CompletableDeferred<java.util.List<com.arcgismaps.httpcore.authentication.NetworkCredential>>;
							public constructor(param0: string, param1: kotlinx.coroutines.CompletableDeferred<java.util.List<com.arcgismaps.httpcore.authentication.NetworkCredential>>);
							public copy(param0: string, param1: kotlinx.coroutines.CompletableDeferred<java.util.List<com.arcgismaps.httpcore.authentication.NetworkCredential>>): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.GetCredentials;
							public toString(): string;
							public equals(param0: any): boolean;
							public component1(): string;
						}
						export class GetSize extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.GetSize>;
							public constructor(param0: kotlinx.coroutines.CompletableDeferred<java.lang.Integer>, param1: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType);
							public hashCode(): number;
							public component1(): kotlinx.coroutines.CompletableDeferred<java.lang.Integer>;
							public getCredentialStoreType(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType;
							public getResponse(): kotlinx.coroutines.CompletableDeferred<java.lang.Integer>;
							public copy(param0: kotlinx.coroutines.CompletableDeferred<java.lang.Integer>, param1: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.GetSize;
							public component2(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.CredentialStoreType;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class Propose extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.Propose>;
							public constructor(param0: com.arcgismaps.httpcore.authentication.NetworkCredential, param1: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param2: kotlinx.coroutines.CompletableDeferred<any>);
							public component2(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
							public component3(): kotlinx.coroutines.CompletableDeferred<any>;
							public hashCode(): number;
							public getKey(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
							public toString(): string;
							public getCredential(): com.arcgismaps.httpcore.authentication.NetworkCredential;
							public component1(): com.arcgismaps.httpcore.authentication.NetworkCredential;
							public equals(param0: any): boolean;
							public getResponse(): kotlinx.coroutines.CompletableDeferred<any>;
							public copy(param0: com.arcgismaps.httpcore.authentication.NetworkCredential, param1: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param2: kotlinx.coroutines.CompletableDeferred<any>): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.Propose;
						}
						export class PutValid extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.PutValid>;
							public constructor(param0: com.arcgismaps.httpcore.authentication.NetworkCredential, param1: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param2: kotlinx.coroutines.CompletableDeferred<any>);
							public component2(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
							public component3(): kotlinx.coroutines.CompletableDeferred<any>;
							public hashCode(): number;
							public copy(param0: com.arcgismaps.httpcore.authentication.NetworkCredential, param1: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param2: kotlinx.coroutines.CompletableDeferred<any>): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.PutValid;
							public getKey(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
							public toString(): string;
							public getCredential(): com.arcgismaps.httpcore.authentication.NetworkCredential;
							public component1(): com.arcgismaps.httpcore.authentication.NetworkCredential;
							public equals(param0: any): boolean;
							public getResponse(): kotlinx.coroutines.CompletableDeferred<any>;
						}
						export class RemoveAll extends com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.RemoveAll>;
							public hashCode(): number;
							public constructor(param0: kotlinx.coroutines.CompletableDeferred<any>);
							public component1(): kotlinx.coroutines.CompletableDeferred<any>;
							public copy(param0: kotlinx.coroutines.CompletableDeferred<any>): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.StoreMsg.RemoveAll;
							public toString(): string;
							public equals(param0: any): boolean;
							public getResponse(): kotlinx.coroutines.CompletableDeferred<any>;
						}
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class OAuthApplicationCredential extends com.arcgismaps.httpcore.authentication.ArcGISCredential {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthApplicationCredential>;
					public getCoreOAuthApplicationCredential$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOAuthApplicationCredential;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOAuthApplicationCredential);
					public getClientId(): string;
					public toJson(): string;
					public getTokenExpirationInterval(): java.lang.Integer;
					public "getTokenInfo-IoAF18A"(param0: any): any;
					public getPortalUrl(): string;
				}
				export module OAuthApplicationCredential {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthApplicationCredential.Companion>;
						public "create-yxL6bBk"(param0: string, param1: string, param2: string, param3: java.lang.Integer, param4: any): any;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOAuthApplicationCredential,com.arcgismaps.httpcore.authentication.OAuthApplicationCredential> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthApplicationCredential.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthApplicationCredential.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class OAuthApplicationTokenInfo {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthApplicationTokenInfo>;
					public equals(param0: any): boolean;
					public getCoreOAuthApplicationTokenInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOAuthApplicationTokenInfo;
					public getAccessToken(): string;
					public getExpirationDate(): java.time.Instant;
					public hashCode(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOAuthApplicationTokenInfo);
				}
				export module OAuthApplicationTokenInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOAuthApplicationTokenInfo,com.arcgismaps.httpcore.authentication.OAuthApplicationTokenInfo> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthApplicationTokenInfo.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthApplicationTokenInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class OAuthUserConfiguration extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserConfiguration>;
					public toJson(): string;
					public getClientId(): string;
					public getCulture(): java.util.Locale;
					public canBeUsedForUrl(param0: string): boolean;
					public getRefreshTokenExchangeInterval(): com.arcgismaps.httpcore.authentication.RefreshTokenExchangeInterval;
					public getFederatedTokenExpirationInterval(): java.lang.Integer;
					public getPreferPrivateWebBrowserSession(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOAuthUserConfiguration);
					public getPortalUrl(): string;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getRefreshTokenExpirationInterval(): com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval;
					public getRedirectUrl(): string;
					public equals(param0: any): boolean;
					public getShowCancelButton(): boolean;
					public constructor(param0: string, param1: string, param2: string, param3: java.util.Locale, param4: com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval, param5: com.arcgismaps.httpcore.authentication.RefreshTokenExchangeInterval, param6: java.lang.Integer, param7: boolean, param8: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle, param9: boolean);
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getCoreOAuthUserConfiguration$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOAuthUserConfiguration;
					public hashCode(): number;
					public getUserInterfaceStyle(): com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle;
				}
				export module OAuthUserConfiguration {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.httpcore.authentication.OAuthUserConfiguration;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOAuthUserConfiguration,com.arcgismaps.httpcore.authentication.OAuthUserConfiguration> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.Factory;
					}
					export abstract class UserInterfaceStyle {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle>;
						public getCoreUserInterfaceStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUserInterfaceStyle;
					}
					export module UserInterfaceStyle {
						export class Dark extends com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle.Dark>;
							public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle.Dark;
						}
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle.Factory>;
							public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUserInterfaceStyle): com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle.Factory.WhenMappings>;
							}
						}
						export class Light extends com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle.Light>;
							public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle.Light;
						}
						export class Unspecified extends com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle.Unspecified>;
							public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration.UserInterfaceStyle.Unspecified;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class OAuthUserCredential extends com.arcgismaps.httpcore.authentication.ArcGISCredential {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserCredential>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOAuthUserCredential);
					public toJson(): string;
					public getCoreOAuthUserCredential$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOAuthUserCredential;
					public getAuthorizationCode(): string;
					public getConfiguration(): com.arcgismaps.httpcore.authentication.OAuthUserConfiguration;
					public "revokeToken-IoAF18A"(param0: any): any;
					public "getTokenInfo-IoAF18A"(param0: any): any;
				}
				export module OAuthUserCredential {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserCredential.Companion>;
						public "create-0E7RQCE"(param0: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration, param1: any, param2: any): any;
						public "createWithLoginContext-0E7RQCE$arcgis_maps_any_release"(param0: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration, param1: any, param2: any): any;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOAuthUserCredential,com.arcgismaps.httpcore.authentication.OAuthUserCredential> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserCredential.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthUserCredential.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class OAuthUserLoginPrompt {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserLoginPrompt>;
					public getAuthorizeUrl$arcgis_maps_any_release(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOAuthUserLoginPrompt);
					public getPreferPrivateWebBrowserSession$arcgis_maps_any_release(): boolean;
					public getCoreOAuthUserLoginPrompt$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOAuthUserLoginPrompt;
					public getContext$arcgis_maps_any_release(): any;
					public getRedirectUrl$arcgis_maps_any_release(): string;
					public respond(param0: any): void;
					public respond(param0: string): void;
				}
				export module OAuthUserLoginPrompt {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOAuthUserLoginPrompt,com.arcgismaps.httpcore.authentication.OAuthUserLoginPrompt> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserLoginPrompt.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthUserLoginPrompt.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class OAuthUserSignIn {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserSignIn>;
					public equals(param0: any): boolean;
					public toString(): string;
					public component1(): string;
					public constructor(param0: string, param1: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration, param2: com.arcgismaps.httpcore.authentication.OAuthUserLoginPrompt);
					public component2(): com.arcgismaps.httpcore.authentication.OAuthUserConfiguration;
					public copy(param0: string, param1: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration, param2: com.arcgismaps.httpcore.authentication.OAuthUserLoginPrompt): com.arcgismaps.httpcore.authentication.OAuthUserSignIn;
					public getOAuthUserConfiguration(): com.arcgismaps.httpcore.authentication.OAuthUserConfiguration;
					public getAuthorizeUrl(): string;
					public complete(param0: string): void;
					public hashCode(): number;
					public cancel(param0: java.lang.Exception): void;
				}
				export module OAuthUserSignIn {
					export class Bundle {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserSignIn.Bundle>;
						public component2(): any;
						public constructor(param0: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration, param1: any);
						public hashCode(): number;
						public equals(param0: any): boolean;
						public component1(): com.arcgismaps.httpcore.authentication.OAuthUserConfiguration;
						public getOAuthUserConfiguration(): com.arcgismaps.httpcore.authentication.OAuthUserConfiguration;
						public getStartSignIn(): any;
						public copy(param0: com.arcgismaps.httpcore.authentication.OAuthUserConfiguration, param1: any): com.arcgismaps.httpcore.authentication.OAuthUserSignIn.Bundle;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class OAuthUserTokenInfo {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserTokenInfo>;
					public equals(param0: any): boolean;
					public getRefreshTokenExchangeDate(): java.time.Instant;
					public getRefreshTokenExpirationDate(): java.time.Instant;
					public getRefreshToken(): string;
					public isSslRequired(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOAuthUserTokenInfo);
					public getAccessToken(): string;
					public getExpirationDate(): java.time.Instant;
					public hashCode(): number;
					public getCoreOAuthUserTokenInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOAuthUserTokenInfo;
				}
				export module OAuthUserTokenInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOAuthUserTokenInfo,com.arcgismaps.httpcore.authentication.OAuthUserTokenInfo> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.OAuthUserTokenInfo.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.OAuthUserTokenInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class PasswordCredential extends com.arcgismaps.httpcore.authentication.NetworkCredential {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PasswordCredential>;
					public constructor(param0: string, param1: string);
					public getUsername(): string;
					public equals(param0: any): boolean;
					public getPassword(): string;
					public toJson(): string;
					public toString(): string;
					public component1(): string;
					public copy(param0: string, param1: string): com.arcgismaps.httpcore.authentication.PasswordCredential;
					public component2(): string;
					public hashCode(): number;
				}
					
				export module PasswordCredential {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.httpcore.authentication.PasswordCredential> {
							public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PasswordCredential.serializer>;
							public static INSTANCE: com.arcgismaps.httpcore.authentication.PasswordCredential.serializer;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.httpcore.authentication.PasswordCredential;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.httpcore.authentication.PasswordCredential): void;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PasswordCredential.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.PasswordCredential>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class PersistentArcGISCredentialStore {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore>;
					/**
					 * Constructs a new instance of the com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						add(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
						remove(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
						update(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
						removeAll(param0: any): any;
						getCredentials(param0: any): any;
					});
					public constructor();
					public getCredentials(param0: any): any;
					public remove(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
					public removeAll(param0: any): any;
					public add(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
					public update(param0: com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry, param1: any): any;
				}
				export module PersistentArcGISCredentialStore {
					export class Entry {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry>;
						public copy(param0: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key, param1: com.arcgismaps.httpcore.authentication.ArcGISCredential): com.arcgismaps.httpcore.authentication.PersistentArcGISCredentialStore.Entry;
						public constructor(param0: com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key, param1: com.arcgismaps.httpcore.authentication.ArcGISCredential);
						public getKey(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key;
						public component1(): com.arcgismaps.httpcore.authentication.ArcGISCredentialStore.Key;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public component2(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
						public toString(): string;
						public getCredential(): com.arcgismaps.httpcore.authentication.ArcGISCredential;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class PersistentNetworkCredentialStore {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore>;
					/**
					 * Constructs a new instance of the com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						add(param0: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry, param1: any): any;
						remove(param0: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry, param1: any): any;
						removeAll(param0: any): any;
						getCredentials(param0: any): any;
					});
					public constructor();
					public getCredentials(param0: any): any;
					public add(param0: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry, param1: any): any;
					public removeAll(param0: any): any;
					public remove(param0: com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry, param1: any): any;
				}
				export module PersistentNetworkCredentialStore {
					export class Entry {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry>;
						public component1(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
						public getKey(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key;
						public component2(): com.arcgismaps.httpcore.authentication.NetworkCredential;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getCredential(): com.arcgismaps.httpcore.authentication.NetworkCredential;
						public copy(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param1: com.arcgismaps.httpcore.authentication.NetworkCredential): com.arcgismaps.httpcore.authentication.PersistentNetworkCredentialStore.Entry;
						public toString(): string;
						public constructor(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore.Key, param1: com.arcgismaps.httpcore.authentication.NetworkCredential);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class PortalNetworkSecuredInquiry {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PortalNetworkSecuredInquiry>;
					public respond(param0: boolean): void;
					public getCorePortalNetworkSecuredInquiry$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiry;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiry);
					public getPortalUrl$arcgis_maps_any_release(): string;
				}
				export module PortalNetworkSecuredInquiry {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiry,com.arcgismaps.httpcore.authentication.PortalNetworkSecuredInquiry> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PortalNetworkSecuredInquiry.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.PortalNetworkSecuredInquiry.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class PregeneratedTokenCredential extends com.arcgismaps.httpcore.authentication.ArcGISCredential {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PregeneratedTokenCredential>;
					public toJson(): string;
					public constructor(param0: string, param1: com.arcgismaps.httpcore.authentication.TokenInfo, param2: string);
					public getCorePregeneratedTokenCredential$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePregeneratedTokenCredential;
					public getTokenInfo(): com.arcgismaps.httpcore.authentication.TokenInfo;
					public constructor(param0: com.arcgismaps.internal.jni.CorePregeneratedTokenCredential);
				}
				export module PregeneratedTokenCredential {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePregeneratedTokenCredential,com.arcgismaps.httpcore.authentication.PregeneratedTokenCredential> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.PregeneratedTokenCredential.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.PregeneratedTokenCredential.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export abstract class RefreshTokenExchangeInterval {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.RefreshTokenExchangeInterval>;
					public getMinutes(): number;
				}
				export module RefreshTokenExchangeInterval {
					export class Minutes extends com.arcgismaps.httpcore.authentication.RefreshTokenExchangeInterval {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.RefreshTokenExchangeInterval.Minutes>;
						public constructor(param0: number);
					}
					export class Never extends com.arcgismaps.httpcore.authentication.RefreshTokenExchangeInterval {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.RefreshTokenExchangeInterval.Never>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.RefreshTokenExchangeInterval.Never;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export abstract class RefreshTokenExpirationInterval {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval>;
					public getMinutes(): number;
				}
				export module RefreshTokenExpirationInterval {
					export class Default extends com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval.Default>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval.Default;
					}
					export class Maximum extends com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval.Maximum>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval.Maximum;
					}
					export class Minutes extends com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.RefreshTokenExpirationInterval.Minutes>;
						public constructor(param0: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class ServerTrust extends com.arcgismaps.httpcore.authentication.NetworkCredential {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.ServerTrust>;
					public static INSTANCE: com.arcgismaps.httpcore.authentication.ServerTrust;
					public toJson(): string;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.httpcore.authentication.ServerTrust>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class TokenCredential extends com.arcgismaps.httpcore.authentication.ArcGISCredential {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.TokenCredential>;
					public toJson(): string;
					public getCoreTokenCredential$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTokenCredential;
					public getTokenExpirationInterval(): java.lang.Integer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTokenCredential);
					public "getTokenInfo-IoAF18A"(param0: any): any;
				}
				export module TokenCredential {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.TokenCredential.Companion>;
						public "createNetworkSecured-BWLJW6A"(param0: string, param1: string, param2: java.lang.Integer, param3: any): any;
						public "create-yxL6bBk"(param0: string, param1: string, param2: string, param3: java.lang.Integer, param4: any): any;
						public "createWithChallenge-yxL6bBk"(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge, param1: string, param2: string, param3: java.lang.Integer, param4: any): any;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTokenCredential,com.arcgismaps.httpcore.authentication.TokenCredential> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.TokenCredential.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.TokenCredential.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module authentication {
				export class TokenInfo {
					public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.TokenInfo>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTokenInfo);
					public equals(param0: any): boolean;
					public isExpired$arcgis_maps_any_release(): boolean;
					public getCoreTokenInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTokenInfo;
					public isSslRequired(): boolean;
					public getAccessToken(): string;
					public constructor(param0: string, param1: java.time.Instant, param2: boolean);
					public getExpirationDate(): java.time.Instant;
					public hashCode(): number;
				}
				export module TokenInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTokenInfo,com.arcgismaps.httpcore.authentication.TokenInfo> {
						public static class: java.lang.Class<com.arcgismaps.httpcore.authentication.TokenInfo.Factory>;
						public static INSTANCE: com.arcgismaps.httpcore.authentication.TokenInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module internal {
				export class AuthenticationChallengeQueue {
					public static class: java.lang.Class<com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue>;
					public constructor(param0: kotlinx.coroutines.CoroutineScope);
					public setOnCredentialStoreCleared(param0: any): void;
					public getArcGISAuthenticationChallengeHandler(): com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeHandler;
					public getOnCredentialStoreCleared(): any;
					public setArcGISAuthenticationChallengeHandler(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeHandler): void;
					public close(): void;
					public getNetworkCredentialStore(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore;
					public setNetworkCredentialStore(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore): void;
					public enqueue(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge, param1: any): any;
					public setNetworkAuthenticationChallengeHandler(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeHandler): void;
					public enqueue(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge, param1: any): any;
					public getNetworkAuthenticationChallengeHandler(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeHandler;
				}
				export module AuthenticationChallengeQueue {
					export class ArcGISAuthenticationChallengeQueueItem extends com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem {
						public static class: java.lang.Class<com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.ArcGISAuthenticationChallengeQueueItem>;
						public invoke(param0: any): any;
						public getResponse(): com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeResponse;
						public awaitResponse(param0: any): any;
						public constructor(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeHandler, param1: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge);
						public matches(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): boolean;
						public complete(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): void;
						public getChallenge$arcgis_maps_any_release(): com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge;
					}
					export class NetworkAuthenticationChallengeQueueItem extends com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem {
						public static class: java.lang.Class<com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.NetworkAuthenticationChallengeQueueItem>;
						public getResponse(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeResponse;
						public invoke(param0: any): any;
						public awaitResponse(param0: any): any;
						public matches(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): boolean;
						public complete(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): void;
						public constructor(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeHandler, param1: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge, param2: com.arcgismaps.httpcore.authentication.NetworkCredentialStore);
						public getChallenge$arcgis_maps_any_release(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge;
					}
					export class QueueItem {
						public static class: java.lang.Class<com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem>;
						/**
						 * Constructs a new instance of the com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue$QueueItem interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							invoke(param0: any): any;
							matches(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): boolean;
							complete(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): void;
						});
						public constructor();
						public invoke(param0: any): any;
						public matches(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): boolean;
						public complete(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): void;
					}
					export abstract class QueueMsg {
						public static class: java.lang.Class<com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueMsg>;
					}
					export module QueueMsg {
						export class EnqueueChallenge extends com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueMsg {
							public static class: java.lang.Class<com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueMsg.EnqueueChallenge>;
							public getChallenge(): com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem;
							public constructor(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem);
							public hashCode(): number;
							public copy(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueMsg.EnqueueChallenge;
							public toString(): string;
							public equals(param0: any): boolean;
							public component1(): com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem;
						}
						export class SanitizeQueueAndProceed extends com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueMsg {
							public static class: java.lang.Class<com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueMsg.SanitizeQueueAndProceed>;
							public getChallenge(): com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem;
							public constructor(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem);
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
							public component1(): com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem;
							public copy(param0: com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueItem): com.arcgismaps.httpcore.internal.AuthenticationChallengeQueue.QueueMsg.SanitizeQueueAndProceed;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module internal {
				export class AuthenticationDispatcher {
					public static class: java.lang.Class<com.arcgismaps.httpcore.internal.AuthenticationDispatcher>;
					public handleArcGISChallengeAsync(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallenge): kotlinx.coroutines.Deferred<any>;
					public setOnNetworkCredentialStoreCleared(param0: any): void;
					public getArcGISAuthenticationChallengeHandler(): com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeHandler;
					public getOnNetworkCredentialStoreCleared(): any;
					public constructor();
					public setArcGISAuthenticationChallengeHandler(param0: com.arcgismaps.httpcore.authentication.ArcGISAuthenticationChallengeHandler): void;
					public getNetworkCredentialStore(): com.arcgismaps.httpcore.authentication.NetworkCredentialStore;
					public setNetworkCredentialStore(param0: com.arcgismaps.httpcore.authentication.NetworkCredentialStore): void;
					public handleNetworkAuthenticationChallenge(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallenge, param1: any): any;
					public setNetworkAuthenticationChallengeHandler(param0: com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeHandler): void;
					public getNetworkAuthenticationChallengeHandler(): com.arcgismaps.httpcore.authentication.NetworkAuthenticationChallengeHandler;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module internal {
				export class HttpClient {
					public static class: java.lang.Class<com.arcgismaps.httpcore.internal.HttpClient>;
					/**
					 * Constructs a new instance of the com.arcgismaps.httpcore.internal.HttpClient interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						"execute-gIAlu-s"(param0: com.arcgismaps.httpcore.internal.HttpClientRequest, param1: any): any;
						getCache(): com.arcgismaps.httpcore.ArcGISHttpClient.Cache;
					});
					public constructor();
					public "execute-gIAlu-s"(param0: com.arcgismaps.httpcore.internal.HttpClientRequest, param1: any): any;
					public getCache(): com.arcgismaps.httpcore.ArcGISHttpClient.Cache;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module internal {
				export class HttpClientRequest {
					public static class: java.lang.Class<com.arcgismaps.httpcore.internal.HttpClientRequest>;
					public getUrl(): string;
					public getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
					public getParameters(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
					public getContentType(): string;
					public getFileParts(): java.util.List<com.arcgismaps.httpcore.FilePart>;
					public getHttpOperation(): com.arcgismaps.httpcore.HttpOperation;
					public getRawData(): androidNative.Array<number>;
				}
				export module HttpClientRequest {
					export class Builder {
						public static class: java.lang.Class<com.arcgismaps.httpcore.internal.HttpClientRequest.Builder>;
						public getHttpOperation$arcgis_maps_any_release(): com.arcgismaps.httpcore.HttpOperation;
						public setRawData$arcgis_maps_any_release(param0: androidNative.Array<number>): void;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getParameters$arcgis_maps_any_release(): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
						public userAgent(param0: string): com.arcgismaps.httpcore.internal.HttpClientRequest.Builder;
						public setParameters$arcgis_maps_any_release(param0: java.util.List<com.arcgismaps.httpcore.Request.Parameter>): void;
						public getHeaders$arcgis_maps_any_release(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
						public setHttpOperation$arcgis_maps_any_release(param0: com.arcgismaps.httpcore.HttpOperation): void;
						public rawData(param0: androidNative.Array<number>): com.arcgismaps.httpcore.internal.HttpClientRequest.Builder;
						public setHeaders$arcgis_maps_any_release(param0: java.util.List<com.arcgismaps.httpcore.Request.Header>): void;
						public copy(param0: string): com.arcgismaps.httpcore.internal.HttpClientRequest.Builder;
						public setUserAgent$arcgis_maps_any_release(param0: string): void;
						public getSafeUrl$arcgis_maps_any_release(): string;
						public setContentType$arcgis_maps_any_release(param0: string): void;
						public getRawData$arcgis_maps_any_release(): androidNative.Array<number>;
						public httpOperation(param0: com.arcgismaps.httpcore.HttpOperation): com.arcgismaps.httpcore.internal.HttpClientRequest.Builder;
						public fileParts(param0: java.lang.Iterable<com.arcgismaps.httpcore.FilePart>): com.arcgismaps.httpcore.internal.HttpClientRequest.Builder;
						public build(): com.arcgismaps.httpcore.internal.HttpClientRequest;
						public headers(param0: java.util.List<com.arcgismaps.httpcore.Request.Header>): com.arcgismaps.httpcore.internal.HttpClientRequest.Builder;
						public parameters(param0: java.util.List<com.arcgismaps.httpcore.Request.Parameter>): com.arcgismaps.httpcore.internal.HttpClientRequest.Builder;
						public getContentType$arcgis_maps_any_release(): string;
						public toString(): string;
						public setFileParts$arcgis_maps_any_release(param0: java.util.List<com.arcgismaps.httpcore.FilePart>): void;
						public getUserAgent$arcgis_maps_any_release(): string;
						public contentType(param0: string): com.arcgismaps.httpcore.internal.HttpClientRequest.Builder;
						public getFileParts$arcgis_maps_any_release(): java.util.List<com.arcgismaps.httpcore.FilePart>;
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module internal {
				export class HttpClientResponse {
					public static class: java.lang.Class<com.arcgismaps.httpcore.internal.HttpClientResponse>;
					/**
					 * Constructs a new instance of the com.arcgismaps.httpcore.internal.HttpClientResponse interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getRequest(): com.arcgismaps.httpcore.internal.HttpClientRequest;
						getBody(): com.arcgismaps.httpcore.internal.HttpClientResponseBody;
						getETag(): string;
						getCode(): number;
						getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
						getMessage(): string;
					});
					public constructor();
					public getBody(): com.arcgismaps.httpcore.internal.HttpClientResponseBody;
					public getHeaders(): java.util.List<com.arcgismaps.httpcore.Request.Header>;
					public getRequest(): com.arcgismaps.httpcore.internal.HttpClientRequest;
					public getMessage(): string;
					public getETag(): string;
					public getCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module internal {
				export class HttpClientResponseBody {
					public static class: java.lang.Class<com.arcgismaps.httpcore.internal.HttpClientResponseBody>;
					/**
					 * Constructs a new instance of the com.arcgismaps.httpcore.internal.HttpClientResponseBody interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						contentLength(): number;
						bytes(): androidNative.Array<number>;
						byteStream(): java.io.InputStream;
						string(): string;
						peek(): java.io.InputStream;
						contentType(): string;
						source(): okio.BufferedSource;
					});
					public constructor();
					public peek(): java.io.InputStream;
					public contentType(): string;
					public byteStream(): java.io.InputStream;
					public string(): string;
					public source(): okio.BufferedSource;
					public bytes(): androidNative.Array<number>;
					public contentLength(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module internal {
				export class NetworkAuthenticationResettable {
					public static class: java.lang.Class<com.arcgismaps.httpcore.internal.NetworkAuthenticationResettable>;
					/**
					 * Constructs a new instance of the com.arcgismaps.httpcore.internal.NetworkAuthenticationResettable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						resetNetworkAuthentication(): void;
					});
					public constructor();
					public resetNetworkAuthentication(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module httpcore {
			export module internal {
				export class WebSocket {
					public static class: java.lang.Class<com.arcgismaps.httpcore.internal.WebSocket>;
					/**
					 * Constructs a new instance of the com.arcgismaps.httpcore.internal.WebSocket interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						close(): void;
						cancel(): void;
						"<clinit>"(): void;
					});
					public constructor();
					public static NORMAL_CLOSURE: number;
					public static NO_STATUS_RECEIVED: number;
					public static ABNORMAL_CLOSURE: number;
					public close(): void;
					public cancel(): void;
				}
				export module WebSocket {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.httpcore.internal.WebSocket.Factory>;
						/**
						 * Constructs a new instance of the com.arcgismaps.httpcore.internal.WebSocket$Factory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							newWebSocket(param0: string, param1: com.arcgismaps.httpcore.internal.WebSocket.Listener): com.arcgismaps.httpcore.internal.WebSocket;
						});
						public constructor();
						public newWebSocket(param0: string, param1: com.arcgismaps.httpcore.internal.WebSocket.Listener): com.arcgismaps.httpcore.internal.WebSocket;
					}
					export class Listener {
						public static class: java.lang.Class<com.arcgismaps.httpcore.internal.WebSocket.Listener>;
						/**
						 * Constructs a new instance of the com.arcgismaps.httpcore.internal.WebSocket$Listener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onOpen(): void;
							onMessage(param0: string): void;
							onMessage(param0: androidNative.Array<number>): void;
							onFailure(param0: java.lang.Throwable, param1: number): void;
							onClosed(param0: number): void;
						});
						public constructor();
						public onOpen(): void;
						public onMessage(param0: string): void;
						public onFailure(param0: java.lang.Throwable, param1: number): void;
						public onClosed(param0: number): void;
						public onMessage(param0: androidNative.Array<number>): void;
					}
					export class StatusCodes {
						public static class: java.lang.Class<com.arcgismaps.httpcore.internal.WebSocket.StatusCodes>;
						public static NORMAL_CLOSURE: number;
						public static NO_STATUS_RECEIVED: number;
						public static ABNORMAL_CLOSURE: number;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export abstract class EncAreaSymbolizationType {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncAreaSymbolizationType>;
				public getCoreEncAreaSymbolizationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType;
			}
			export module EncAreaSymbolizationType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncAreaSymbolizationType.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncAreaSymbolizationType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType): com.arcgismaps.hydrography.EncAreaSymbolizationType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.hydrography.EncAreaSymbolizationType.Factory.WhenMappings>;
					}
				}
				export class Plain extends com.arcgismaps.hydrography.EncAreaSymbolizationType {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncAreaSymbolizationType.Plain>;
					public static INSTANCE: com.arcgismaps.hydrography.EncAreaSymbolizationType.Plain;
				}
				export class Symbolized extends com.arcgismaps.hydrography.EncAreaSymbolizationType {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncAreaSymbolizationType.Symbolized>;
					public static INSTANCE: com.arcgismaps.hydrography.EncAreaSymbolizationType.Symbolized;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncCell extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncCell>;
				public getCoreEncCell$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCCell;
				public getDataset(): com.arcgismaps.hydrography.EncDataset;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public constructor(param0: com.arcgismaps.hydrography.EncDataset);
				public constructor(param0: com.arcgismaps.internal.jni.CoreENCCell);
				public getPath(): string;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
			}
			export module EncCell {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreENCCell,com.arcgismaps.hydrography.EncCell> {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncCell.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncCell.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export abstract class EncColorScheme {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncColorScheme>;
				public getCoreEncColorScheme$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCColorScheme;
			}
			export module EncColorScheme {
				export class Day extends com.arcgismaps.hydrography.EncColorScheme {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncColorScheme.Day>;
					public static INSTANCE: com.arcgismaps.hydrography.EncColorScheme.Day;
				}
				export class Dusk extends com.arcgismaps.hydrography.EncColorScheme {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncColorScheme.Dusk>;
					public static INSTANCE: com.arcgismaps.hydrography.EncColorScheme.Dusk;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncColorScheme.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncColorScheme.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreENCColorScheme): com.arcgismaps.hydrography.EncColorScheme;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.hydrography.EncColorScheme.Factory.WhenMappings>;
					}
				}
				export class Night extends com.arcgismaps.hydrography.EncColorScheme {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncColorScheme.Night>;
					public static INSTANCE: com.arcgismaps.hydrography.EncColorScheme.Night;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncDataset {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncDataset>;
				public getAuthorized(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreENCDataset);
				public getCoreEncDataset$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCDataset;
				public getVolumeName(): string;
				public getDescription(): string;
				public getName(): string;
				public getExtent(): com.arcgismaps.geometry.Envelope;
				public constructor();
			}
			export module EncDataset {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreENCDataset,com.arcgismaps.hydrography.EncDataset> {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncDataset.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncDataset.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncDisplayCategories {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplayCategories>;
				public isDisplayBaseEnabled(): boolean;
				public getCoreEncDisplayCategories$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCDisplayCategories;
				public setDisplayBaseEnabled(param0: boolean): void;
				public isStandardDisplayEnabled(): boolean;
				public setOtherDisplayEnabled(param0: boolean): void;
				public isOtherDisplayEnabled(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreENCDisplayCategories);
				public setStandardDisplayEnabled(param0: boolean): void;
			}
			export module EncDisplayCategories {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreENCDisplayCategories,com.arcgismaps.hydrography.EncDisplayCategories> {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplayCategories.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncDisplayCategories.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export abstract class EncDisplayDepthUnits {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplayDepthUnits>;
				public getCoreEncDisplayDepthUnits$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits;
			}
			export module EncDisplayDepthUnits {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplayDepthUnits.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncDisplayDepthUnits.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits): com.arcgismaps.hydrography.EncDisplayDepthUnits;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplayDepthUnits.Factory.WhenMappings>;
					}
				}
				export class Fathoms extends com.arcgismaps.hydrography.EncDisplayDepthUnits {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplayDepthUnits.Fathoms>;
					public static INSTANCE: com.arcgismaps.hydrography.EncDisplayDepthUnits.Fathoms;
				}
				export class Feet extends com.arcgismaps.hydrography.EncDisplayDepthUnits {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplayDepthUnits.Feet>;
					public static INSTANCE: com.arcgismaps.hydrography.EncDisplayDepthUnits.Feet;
				}
				export class Meters extends com.arcgismaps.hydrography.EncDisplayDepthUnits {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplayDepthUnits.Meters>;
					public static INSTANCE: com.arcgismaps.hydrography.EncDisplayDepthUnits.Meters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncDisplaySettings {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplaySettings>;
				public getTextGroupVisibilitySettings(): com.arcgismaps.hydrography.EncTextGroupVisibilitySettings;
				public constructor(param0: com.arcgismaps.internal.jni.CoreENCDisplaySettings);
				public getCoreEncDisplaySettings$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCDisplaySettings;
				public getMarinerSettings(): com.arcgismaps.hydrography.EncMarinerSettings;
				public getViewingGroupSettings(): com.arcgismaps.hydrography.EncViewingGroupSettings;
			}
			export module EncDisplaySettings {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreENCDisplaySettings,com.arcgismaps.hydrography.EncDisplaySettings> {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncDisplaySettings.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncDisplaySettings.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncEnvironmentSettings {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncEnvironmentSettings>;
				public static INSTANCE: com.arcgismaps.hydrography.EncEnvironmentSettings;
				public getDisplaySettings(): com.arcgismaps.hydrography.EncDisplaySettings;
				public getSencDataPath(): string;
				public setSencDataPath(param0: string): void;
				public setResourcePath(param0: string): void;
				public getResourcePath(): string;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncExchangeSet extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncExchangeSet>;
				public getDatasets(): java.util.List<com.arcgismaps.hydrography.EncDataset>;
				public getPaths(): java.util.List<string>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreENCExchangeSet);
				public "retryLoad-IoAF18A"(param0: any): any;
				public getCoreEncExchangeSet$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCExchangeSet;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getReadme(): string;
				public constructor(param0: java.lang.Iterable<string>);
				public "load-IoAF18A"(param0: any): any;
			}
			export module EncExchangeSet {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreENCExchangeSet,com.arcgismaps.hydrography.EncExchangeSet> {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncExchangeSet.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncExchangeSet.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncFeature extends com.arcgismaps.mapping.GeoElement {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncFeature>;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public getCoreEncFeature$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCFeature;
				public constructor(param0: com.arcgismaps.internal.jni.CoreENCFeature);
				public getDescription(): string;
				public getAcronym(): string;
				public getAttributeDescription(param0: string): string;
				public getAttributes(): java.util.Map<string,any>;
			}
			export module EncFeature {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreENCFeature,com.arcgismaps.hydrography.EncFeature> {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncFeature.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncFeature.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncMarinerSettings {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncMarinerSettings>;
				public setDisplayDepthUnits(param0: com.arcgismaps.hydrography.EncDisplayDepthUnits): void;
				public resetToDefaults(): void;
				public setAreaSymbolizationType(param0: com.arcgismaps.hydrography.EncAreaSymbolizationType): void;
				public getShallowContour(): number;
				public getDisplayLowAccuracy(): boolean;
				public setDisplayNobjnm(param0: boolean): void;
				public setSymbolizeDataQuality(param0: boolean): void;
				public getSafetyContour(): number;
				public getDisplayNobjnm(): boolean;
				public setColorScheme(param0: com.arcgismaps.hydrography.EncColorScheme): void;
				public setDisplaySafetyContourLabels(param0: boolean): void;
				public getCoreEncMarinerSettings$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCMarinerSettings;
				public getSymbolizeShallowDepthPattern(): boolean;
				public setSymbolizeShallowDepthPattern(param0: boolean): void;
				public getDeepContour(): number;
				public setDisplayIsolatedDangers(param0: boolean): void;
				public setSafetyContour(param0: number): void;
				public getDisplayTwoDepthShades(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreENCMarinerSettings);
				public setDisplayContourLabels(param0: boolean): void;
				public setPointSymbolizationType(param0: com.arcgismaps.hydrography.EncPointSymbolizationType): void;
				public getAreaSymbolizationType(): com.arcgismaps.hydrography.EncAreaSymbolizationType;
				public getDisplayIsolatedDangers(): boolean;
				public setDisplayTwoDepthShades(param0: boolean): void;
				public getDisplayContourLabels(): boolean;
				public setHonorScaMin(param0: boolean): void;
				public setDeepContour(param0: number): void;
				public setDisplayLowAccuracy(param0: boolean): void;
				public getDisplayDepthUnits(): com.arcgismaps.hydrography.EncDisplayDepthUnits;
				public setShallowContour(param0: number): void;
				public getColorScheme(): com.arcgismaps.hydrography.EncColorScheme;
				public getSymbolizeDataQuality(): boolean;
				public getHonorScaMin(): boolean;
				public getPointSymbolizationType(): com.arcgismaps.hydrography.EncPointSymbolizationType;
				public getDisplayCategories(): com.arcgismaps.hydrography.EncDisplayCategories;
				public getDisplaySafetyContourLabels(): boolean;
			}
			export module EncMarinerSettings {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreENCMarinerSettings,com.arcgismaps.hydrography.EncMarinerSettings> {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncMarinerSettings.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncMarinerSettings.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export abstract class EncPointSymbolizationType {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncPointSymbolizationType>;
				public getCoreEncPointSymbolizationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCPointSymbolizationType;
			}
			export module EncPointSymbolizationType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncPointSymbolizationType.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncPointSymbolizationType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreENCPointSymbolizationType): com.arcgismaps.hydrography.EncPointSymbolizationType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.hydrography.EncPointSymbolizationType.Factory.WhenMappings>;
					}
				}
				export class PaperChart extends com.arcgismaps.hydrography.EncPointSymbolizationType {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncPointSymbolizationType.PaperChart>;
					public static INSTANCE: com.arcgismaps.hydrography.EncPointSymbolizationType.PaperChart;
				}
				export class Simplified extends com.arcgismaps.hydrography.EncPointSymbolizationType {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncPointSymbolizationType.Simplified>;
					public static INSTANCE: com.arcgismaps.hydrography.EncPointSymbolizationType.Simplified;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncTextGroupVisibilitySettings {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncTextGroupVisibilitySettings>;
				public setIncludeBerthNumber(param0: boolean): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreENCTextGroupVisibilitySettings);
				public setIncludeNoteOnChartData(param0: boolean): void;
				public getIncludeCurrentVelocity(): boolean;
				public setIncludeNamesForPositionReporting(param0: boolean): void;
				public resetToDefaults(): void;
				public setIncludeGeographicNames(param0: boolean): void;
				public getIncludeImportantText(): boolean;
				public getIncludeBerthNumber(): boolean;
				public getIncludeNamesForPositionReporting(): boolean;
				public getIncludeGeographicNames(): boolean;
				public getIncludeHeightOfIsletOrLandFeature(): boolean;
				public getIncludeMagneticVariationAndSweptDepth(): boolean;
				public setIncludeCurrentVelocity(param0: boolean): void;
				public setIncludeMagneticVariationAndSweptDepth(param0: boolean): void;
				public setIncludeLightDescription(param0: boolean): void;
				public getCoreEncTextGroupVisibilitySettings$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCTextGroupVisibilitySettings;
				public getIncludeNatureOfSeabed(): boolean;
				public setIncludeHeightOfIsletOrLandFeature(param0: boolean): void;
				public setIncludeImportantText(param0: boolean): void;
				public getIncludeNoteOnChartData(): boolean;
				public setIncludeNatureOfSeabed(param0: boolean): void;
				public getIncludeLightDescription(): boolean;
			}
			export module EncTextGroupVisibilitySettings {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreENCTextGroupVisibilitySettings,com.arcgismaps.hydrography.EncTextGroupVisibilitySettings> {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncTextGroupVisibilitySettings.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncTextGroupVisibilitySettings.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module hydrography {
			export class EncViewingGroupSettings {
				public static class: java.lang.Class<com.arcgismaps.hydrography.EncViewingGroupSettings>;
				public setIncludeBuoysBeaconsAidsToNavigation(param0: boolean): void;
				public resetToDefaults(): void;
				public getIncludeSpotSoundings(): boolean;
				public getIncludeSeabed(): boolean;
				public setIncludeProhibitedAndRestrictedAreas(param0: boolean): void;
				public getIncludeMagneticVariation(): boolean;
				public setIncludeSubmarineCablesAndPipelines(param0: boolean): void;
				public getCoreEncViewingGroupSettings$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCViewingGroupSettings;
				public setIncludeBuoysBeaconsStructures(param0: boolean): void;
				public setIncludeArchipelagicSeaLanes(param0: boolean): void;
				public getIncludeTidal(): boolean;
				public getIncludeOtherMiscellaneous(): boolean;
				public getIncludeLights(): boolean;
				public setIncludeOtherMiscellaneous(param0: boolean): void;
				public setIncludeSpotSoundings(param0: boolean): void;
				public getIncludeStandardMiscellaneous(): boolean;
				public setIncludeStandardMiscellaneous(param0: boolean): void;
				public getIncludeChartScaleBoundaries(): boolean;
				public setIncludeDryingLine(param0: boolean): void;
				public getIncludeDryingLine(): boolean;
				public getIncludeDepthContours(): boolean;
				public setIncludeMagneticVariation(param0: boolean): void;
				public setIncludeAllIsolatedDangers(param0: boolean): void;
				public getIncludeBuoysBeaconsStructures(): boolean;
				public getIncludeProhibitedAndRestrictedAreas(): boolean;
				public getIncludeArchipelagicSeaLanes(): boolean;
				public setIncludeShipsRoutingSystemsAndFerryRoutes(param0: boolean): void;
				public setIncludeBoundariesAndLimits(param0: boolean): void;
				public getIncludeSubmarineCablesAndPipelines(): boolean;
				public setIncludeLights(param0: boolean): void;
				public setIncludeChartScaleBoundaries(param0: boolean): void;
				public getIncludeShipsRoutingSystemsAndFerryRoutes(): boolean;
				public getIncludeBuoysBeaconsAidsToNavigation(): boolean;
				public setIncludeTidal(param0: boolean): void;
				public setIncludeDepthContours(param0: boolean): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreENCViewingGroupSettings);
				public getIncludeAllIsolatedDangers(): boolean;
				public setIncludeSeabed(param0: boolean): void;
				public getIncludeBoundariesAndLimits(): boolean;
			}
			export module EncViewingGroupSettings {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreENCViewingGroupSettings,com.arcgismaps.hydrography.EncViewingGroupSettings> {
					public static class: java.lang.Class<com.arcgismaps.hydrography.EncViewingGroupSettings.Factory>;
					public static INSTANCE: com.arcgismaps.hydrography.EncViewingGroupSettings.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export class CoreTaskWrapper {
				public static class: java.lang.Class<com.arcgismaps.internal.CoreTaskWrapper>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTask, param1: boolean);
				public await(param0: any, param1: any): any;
				public getCoreTask(): com.arcgismaps.internal.jni.CoreTask;
			}
			export module CoreTaskWrapper {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreTask,com.arcgismaps.internal.CoreTaskWrapper> {
					public static class: java.lang.Class<com.arcgismaps.internal.CoreTaskWrapper.Factory>;
					public static INSTANCE: com.arcgismaps.internal.CoreTaskWrapper.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export class ErrorFactory {
				public static class: java.lang.Class<com.arcgismaps.internal.ErrorFactory>;
				public static INSTANCE: com.arcgismaps.internal.ErrorFactory;
				public static createThrowableFromCoreError(param0: number): java.lang.Throwable;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module ErrorFactoryKt {

				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.internal.ErrorFactoryKt.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export class SdkVersion {
				public static class: java.lang.Class<com.arcgismaps.internal.SdkVersion>;
				public copy(param0: number, param1: number, param2: number, param3: java.lang.Integer): com.arcgismaps.internal.SdkVersion;
				public getPatch(): number;
				public component2(): number;
				public component1(): number;
				public toString(): string;
				public getMajor(): number;
				public component3(): number;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getMinor(): number;
				public getBetaVersion(): java.lang.Integer;
				public constructor(param0: number, param1: number, param2: number, param3: java.lang.Integer);
				public component4(): java.lang.Integer;
			}
			export module SdkVersion {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.internal.SdkVersion.Companion>;
					public fromVersionString$arcgis_maps_any_release(param0: string): com.arcgismaps.internal.SdkVersion;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export class UserAgent {
				public static class: java.lang.Class<com.arcgismaps.internal.UserAgent>;
				public static INSTANCE: com.arcgismaps.internal.UserAgent;
				public getDeviceName(): string;
				public getOsVersion(): string;
				public toString(): string;
				public getCpuArchitecture(): string;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module androidextensions {
				export module CoreSensorTypeExtensionsKt {

					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.internal.androidextensions.CoreSensorTypeExtensionsKt.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module collections {
				export class CoreElementConverter<E>  extends java.lang.Object {
					public static class: java.lang.Class<com.arcgismaps.internal.collections.CoreElementConverter<any>>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.collections.CoreElementConverter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						convertValueToPublic(param0: com.arcgismaps.internal.jni.CoreElement): E;
					});
					public constructor();
					public convertValueToPublic(param0: com.arcgismaps.internal.jni.CoreElement): E;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module collections {
				export class EmptyResettableIterator extends com.arcgismaps.internal.collections.ResettableIterator<any> {
					public static class: java.lang.Class<com.arcgismaps.internal.collections.EmptyResettableIterator>;
					public reset(): void;
					public constructor();
					public next(): java.lang.Void;
					public hasNext(): boolean;
					public remove(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module collections {
				export class JsonNullElementConverter extends com.arcgismaps.internal.collections.CoreElementConverter<any> {
					public static class: java.lang.Class<com.arcgismaps.internal.collections.JsonNullElementConverter>;
					public constructor();
					public convertValueToPublic(param0: com.arcgismaps.internal.jni.CoreElement): any;
				}
				export module JsonNullElementConverter {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.internal.collections.JsonNullElementConverter.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module collections {
				export class ListImpl<E>  extends java.lang.Object {
					public static class: java.lang.Class<com.arcgismaps.internal.collections.ListImpl<any>>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArray, param1: com.arcgismaps.internal.collections.CoreElementConverter<any>);
					public get(param0: number): any;
					public getCoreArray$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArray;
					public getSize(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module collections {
				export class MutableDictionaryImpl<K, V>  extends any {
					public static class: java.lang.Class<com.arcgismaps.internal.collections.MutableDictionaryImpl<any,any>>;
					public containsKey(param0: any): boolean;
					public remove(param0: any): any;
					public clearCache(): void;
					public clear(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDictionary, param1: any, param2: any, param3: com.arcgismaps.internal.collections.CoreElementConverter<any>);
					public getSize(): number;
					public put(param0: any, param1: any): any;
					public getEntries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public get(param0: any): any;
				}
				export module MutableDictionaryImpl {
					export class MutableSetImpl extends any<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.arcgismaps.internal.collections.MutableDictionaryImpl.MutableSetImpl>;
						public add(param0: java.util.Map.Entry<any,any>): boolean;
						public constructor(param0: com.arcgismaps.internal.collections.MutableDictionaryImpl<any,any>);
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public getSize(): number;
						public contains(param0: any): boolean;
						public clear(): void;
						public contains(param0: java.util.Map.Entry<any,any>): boolean;
						public remove(param0: java.util.Map.Entry<any,any>): boolean;
						public remove(param0: any): boolean;
					}
					export module MutableSetImpl {
						export class MutableEntryImpl extends java.lang.Object {
							public static class: java.lang.Class<com.arcgismaps.internal.collections.MutableDictionaryImpl.MutableSetImpl.MutableEntryImpl>;
							public getValue(): any;
							public dispose(): void;
							public constructor(param0: com.arcgismaps.internal.jni.CoreElement);
							public getKey(): any;
							public remove(): void;
							public toString(): string;
							public setValue(param0: any): any;
						}
						export class MutableIteratorImpl extends java.lang.Object {
							public static class: java.lang.Class<com.arcgismaps.internal.collections.MutableDictionaryImpl.MutableSetImpl.MutableIteratorImpl>;
							public constructor(param0: com.arcgismaps.internal.collections.MutableDictionaryImpl.MutableSetImpl);
							public next(): java.util.Map.Entry<any,any>;
							public hasNext(): boolean;
							public remove(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module collections {
				export class MutableListImpl<E>  extends java.lang.Object {
					public static class: java.lang.Class<com.arcgismaps.internal.collections.MutableListImpl<any>>;
					public clearCache$arcgis_maps_any_release(): void;
					public add(param0: number, param1: any): void;
					public set(param0: number, param1: any): any;
					public getBackingList$arcgis_maps_any_release(): java.util.List<any>;
					public add(param0: any): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: any);
					public clear(): void;
					public getCoreVector$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVector;
					public get(param0: number): any;
					public removeAt(param0: number): any;
					public getSize(): number;
				}
				export module MutableListImpl {
					export class EventSuppressor {
						public static class: java.lang.Class<com.arcgismaps.internal.collections.MutableListImpl.EventSuppressor>;
						public constructor();
						public isSuppressingEvents(): boolean;
						public withEventSuppression(param0: any): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module collections {
				export class ObservableListFlow<E>  extends kotlinx.coroutines.flow.StateFlow<java.util.List<any>> {
					public static class: java.lang.Class<com.arcgismaps.internal.collections.ObservableListFlow<any>>;
					public getReplayCache(): java.util.List<java.util.List<any>>;
					public getValue(): java.util.List<any>;
					public collect(param0: kotlinx.coroutines.flow.FlowCollector<any>, param1: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArrayObservable, param1: kotlinx.coroutines.flow.MutableStateFlow<java.util.List<any>>);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module collections {
				export class ObservableListImpl<E>  extends java.lang.Object {
					public static class: java.lang.Class<com.arcgismaps.internal.collections.ObservableListImpl<any>>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArrayObservable);
					public getCoreArrayObservable(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public get(param0: number): any;
					public getSize(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module collections {
				export class ResettableIterator<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.arcgismaps.internal.collections.ResettableIterator<any>>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.collections.ResettableIterator<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						reset(): void;
					});
					public constructor();
					public reset(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module coreextensions {
				export module CoreDateTimeExtensionsKt {

					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.internal.coreextensions.CoreDateTimeExtensionsKt.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module coreextensions {
				export module CoreElementExtensionsKt {

					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.internal.coreextensions.CoreElementExtensionsKt.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export class InstantMillisecondsSerializer extends kotlinx.serialization.KSerializer<java.time.Instant> {
					public static class: java.lang.Class<com.arcgismaps.internal.io.InstantMillisecondsSerializer>;
					public static INSTANCE: com.arcgismaps.internal.io.InstantMillisecondsSerializer;
					public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: java.time.Instant): void;
					public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
					public deserialize(param0: kotlinx.serialization.encoding.Decoder): java.time.Instant;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export class ListOrSingletonSerializer<T>  extends kotlinx.serialization.json.JsonTransformingSerializer<java.util.List<any>> {
					public static class: java.lang.Class<com.arcgismaps.internal.io.ListOrSingletonSerializer<any>>;
					public transformDeserialize(param0: kotlinx.serialization.json.JsonElement): kotlinx.serialization.json.JsonElement;
					public constructor(param0: kotlinx.serialization.KSerializer<any>);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export class LoadableImageSerializer extends kotlinx.serialization.KSerializer<com.arcgismaps.portal.LoadableImage> {
					public static class: java.lang.Class<com.arcgismaps.internal.io.LoadableImageSerializer>;
					public static INSTANCE: com.arcgismaps.internal.io.LoadableImageSerializer;
					public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.LoadableImage;
					public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.LoadableImage): void;
					public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export abstract class LockableStringSerializer<S, R>  extends kotlinx.serialization.KSerializer<any> {
					public static class: java.lang.Class<com.arcgismaps.internal.io.LockableStringSerializer<any,any>>;
					public resource: any;
					public getLock(): kotlinx.coroutines.sync.Mutex;
					public constructor();
					public setResource(param0: any): void;
					public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
					public getResource(): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export abstract class SealedClassStringDecoder<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.arcgismaps.internal.io.SealedClassStringDecoder<any>>;
					public constructor();
					public getDecoder(): java.util.Map<string,T>;
					public decode(param0: string): T;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export abstract class SealedClassStringDecoderWithUnknownEncoding<T>  extends com.arcgismaps.internal.io.SealedClassStringDecoder<any> {
					public static class: java.lang.Class<com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<any>>;
					public constructor();
					public unknownCase(param0: string): any;
					public decode(param0: string): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export class SealedClassStringSerializer<T>  extends kotlinx.serialization.KSerializer<any> {
					public static class: java.lang.Class<com.arcgismaps.internal.io.SealedClassStringSerializer<any>>;
					public deserialize(param0: kotlinx.serialization.encoding.Decoder): any;
					public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: any): void;
					public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
					public constructor(param0: com.arcgismaps.internal.io.SealedClassStringDecoder<any>);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export class StringEncodable {
					public static class: java.lang.Class<com.arcgismaps.internal.io.StringEncodable>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.io.StringEncodable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getEncoding(): string;
					});
					public constructor();
					public getEncoding(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export class StringTransformingSerializer<T>  extends kotlinx.serialization.json.JsonTransformingSerializer<any> {
					public static class: java.lang.Class<com.arcgismaps.internal.io.StringTransformingSerializer<any>>;
					public transformDeserialize(param0: kotlinx.serialization.json.JsonElement): kotlinx.serialization.json.JsonElement;
					public constructor(param0: com.arcgismaps.internal.io.SealedClassStringSerializer<any>);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module io {
				export class UnknownStringEncodable extends com.arcgismaps.internal.io.StringEncodable {
					public static class: java.lang.Class<com.arcgismaps.internal.io.UnknownStringEncodable>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.io.UnknownStringEncodable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getEncoding(): string;
					});
					public constructor();
					public getEncoding(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAPIKeyResource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAPIKeyResource>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreAPIKeyResource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getAPIKey(): string;
						setAPIKey(param0: string): void;
					});
					public constructor();
					public getAPIKey(): string;
					public setAPIKey(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAddRastersParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAddRastersParameters>;
					public mHandle: number;
					public setFilter(param0: string): void;
					public finalize(): void;
					public dispose(): void;
					public setRasterFunctionTemplateFile(param0: string): void;
					public getFilter(): string;
					public getObjectType(): com.arcgismaps.internal.jni.CoreAddRastersParametersType;
					public static createCoreAddRastersParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAddRastersParameters;
					public setMaxPixelSizeFactor(param0: number): void;
					public getInputDirectory(): string;
					public getMaxPixelSizeFactor(): number;
					public getRasterFunctionTemplateFile(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setInputFile(param0: string): void;
					public close(): void;
					public setInputDirectory(param0: string): void;
					public getInputFile(): string;
					public setMinPixelSizeFactor(param0: number): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAddRastersParameters;
					public getHandle(): number;
					public getMinPixelSizeFactor(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAddRastersParametersType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAddRastersParametersType>;
					public static ADDRASTERSPARAMETERS: com.arcgismaps.internal.jni.CoreAddRastersParametersType;
					public static FRAMECAMERAADDRASTERSPARAMETERS: com.arcgismaps.internal.jni.CoreAddRastersParametersType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAddRastersParametersType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAddRastersParametersType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAddRastersParametersType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAggregateField {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAggregateField>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public static createCoreAggregateFieldFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAggregateField;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreArcadeExpression, param2: com.arcgismaps.internal.jni.CoreAggregateStatisticType);
					public setStatisticType(param0: com.arcgismaps.internal.jni.CoreAggregateStatisticType): void;
					public setName(param0: string): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setAlias(param0: string): void;
					public getName(): string;
					public setStatisticFieldName(param0: string): void;
					public close(): void;
					public setStatisticExpression(param0: com.arcgismaps.internal.jni.CoreArcadeExpression): void;
					public getAlias(): string;
					public getStatisticFieldName(): string;
					public constructor(param0: string, param1: string, param2: com.arcgismaps.internal.jni.CoreAggregateStatisticType);
					public getStatisticExpression(): com.arcgismaps.internal.jni.CoreArcadeExpression;
					public getStatisticType(): com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAggregateGeoElement extends com.arcgismaps.internal.jni.CoreGeoElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAggregateGeoElement>;
					public mHandle: number;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getGeoElementsAsync(): com.arcgismaps.internal.jni.CoreTask;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getIsSelected(): boolean;
					public setIsSelected(param0: boolean): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public static createCoreAggregateGeoElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAggregateGeoElement;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAggregateStatisticType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAggregateStatisticType>;
					public static COUNT: com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public static AVERAGE: com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public static MAX: com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public static MIN: com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public static MODE: com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public static STANDARDDEVIATION: com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public static SUM: com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public static VARIANCE: com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAggregateStatisticType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAggregateStatisticType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAggregateStatisticType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAggregationFeatureReduction extends com.arcgismaps.internal.jni.CoreFeatureReduction implements com.arcgismaps.internal.jni.CorePopupSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAggregationFeatureReduction>;
					public setRenderer(param0: com.arcgismaps.internal.jni.CoreRenderer): void;
					public setMaxScale(param0: number): void;
					public getAggregateFields(): com.arcgismaps.internal.jni.CoreVector;
					public getLabelDefinitions(): com.arcgismaps.internal.jni.CoreVector;
					public setShowLabels(param0: boolean): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public getMaxScale(): number;
					public setLabelDefinitions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getShowLabels(): boolean;
					public constructor();
					public setIsPopupEnabled(param0: boolean): void;
					public static createCoreAggregationFeatureReductionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAggregationFeatureReduction;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public setAggregateFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAllCredentialsRemovedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAllCredentialsRemovedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreAllCredentialsRemovedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						allCredentialsRemoved(): void;
					});
					public constructor();
					public allCredentialsRemoved(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAnalysis extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAnalysis>;
					public mHandle: number;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAnalysis;
					public getInstanceId(): java.lang.Long;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static createCoreAnalysisFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAnalysis;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreAnalysisType;
					public setIsVisible(param0: boolean): void;
					public getIsVisible(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAnalysisOverlay extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAnalysisOverlay>;
					public mHandle: number;
					public getAnalyses(): com.arcgismaps.internal.jni.CoreVector;
					public getInstanceId(): java.lang.Long;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreAnalysisOverlayFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAnalysisOverlay;
					public setIsVisible(param0: boolean): void;
					public getIsVisible(): boolean;
					public setAnalyses(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAnalysisType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAnalysisType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreAnalysisType;
					public static LOCATIONVIEWSHED: com.arcgismaps.internal.jni.CoreAnalysisType;
					public static LOCATIONLINEOFSIGHT: com.arcgismaps.internal.jni.CoreAnalysisType;
					public static GEOELEMENTVIEWSHED: com.arcgismaps.internal.jni.CoreAnalysisType;
					public static GEOELEMENTLINEOFSIGHT: com.arcgismaps.internal.jni.CoreAnalysisType;
					public static LOCATIONDISTANCEMEASUREMENT: com.arcgismaps.internal.jni.CoreAnalysisType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAnalysisType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAnalysisType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAnalysisType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAngularUnit extends com.arcgismaps.internal.jni.CoreUnit {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAngularUnit>;
					public convertTo(param0: com.arcgismaps.internal.jni.CoreAngularUnit, param1: number): number;
					public constructor();
					public toRadians(param0: number): number;
					public static createCoreAngularUnitFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAngularUnit;
					public constructor(param0: com.arcgismaps.internal.jni.CoreAngularUnitId);
					public getAngularUnitId(): com.arcgismaps.internal.jni.CoreAngularUnitId;
					public convertFrom(param0: com.arcgismaps.internal.jni.CoreAngularUnit, param1: number): number;
					public fromRadians(param0: number): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAngularUnitId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAngularUnitId>;
					public static OTHER: com.arcgismaps.internal.jni.CoreAngularUnitId;
					public static RADIANS: com.arcgismaps.internal.jni.CoreAngularUnitId;
					public static DEGREES: com.arcgismaps.internal.jni.CoreAngularUnitId;
					public static MINUTES: com.arcgismaps.internal.jni.CoreAngularUnitId;
					public static SECONDS: com.arcgismaps.internal.jni.CoreAngularUnitId;
					public static GRADS: com.arcgismaps.internal.jni.CoreAngularUnitId;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAngularUnitId;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAngularUnitId>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAngularUnitId;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAnimationCurve {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAnimationCurve>;
					public static LINEAR: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINQUAD: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEOUTQUAD: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINOUTQUAD: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINCUBIC: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEOUTCUBIC: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINOUTCUBIC: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINQUART: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEOUTQUART: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINOUTQUART: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINQUINT: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEOUTQUINT: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINOUTQUINT: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINSINE: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEOUTSINE: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINOUTSINE: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINEXPO: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEOUTEXPO: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINOUTEXPO: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINCIRC: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEOUTCIRC: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static EASEINOUTCIRC: com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAnimationCurve>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAnimationCurve;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAnimationCurve;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAnnotationLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAnnotationLayer>;
					public constructor(param0: string);
					public unselectFeature(param0: com.arcgismaps.internal.jni.CoreFeature): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable);
					public selectFeaturesAsync(param0: com.arcgismaps.internal.jni.CoreQueryParameters, param1: com.arcgismaps.internal.jni.CoreSelectionMode): com.arcgismaps.internal.jni.CoreTask;
					public setBarrierWeight(param0: com.arcgismaps.internal.jni.CoreLabelBarrierWeight): void;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public setFeatureVisible(param0: com.arcgismaps.internal.jni.CoreFeature, param1: boolean): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem, param1: number);
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public unselectFeatures(param0: com.arcgismaps.internal.jni.CoreArray): void;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getURI(): string;
					public selectFeature(param0: com.arcgismaps.internal.jni.CoreFeature): void;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getFeatureTable(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public selectFeatures(param0: com.arcgismaps.internal.jni.CoreArray): void;
					public setFeaturesVisible(param0: com.arcgismaps.internal.jni.CoreArray, param1: boolean): void;
					public cancelLoad(): void;
					public resetFeaturesVisible(): void;
					public clearSelection(): void;
					public getLayerId(): number;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setDefinitionExpression(param0: string): void;
					public getName(): string;
					public getSelectedFeaturesAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setIsVisible(param0: boolean): void;
					public getBarrierWeight(): com.arcgismaps.internal.jni.CoreLabelBarrierWeight;
					public getReferenceScale(): number;
					public getDefinitionExpression(): string;
					public static createCoreAnnotationLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAnnotationLayer;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAnnotationSublayer implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLayerContent {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAnnotationSublayer>;
					public mHandle: number;
					public finalize(): void;
					public getIsVisible(): boolean;
					public getScaleSymbols(): boolean;
					public onSubLayerContentChanged(): void;
					public getMinScale(): number;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public close(): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getOpacity(): number;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public dispose(): void;
					public static createCoreAnnotationSublayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAnnotationSublayer;
					public getMaxScale(): number;
					public getShowInLegend(): boolean;
					public getSublayerId(): number;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
					public getDefinitionExpression(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAntialiasingMode>;
					public static NONE: com.arcgismaps.internal.jni.CoreAntialiasingMode;
					public static FASTEST: com.arcgismaps.internal.jni.CoreAntialiasingMode;
					public static FAST: com.arcgismaps.internal.jni.CoreAntialiasingMode;
					public static NORMAL: com.arcgismaps.internal.jni.CoreAntialiasingMode;
					public static BEST: com.arcgismaps.internal.jni.CoreAntialiasingMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAntialiasingMode>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAntialiasingMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAntialiasingMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreApplicationLocaleCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreApplicationLocaleCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreApplicationLocaleCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						applicationLocale(param0: com.arcgismaps.internal.jni.CoreElementReference): void;
					});
					public constructor();
					public applicationLocale(param0: com.arcgismaps.internal.jni.CoreElementReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISAuthenticationChallenge {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISAuthenticationChallenge>;
					public mHandle: number;
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public isMatch(param0: com.arcgismaps.internal.jni.CoreArcGISAuthenticationChallenge): boolean;
					public finalize(): void;
					public dispose(): void;
					public cancel(): void;
					public static createCoreArcGISAuthenticationChallengeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISAuthenticationChallenge;
					public continueAndFailWithPlatformAPIError(param0: any): void;
					public continueWithCredential(param0: com.arcgismaps.internal.jni.CoreArcGISCredential): void;
					public getRequestURL(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public continueAndFail(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISAuthenticationMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode>;
					public static ALLOWED: com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode;
					public static REQUIRED: com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode;
					public static FORBIDDEN: com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode;
					public static CONDITIONALLYALLOWED: com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISCredential extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISCredential>;
					public mHandle: number;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getArcGISTokenInfoAsync(): com.arcgismaps.internal.jni.CoreTask;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreArcGISCredential;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public equals(param0: com.arcgismaps.internal.jni.CoreArcGISCredential): boolean;
					public getUsername(): string;
					public static createCoreArcGISCredentialFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISCredential;
					public isTokenInHeaderSupported(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public isValid(): boolean;
					public toJSON(): string;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISCredential;
					public close(): void;
					public getReferer(): string;
					public getObjectType(): com.arcgismaps.internal.jni.CoreArcGISCredentialType;
					public getServerContext(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISCredentialStore {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISCredentialStore>;
					public mHandle: number;
					public setCredentialUpdatedCallback(param0: com.arcgismaps.internal.jni.CoreCredentialUpdatedCallbackListener): void;
					public addForURL(param0: com.arcgismaps.internal.jni.CoreArcGISCredential, param1: string): void;
					public remove(param0: com.arcgismaps.internal.jni.CoreArcGISCredential): boolean;
					public finalize(): void;
					public dispose(): void;
					public setCredentialRemovedCallback(param0: com.arcgismaps.internal.jni.CoreCredentialRemovedCallbackListener): void;
					public add(param0: com.arcgismaps.internal.jni.CoreArcGISCredential): void;
					public removeCredentials(param0: string): com.arcgismaps.internal.jni.CoreArray;
					public getCredential(param0: string): com.arcgismaps.internal.jni.CoreArcGISCredential;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public onAllCredentialsRemoved(): void;
					public onCredentialUpdated(param0: number, param1: androidNative.Array<number>): void;
					public removeAll(): void;
					public setCredentialAddedCallback(param0: com.arcgismaps.internal.jni.CoreCredentialAddedCallbackListener): void;
					public static createCoreArcGISCredentialStoreFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISCredentialStore;
					public getCredentials(): com.arcgismaps.internal.jni.CoreArray;
					public onCredentialRemoved(param0: number, param1: androidNative.Array<number>): void;
					public close(): void;
					public onCredentialAdded(param0: number, param1: androidNative.Array<number>): void;
					public setAllCredentialsRemovedCallback(param0: com.arcgismaps.internal.jni.CoreAllCredentialsRemovedCallbackListener): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISCredentialType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISCredentialType>;
					public static TOKENCREDENTIAL: com.arcgismaps.internal.jni.CoreArcGISCredentialType;
					public static PREGENERATEDTOKENCREDENTIAL: com.arcgismaps.internal.jni.CoreArcGISCredentialType;
					public static OAUTHUSERCREDENTIAL: com.arcgismaps.internal.jni.CoreArcGISCredentialType;
					public static OAUTHAPPLICATIONCREDENTIAL: com.arcgismaps.internal.jni.CoreArcGISCredentialType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreArcGISCredentialType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreArcGISCredentialType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreArcGISCredentialType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISFeature extends com.arcgismaps.internal.jni.CoreFeature implements com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISFeature>;
					public refreshObjectId(): boolean;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public finalize(): void;
					public static createCoreArcGISFeatureFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISFeature;
					public load(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public deleteAttachments(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getCanUpdateGeometry(): boolean;
					public relateFeatureWithRelationshipInfo(param0: com.arcgismaps.internal.jni.CoreArcGISFeature, param1: com.arcgismaps.internal.jni.CoreRelationshipInfo): void;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getFeatureSubtype(): com.arcgismaps.internal.jni.CoreFeatureSubtype;
					public onLoadStatusChanged(param0: number): void;
					public addAttachment(param0: string, param1: string, param2: androidNative.Array<number>): com.arcgismaps.internal.jni.CoreTask;
					public fetchAttachments(): com.arcgismaps.internal.jni.CoreTask;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public updateAttachment(param0: com.arcgismaps.internal.jni.CoreAttachment, param1: string, param2: string, param3: androidNative.Array<number>): com.arcgismaps.internal.jni.CoreTask;
					public relateFeature(param0: com.arcgismaps.internal.jni.CoreArcGISFeature): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getCanEditAttachments(): boolean;
					public unrelateFeature(param0: com.arcgismaps.internal.jni.CoreArcGISFeature): void;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					public deleteAttachment(param0: com.arcgismaps.internal.jni.CoreAttachment): com.arcgismaps.internal.jni.CoreTask;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISFeatureLayerInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfo>;
					public mHandle: number;
					public getSupportsQueryExtent(): boolean;
					public getDisplayFieldName(): string;
					public getHasZ(): boolean;
					public finalize(): void;
					public getSubtypeField(): string;
					public getMinScale(): number;
					public getHasAttachments(): boolean;
					public constructor();
					public getServiceLayerId(): number;
					public getSupportsPagination(): boolean;
					public close(): void;
					public getTypeIdFieldName(): string;
					public getZDefaultsEnabled(): boolean;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getServiceSourceType(): com.arcgismaps.internal.jni.CoreServiceType;
					public getFeatureTypes(): com.arcgismaps.internal.jni.CoreArray;
					public getHasM(): boolean;
					public getGlobalIdFieldName(): string;
					public getServiceType(): com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
					public getSupportsRollbackOnFailureParameter(): boolean;
					public getDescription(): string;
					public getEditFieldsInfo(): com.arcgismaps.internal.jni.CoreEditFieldsInfo;
					public getHandle(): number;
					public getCapabilities(): com.arcgismaps.internal.jni.CoreFeatureServiceCapabilities;
					public getDrawingInfo(): com.arcgismaps.internal.jni.CoreDrawingInfo;
					public getVersion(): string;
					public getAllowGeometryUpdates(): boolean;
					public getSupportsStatistics(): boolean;
					public getObjectIdFieldName(): string;
					public getSupportsAdvancedQueries(): boolean;
					public getEffectiveMaxScale(): number;
					public getFeatureType(param0: string): com.arcgismaps.internal.jni.CoreFeatureType;
					public getFeatureTemplates(): com.arcgismaps.internal.jni.CoreArray;
					public getServiceLayerName(): string;
					public getZDefault(): number;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getMaxRecordCount(): number;
					public getSupportsOBACForAnonymousUsers(): boolean;
					public getField(param0: string): com.arcgismaps.internal.jni.CoreField;
					public getAttribution(): string;
					public getDefaultVisibility(): boolean;
					public dispose(): void;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public static createCoreArcGISFeatureLayerInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfo;
					public getURL(): string;
					public getDataVersioned(): boolean;
					public getMaxScale(): number;
					public getRelationshipInfos(): com.arcgismaps.internal.jni.CoreArray;
					public getOwnershipBasedAccessControl(): com.arcgismaps.internal.jni.CoreOwnershipBasedAccessControlInfo;
					public getTimeInfo(): com.arcgismaps.internal.jni.CoreLayerTimeInfo;
					public getEffectiveMinScale(): number;
					public static nativeDestroy(param0: number): void;
					public getDefaultSubtypeCode(): com.arcgismaps.internal.jni.CoreElement;
					public getFeatureSubtypes(): com.arcgismaps.internal.jni.CoreArray;
					public getCIMVersion(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISFeatureLayerInfoServiceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
					public static LAYER: com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
					public static TABLE: com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
					public static GROUPLAYER: com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
					public static ANNOTATIONLAYER: com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
					public static DIMENSIONLAYER: com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISFeatureServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISFeatureServiceInfo>;
					public mHandle: number;
					public getFullExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getVersion(): string;
					public getAllowGeometryUpdates(): boolean;
					public finalize(): void;
					public getTableInfos(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreArcGISFeatureServiceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISFeatureServiceInfo;
					public getInitialExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getUnit(): com.arcgismaps.internal.jni.CoreUnit;
					public getFeatureServiceCapabilities(): com.arcgismaps.internal.jni.CoreFeatureServiceCapabilities;
					public constructor();
					public getHasVersionedData(): boolean;
					public getSupportsTrueCurve(): boolean;
					public getZDefault(): number;
					public close(): void;
					public getZDefaultsEnabled(): boolean;
					public getSupportsDisconnectedEditing(): boolean;
					public getMaxRecordCount(): number;
					public getEditorTrackingInfo(): com.arcgismaps.internal.jni.CoreEditorTrackingInfo;
					public getAttribution(): string;
					public dispose(): void;
					public getHasStaticData(): boolean;
					public getAllowTrueCurvesUpdates(): boolean;
					public getLayerInfos(): com.arcgismaps.internal.jni.CoreArray;
					public getURL(): string;
					public getSyncCapabilities(): com.arcgismaps.internal.jni.CoreSyncCapabilities;
					public getCanUseServiceGeodatabaseApplyEdits(): boolean;
					public getServiceDescription(): string;
					public static nativeDestroy(param0: number): void;
					public getOnlyAllowTrueCurveUpdatesByTrueCurveClients(): boolean;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getDescription(): string;
					public getHandle(): number;
					public getDocumentInfo(): com.arcgismaps.internal.jni.CoreServiceDocumentInfo;
					public getSyncEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISFeatureTable extends com.arcgismaps.internal.jni.CoreFeatureTable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISFeatureTable>;
					public getLocalEdits(): com.arcgismaps.internal.jni.CoreTask;
					public queryRelatedFeaturesWithParameters(param0: com.arcgismaps.internal.jni.CoreArcGISFeature, param1: com.arcgismaps.internal.jni.CoreRelatedQueryParameters): com.arcgismaps.internal.jni.CoreTask;
					public getObjectIdField(): string;
					public queryRelatedFeatureCountWithParameters(param0: com.arcgismaps.internal.jni.CoreArcGISFeature, param1: com.arcgismaps.internal.jni.CoreRelatedQueryParameters): com.arcgismaps.internal.jni.CoreTask;
					public getDeletedFeatures(): com.arcgismaps.internal.jni.CoreTask;
					public getSubtypeField(): string;
					public getUpdatedFeaturesCount(): com.arcgismaps.internal.jni.CoreTask;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getTypeIdField(): string;
					public getUsername(): string;
					public retryLoad(): void;
					public queryRelatedFeatureCount(param0: com.arcgismaps.internal.jni.CoreArcGISFeature): com.arcgismaps.internal.jni.CoreTask;
					public getHasAttachments(): boolean;
					public constructor();
					public getServiceLayerId(): number;
					public getDeletedFeaturesCount(): com.arcgismaps.internal.jni.CoreTask;
					public createFeatureWithSubtypeAndGeometry(param0: com.arcgismaps.internal.jni.CoreFeatureSubtype, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreArcGISFeature;
					public getLocalEditsCount(): com.arcgismaps.internal.jni.CoreTask;
					public getFeatureTemplate(param0: string): com.arcgismaps.internal.jni.CoreFeatureTemplate;
					public createFeatureWithType(param0: com.arcgismaps.internal.jni.CoreFeatureType): com.arcgismaps.internal.jni.CoreArcGISFeature;
					public getInstanceId(): java.lang.Long;
					public getFeatureTypes(): com.arcgismaps.internal.jni.CoreArray;
					public getEditableAttributeFields(): com.arcgismaps.internal.jni.CoreArray;
					public getContingentValues(param0: com.arcgismaps.internal.jni.CoreArcGISFeature, param1: string): com.arcgismaps.internal.jni.CoreContingentValuesResult;
					public cancelLoad(): void;
					public static createCoreArcGISFeatureTableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getContingentValuesDefinition(): com.arcgismaps.internal.jni.CoreContingentValuesDefinition;
					public validateRelationshipConstraintsAsync(param0: com.arcgismaps.internal.jni.CoreArcGISFeature): com.arcgismaps.internal.jni.CoreTask;
					public setIsPopupEnabled(param0: boolean): void;
					public queryRelatedFeatures(param0: com.arcgismaps.internal.jni.CoreArcGISFeature): com.arcgismaps.internal.jni.CoreTask;
					public setUseAdvancedSymbology(param0: boolean): void;
					public createFeatureWithTemplate(param0: com.arcgismaps.internal.jni.CoreFeatureTemplate): com.arcgismaps.internal.jni.CoreArcGISFeature;
					public getUpdatedFeatures(): com.arcgismaps.internal.jni.CoreTask;
					public validateContingencyConstraints(param0: com.arcgismaps.internal.jni.CoreArcGISFeature): com.arcgismaps.internal.jni.CoreArray;
					public createFeatureWithTemplateAndGeometry(param0: com.arcgismaps.internal.jni.CoreFeatureTemplate, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreArcGISFeature;
					public getIsPopupEnabled(): boolean;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public createFeatureWithSubtype(param0: com.arcgismaps.internal.jni.CoreFeatureSubtype): com.arcgismaps.internal.jni.CoreArcGISFeature;
					public getGlobalIdField(): string;
					public getFeatureFormDefinition(): com.arcgismaps.internal.jni.CoreFeatureFormDefinition;
					public load(): void;
					public getFeatureType(param0: string): com.arcgismaps.internal.jni.CoreFeatureType;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getFeatureTemplates(): com.arcgismaps.internal.jni.CoreArray;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getLayerInfo(): com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfo;
					public getAddedFeatures(): com.arcgismaps.internal.jni.CoreTask;
					public getAddedFeaturesCount(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getRelatedTables(): com.arcgismaps.internal.jni.CoreArray;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getUseAdvancedSymbology(): boolean;
					public getRelatedTablesWithRelationshipInfo(param0: com.arcgismaps.internal.jni.CoreRelationshipInfo): com.arcgismaps.internal.jni.CoreArray;
					public hasLocalEdits(): boolean;
					public getDefaultSubtypeCode(): com.arcgismaps.internal.jni.CoreElement;
					public getFeatureSubtypes(): com.arcgismaps.internal.jni.CoreArray;
					public createFeatureWithTypeAndGeometry(param0: com.arcgismaps.internal.jni.CoreFeatureType, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreArcGISFeature;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISImageServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISImageServiceInfo>;
					public mHandle: number;
					public getFullExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getAttribution(): string;
					public finalize(): void;
					public dispose(): void;
					public getPixelType(): com.arcgismaps.internal.jni.CorePixelType;
					public getURL(): string;
					public getCurrentVersion(): string;
					public getMaxScale(): number;
					public getMinScale(): number;
					public getTimeInfo(): com.arcgismaps.internal.jni.CoreLayerTimeInfo;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getRenderingRuleInfos(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreArcGISImageServiceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISImageServiceInfo;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISMapImageLayer extends com.arcgismaps.internal.jni.CoreImageAdjustmentLayer implements com.arcgismaps.internal.jni.CoreRefreshable, com.arcgismaps.internal.jni.CoreTimeAware {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISMapImageLayer>;
					public setIsTimeFilteringEnabled(param0: boolean): void;
					public constructor(param0: string);
					public onFullTimeExtentChanged(): void;
					public finalize(): void;
					public getGeodatabaseVersion(): string;
					public getTimeOffset(): com.arcgismaps.internal.jni.CoreTimeValue;
					public getIsVisible(): boolean;
					public load(): void;
					public setImageFormat(param0: com.arcgismaps.internal.jni.CoreMapServiceImageFormat): void;
					public getTimeInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getSupportsTimeFiltering(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public getMapImageSublayers(): com.arcgismaps.internal.jni.CoreVector;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreArcGISMapImageLayer;
					public resetSublayers(): void;
					public getTables(): com.arcgismaps.internal.jni.CoreArray;
					public constructor();
					public getFullTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public loadTablesAndLayers(): com.arcgismaps.internal.jni.CoreTask;
					public getCanChangeVisibility(): boolean;
					public static createCoreArcGISMapImageLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISMapImageLayer;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getIsTimeFilteringEnabled(): boolean;
					public getURI(): string;
					public getMapServiceInfo(): com.arcgismaps.internal.jni.CoreArcGISMapServiceInfo;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public getRefreshInterval(): number;
					public cancelLoad(): void;
					public setMapImageSublayers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setTimeOffset(param0: com.arcgismaps.internal.jni.CoreTimeValue): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setRefreshInterval(param0: number): void;
					public getName(): string;
					public setFullTimeExtentChangedCallback(param0: com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener): void;
					public setGeodatabaseVersion(param0: string): void;
					public setIsVisible(param0: boolean): void;
					public getImageFormat(): com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISMapImageSublayer extends com.arcgismaps.internal.jni.CoreArcGISSublayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISMapImageSublayer>;
					public setRenderer(param0: com.arcgismaps.internal.jni.CoreRenderer): void;
					public getLabelDefinitions(): com.arcgismaps.internal.jni.CoreVector;
					public setOpacity(param0: number): void;
					public setMinScale(param0: number): void;
					public getSource(): com.arcgismaps.internal.jni.CoreSublayerSource;
					public getIsVisible(): boolean;
					public load(): void;
					public getScaleSymbols(): boolean;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getMinScale(): number;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public setLabelDefinitions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setScaleSymbols(param0: boolean): void;
					public getTable(): com.arcgismaps.internal.jni.CoreServiceFeatureTable;
					public getCanChangeVisibility(): boolean;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public constructor(param0: number);
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getOpacity(): number;
					public setMaxScale(param0: number): void;
					public getLabelsEnabled(): boolean;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public static createCoreArcGISMapImageSublayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISMapImageSublayer;
					public getDefaultVisibility(): boolean;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public setName(param0: string): void;
					public getMaxScale(): number;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setDefinitionExpression(param0: string): void;
					public getName(): string;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreSublayerSource);
					public setIsPopupEnabled(param0: boolean): void;
					public setIsVisible(param0: boolean): void;
					public getDefinitionExpression(): string;
					public setLabelsEnabled(param0: boolean): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISMapServiceInfo extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISMapServiceInfo>;
					public mHandle: number;
					public getFullExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getTimeInfo(): com.arcgismaps.internal.jni.CoreServiceTimeInfo;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getTableInfos(): com.arcgismaps.internal.jni.CoreArray;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreArcGISMapServiceInfo;
					public getSingleFusedMapCache(): boolean;
					public getCapabilities(): com.arcgismaps.internal.jni.CoreMapServiceCapabilities;
					public static createCoreArcGISMapServiceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISMapServiceInfo;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getCurrentVersion(): string;
					public getInitialExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getUnit(): com.arcgismaps.internal.jni.CoreUnit;
					public getMaxImageWidth(): number;
					public getMinScale(): number;
					public getMaxImageHeight(): number;
					public constructor();
					public toJSON(): string;
					public close(): void;
					public getSupportedImageFormatTypes(): com.arcgismaps.internal.jni.CoreArray;
					public getServiceSourceType(): com.arcgismaps.internal.jni.CoreServiceType;
					public getSupportsDynamicLayers(): boolean;
					public getTileInfo(): com.arcgismaps.internal.jni.CoreTileInfo;
					public getMaxRecordCount(): number;
					public getAttribution(): string;
					public dispose(): void;
					public getExportTilesAllowed(): boolean;
					public getTileServers(): com.arcgismaps.internal.jni.CoreArray;
					public getLayerInfos(): com.arcgismaps.internal.jni.CoreArray;
					public getURL(): string;
					public getExportTileCacheCompactV2Allowed(): boolean;
					public getMaxScale(): number;
					public getServiceDescription(): string;
					public static nativeDestroy(param0: number): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getDescription(): string;
					public getMaxExportTilesCount(): number;
					public getHandle(): number;
					public getDocumentInfo(): com.arcgismaps.internal.jni.CoreServiceDocumentInfo;
					public getMapName(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISMapServiceSublayerInfo extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerInfo>;
					public mHandle: number;
					public getHasLabels(): boolean;
					public getDisplayFieldName(): string;
					public getHasZ(): boolean;
					public finalize(): void;
					public getCapabilities(): com.arcgismaps.internal.jni.CoreMapServiceCapabilities;
					public getSubtypeField(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getMinScale(): number;
					public getHasAttachments(): boolean;
					public constructor();
					public toJSON(): string;
					public getServiceLayerId(): number;
					public close(): void;
					public getTypeIdFieldName(): string;
					public getUseStandardizedQueries(): boolean;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getCanScaleSymbols(): boolean;
					public getFeatureTypes(): com.arcgismaps.internal.jni.CoreArray;
					public getHasM(): boolean;
					public getDescription(): string;
					public getHandle(): number;
					public getDrawingInfo(): com.arcgismaps.internal.jni.CoreDrawingInfo;
					public getVersion(): string;
					public getSupportsStatistics(): boolean;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerInfo;
					public getSupportsAdvancedQueries(): boolean;
					public getParentLayerInfo(): com.arcgismaps.internal.jni.CoreIdInfo;
					public static createCoreArcGISMapServiceSublayerInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerInfo;
					public getCanModifyLayer(): boolean;
					public getEffectiveMaxScale(): number;
					public getServiceLayerName(): string;
					public getIsDataVersioned(): boolean;
					public getSublayerType(): com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getMaxRecordCount(): number;
					public getField(param0: string): com.arcgismaps.internal.jni.CoreField;
					public getAttribution(): string;
					public getDefaultVisibility(): boolean;
					public dispose(): void;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public getURL(): string;
					public getMaxScale(): number;
					public getRelationshipInfos(): com.arcgismaps.internal.jni.CoreArray;
					public getOwnershipBasedAccessControl(): com.arcgismaps.internal.jni.CoreOwnershipBasedAccessControlInfo;
					public getTimeInfo(): com.arcgismaps.internal.jni.CoreLayerTimeInfo;
					public getEffectiveMinScale(): number;
					public static nativeDestroy(param0: number): void;
					public getDefaultSubtypeCode(): com.arcgismaps.internal.jni.CoreElement;
					public getFeatureSubtypes(): com.arcgismaps.internal.jni.CoreArray;
					public getDefinitionExpression(): string;
					public getSublayerInfos(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISMapServiceSublayerType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public static FEATURELAYER: com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public static TABLE: com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public static GROUPLAYER: com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public static RASTERLAYER: com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public static NETWORKANALYSISLAYER: com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISRuntimeEnvironment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISRuntimeEnvironment>;
					public static setLicense(param0: string): com.arcgismaps.internal.jni.CoreLicenseResult;
					public static setPlatformHelpersProvider(param0: com.arcgismaps.internal.jni.CorePlatformHelpersProvider): void;
					public static getScreenCoordinateType(): com.arcgismaps.internal.jni.CoreScreenCoordinateType;
					public static setTempDirectory(param0: string): void;
					public static getAuthenticationManager(): com.arcgismaps.internal.jni.CoreAuthenticationManager;
					public static forceServiceCurveGeometryMode(param0: com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode): void;
					public static setAndroidAPKPath(param0: string): void;
					public static disableRequestChaining(): void;
					public static getAPIKey(): string;
					public static getServiceCurveGeometryMode(): com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode;
					public static setLicenseInfo(param0: com.arcgismaps.internal.jni.CoreLicenseInfo): com.arcgismaps.internal.jni.CoreLicenseResult;
					public constructor();
					public static setFeatureToggleDirectory(param0: string): void;
					public static setScreenCoordinateType(param0: com.arcgismaps.internal.jni.CoreScreenCoordinateType): void;
					public static enableShowAssertDialog(param0: boolean): void;
					public static enableLeakDetection(param0: boolean): void;
					public static setShaderDirectory(param0: string): void;
					public static setCustomEglLibFilename(param0: string): void;
					public static isFeatureEnabled(param0: string): boolean;
					public static setServiceCurveGeometryMode(param0: com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode): void;
					public static setAPIKey(param0: string): void;
					public static setCustomOpenglLibFilename(param0: string): void;
					public static setAuthenticationManager(param0: com.arcgismaps.internal.jni.CoreAuthenticationManager): void;
					public static getLicense(): com.arcgismaps.internal.jni.CoreLicense;
					public static enableRaiseAssertion(param0: boolean): void;
					public static enableBreakOnException(param0: boolean): void;
					public static setInstallDirectory(param0: string): void;
					public static setLicenseWithExtensions(param0: string, param1: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreLicenseResult;
					public static getInstallDirectory(): string;
					public static setResourcesDirectory(param0: string): void;
					public static getFeatureToggleDirectory(): string;
					public static setBetaWatermark(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISSceneLayer extends com.arcgismaps.internal.jni.CoreLayer implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreFloorAware {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISSceneLayer>;
					public getPolygonFilter(): com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilter;
					public setFeaturesVisible(param0: com.arcgismaps.internal.jni.CoreVector, param1: boolean): void;
					public constructor(param0: string);
					public unselectFeature(param0: com.arcgismaps.internal.jni.CoreFeature): void;
					public getAltitudeOffset(): number;
					public getIsVisible(): boolean;
					public load(): void;
					public static createCoreArcGISSceneLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISSceneLayer;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public setPolygonFilter(param0: com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilter): void;
					public setFeatureVisible(param0: com.arcgismaps.internal.jni.CoreFeature, param1: boolean): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public setAltitudeUnit(param0: com.arcgismaps.internal.jni.CoreLinearUnit): void;
					public getSurfacePlacement(): com.arcgismaps.internal.jni.CoreSurfacePlacement;
					public setSurfacePlacement(param0: com.arcgismaps.internal.jni.CoreSurfacePlacement): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setAPIKey(param0: string): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getDataType(): com.arcgismaps.internal.jni.CoreSceneLayerDataType;
					public setFloorDefinition(param0: com.arcgismaps.internal.jni.CoreLayerFloorDefinition): void;
					public getURI(): string;
					public getLabelsEnabled(): boolean;
					public selectFeature(param0: com.arcgismaps.internal.jni.CoreFeature): void;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public getFeatureTable(): com.arcgismaps.internal.jni.CoreFeatureTable;
					public selectFeatures(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public cancelLoad(): void;
					public getAltitudeUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public resetFeaturesVisible(): void;
					public getFloorDefinition(): com.arcgismaps.internal.jni.CoreLayerFloorDefinition;
					public clearSelection(): void;
					public getSelectedFeatures(): com.arcgismaps.internal.jni.CoreTask;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getName(): string;
					public setAltitudeOffset(param0: number): void;
					public setIsVisible(param0: boolean): void;
					public unselectFeatures(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setLabelsEnabled(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISStreamService extends com.arcgismaps.internal.jni.CoreDynamicEntityDataSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISStreamService>;
					public constructor(param0: string);
					public pushData(param0: androidNative.Array<number>): void;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getWebSocketSubscribeURL(): string;
					public load(): void;
					public getFilter(): com.arcgismaps.internal.jni.CoreArcGISStreamServiceFilter;
					public getURL(): string;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getServiceInfo(): com.arcgismaps.internal.jni.CoreArcGISStreamServiceInfo;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public pushString(param0: string): void;
					public setFilter(param0: com.arcgismaps.internal.jni.CoreArcGISStreamServiceFilter): void;
					public static createCoreArcGISStreamServiceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISStreamService;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISStreamServiceFilter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISStreamServiceFilter>;
					public mHandle: number;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getWhereClause(): string;
					public finalize(): void;
					public dispose(): void;
					public getOutSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setWhereClause(param0: string): void;
					public getOutFields(): com.arcgismaps.internal.jni.CoreVector;
					public close(): void;
					public static createCoreArcGISStreamServiceFilterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISStreamServiceFilter;
					public setOutSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public setOutFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISStreamServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISStreamServiceInfo>;
					public mHandle: number;
					public getArchiveServiceURL(): string;
					public getObjectIdField(): string;
					public getGeometryField(): string;
					public finalize(): void;
					public getToken(): string;
					public getGlobalIdField(): string;
					public getTrackIdField(): string;
					public getCurrentVersion(): string;
					public getRelatedFeaturesURL(): string;
					public constructor();
					public close(): void;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getWebSocketURL(): string;
					public dispose(): void;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public static createCoreArcGISStreamServiceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISStreamServiceInfo;
					public getArchiveUpdateInterval(): number;
					public getStartTimeField(): string;
					public static nativeDestroy(param0: number): void;
					public getRelatedFeaturesJoinField(): string;
					public getArchiveMaximumFeatureAge(): number;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getDescription(): string;
					public getEndTimeField(): string;
					public getHandle(): number;
					public getDrawingInfo(): com.arcgismaps.internal.jni.CoreDrawingInfo;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISSublayer implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLayerContent, com.arcgismaps.internal.jni.CoreLoadable, com.arcgismaps.internal.jni.CorePopupSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISSublayer>;
					public mHandle: number;
					public finalize(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreArcGISSublayerType;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public onSubLayerContentChanged(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getMinScale(): number;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public close(): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public onRequestRequired(param0: number): void;
					public getOpacity(): number;
					public getInstanceId(): java.lang.Long;
					public getLabelsEnabled(): boolean;
					public equals(param0: com.arcgismaps.internal.jni.CoreArcGISSublayer): boolean;
					public getId(): number;
					public cancelLoad(): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getShowInLegend(): boolean;
					public setIsPopupEnabled(param0: boolean): void;
					public static createCoreArcGISSublayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISSublayer;
					public getHandle(): number;
					public getIsPopupEnabled(): boolean;
					public getMapServiceSublayerInfo(): com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerInfo;
					public clone(): com.arcgismaps.internal.jni.CoreArcGISSublayer;
					public getIsVisible(): boolean;
					public load(): void;
					public getScaleSymbols(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public onDoneLoading(param0: number): void;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public setSublayers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISSublayer;
					public getMaxScale(): number;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
					public getSublayers(): com.arcgismaps.internal.jni.CoreVector;
					public getDefinitionExpression(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISSublayerType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISSublayerType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreArcGISSublayerType;
					public static ARCGISMAPIMAGESUBLAYER: com.arcgismaps.internal.jni.CoreArcGISSublayerType;
					public static ARCGISTILEDSUBLAYER: com.arcgismaps.internal.jni.CoreArcGISSublayerType;
					public static SUBTYPESUBLAYER: com.arcgismaps.internal.jni.CoreArcGISSublayerType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreArcGISSublayerType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreArcGISSublayerType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreArcGISSublayerType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISTiledElevationSource extends com.arcgismaps.internal.jni.CoreElevationSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISTiledElevationSource>;
					public getURI(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileCache);
					public constructor(param0: string);
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getTileCache(): com.arcgismaps.internal.jni.CoreTileCache;
					public cancelLoad(): void;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getItem(): com.arcgismaps.internal.jni.CoreItem;
					public static createCoreArcGISTiledElevationSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISTiledElevationSource;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISTiledLayer extends com.arcgismaps.internal.jni.CoreImageTiledLayer implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreRefreshable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISTiledLayer>;
					public constructor(param0: string);
					public getTileCache(): com.arcgismaps.internal.jni.CoreTileCache;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public getTiledSublayers(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileInfo, param1: com.arcgismaps.internal.jni.CoreEnvelope);
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreArcGISTiledLayer;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setAPIKey(param0: string): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getURI(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileCache);
					public getMapServiceInfo(): com.arcgismaps.internal.jni.CoreArcGISMapServiceInfo;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public getRefreshInterval(): number;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setRefreshInterval(param0: number): void;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
					public static createCoreArcGISTiledLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISTiledLayer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISTiledSublayer extends com.arcgismaps.internal.jni.CoreArcGISSublayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISTiledSublayer>;
					public static createCoreArcGISTiledSublayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISTiledSublayer;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public getName(): string;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setIsPopupEnabled(param0: boolean): void;
					public setIsVisible(param0: boolean): void;
					public getCanChangeVisibility(): boolean;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISTokenInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISTokenInfo>;
					public mHandle: number;
					public static createCoreArcGISTokenInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISTokenInfo;
					public isExpired(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getIsSSLRequired(): boolean;
					public getAccessToken(): string;
					public getExpirationDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public close(): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreArcGISTokenInfo): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcGISVectorTiledLayer extends com.arcgismaps.internal.jni.CoreLayer implements com.arcgismaps.internal.jni.CoreAPIKeyResource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcGISVectorTiledLayer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVectorTileCache, param1: com.arcgismaps.internal.jni.CoreItemResourceCache);
					public constructor(param0: string);
					public getIsVisible(): boolean;
					public load(): void;
					public getItemResourceCache(): com.arcgismaps.internal.jni.CoreItemResourceCache;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setAPIKey(param0: string): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getURI(): string;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public cancelLoad(): void;
					public getVectorTileCache(): com.arcgismaps.internal.jni.CoreVectorTileCache;
					public getSourceInfo(): com.arcgismaps.internal.jni.CoreVectorTileSourceInfo;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static createCoreArcGISVectorTiledLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcGISVectorTiledLayer;
					public getName(): string;
					public getStyle(): com.arcgismaps.internal.jni.CoreVectorTileStyle;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVectorTileCache);
					public setIsVisible(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcadeConsoleMessageContext {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcadeConsoleMessageContext>;
					public mHandle: number;
					public getInformation(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreArcadeConsoleMessageContextFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcadeConsoleMessageContext;
					public getProfile(): com.arcgismaps.internal.jni.CoreArcadeProfile;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcadeEvaluationResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcadeEvaluationResult>;
					public mHandle: number;
					public getResult(): com.arcgismaps.internal.jni.CoreElement;
					public equals(param0: com.arcgismaps.internal.jni.CoreArcadeEvaluationResult): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public castTo(param0: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType): com.arcgismaps.internal.jni.CoreElement;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreArcadeEvaluationResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcadeEvaluationResult;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcadeEvaluator extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcadeEvaluator>;
					public mHandle: number;
					public finalize(): void;
					public getAttributesUsingGeoElementAsync(param0: string, param1: com.arcgismaps.internal.jni.CoreElement): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public evaluateAsync(param0: com.arcgismaps.internal.jni.CoreDictionary): com.arcgismaps.internal.jni.CoreTask;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public getExpression(): com.arcgismaps.internal.jni.CoreArcadeExpression;
					public onRequestRequired(param0: number): void;
					public getAttributesUsingFeatureTableAsync(param0: string, param1: com.arcgismaps.internal.jni.CoreFeatureTable): com.arcgismaps.internal.jni.CoreTask;
					public getRequestables(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcadeExpression, param1: com.arcgismaps.internal.jni.CoreArcadeProfile);
					public getIsStable(): boolean;
					public getProfileVariablesUsed(): com.arcgismaps.internal.jni.CoreArray;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public static createCoreArcadeEvaluatorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcadeEvaluator;
					public dispose(): void;
					public getProfile(): com.arcgismaps.internal.jni.CoreArcadeProfile;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcadeExpression extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcadeExpression>;
					public mHandle: number;
					public getTitle(): string;
					public constructor(param0: string);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public static createCoreArcadeExpressionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcadeExpression;
					public getReturnType(): com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreArcadeExpression;
					public getExpression(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public toJSON(): string;
					public close(): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreArcadeExpression): boolean;
					public constructor(param0: string, param1: string, param2: string);
					public constructor(param0: string, param1: string, param2: string, param3: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcadeExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static NUMBER: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static STRING: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static DICTIONARY: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static ANY: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static BOOLEAN: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static DATE: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static DATEONLY: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static TIMEONLY: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static TIMESTAMPOFFSET: com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreArcadeExpressionReturnType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcadeLabelExpression extends com.arcgismaps.internal.jni.CoreLabelExpression {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcadeLabelExpression>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcadeExpression);
					public static createCoreArcadeLabelExpressionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArcadeLabelExpression;
					public constructor(param0: string);
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArcadeProfile {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArcadeProfile>;
					public static RESTRICTED: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static UNRESTRICTED: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static ALIAS: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static ATTRIBUTERULECALCULATION: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static ATTRIBUTERULECONSTRAINT: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static ATTRIBUTERULEVALIDATION: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static CONSTRAINT: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static DASHBOARDFORMATTING: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static DASHBOARDDATA: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static DICTIONARYRENDERER: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static FEATUREZ: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static FIELDCALCULATION: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static FIELDMAPPING: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static GEOANALYTICS: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static LABELING: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static LAYOUT: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static MEASUREVISUALIZATION: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static POPUP: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static VELOCITY: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static VISUALIZATION: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static GEOTRIGGERNOTIFICATION: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static FORMCALCULATION: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static TASK: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static POPUPELEMENT: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static LOCATIONUPDATECONSTRAINT: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static QUICKCAPTURE: com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreArcadeProfile>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreArcadeProfile;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreArcadeProfile;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAreaUnit extends com.arcgismaps.internal.jni.CoreUnit {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAreaUnit>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreAreaUnitId);
					public constructor();
					public convertFrom(param0: com.arcgismaps.internal.jni.CoreAreaUnit, param1: number): number;
					public fromSquareMeters(param0: number): number;
					public static createCoreAreaUnitFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAreaUnit;
					public getAreaUnitId(): com.arcgismaps.internal.jni.CoreAreaUnitId;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLinearUnit);
					public convertTo(param0: com.arcgismaps.internal.jni.CoreAreaUnit, param1: number): number;
					public toSquareMeters(param0: number): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAreaUnitId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAreaUnitId>;
					public static OTHER: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static HECTARES: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static ACRES: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static SQUAREMETERS: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static SQUAREFEET: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static SQUAREKILOMETERS: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static SQUAREMILES: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static SQUAREYARDS: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static SQUAREDECIMETERS: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static SQUARECENTIMETERS: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static SQUAREMILLIMETERS: com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAreaUnitId;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAreaUnitId;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAreaUnitId>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArray {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArray>;
					public mHandle: number;
					public static createCoreArrayFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArray;
					public isEmpty(): boolean;
					public getObjectType(): com.arcgismaps.internal.jni.CoreArrayType;
					public finalize(): void;
					public indexOf(param0: com.arcgismaps.internal.jni.CoreElement): number;
					public dispose(): void;
					public first(): com.arcgismaps.internal.jni.CoreElement;
					public last(): com.arcgismaps.internal.jni.CoreElement;
					public equals(param0: com.arcgismaps.internal.jni.CoreArray): boolean;
					public getSize(): number;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArray;
					public contains(param0: com.arcgismaps.internal.jni.CoreElement): boolean;
					public static createBuilder(param0: com.arcgismaps.internal.jni.CoreElementType): com.arcgismaps.internal.jni.CoreArrayBuilder;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public at(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public getValueType(): com.arcgismaps.internal.jni.CoreElementType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArrayBuilder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArrayBuilder>;
					public mHandle: number;
					public static createCoreArrayBuilderFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArrayBuilder;
					public moveToArray(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public add(param0: com.arcgismaps.internal.jni.CoreElement): void;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getValueType(): com.arcgismaps.internal.jni.CoreElementType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArrayObservable extends com.arcgismaps.internal.jni.CoreArray {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArrayObservable>;
					public onElementAdded(param0: number, param1: number): void;
					public static createCoreArrayObservableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreArrayObservable;
					public finalize(): void;
					public setElementAddedCallback(param0: com.arcgismaps.internal.jni.CoreElementAddedCallbackListener): void;
					public dispose(): void;
					public setElementRemovedCallback(param0: com.arcgismaps.internal.jni.CoreElementRemovedCallbackListener): void;
					public onElementRemoved(param0: number, param1: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreArrayType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreArrayType>;
					public static ARRAY: com.arcgismaps.internal.jni.CoreArrayType;
					public static ARRAYOBSERVABLE: com.arcgismaps.internal.jni.CoreArrayType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreArrayType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreArrayType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreArrayType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAtmosphereEffect {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAtmosphereEffect>;
					public static NONE: com.arcgismaps.internal.jni.CoreAtmosphereEffect;
					public static HORIZONONLY: com.arcgismaps.internal.jni.CoreAtmosphereEffect;
					public static REALISTIC: com.arcgismaps.internal.jni.CoreAtmosphereEffect;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAtmosphereEffect;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAtmosphereEffect>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAtmosphereEffect;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAttachment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAttachment>;
					public mHandle: number;
					public finalize(): void;
					public getHasFetchedData(): boolean;
					public getId(): number;
					public fetchData(): com.arcgismaps.internal.jni.CoreTask;
					public dispose(): void;
					public getContentType(): string;
					public getSize(): number;
					public static createCoreAttachmentFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAttachment;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAttachmentSyncDirection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAttachmentSyncDirection>;
					public static NONE: com.arcgismaps.internal.jni.CoreAttachmentSyncDirection;
					public static UPLOAD: com.arcgismaps.internal.jni.CoreAttachmentSyncDirection;
					public static BIDIRECTIONAL: com.arcgismaps.internal.jni.CoreAttachmentSyncDirection;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAttachmentSyncDirection;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAttachmentSyncDirection>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAttachmentSyncDirection;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAttachmentsPopupElement extends com.arcgismaps.internal.jni.CorePopupElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAttachmentsPopupElement>;
					public getTitle(): string;
					public setDescription(param0: string): void;
					public setDisplayType(param0: com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType): void;
					public setTitle(param0: string): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCoreAttachmentsPopupElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAttachmentsPopupElement;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType);
					public constructor();
					public getDisplayType(): com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType;
					public toJSON(): string;
					public getAttachments(): com.arcgismaps.internal.jni.CoreArray;
					public fetchAttachmentsAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getDescription(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAttributeParameterValue {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAttributeParameterValue>;
					public mHandle: number;
					public setAttributeName(param0: string): void;
					public getParameterValue(): com.arcgismaps.internal.jni.CoreElement;
					public setParameterValue(param0: com.arcgismaps.internal.jni.CoreElement): void;
					public finalize(): void;
					public dispose(): void;
					public static createCoreAttributeParameterValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAttributeParameterValue;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getAttributeName(): string;
					public setParameterName(param0: string): void;
					public close(): void;
					public getParameterName(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAttributeUnit {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAttributeUnit>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static INCHES: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static FEET: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static YARDS: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static MILES: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static MILLIMETERS: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static CENTIMETERS: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static DECIMETERS: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static METERS: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static KILOMETERS: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static NAUTICALMILES: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static DECIMALDEGREES: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static SECONDS: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static MINUTES: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static HOURS: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static DAYS: com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreAttributeUnit>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreAttributeUnit;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAttributionChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAttributionChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreAttributionChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						attributionChanged(): void;
					});
					public constructor();
					public attributionChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAuthenticationManager {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAuthenticationManager>;
					public mHandle: number;
					public onPortalNetworkSecuredInquiry(param0: number): void;
					public getRefererAppId(): string;
					public finalize(): void;
					public dispose(): void;
					public getArcGISCredentialStore(): com.arcgismaps.internal.jni.CoreArcGISCredentialStore;
					public onOAuthUserLogin(param0: number): void;
					public static createCoreAuthenticationManagerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreAuthenticationManager;
					public setArcGISCredentialStore(param0: com.arcgismaps.internal.jni.CoreArcGISCredentialStore): void;
					public setOAuthUserLoginCallback(param0: com.arcgismaps.internal.jni.CoreOAuthUserLoginCallbackListener): void;
					public setArcGISAuthenticationChallengeIssuedCallback(param0: com.arcgismaps.internal.jni.CoreIssuedChallengeCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public onArcGISAuthenticationChallengeIssued(param0: number): void;
					public setPortalNetworkSecuredInquiryCallback(param0: com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiryCallbackListener): void;
					public close(): void;
					public setRefererAppId(param0: string): void;
					public static getRequestRetryCount(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreAutoPanModeChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreAutoPanModeChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreAutoPanModeChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						autoPanModeChanged(param0: com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode): void;
					});
					public constructor();
					public autoPanModeChanged(param0: com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBackgroundGrid {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBackgroundGrid>;
					public mHandle: number;
					public getGridLineColor(): com.arcgismaps.internal.jni.CoreColor;
					public getGridSize(): number;
					public finalize(): void;
					public dispose(): void;
					public getIsVisible(): boolean;
					public setGridLineWidth(param0: number): void;
					public getGridLineWidth(): number;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreColor, param1: com.arcgismaps.internal.jni.CoreColor, param2: number, param3: number);
					public static createCoreBackgroundGridFromHandle(param0: number): com.arcgismaps.internal.jni.CoreBackgroundGrid;
					public setGridSize(param0: number): void;
					public setIsVisible(param0: boolean): void;
					public setGridLineColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getHandle(): number;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBarrierType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBarrierType>;
					public static RESTRICTION: com.arcgismaps.internal.jni.CoreBarrierType;
					public static COSTADJUSTMENT: com.arcgismaps.internal.jni.CoreBarrierType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreBarrierType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreBarrierType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreBarrierType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBaseStretchRenderer extends com.arcgismaps.internal.jni.CoreRasterRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBaseStretchRenderer>;
					public static createCoreBaseStretchRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreBaseStretchRenderer;
					public getGammas(): com.arcgismaps.internal.jni.CoreArray;
					public getEstimateStatistics(): boolean;
					public constructor();
					public getStretchParameters(): com.arcgismaps.internal.jni.CoreStretchParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBasemap implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreJSONSerializable, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBasemap>;
					public mHandle: number;
					public setBaseLayers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor(param0: string);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public load(): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreBasemap;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreVector);
					public constructor(param0: com.arcgismaps.internal.jni.CoreLayer);
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public clone(): com.arcgismaps.internal.jni.CoreBasemap;
					public onLoadStatusChanged(param0: number): void;
					public toJSON(): string;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public setAPIKey(param0: string): void;
					public onRequestRequired(param0: number): void;
					public getURI(): string;
					public getInstanceId(): java.lang.Long;
					public constructor(param0: com.arcgismaps.internal.jni.CoreBasemapStyle, param1: com.arcgismaps.internal.jni.CoreBasemapStyleParameters);
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getReferenceLayers(): com.arcgismaps.internal.jni.CoreVector;
					public getItem(): com.arcgismaps.internal.jni.CoreItem;
					public setName(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreBasemapStyle);
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setReferenceLayers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getBaseLayers(): com.arcgismaps.internal.jni.CoreVector;
					public static nativeDestroy(param0: number): void;
					public static createCoreBasemapFromHandle(param0: number): com.arcgismaps.internal.jni.CoreBasemap;
					public getName(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBasemapChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBasemapChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreBasemapChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						basemapChanged(param0: com.arcgismaps.internal.jni.CoreBasemap): void;
					});
					public constructor();
					public basemapChanged(param0: com.arcgismaps.internal.jni.CoreBasemap): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBasemapStyle>;
					public static ARCGISIMAGERY: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISIMAGERYSTANDARD: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISIMAGERYLABELS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISLIGHTGRAY: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISLIGHTGRAYBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISLIGHTGRAYLABELS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISDARKGRAY: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISDARKGRAYBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISDARKGRAYLABELS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISNAVIGATION: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISNAVIGATIONNIGHT: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISSTREETS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISSTREETSNIGHT: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISSTREETSRELIEF: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISTOPOGRAPHIC: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISOCEANS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISOCEANSBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISOCEANSLABELS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISTERRAIN: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISTERRAINBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISTERRAINDETAIL: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISCOMMUNITY: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISCHARTEDTERRITORY: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISCOLOREDPENCIL: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISNOVA: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISMODERNANTIQUE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISMIDCENTURY: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISNEWSPAPER: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHILLSHADELIGHT: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHILLSHADEDARK: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISSTREETSRELIEFBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISTOPOGRAPHICBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISCHARTEDTERRITORYBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISMODERNANTIQUEBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHUMANGEOGRAPHY: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHUMANGEOGRAPHYBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHUMANGEOGRAPHYDETAIL: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHUMANGEOGRAPHYLABELS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHUMANGEOGRAPHYDARK: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHUMANGEOGRAPHYDARKBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHUMANGEOGRAPHYDARKDETAIL: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static ARCGISHUMANGEOGRAPHYDARKLABELS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMSTANDARD: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMSTANDARDRELIEF: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMSTANDARDRELIEFBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMSTREETS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMSTREETSRELIEF: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMLIGHTGRAY: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMLIGHTGRAYBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMLIGHTGRAYLABELS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMDARKGRAY: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMDARKGRAYBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMDARKGRAYLABELS: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMSTREETSRELIEFBASE: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMBLUEPRINT: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMHYBRID: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMHYBRIDDETAIL: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMNAVIGATION: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static OSMNAVIGATIONDARK: com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreBasemapStyle;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreBasemapStyle>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreBasemapStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBasemapStyleLanguageStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy>;
					public static DEFAULT: com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy;
					public static GLOBAL: com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy;
					public static LOCAL: com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy;
					public static APPLICATIONLOCALE: com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBasemapStyleParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBasemapStyleParameters>;
					public mHandle: number;
					public setSpecificLanguage(param0: string): void;
					public getLanguageStrategy(): com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreBasemapStyleParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreBasemapStyleParameters;
					public getSpecificLanguage(): string;
					public getHandle(): number;
					public setLanguageStrategy(param0: com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBingMapsLayer extends com.arcgismaps.internal.jni.CoreServiceImageTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBingMapsLayer>;
					public setKey(param0: string): void;
					public getCulture(): string;
					public finalize(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortal, param1: com.arcgismaps.internal.jni.CoreBingMapsLayerStyle);
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getKey(): string;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileInfo, param1: com.arcgismaps.internal.jni.CoreEnvelope);
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getPortal(): com.arcgismaps.internal.jni.CorePortal;
					public getCanChangeVisibility(): boolean;
					public onKeyPortalCreated(param0: number): void;
					public setKeyPortalCreatedCallback(param0: com.arcgismaps.internal.jni.CorePortalCreatedCallbackListener): void;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public static createCoreBingMapsLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreBingMapsLayer;
					public getStyle(): com.arcgismaps.internal.jni.CoreBingMapsLayerStyle;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreBingMapsLayerStyle);
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setCulture(param0: string): void;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBingMapsLayerStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBingMapsLayerStyle>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreBingMapsLayerStyle;
					public static AERIAL: com.arcgismaps.internal.jni.CoreBingMapsLayerStyle;
					public static HYBRID: com.arcgismaps.internal.jni.CoreBingMapsLayerStyle;
					public static ROAD: com.arcgismaps.internal.jni.CoreBingMapsLayerStyle;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreBingMapsLayerStyle;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreBingMapsLayerStyle;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreBingMapsLayerStyle>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBlendRenderer extends com.arcgismaps.internal.jni.CoreHillshadeRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBlendRenderer>;
					public constructor(param0: number, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreSlopeType, param4: number, param5: number, param6: number);
					public static createCoreBlendRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreBlendRenderer;
					public getGammas(): com.arcgismaps.internal.jni.CoreArray;
					public constructor();
					public getNoDataValues(): com.arcgismaps.internal.jni.CoreArray;
					public getOutputMaxValues(): com.arcgismaps.internal.jni.CoreArray;
					public getElevationRaster(): com.arcgismaps.internal.jni.CoreRaster;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRaster, param1: com.arcgismaps.internal.jni.CoreVector, param2: com.arcgismaps.internal.jni.CoreVector, param3: com.arcgismaps.internal.jni.CoreVector, param4: com.arcgismaps.internal.jni.CoreVector, param5: com.arcgismaps.internal.jni.CoreVector, param6: com.arcgismaps.internal.jni.CoreVector, param7: com.arcgismaps.internal.jni.CoreColorRamp, param8: number, param9: number, param10: number, param11: com.arcgismaps.internal.jni.CoreSlopeType, param12: number, param13: number, param14: number);
					public getColorRamp(): com.arcgismaps.internal.jni.CoreColorRamp;
					public getSourceMinValues(): com.arcgismaps.internal.jni.CoreArray;
					public getSourceMaxValues(): com.arcgismaps.internal.jni.CoreArray;
					public getOutputMinValues(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreBookmark {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreBookmark>;
					public mHandle: number;
					public clone(): com.arcgismaps.internal.jni.CoreBookmark;
					public finalize(): void;
					public dispose(): void;
					public getViewpoint(): com.arcgismaps.internal.jni.CoreViewpoint;
					public static createCoreBookmarkFromHandle(param0: number): com.arcgismaps.internal.jni.CoreBookmark;
					public setName(param0: string): void;
					public setViewpoint(param0: com.arcgismaps.internal.jni.CoreViewpoint): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreViewpoint);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreByteArray {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreByteArray>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getByteArray(): androidNative.Array<number>;
					public getSize(): number;
					public static createCoreByteArrayFromHandle(param0: number): com.arcgismaps.internal.jni.CoreByteArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCacheStorageFormat {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCacheStorageFormat>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreCacheStorageFormat;
					public static COMPACT: com.arcgismaps.internal.jni.CoreCacheStorageFormat;
					public static COMPACTV2: com.arcgismaps.internal.jni.CoreCacheStorageFormat;
					public static EXPLODED: com.arcgismaps.internal.jni.CoreCacheStorageFormat;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreCacheStorageFormat;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreCacheStorageFormat;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreCacheStorageFormat>;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCamera {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCamera>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number);
					public getPitch(): number;
					public moveToward(param0: com.arcgismaps.internal.jni.CorePoint, param1: number): com.arcgismaps.internal.jni.CoreCamera;
					public finalize(): void;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number, param4: number);
					public getHeading(): number;
					public zoomToward(param0: com.arcgismaps.internal.jni.CorePoint, param1: number): com.arcgismaps.internal.jni.CoreCamera;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number);
					public getTransformationMatrix(): com.arcgismaps.internal.jni.CoreTransformationMatrix;
					public getLocation(): com.arcgismaps.internal.jni.CorePoint;
					public rotateAround(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number): com.arcgismaps.internal.jni.CoreCamera;
					public moveForward(param0: number): com.arcgismaps.internal.jni.CoreCamera;
					public equals(param0: com.arcgismaps.internal.jni.CoreCamera): boolean;
					public moveTo(param0: com.arcgismaps.internal.jni.CorePoint): com.arcgismaps.internal.jni.CoreCamera;
					public static nativeDestroy(param0: number): void;
					public static createCoreCameraFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCamera;
					public constructor();
					public close(): void;
					public rotateTo(param0: number, param1: number, param2: number): com.arcgismaps.internal.jni.CoreCamera;
					public elevate(param0: number): com.arcgismaps.internal.jni.CoreCamera;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTransformationMatrix);
					public getRoll(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCameraController {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCameraController>;
					public mHandle: number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreCameraControllerType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCameraController;
					public finalize(): void;
					public static createCoreCameraControllerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCameraController;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCameraControllerHeadingChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCameraControllerHeadingChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCameraControllerHeadingChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						headingChanged(): void;
					});
					public constructor();
					public headingChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCameraControllerType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCameraControllerType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreCameraControllerType;
					public static GLOBECAMERACONTROLLER: com.arcgismaps.internal.jni.CoreCameraControllerType;
					public static ORBITGEOELEMENTCAMERACONTROLLER: com.arcgismaps.internal.jni.CoreCameraControllerType;
					public static ORBITLOCATIONCAMERACONTROLLER: com.arcgismaps.internal.jni.CoreCameraControllerType;
					public static TRANSFORMATIONMATRIXCAMERACONTROLLER: com.arcgismaps.internal.jni.CoreCameraControllerType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreCameraControllerType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreCameraControllerType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreCameraControllerType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCanRedoChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCanRedoChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCanRedoChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						canRedoChanged(param0: boolean): void;
					});
					public constructor();
					public canRedoChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCanUndoChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCanUndoChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCanUndoChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						canUndoChanged(param0: boolean): void;
					});
					public constructor();
					public canUndoChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCancelCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCancelCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCancelCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						cancel(): void;
					});
					public constructor();
					public cancel(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCancelRequestCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCancelRequestCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCancelRequestCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						cancelRequest(): void;
					});
					public constructor();
					public cancelRequest(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClassBreak implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClassBreak>;
					public mHandle: number;
					public setDescription(param0: string): void;
					public constructor(param0: string, param1: string, param2: number, param3: number, param4: com.arcgismaps.internal.jni.CoreSymbol, param5: com.arcgismaps.internal.jni.CoreArray);
					public setMaxValue(param0: number): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public setLabel(param0: string): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreClassBreak;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCoreClassBreakFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClassBreak;
					public constructor();
					public equals(param0: com.arcgismaps.internal.jni.CoreClassBreak): boolean;
					public toJSON(): string;
					public close(): void;
					public getMaxValue(): number;
					public clone(): com.arcgismaps.internal.jni.CoreClassBreak;
					public setAlternateSymbols(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getLabel(): string;
					public getInstanceId(): java.lang.Long;
					public setMinValue(param0: number): void;
					public getSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getHash(): number;
					public setSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public dispose(): void;
					public constructor(param0: string, param1: string, param2: number, param3: number, param4: com.arcgismaps.internal.jni.CoreSymbol);
					public static nativeDestroy(param0: number): void;
					public getDescription(): string;
					public getHandle(): number;
					public getAlternateSymbols(): com.arcgismaps.internal.jni.CoreVector;
					public getMinValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClassBreaksRenderer extends com.arcgismaps.internal.jni.CoreRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClassBreaksRenderer>;
					public setNormalizationType(param0: com.arcgismaps.internal.jni.CoreRendererNormalizationType): void;
					public setNormalizationField(param0: string): void;
					public static createCoreClassBreaksRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClassBreaksRenderer;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setBackgroundFillSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setFieldName(param0: string): void;
					public getDefaultLabel(): string;
					public getNormalizationField(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setNormalizationTotal(param0: number): void;
					public getDefaultSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public constructor();
					public setDefaultSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public toJSON(): string;
					public getNormalizationTotal(): number;
					public getBackgroundFillSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setClassBreaks(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setDefaultLabel(param0: string): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreVector);
					public getClassificationMethod(): com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public getFieldName(): string;
					public setMinValue(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public getNormalizationType(): com.arcgismaps.internal.jni.CoreRendererNormalizationType;
					public getClassBreaks(): com.arcgismaps.internal.jni.CoreVector;
					public getMinValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClientReference {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClientReference>;
					public constructor();
					public static fromClientData(param0: any): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClientRequestSender {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClientRequestSender>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static sendRequestAsync(param0: string, param1: com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode, param2: any): com.arcgismaps.internal.jni.CoreTask;
					public finalize(): void;
					public static sendFileRequestAsync(param0: string, param1: string, param2: any): com.arcgismaps.internal.jni.CoreTask;
					public close(): void;
					public dispose(): void;
					public static createCoreClientRequestSenderFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClientRequestSender;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClientResponse {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClientResponse>;
					public mHandle: number;
					public getResponse(): any;
					public getData(): com.arcgismaps.internal.jni.CoreByteArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreClientResponseFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClientResponse;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClosestFacilityParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClosestFacilityParameters>;
					public mHandle: number;
					public getStartTimeUsage(): com.arcgismaps.internal.jni.CoreStartTimeUsage;
					public getTravelMode(): com.arcgismaps.internal.jni.CoreTravelMode;
					public getAccumulateAttributeNames(): com.arcgismaps.internal.jni.CoreVector;
					public setAccumulateAttributeNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setReturnPointBarriers(param0: boolean): void;
					public getReturnPolylineBarriers(): boolean;
					public finalize(): void;
					public setFacilities(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public clone(): com.arcgismaps.internal.jni.CoreClosestFacilityParameters;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public setStartTimeUsage(param0: com.arcgismaps.internal.jni.CoreStartTimeUsage): void;
					public constructor();
					public close(): void;
					public getReturnRoutes(): boolean;
					public getDirectionsDistanceUnits(): com.arcgismaps.internal.jni.CoreUnitSystem;
					public clearFacilities(): void;
					public setPolylineBarriersWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public setReturnDirections(param0: boolean): void;
					public setDefaultImpedanceCutoff(param0: number): void;
					public setPolygonBarriersWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public setIncidents(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public clearPolygonBarriers(): void;
					public setFacilitiesWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public setPolygonBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setDirectionsStyle(param0: com.arcgismaps.internal.jni.CoreDirectionsStyle): void;
					public getHandle(): number;
					public getReturnPolygonBarriers(): boolean;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public clearIncidents(): void;
					public setReturnPolygonBarriers(param0: boolean): void;
					public setReturnPolylineBarriers(param0: boolean): void;
					public getDirectionsLanguage(): string;
					public setDefaultTargetFacilityCount(param0: number): void;
					public clearPolylineBarriers(): void;
					public setIncidentsWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public getRouteShapeType(): com.arcgismaps.internal.jni.CoreRouteShapeType;
					public setTravelMode(param0: com.arcgismaps.internal.jni.CoreTravelMode): void;
					public setStartTime(param0: com.arcgismaps.internal.jni.CoreDateTime): void;
					public setSearchWhereClause(param0: string, param1: string): void;
					public getReturnPointBarriers(): boolean;
					public setPolylineBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setDirectionsDistanceUnits(param0: com.arcgismaps.internal.jni.CoreUnitSystem): void;
					public getTravelDirection(): com.arcgismaps.internal.jni.CoreTravelDirection;
					public getReturnDirections(): boolean;
					public setReturnRoutes(param0: boolean): void;
					public clearPointBarriers(): void;
					public getDefaultImpedanceCutoff(): number;
					public setRouteShapeType(param0: com.arcgismaps.internal.jni.CoreRouteShapeType): void;
					public setTravelDirection(param0: com.arcgismaps.internal.jni.CoreTravelDirection): void;
					public dispose(): void;
					public setOutputSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public static createCoreClosestFacilityParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClosestFacilityParameters;
					public setDirectionsLanguage(param0: string): void;
					public setPointBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getDefaultTargetFacilityCount(): number;
					public getDirectionsStyle(): com.arcgismaps.internal.jni.CoreDirectionsStyle;
					public static nativeDestroy(param0: number): void;
					public getSearchWhereClause(param0: string): string;
					public setPointBarriersWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClosestFacilityResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClosestFacilityResult>;
					public mHandle: number;
					public getIncidents(): com.arcgismaps.internal.jni.CoreArray;
					public getDirectionsLanguage(): string;
					public finalize(): void;
					public dispose(): void;
					public getRankedFacilityIndexes(param0: number): com.arcgismaps.internal.jni.CoreArray;
					public getMessages(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreClosestFacilityResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClosestFacilityResult;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getPolygonBarriers(): com.arcgismaps.internal.jni.CoreArray;
					public getFacilities(): com.arcgismaps.internal.jni.CoreArray;
					public getPolylineBarriers(): com.arcgismaps.internal.jni.CoreArray;
					public getRoute(param0: number, param1: number): com.arcgismaps.internal.jni.CoreClosestFacilityRoute;
					public close(): void;
					public getFacilityCosts(param0: string, param1: number): com.arcgismaps.internal.jni.CoreArray;
					public getPointBarriers(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClosestFacilityRoute {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClosestFacilityRoute>;
					public mHandle: number;
					public getDepartureCurbApproach(): com.arcgismaps.internal.jni.CoreCurbApproach;
					public getTravelTime(): number;
					public getEndTimeShift(): number;
					public finalize(): void;
					public getStartTimeShift(): number;
					public dispose(): void;
					public getDirectionManeuvers(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreClosestFacilityRouteFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClosestFacilityRoute;
					public getTotalLength(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getEndTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public getTotalTime(): number;
					public getCost(param0: string): number;
					public getRouteGeometry(): com.arcgismaps.internal.jni.CorePolyline;
					public getHandle(): number;
					public getArrivalCurbApproach(): com.arcgismaps.internal.jni.CoreCurbApproach;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClosestFacilityTask implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreLoadable, com.arcgismaps.internal.jni.CoreResourceable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClosestFacilityTask>;
					public mHandle: number;
					public constructor(param0: string);
					public constructor(param0: com.arcgismaps.internal.jni.CoreTransportationNetworkDataset);
					public finalize(): void;
					public load(): void;
					public createDefaultParametersAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public constructor(param0: string, param1: string);
					public retryLoad(): void;
					public getClosestFacilityTaskInfo(): com.arcgismaps.internal.jni.CoreClosestFacilityTaskInfo;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public setAPIKey(param0: string): void;
					public onRequestRequired(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public static createCoreClosestFacilityTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClosestFacilityTask;
					public getAPIKey(): string;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public getTransportationNetworkDataset(): com.arcgismaps.internal.jni.CoreTransportationNetworkDataset;
					public solveClosestFacilityAsync(param0: com.arcgismaps.internal.jni.CoreClosestFacilityParameters): com.arcgismaps.internal.jni.CoreTask;
					public setResourceProvider(param0: com.arcgismaps.internal.jni.CoreResourceProvider): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClosestFacilityTaskInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClosestFacilityTaskInfo>;
					public mHandle: number;
					public getStartTimeUsage(): com.arcgismaps.internal.jni.CoreStartTimeUsage;
					public getDirectionsLanguage(): string;
					public finalize(): void;
					public getAccumulateAttributeNames(): com.arcgismaps.internal.jni.CoreArray;
					public getRouteShapeType(): com.arcgismaps.internal.jni.CoreRouteShapeType;
					public getTravelModes(): com.arcgismaps.internal.jni.CoreArray;
					public getDirectionsSupport(): com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getNetworkName(): string;
					public getMaxLocatingDistance(): number;
					public constructor();
					public getCostAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public close(): void;
					public getTravelDirection(): com.arcgismaps.internal.jni.CoreTravelDirection;
					public getSupportedRestrictionUsageParameterValues(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreClosestFacilityTaskInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClosestFacilityTaskInfo;
					public getDirectionsDistanceUnits(): com.arcgismaps.internal.jni.CoreUnitSystem;
					public getDefaultImpedanceCutoff(): number;
					public dispose(): void;
					public getRestrictionAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public getSupportedLanguages(): com.arcgismaps.internal.jni.CoreArray;
					public getDefaultTargetFacilityCount(): number;
					public getDirectionsStyle(): com.arcgismaps.internal.jni.CoreDirectionsStyle;
					public static nativeDestroy(param0: number): void;
					public getDefaultTravelModeName(): string;
					public getHandle(): number;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreClusteringFeatureReduction extends com.arcgismaps.internal.jni.CoreAggregationFeatureReduction {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreClusteringFeatureReduction>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRenderer);
					public getMinSymbolSize(): number;
					public setMaxSymbolSize(param0: number): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getRadius(): number;
					public getMaxSymbolSize(): number;
					public setMinSymbolSize(param0: number): void;
					public constructor();
					public setIsPopupEnabled(param0: boolean): void;
					public setRadius(param0: number): void;
					public static createCoreClusteringFeatureReductionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreClusteringFeatureReduction;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCodedValue {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCodedValue>;
					public mHandle: number;
					public static createCoreCodedValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCodedValue;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getCode(): com.arcgismaps.internal.jni.CoreElement;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCodedValueDescription {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCodedValueDescription>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreElement);
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreCodedValueDescriptionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCodedValueDescription;
					public setValue(param0: com.arcgismaps.internal.jni.CoreElement): void;
					public getValue(): com.arcgismaps.internal.jni.CoreElement;
					public getHandle(): number;
					public setName(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCodedValueDomain extends com.arcgismaps.internal.jni.CoreDomain {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCodedValueDomain>;
					public static createCoreCodedValueDomainFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCodedValueDomain;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getCodedValues(): com.arcgismaps.internal.jni.CoreArray;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCodedValueDomainDescription extends com.arcgismaps.internal.jni.CoreDomainDescription {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCodedValueDomainDescription>;
					public getValues(): com.arcgismaps.internal.jni.CoreVector;
					public constructor();
					public static createCoreCodedValueDomainDescriptionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCodedValueDomainDescription;
					public setValues(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreFieldType, param2: com.arcgismaps.internal.jni.CoreArray);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreColor {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreColor>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public static createCoreColorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreColor;
					public close(): void;
					public dispose(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreColorType;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreColor;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreColorRamp {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreColorRamp>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static createCoreColorRampFromHandle(param0: number): com.arcgismaps.internal.jni.CoreColorRamp;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createWithPresetColorRampTypeAndSize(param0: com.arcgismaps.internal.jni.CorePresetColorRampType, param1: number): com.arcgismaps.internal.jni.CoreColorRamp;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreColorType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreColorType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreColorType;
					public static RGBCOLOR: com.arcgismaps.internal.jni.CoreColorType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreColorType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreColorType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreColorType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreColormap {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreColormap>;
					public mHandle: number;
					public static createCoreColormapFromHandle(param0: number): com.arcgismaps.internal.jni.CoreColormap;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createWithColors(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreColormap;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreColormapRenderer extends com.arcgismaps.internal.jni.CoreRasterRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreColormapRenderer>;
					public static createCoreColormapRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreColormapRenderer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreColormap);
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public getColormap(): com.arcgismaps.internal.jni.CoreColormap;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreComboBoxFormInput extends com.arcgismaps.internal.jni.CoreFormInput {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreComboBoxFormInput>;
					public getNoValueLabel(): string;
					public getNoValueOption(): com.arcgismaps.internal.jni.CoreFormInputNoValueOption;
					public static createCoreComboBoxFormInputFromHandle(param0: number): com.arcgismaps.internal.jni.CoreComboBoxFormInput;
					public getCodedValues(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCompletedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCompletedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCompletedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						completed(): void;
					});
					public constructor();
					public completed(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCompositeSymbol extends com.arcgismaps.internal.jni.CoreSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCompositeSymbol>;
					public static createCoreCompositeSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCompositeSymbol;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public setSymbols(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getSymbols(): com.arcgismaps.internal.jni.CoreVector;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreConnectionRequestedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreConnectionRequestedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreConnectionRequestedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						connectionRequested(): void;
					});
					public constructor();
					public connectionRequested(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreConnectionStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreConnectionStatus>;
					public static DISCONNECTED: com.arcgismaps.internal.jni.CoreConnectionStatus;
					public static CONNECTING: com.arcgismaps.internal.jni.CoreConnectionStatus;
					public static CONNECTED: com.arcgismaps.internal.jni.CoreConnectionStatus;
					public static FAILED: com.arcgismaps.internal.jni.CoreConnectionStatus;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreConnectionStatus>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreConnectionStatus;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreConnectionStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreConnectionStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreConnectionStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreConnectionStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						connectionStatusChanged(param0: com.arcgismaps.internal.jni.CoreConnectionStatus): void;
					});
					public constructor();
					public connectionStatusChanged(param0: com.arcgismaps.internal.jni.CoreConnectionStatus): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingency {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingency>;
					public mHandle: number;
					public getSubtype(): com.arcgismaps.internal.jni.CoreFeatureSubtype;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getContingencyId(): number;
					public getValues(): com.arcgismaps.internal.jni.CoreDictionary;
					public getIsRetired(): boolean;
					public static createCoreContingencyFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingency;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingencyConstraintViolation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingencyConstraintViolation>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getType(): com.arcgismaps.internal.jni.CoreContingencyConstraintViolationType;
					public getFieldGroup(): com.arcgismaps.internal.jni.CoreFieldGroup;
					public static createCoreContingencyConstraintViolationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingencyConstraintViolation;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingencyConstraintViolationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingencyConstraintViolationType>;
					public static WARNING: com.arcgismaps.internal.jni.CoreContingencyConstraintViolationType;
					public static ERROR: com.arcgismaps.internal.jni.CoreContingencyConstraintViolationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreContingencyConstraintViolationType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreContingencyConstraintViolationType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreContingencyConstraintViolationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingentAnyValue extends com.arcgismaps.internal.jni.CoreContingentValue {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingentAnyValue>;
					public getInstanceId(): java.lang.Long;
					public static createCoreContingentAnyValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingentAnyValue;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingentCodedValue extends com.arcgismaps.internal.jni.CoreContingentValue {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingentCodedValue>;
					public getCodedValue(): com.arcgismaps.internal.jni.CoreCodedValue;
					public getInstanceId(): java.lang.Long;
					public static createCoreContingentCodedValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingentCodedValue;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingentNullValue extends com.arcgismaps.internal.jni.CoreContingentValue {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingentNullValue>;
					public getInstanceId(): java.lang.Long;
					public static createCoreContingentNullValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingentNullValue;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingentRangeValue extends com.arcgismaps.internal.jni.CoreContingentValue {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingentRangeValue>;
					public static createCoreContingentRangeValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingentRangeValue;
					public getMinValue(): com.arcgismaps.internal.jni.CoreElement;
					public getInstanceId(): java.lang.Long;
					public getMaxValue(): com.arcgismaps.internal.jni.CoreElement;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingentValue extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingentValue>;
					public mHandle: number;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingentValue;
					public getInstanceId(): java.lang.Long;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreContingentValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingentValue;
					public getObjectType(): com.arcgismaps.internal.jni.CoreContingentValueType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingentValueType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingentValueType>;
					public static CONTINGENTCODEDVALUE: com.arcgismaps.internal.jni.CoreContingentValueType;
					public static CONTINGENTRANGEVALUE: com.arcgismaps.internal.jni.CoreContingentValueType;
					public static CONTINGENTNULLVALUE: com.arcgismaps.internal.jni.CoreContingentValueType;
					public static CONTINGENTANYVALUE: com.arcgismaps.internal.jni.CoreContingentValueType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreContingentValueType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreContingentValueType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreContingentValueType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingentValuesDefinition extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingentValuesDefinition>;
					public mHandle: number;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getFieldGroups(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public static createCoreContingentValuesDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingentValuesDefinition;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreContingentValuesResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreContingentValuesResult>;
					public mHandle: number;
					public getContingentValuesByFieldGroup(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreContingentValuesResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreContingentValuesResult;
					public getContingentValuesAllGroups(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreConvertDateTimeCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreConvertDateTimeCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreConvertDateTimeCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						convertDateTime(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: com.arcgismaps.internal.jni.CoreDateTimeFormat, param2: com.arcgismaps.internal.jni.CoreElementReference): void;
					});
					public constructor();
					public convertDateTime(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: com.arcgismaps.internal.jni.CoreDateTimeFormat, param2: com.arcgismaps.internal.jni.CoreElementReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreConvertNumberCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreConvertNumberCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreConvertNumberCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						convertNumber(param0: number, param1: number, param2: boolean, param3: boolean, param4: com.arcgismaps.internal.jni.CoreElementReference): void;
					});
					public constructor();
					public convertNumber(param0: number, param1: number, param2: boolean, param3: boolean, param4: com.arcgismaps.internal.jni.CoreElementReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCoordinateFormatter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCoordinateFormatter>;
					public static toGARS(param0: com.arcgismaps.internal.jni.CorePoint): string;
					public static toGeoRef(param0: com.arcgismaps.internal.jni.CorePoint, param1: number): string;
					public static fromUTM(param0: string, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreUTMConversionMode): com.arcgismaps.internal.jni.CorePoint;
					public static fromGARS(param0: string, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreGARSConversionMode): com.arcgismaps.internal.jni.CorePoint;
					public static fromGeoRef(param0: string, param1: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CorePoint;
					public constructor();
					public static toUSNG(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: boolean): string;
					public static fromUSNG(param0: string, param1: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CorePoint;
					public static toUTM(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreUTMConversionMode, param2: boolean): string;
					public static fromMGRS(param0: string, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreMGRSConversionMode): com.arcgismaps.internal.jni.CorePoint;
					public static toLatitudeLongitude(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat, param2: number): string;
					public static fromLatitudeLongitude(param0: string, param1: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CorePoint;
					public static toMGRS(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMGRSConversionMode, param2: number, param3: boolean): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCostAttribute {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCostAttribute>;
					public mHandle: number;
					public getParameterValues(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getUnit(): com.arcgismaps.internal.jni.CoreAttributeUnit;
					public static createCoreCostAttributeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCostAttribute;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCreateAudioPlayerCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCreateAudioPlayerCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCreateAudioPlayerCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						createAudioPlayerCallback(param0: string): void;
					});
					public constructor();
					public createAudioPlayerCallback(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCredentialAddedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCredentialAddedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCredentialAddedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						credentialAdded(param0: com.arcgismaps.internal.jni.CoreArcGISCredential, param1: string): void;
					});
					public constructor();
					public credentialAdded(param0: com.arcgismaps.internal.jni.CoreArcGISCredential, param1: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCredentialRemovedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCredentialRemovedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCredentialRemovedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						credentialRemoved(param0: com.arcgismaps.internal.jni.CoreArcGISCredential, param1: string): void;
					});
					public constructor();
					public credentialRemoved(param0: com.arcgismaps.internal.jni.CoreArcGISCredential, param1: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCredentialUpdatedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCredentialUpdatedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCredentialUpdatedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						credentialUpdated(param0: com.arcgismaps.internal.jni.CoreArcGISCredential, param1: string): void;
					});
					public constructor();
					public credentialUpdated(param0: com.arcgismaps.internal.jni.CoreArcGISCredential, param1: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCubicBezierSegment extends com.arcgismaps.internal.jni.CoreSegment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCubicBezierSegment>;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint, param2: com.arcgismaps.internal.jni.CorePoint, param3: com.arcgismaps.internal.jni.CorePoint, param4: com.arcgismaps.internal.jni.CoreSpatialReference);
					public constructor();
					public static createCoreCubicBezierSegmentFromHandle(param0: number): com.arcgismaps.internal.jni.CoreCubicBezierSegment;
					public getControlPoint1(): com.arcgismaps.internal.jni.CorePoint;
					public getControlPoint2(): com.arcgismaps.internal.jni.CorePoint;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCurbApproach {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCurbApproach>;
					public static EITHERSIDE: com.arcgismaps.internal.jni.CoreCurbApproach;
					public static LEFTSIDE: com.arcgismaps.internal.jni.CoreCurbApproach;
					public static RIGHTSIDE: com.arcgismaps.internal.jni.CoreCurbApproach;
					public static NOUTURN: com.arcgismaps.internal.jni.CoreCurbApproach;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreCurbApproach;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreCurbApproach>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreCurbApproach;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreCurbApproach;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCurrentPositionCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCurrentPositionCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCurrentPositionCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						currentPositionCallback(): void;
					});
					public constructor();
					public currentPositionCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreCurrentPositionChangedCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreCurrentPositionChangedCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreCurrentPositionChangedCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						currentPositionChangedCallback(param0: number): void;
					});
					public constructor();
					public currentPositionChangedCallback(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDashGeometricEffect extends com.arcgismaps.internal.jni.CoreGeometricEffect {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDashGeometricEffect>;
					public static createCoreDashGeometricEffectFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDashGeometricEffect;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public getDashTemplate(): com.arcgismaps.internal.jni.CoreVector;
					public setDashTemplate(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDateOnly {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDateOnly>;
					public mHandle: number;
					public getDateTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public equals(param0: com.arcgismaps.internal.jni.CoreDateOnly): boolean;
					public constructor(param0: string);
					public finalize(): void;
					public dispose(): void;
					public getYear(): number;
					public getMonth(): number;
					public toString(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public constructor(param0: number, param1: number, param2: number);
					public close(): void;
					public static createCoreDateOnlyFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDateOnly;
					public getDay(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDateTime {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDateTime>;
					public mHandle: number;
					public static max(): com.arcgismaps.internal.jni.CoreDateTime;
					public finalize(): void;
					public static fromOLE(param0: number): com.arcgismaps.internal.jni.CoreDateTime;
					public lessThan(param0: com.arcgismaps.internal.jni.CoreDateTime): boolean;
					public toFileTime(): number;
					public toOLE(): number;
					public toString(): string;
					public toUnixMilliseconds(): number;
					public subtract(param0: number): boolean;
					public constructor();
					public lessThanOrEqual(param0: com.arcgismaps.internal.jni.CoreDateTime): boolean;
					public static now(): com.arcgismaps.internal.jni.CoreDateTime;
					public close(): void;
					public greaterThan(param0: com.arcgismaps.internal.jni.CoreDateTime): boolean;
					public static fromFileTime(param0: number): com.arcgismaps.internal.jni.CoreDateTime;
					public static fromUnixMilliseconds(param0: number): com.arcgismaps.internal.jni.CoreDateTime;
					public dispose(): void;
					public static createCoreDateTimeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDateTime;
					public static fromString(param0: string): com.arcgismaps.internal.jni.CoreDateTime;
					public add(param0: number): boolean;
					public greaterThanOrEqual(param0: com.arcgismaps.internal.jni.CoreDateTime): boolean;
					public static min(): com.arcgismaps.internal.jni.CoreDateTime;
					public static nativeDestroy(param0: number): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreDateTime): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDateTimeFormat {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDateTimeFormat>;
					public static DAYSHORTMONTHYEAR: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static LONGDATE: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static LONGMONTHDAYYEAR: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static LONGMONTHYEAR: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATE: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATELE: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATELELONGTIME: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATELELONGTIME24: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATELESHORTTIME: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATELESHORTTIME24: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATELONGTIME: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATELONGTIME24: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATESHORTTIME: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTDATESHORTTIME24: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTMONTHYEAR: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static YEAR: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static LONGTIME: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static SHORTTIME: com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDateTimeFormat>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDateTimeFormat;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDateTimePickerFormInput extends com.arcgismaps.internal.jni.CoreFormInput {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDateTimePickerFormInput>;
					public getMin(): com.arcgismaps.internal.jni.CoreDateTime;
					public getMax(): com.arcgismaps.internal.jni.CoreDateTime;
					public static createCoreDateTimePickerFormInputFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDateTimePickerFormInput;
					public getIncludeTime(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDatumTransformation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDatumTransformation>;
					public mHandle: number;
					public getHash(): number;
					public finalize(): void;
					public dispose(): void;
					public static createCoreDatumTransformationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDatumTransformation;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDatumTransformation;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getInputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getInverse(): com.arcgismaps.internal.jni.CoreDatumTransformation;
					public close(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreDatumTransformationType;
					public equals(param0: com.arcgismaps.internal.jni.CoreDatumTransformation): boolean;
					public getIsMissingProjectionEngineFiles(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDatumTransformationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDatumTransformationType>;
					public static GEOGRAPHICTRANSFORMATION: com.arcgismaps.internal.jni.CoreDatumTransformationType;
					public static HORIZONTALVERTICALTRANSFORMATION: com.arcgismaps.internal.jni.CoreDatumTransformationType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDatumTransformationType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDatumTransformationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDatumTransformationType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDestinationStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDestinationStatus>;
					public static NOTREACHED: com.arcgismaps.internal.jni.CoreDestinationStatus;
					public static APPROACHING: com.arcgismaps.internal.jni.CoreDestinationStatus;
					public static REACHED: com.arcgismaps.internal.jni.CoreDestinationStatus;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDestinationStatus>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDestinationStatus;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDestinationStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDestinationTableRowFilter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDestinationTableRowFilter>;
					public static ALL: com.arcgismaps.internal.jni.CoreDestinationTableRowFilter;
					public static RELATEDONLY: com.arcgismaps.internal.jni.CoreDestinationTableRowFilter;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDestinationTableRowFilter;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDestinationTableRowFilter>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDestinationTableRowFilter;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDestroyCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDestroyCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDestroyCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						destroyCallback(): void;
					});
					public constructor();
					public destroyCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDevice {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDevice>;
					public mHandle: number;
					public static createOGL(): com.arcgismaps.internal.jni.CoreDevice;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public dispose(): void;
					public static createCoreDeviceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDevice;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDeviceOrientation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDeviceOrientation>;
					public static PORTRAIT: com.arcgismaps.internal.jni.CoreDeviceOrientation;
					public static LANDSCAPELEFT: com.arcgismaps.internal.jni.CoreDeviceOrientation;
					public static REVERSEPORTRAIT: com.arcgismaps.internal.jni.CoreDeviceOrientation;
					public static LANDSCAPERIGHT: com.arcgismaps.internal.jni.CoreDeviceOrientation;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDeviceOrientation>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDeviceOrientation;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDeviceOrientation;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDictionary {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDictionary>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreElementType, param1: com.arcgismaps.internal.jni.CoreElementType);
					public getTypeForKey(param0: com.arcgismaps.internal.jni.CoreElement): com.arcgismaps.internal.jni.CoreElementType;
					public isEmpty(): boolean;
					public getKeys(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreDictionary): boolean;
					public dispose(): void;
					public getSize(): number;
					public contains(param0: com.arcgismaps.internal.jni.CoreElement): boolean;
					public at(param0: com.arcgismaps.internal.jni.CoreElement): com.arcgismaps.internal.jni.CoreElement;
					public replace(param0: com.arcgismaps.internal.jni.CoreElement, param1: com.arcgismaps.internal.jni.CoreElement): void;
					public getKeyType(): com.arcgismaps.internal.jni.CoreElementType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public removeAll(): void;
					public close(): void;
					public insert(param0: com.arcgismaps.internal.jni.CoreElement, param1: com.arcgismaps.internal.jni.CoreElement): void;
					public remove(param0: com.arcgismaps.internal.jni.CoreElement): void;
					public static createCoreDictionaryFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDictionary;
					public getValueType(): com.arcgismaps.internal.jni.CoreElementType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDictionaryRenderer extends com.arcgismaps.internal.jni.CoreRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDictionaryRenderer>;
					public setScaleExpression(param0: com.arcgismaps.internal.jni.CoreArcadeExpression): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDictionarySymbolStyle);
					public getInstanceId(): java.lang.Long;
					public getSymbologyFieldOverrides(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCoreDictionaryRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDictionaryRenderer;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getScaleExpression(): com.arcgismaps.internal.jni.CoreArcadeExpression;
					public setTextVisible(param0: boolean): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setDictionarySymbolStyle(param0: com.arcgismaps.internal.jni.CoreDictionarySymbolStyle): void;
					public getTextVisibilityMaxScale(): number;
					public setTextFieldOverrides(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public getTextVisible(): boolean;
					public setSymbologyFieldOverrides(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public getTextVisibilityMinScale(): number;
					public setTextVisibilityMinScale(param0: number): void;
					public constructor();
					public getDictionarySymbolStyle(): com.arcgismaps.internal.jni.CoreDictionarySymbolStyle;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDictionarySymbolStyle, param1: com.arcgismaps.internal.jni.CoreDictionary, param2: com.arcgismaps.internal.jni.CoreDictionary);
					public getTextFieldOverrides(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public setTextVisibilityMaxScale(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDictionarySymbolStyle extends com.arcgismaps.internal.jni.CoreSymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDictionarySymbolStyle>;
					public static createCoreDictionarySymbolStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDictionarySymbolStyle;
					public constructor(param0: string);
					public getTextFieldNames(): com.arcgismaps.internal.jni.CoreArray;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getSymbolAsync(param0: com.arcgismaps.internal.jni.CoreDictionary): com.arcgismaps.internal.jni.CoreTask;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem);
					public getSymbolAsync(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getConfigurations(): com.arcgismaps.internal.jni.CoreArray;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CorePortal);
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getSymbologyFieldNames(): com.arcgismaps.internal.jni.CoreArray;
					public getDictionaryName(): string;
					public static createFromFile(param0: string): com.arcgismaps.internal.jni.CoreDictionarySymbolStyle;
					public static createDictionarySymbolStyleFromURL(param0: string): com.arcgismaps.internal.jni.CoreDictionarySymbolStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDictionarySymbolStyleConfiguration {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDictionarySymbolStyleConfiguration>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public getInfo(): string;
					public close(): void;
					public dispose(): void;
					public static createCoreDictionarySymbolStyleConfigurationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDictionarySymbolStyleConfiguration;
					public getDomain(): com.arcgismaps.internal.jni.CoreArray;
					public setValue(param0: com.arcgismaps.internal.jni.CoreElement): void;
					public getValue(): com.arcgismaps.internal.jni.CoreElement;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDimensionLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDimensionLayer>;
					public constructor(param0: string);
					public unselectFeature(param0: com.arcgismaps.internal.jni.CoreFeature): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable);
					public selectFeaturesAsync(param0: com.arcgismaps.internal.jni.CoreQueryParameters, param1: com.arcgismaps.internal.jni.CoreSelectionMode): com.arcgismaps.internal.jni.CoreTask;
					public setBarrierWeight(param0: com.arcgismaps.internal.jni.CoreLabelBarrierWeight): void;
					public getIsVisible(): boolean;
					public load(): void;
					public static createCoreDimensionLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDimensionLayer;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public setFeatureVisible(param0: com.arcgismaps.internal.jni.CoreFeature, param1: boolean): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem, param1: number);
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public unselectFeatures(param0: com.arcgismaps.internal.jni.CoreArray): void;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getURI(): string;
					public selectFeature(param0: com.arcgismaps.internal.jni.CoreFeature): void;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getFeatureTable(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public selectFeatures(param0: com.arcgismaps.internal.jni.CoreArray): void;
					public setFeaturesVisible(param0: com.arcgismaps.internal.jni.CoreArray, param1: boolean): void;
					public cancelLoad(): void;
					public resetFeaturesVisible(): void;
					public clearSelection(): void;
					public getLayerId(): number;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setDefinitionExpression(param0: string): void;
					public getName(): string;
					public getSelectedFeaturesAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setIsVisible(param0: boolean): void;
					public getBarrierWeight(): com.arcgismaps.internal.jni.CoreLabelBarrierWeight;
					public getReferenceScale(): number;
					public getDefinitionExpression(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDirectionEvent {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDirectionEvent>;
					public mHandle: number;
					public getEstimatedArrivalTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public getEstimatedArrivalTimeShift(): number;
					public getEventText(): string;
					public static createCoreDirectionEventFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDirectionEvent;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getEventMessages(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
					public getGeometry(): com.arcgismaps.internal.jni.CorePoint;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDirectionManeuver {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDirectionManeuver>;
					public mHandle: number;
					public getEstimatedArrivalTimeShift(): number;
					public getFromLevel(): number;
					public getManeuverMessages(): com.arcgismaps.internal.jni.CoreArray;
					public getDirectionEvents(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public getLength(): number;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getDirectionText(): string;
					public static createCoreDirectionManeuverFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDirectionManeuver;
					public getEstimatedArrivalTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public getDuration(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getManeuverType(): com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public getToLevel(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDirectionManeuverType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDirectionManeuverType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static STOP: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static STRAIGHT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static BEARLEFT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static BEARRIGHT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static TURNLEFT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static TURNRIGHT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static SHARPLEFT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static SHARPRIGHT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static UTURN: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static FERRY: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static ROUNDABOUT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static HIGHWAYMERGE: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static HIGHWAYEXIT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static HIGHWAYCHANGE: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static FORKCENTER: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static FORKLEFT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static FORKRIGHT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static DEPART: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static TRIPITEM: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static ENDOFFERRY: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static RAMPRIGHT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static RAMPLEFT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static TURNLEFTRIGHT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static TURNRIGHTLEFT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static TURNRIGHTRIGHT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static TURNLEFTLEFT: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static PEDESTRIANRAMP: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static ELEVATOR: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static ESCALATOR: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static STAIRS: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static DOORPASSAGE: com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDirectionManeuverType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDirectionManeuverType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDirectionManeuverType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDirectionMessage {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDirectionMessage>;
					public mHandle: number;
					public getText(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getType(): com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreDirectionMessageFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDirectionMessage;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDirectionMessageType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDirectionMessageType>;
					public static LENGTH: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static TIME: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static SUMMARY: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static TIMEWINDOW: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static VIOLATIONTIME: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static WAITTIME: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static SERVICETIME: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static ESTIMATEDARRIVALTIME: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static CUMULATIVELENGTH: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static STREETNAME: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static ALTERNATIVENAME: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static BRANCH: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static TOWARD: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static CROSSSTREET: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static EXIT: com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDirectionMessageType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDirectionMessageType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDirectionsStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDirectionsStyle>;
					public static DESKTOP: com.arcgismaps.internal.jni.CoreDirectionsStyle;
					public static NAVIGATION: com.arcgismaps.internal.jni.CoreDirectionsStyle;
					public static CAMPUS: com.arcgismaps.internal.jni.CoreDirectionsStyle;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDirectionsStyle>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDirectionsStyle;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDirectionsStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDisableSensorRequestCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDisableSensorRequestCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDisableSensorRequestCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						disableSensorRequest(param0: com.arcgismaps.internal.jni.CoreSensorType): void;
					});
					public constructor();
					public disableSensorRequest(param0: com.arcgismaps.internal.jni.CoreSensorType): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDisconnectCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDisconnectCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDisconnectCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						disconnect(): void;
					});
					public constructor();
					public disconnect(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDisconnectionRequestedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDisconnectionRequestedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDisconnectionRequestedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						disconnectionRequested(): void;
					});
					public constructor();
					public disconnectionRequested(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDisplayFilter extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDisplayFilter>;
					public mHandle: number;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDisplayFilter;
					public getInstanceId(): java.lang.Long;
					public getWhereClause(): string;
					public finalize(): void;
					public dispose(): void;
					public setName(param0: string): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreDisplayFilterType;
					public constructor(param0: string, param1: string);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public setWhereClause(param0: string): void;
					public close(): void;
					public getFilterId(): string;
					public static createCoreDisplayFilterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDisplayFilter;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDisplayFilterDefinition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDisplayFilterDefinition>;
					public mHandle: number;
					public static createCoreDisplayFilterDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDisplayFilterDefinition;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDisplayFilterDefinition;
					public getObjectType(): com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDisplayFilterDefinitionType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType;
					public static MANUALDISPLAYFILTERDEFINITION: com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType;
					public static SCALEDISPLAYFILTERDEFINITION: com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDisplayFilterType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDisplayFilterType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreDisplayFilterType;
					public static DISPLAYFILTER: com.arcgismaps.internal.jni.CoreDisplayFilterType;
					public static SCALERANGEDISPLAYFILTER: com.arcgismaps.internal.jni.CoreDisplayFilterType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDisplayFilterType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDisplayFilterType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDisplayFilterType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDistance {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDistance>;
					public mHandle: number;
					public getUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getValue(): number;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreDistanceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDistance;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDistanceChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDistanceChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDistanceChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						distanceChanged(): void;
					});
					public constructor();
					public distanceChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDistanceCompositeSceneSymbol extends com.arcgismaps.internal.jni.CoreSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDistanceCompositeSceneSymbol>;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getRanges(): com.arcgismaps.internal.jni.CoreVector;
					public setRanges(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static createCoreDistanceCompositeSceneSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDistanceCompositeSceneSymbol;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDistanceSymbolRange {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDistanceSymbolRange>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSymbol, param1: number, param2: number);
					public getSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public finalize(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSymbol);
					public setSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public dispose(): void;
					public setMinDistance(param0: number): void;
					public getMinDistance(): number;
					public getMaxDistance(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setMaxDistance(param0: number): void;
					public close(): void;
					public static createCoreDistanceSymbolRangeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDistanceSymbolRange;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDomain extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDomain>;
					public mHandle: number;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDomain;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public hash(): number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreDomainType;
					public toJSON(): string;
					public static createCoreDomainFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDomain;
					public getFieldType(): com.arcgismaps.internal.jni.CoreFieldType;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreDomain;
					public close(): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreDomain): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDomainDescription {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDomainDescription>;
					public mHandle: number;
					public static createCoreDomainDescriptionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDomainDescription;
					public getObjectType(): com.arcgismaps.internal.jni.CoreDomainDescriptionType;
					public finalize(): void;
					public dispose(): void;
					public setFieldType(param0: com.arcgismaps.internal.jni.CoreFieldType): void;
					public setName(param0: string): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getFieldType(): com.arcgismaps.internal.jni.CoreFieldType;
					public close(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDomainDescription;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDomainDescriptionType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDomainDescriptionType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreDomainDescriptionType;
					public static CODEDVALUEDOMAINDESCRIPTION: com.arcgismaps.internal.jni.CoreDomainDescriptionType;
					public static RANGEDOMAINDESCRIPTION: com.arcgismaps.internal.jni.CoreDomainDescriptionType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDomainDescriptionType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDomainDescriptionType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDomainDescriptionType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDomainType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDomainType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreDomainType;
					public static CODEDVALUEDOMAIN: com.arcgismaps.internal.jni.CoreDomainType;
					public static INHERITEDDOMAIN: com.arcgismaps.internal.jni.CoreDomainType;
					public static RANGEDOMAIN: com.arcgismaps.internal.jni.CoreDomainType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDomainType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDomainType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDomainType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDoneLoadingCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						doneLoading(param0: com.arcgismaps.internal.jni.CoreError): void;
					});
					public constructor();
					public doneLoading(param0: com.arcgismaps.internal.jni.CoreError): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDownloadPreplannedOfflineMapJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapJob>;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getDownloadDirectoryPath(): string;
					public getTask(): com.arcgismaps.internal.jni.CoreOfflineMapTask;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getOnlineMap(): com.arcgismaps.internal.jni.CoreMap;
					public getResult(): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapResult;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCoreDownloadPreplannedOfflineMapJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapJob;
					public getParameters(): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDownloadPreplannedOfflineMapParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters>;
					public mHandle: number;
					public setReferenceBasemapDirectory(param0: string): void;
					public getUpdateMode(): com.arcgismaps.internal.jni.CorePreplannedUpdateMode;
					public finalize(): void;
					public dispose(): void;
					public setIncludeBasemap(param0: boolean): void;
					public setUpdateMode(param0: com.arcgismaps.internal.jni.CorePreplannedUpdateMode): void;
					public static createCoreDownloadPreplannedOfflineMapParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters;
					public getPreplannedMapArea(): com.arcgismaps.internal.jni.CorePreplannedMapArea;
					public constructor(param0: com.arcgismaps.internal.jni.CorePreplannedMapArea);
					public getReferenceBasemapDirectory(): string;
					public setReferenceBasemapFilename(param0: string): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setPreplannedMapArea(param0: com.arcgismaps.internal.jni.CorePreplannedMapArea): void;
					public close(): void;
					public setContinueOnErrors(param0: boolean): void;
					public getIncludeBasemap(): boolean;
					public getContinueOnErrors(): boolean;
					public getReferenceBasemapFilename(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDownloadPreplannedOfflineMapResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapResult>;
					public mHandle: number;
					public static createCoreDownloadPreplannedOfflineMapResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapResult;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getTableErrors(): com.arcgismaps.internal.jni.CoreDictionary;
					public getLayerErrors(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getMobileMapPackage(): com.arcgismaps.internal.jni.CoreMobileMapPackage;
					public close(): void;
					public dispose(): void;
					public getOfflineMap(): com.arcgismaps.internal.jni.CoreMap;
					public getHandle(): number;
					public getHasErrors(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDrawRequestedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDrawRequestedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDrawRequestedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						drawRequested(): void;
					});
					public constructor();
					public drawRequested(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDrawStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDrawStatus>;
					public static INPROGRESS: com.arcgismaps.internal.jni.CoreDrawStatus;
					public static COMPLETED: com.arcgismaps.internal.jni.CoreDrawStatus;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDrawStatus>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDrawStatus;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDrawStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDrawStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDrawStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDrawStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						drawStatusChanged(param0: com.arcgismaps.internal.jni.CoreDrawStatus): void;
					});
					public constructor();
					public drawStatusChanged(param0: com.arcgismaps.internal.jni.CoreDrawStatus): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDrawingInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDrawingInfo>;
					public mHandle: number;
					public getShowLabels(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getTransparency(): number;
					public getLabelingInfo(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreDrawingInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDrawingInfo;
					public getScaleSymbols(): boolean;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDrawingTool {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDrawingTool>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static AUTOCOMPLETEPOLYGON: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static CIRCLE: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static DOWNARROW: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static ELLIPSE: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static FREEHAND: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static LEFTARROW: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static LINE: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static NONE: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static POINT: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static POLYGON: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static RECTANGLE: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static RIGHTARROW: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static TEXT: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static TRIANGLE: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static UPARROW: com.arcgismaps.internal.jni.CoreDrawingTool;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDrawingTool;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDrawingTool>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDrawingTool;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntity implements com.arcgismaps.internal.jni.CoreGeoElement, com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntity>;
					public mHandle: number;
					public getEntityId(): number;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getInstanceId(): java.lang.Long;
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getObservations(param0: number): com.arcgismaps.internal.jni.CoreArray;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public onDynamicEntityChangedEvent(param0: number): void;
					public static createCoreDynamicEntityFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntity;
					public setDynamicEntityChangedEventCallback(param0: com.arcgismaps.internal.jni.CoreDynamicEntityChangedCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getLatestObservation(): com.arcgismaps.internal.jni.CoreDynamicEntityObservation;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDynamicEntityChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						dynamicEntityChanged(param0: com.arcgismaps.internal.jni.CoreDynamicEntityChangedInfo): void;
					});
					public constructor();
					public dynamicEntityChanged(param0: com.arcgismaps.internal.jni.CoreDynamicEntityChangedInfo): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityChangedInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityChangedInfo>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getDynamicEntityPurged(): boolean;
					public finalize(): void;
					public getReceivedObservation(): com.arcgismaps.internal.jni.CoreDynamicEntityObservation;
					public close(): void;
					public dispose(): void;
					public static createCoreDynamicEntityChangedInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityChangedInfo;
					public getPurgedObservation(): com.arcgismaps.internal.jni.CoreDynamicEntityObservation;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityDataSource implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityDataSource>;
					public mHandle: number;
					public finalize(): void;
					public setLoadInfoAndError(param0: com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceInfo, param1: any): void;
					public getConnectionStatus(): com.arcgismaps.internal.jni.CoreConnectionStatus;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public setConnectionStatusAndError(param0: com.arcgismaps.internal.jni.CoreConnectionStatus, param1: number, param2: any): void;
					public constructor();
					public setDisconnectionRequestedEventCallback(param0: com.arcgismaps.internal.jni.CoreDisconnectionRequestedCallbackListener): void;
					public close(): void;
					public disconnectAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setConnectionStatusAndErrorWithReconnect(param0: com.arcgismaps.internal.jni.CoreConnectionStatus, param1: any, param2: boolean): void;
					public addObservation(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreDictionary): void;
					public onRequestRequired(param0: number): void;
					public onLoadRequestedEvent(): void;
					public onDynamicEntityObservationReceivedEvent(param0: number): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceType;
					public getInstanceId(): java.lang.Long;
					public cancelLoad(): void;
					public getReconnectionInterval(): number;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public onConnectionStatusChangedEvent(param0: number): void;
					public setDynamicEntityObservationPurgedEventCallback(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservationPurgedCallbackListener): void;
					public setDynamicEntityPurgedEventCallback(param0: com.arcgismaps.internal.jni.CoreDynamicEntityPurgedCallbackListener): void;
					public deleteEntityAsync(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public setReconnectionInterval(param0: number): void;
					public getHandle(): number;
					public setConnectionStatusChangedEventCallback(param0: com.arcgismaps.internal.jni.CoreConnectionStatusChangedCallbackListener): void;
					public connectAsync(): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public onConnectionRequestedEvent(): void;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public onDisconnectionRequestedEvent(): void;
					public purgeAllAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setDynamicEntityObservationReceivedEventCallback(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservationReceivedCallbackListener): void;
					public onDoneLoading(param0: number): void;
					public static createCoreDynamicEntityDataSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityDataSource;
					public getMaximumReconnectionAttempts(): number;
					public setMaximumReconnectionAttempts(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public setConnectionRequestedEventCallback(param0: com.arcgismaps.internal.jni.CoreConnectionRequestedCallbackListener): void;
					public dispose(): void;
					public onDynamicEntityObservationPurgedEvent(param0: number): void;
					public onDynamicEntityPurgedEvent(param0: number): void;
					public setLoadRequestedEventCallback(param0: com.arcgismaps.internal.jni.CoreLoadRequestedCallbackListener): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getPurgeOptions(): com.arcgismaps.internal.jni.CoreDynamicEntityDataSourcePurgeOptions;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityDataSource;
					public setDynamicEntityReceivedEventCallback(param0: com.arcgismaps.internal.jni.CoreDynamicEntityReceivedCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public getConnectionError(): com.arcgismaps.internal.jni.CoreError;
					public onDynamicEntityReceivedEvent(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityDataSourceInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceInfo>;
					public mHandle: number;
					public setDescription(param0: string): void;
					public getFullExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public setFullExtent(param0: com.arcgismaps.internal.jni.CoreEnvelope): void;
					public finalize(): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreArray);
					public dispose(): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getEntityIdFieldName(): string;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getDescription(): string;
					public static createCoreDynamicEntityDataSourceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceInfo;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
					public setSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityDataSourcePurgeOptions {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityDataSourcePurgeOptions>;
					public mHandle: number;
					public finalize(): void;
					public static createCoreDynamicEntityDataSourcePurgeOptionsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityDataSourcePurgeOptions;
					public setMaximumDuration(param0: number): void;
					public dispose(): void;
					public getMaximumDuration(): number;
					public setMaximumObservationsPerTrack(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getMaximumObservations(): number;
					public close(): void;
					public setMaximumObservations(param0: number): void;
					public getMaximumObservationsPerTrack(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceType>;
					public static ARCGISSTREAMSERVICE: com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceType;
					public static DYNAMICENTITYDATASOURCE: com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityInfo>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public static createCoreDynamicEntityInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityInfo;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getDynamicEntity(): com.arcgismaps.internal.jni.CoreDynamicEntity;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityLayer extends com.arcgismaps.internal.jni.CoreLayer implements com.arcgismaps.internal.jni.CorePopupSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityLayer>;
					public setRenderer(param0: com.arcgismaps.internal.jni.CoreRenderer): void;
					public selectDynamicEntities(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getLabelDefinitions(): com.arcgismaps.internal.jni.CoreVector;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDynamicEntityDataSource);
					public getIsVisible(): boolean;
					public load(): void;
					public selectDynamicEntityObservation(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservation): void;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getTrackDisplayProperties(): com.arcgismaps.internal.jni.CoreTrackDisplayProperties;
					public getSelectedDynamicEntities(): com.arcgismaps.internal.jni.CoreArray;
					public unselectDynamicEntityObservation(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservation): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public setLabelDefinitions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getSceneProperties(): com.arcgismaps.internal.jni.CoreLayerSceneProperties;
					public getCanChangeVisibility(): boolean;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getLabelsEnabled(): boolean;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public static createCoreDynamicEntityLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityLayer;
					public cancelLoad(): void;
					public getDataSource(): com.arcgismaps.internal.jni.CoreDynamicEntityDataSource;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public unselectDynamicEntities(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public selectDynamicEntity(param0: com.arcgismaps.internal.jni.CoreDynamicEntity): void;
					public unselectDynamicEntity(param0: com.arcgismaps.internal.jni.CoreDynamicEntity): void;
					public clearSelection(): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setSceneProperties(param0: com.arcgismaps.internal.jni.CoreLayerSceneProperties): void;
					public getSelectedDynamicEntityObservations(): com.arcgismaps.internal.jni.CoreArray;
					public getName(): string;
					public setIsPopupEnabled(param0: boolean): void;
					public setIsVisible(param0: boolean): void;
					public selectDynamicEntityObservations(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setLabelsEnabled(param0: boolean): void;
					public unselectDynamicEntityObservations(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityObservation extends com.arcgismaps.internal.jni.CoreGeoElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityObservation>;
					public mHandle: number;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public static createCoreDynamicEntityObservationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityObservation;
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getObservationId(): number;
					public close(): void;
					public getDynamicEntity(): com.arcgismaps.internal.jni.CoreDynamicEntity;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityObservationInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityObservationInfo>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreDynamicEntityObservationInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreDynamicEntityObservationInfo;
					public getObservation(): com.arcgismaps.internal.jni.CoreDynamicEntityObservation;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityObservationPurgedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityObservationPurgedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDynamicEntityObservationPurgedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						dynamicEntityObservationPurged(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservationInfo): void;
					});
					public constructor();
					public dynamicEntityObservationPurged(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservationInfo): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityObservationReceivedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityObservationReceivedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDynamicEntityObservationReceivedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						dynamicEntityObservationReceived(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservationInfo): void;
					});
					public constructor();
					public dynamicEntityObservationReceived(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservationInfo): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityPurgedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityPurgedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDynamicEntityPurgedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						dynamicEntityPurged(param0: com.arcgismaps.internal.jni.CoreDynamicEntityInfo): void;
					});
					public constructor();
					public dynamicEntityPurged(param0: com.arcgismaps.internal.jni.CoreDynamicEntityInfo): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreDynamicEntityReceivedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreDynamicEntityReceivedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreDynamicEntityReceivedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						dynamicEntityReceived(param0: com.arcgismaps.internal.jni.CoreDynamicEntityInfo): void;
					});
					public constructor();
					public dynamicEntityReceived(param0: com.arcgismaps.internal.jni.CoreDynamicEntityInfo): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCAreaSymbolizationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType>;
					public static PLAIN: com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType;
					public static SYMBOLIZED: com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCCell extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCCell>;
					public mHandle: number;
					public constructor(param0: string);
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getDataset(): com.arcgismaps.internal.jni.CoreENCDataset;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPath(): string;
					public retryLoad(): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public static createCoreENCCellFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCCell;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreENCDataset);
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCColorScheme {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCColorScheme>;
					public static DAY: com.arcgismaps.internal.jni.CoreENCColorScheme;
					public static DUSK: com.arcgismaps.internal.jni.CoreENCColorScheme;
					public static NIGHT: com.arcgismaps.internal.jni.CoreENCColorScheme;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreENCColorScheme>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreENCColorScheme;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreENCColorScheme;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCDataset {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCDataset>;
					public mHandle: number;
					public static createCoreENCDatasetFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCDataset;
					public getAuthorized(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getVolumeName(): string;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getDescription(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCDisplayCategories {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCDisplayCategories>;
					public mHandle: number;
					public getStandardDisplay(): boolean;
					public setDisplayBase(param0: boolean): void;
					public finalize(): void;
					public dispose(): void;
					public getDisplayBase(): boolean;
					public static createCoreENCDisplayCategoriesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCDisplayCategories;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setStandardDisplay(param0: boolean): void;
					public close(): void;
					public setOtherDisplay(param0: boolean): void;
					public getOtherDisplay(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCDisplayDepthUnits {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits>;
					public static METERS: com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits;
					public static FEET: com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits;
					public static FATHOMS: com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCDisplaySettings {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCDisplaySettings>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public static createCoreENCDisplaySettingsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCDisplaySettings;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getViewingGroupSettings(): com.arcgismaps.internal.jni.CoreENCViewingGroupSettings;
					public getTextGroupVisibilitySettings(): com.arcgismaps.internal.jni.CoreENCTextGroupVisibilitySettings;
					public getMarinerSettings(): com.arcgismaps.internal.jni.CoreENCMarinerSettings;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCEnvironmentSettings {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCEnvironmentSettings>;
					public mHandle: number;
					public getSENCDataPath(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public setSENCDataPath(param0: string): void;
					public close(): void;
					public dispose(): void;
					public getDisplaySettings(): com.arcgismaps.internal.jni.CoreENCDisplaySettings;
					public static createCoreENCEnvironmentSettingsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCEnvironmentSettings;
					public getResourcePath(): string;
					public getHandle(): number;
					public setResourcePath(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCExchangeSet extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCExchangeSet>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArray);
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public static createCoreENCExchangeSetFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCExchangeSet;
					public finalize(): void;
					public dispose(): void;
					public getPaths(): com.arcgismaps.internal.jni.CoreArray;
					public cancelLoad(): void;
					public getDatasets(): com.arcgismaps.internal.jni.CoreArray;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getReadme(): string;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCFeature extends com.arcgismaps.internal.jni.CoreGeoElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCFeature>;
					public mHandle: number;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getAttributeDescription(param0: string): string;
					public getAcronym(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					public getDescription(): string;
					public static createCoreENCFeatureFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCFeature;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCLayer>;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public static createCoreENCLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCLayer;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getCell(): com.arcgismaps.internal.jni.CoreENCCell;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreENCCell);
					public clearSelection(): void;
					public static getEnvironmentSettings(): com.arcgismaps.internal.jni.CoreENCEnvironmentSettings;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public selectFeature(param0: com.arcgismaps.internal.jni.CoreENCFeature): void;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCMarinerSettings {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCMarinerSettings>;
					public mHandle: number;
					public setLabelContours(param0: boolean): void;
					public getAreaSymbolizationType(): com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType;
					public getDeepContour(): number;
					public getShallowContour(): number;
					public finalize(): void;
					public getDataQuality(): boolean;
					public setPointSymbolizationType(param0: com.arcgismaps.internal.jni.CoreENCPointSymbolizationType): void;
					public getLabelContours(): boolean;
					public setShallowDepthPattern(param0: boolean): void;
					public setShallowContour(param0: number): void;
					public getSafetyContour(): number;
					public getTwoDepthShades(): boolean;
					public constructor();
					public setLowAccuracy(param0: boolean): void;
					public close(): void;
					public setDisplayDepthUnits(param0: com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits): void;
					public setLabelSafetyContours(param0: boolean): void;
					public getHonorSCAMIN(): boolean;
					public resetToDefaults(): void;
					public static createCoreENCMarinerSettingsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCMarinerSettings;
					public setColorScheme(param0: com.arcgismaps.internal.jni.CoreENCColorScheme): void;
					public setDeepContour(param0: number): void;
					public getIsolatedDangers(): boolean;
					public getDisplayNOBJNM(): boolean;
					public getLabelSafetyContours(): boolean;
					public setDataQuality(param0: boolean): void;
					public dispose(): void;
					public setDisplayNOBJNM(param0: boolean): void;
					public getDisplayCategories(): com.arcgismaps.internal.jni.CoreENCDisplayCategories;
					public setHonorSCAMIN(param0: boolean): void;
					public getShallowDepthPattern(): boolean;
					public setAreaSymbolizationType(param0: com.arcgismaps.internal.jni.CoreENCAreaSymbolizationType): void;
					public setSafetyContour(param0: number): void;
					public setTwoDepthShades(param0: boolean): void;
					public static nativeDestroy(param0: number): void;
					public getPointSymbolizationType(): com.arcgismaps.internal.jni.CoreENCPointSymbolizationType;
					public getDisplayDepthUnits(): com.arcgismaps.internal.jni.CoreENCDisplayDepthUnits;
					public getColorScheme(): com.arcgismaps.internal.jni.CoreENCColorScheme;
					public setIsolatedDangers(param0: boolean): void;
					public getLowAccuracy(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCPointSymbolizationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCPointSymbolizationType>;
					public static PAPERCHART: com.arcgismaps.internal.jni.CoreENCPointSymbolizationType;
					public static SIMPLIFIED: com.arcgismaps.internal.jni.CoreENCPointSymbolizationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreENCPointSymbolizationType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreENCPointSymbolizationType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreENCPointSymbolizationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCTextGroupVisibilitySettings {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCTextGroupVisibilitySettings>;
					public mHandle: number;
					public getCurrentVelocity(): boolean;
					public setCurrentVelocity(param0: boolean): void;
					public getImportantText(): boolean;
					public finalize(): void;
					public setBerthNumber(param0: boolean): void;
					public setNatureOfSeabed(param0: boolean): void;
					public setNamesForPositionReporting(param0: boolean): void;
					public setNoteOnChartData(param0: boolean): void;
					public getGeographicNames(): boolean;
					public setHeightOfIsletOrLandFeature(param0: boolean): void;
					public setImportantText(param0: boolean): void;
					public getNoteOnChartData(): boolean;
					public setLightDescription(param0: boolean): void;
					public constructor();
					public getHeightOfIsletOrLandFeature(): boolean;
					public close(): void;
					public setGeographicNames(param0: boolean): void;
					public getLightDescription(): boolean;
					public resetToDefaults(): void;
					public getBerthNumber(): boolean;
					public dispose(): void;
					public getMagneticVariationAndSweptDepth(): boolean;
					public static createCoreENCTextGroupVisibilitySettingsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCTextGroupVisibilitySettings;
					public static nativeDestroy(param0: number): void;
					public setMagneticVariationAndSweptDepth(param0: boolean): void;
					public getNamesForPositionReporting(): boolean;
					public getNatureOfSeabed(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreENCViewingGroupSettings {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreENCViewingGroupSettings>;
					public mHandle: number;
					public getMagneticVariation(): boolean;
					public setBuoysBeaconsAidsToNavigation(param0: boolean): void;
					public setLights(param0: boolean): void;
					public getLights(): boolean;
					public finalize(): void;
					public setDepthContours(param0: boolean): void;
					public setBuoysBeaconsStructures(param0: boolean): void;
					public getTidal(): boolean;
					public getProhibitedAndRestrictedAreas(): boolean;
					public getStandardMiscellaneous(): boolean;
					public setShipsRoutingSystemsAndFerryRoutes(param0: boolean): void;
					public setTidal(param0: boolean): void;
					public setMagneticVariation(param0: boolean): void;
					public constructor();
					public setDryingLine(param0: boolean): void;
					public setChartScaleBoundaries(param0: boolean): void;
					public getBuoysBeaconsAidsToNavigation(): boolean;
					public close(): void;
					public setProhibitedAndRestrictedAreas(param0: boolean): void;
					public getSpotSoundings(): boolean;
					public getOtherMiscellaneous(): boolean;
					public setBoundariesAndLimits(param0: boolean): void;
					public resetToDefaults(): void;
					public getSeabed(): boolean;
					public dispose(): void;
					public setSeabed(param0: boolean): void;
					public getShipsRoutingSystemsAndFerryRoutes(): boolean;
					public getBuoysBeaconsStructures(): boolean;
					public getDepthContours(): boolean;
					public getDryingLine(): boolean;
					public setStandardMiscellaneous(param0: boolean): void;
					public getChartScaleBoundaries(): boolean;
					public getAllIsolatedDangers(): boolean;
					public static createCoreENCViewingGroupSettingsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreENCViewingGroupSettings;
					public getSubmarineCablesAndPipelines(): boolean;
					public static nativeDestroy(param0: number): void;
					public setArchipelagicSeaLanes(param0: boolean): void;
					public getBoundariesAndLimits(): boolean;
					public setAllIsolatedDangers(param0: boolean): void;
					public setSpotSoundings(param0: boolean): void;
					public setOtherMiscellaneous(param0: boolean): void;
					public getArchipelagicSeaLanes(): boolean;
					public getHandle(): number;
					public setSubmarineCablesAndPipelines(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEditFieldsInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEditFieldsInfo>;
					public mHandle: number;
					public getEditDateField(): string;
					public getCreatorField(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getRealm(): string;
					public finalize(): void;
					public getCreationDateField(): string;
					public close(): void;
					public dispose(): void;
					public static createCoreEditFieldsInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreEditFieldsInfo;
					public getEditorField(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEditOperation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEditOperation>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreEditOperation;
					public static ADD: com.arcgismaps.internal.jni.CoreEditOperation;
					public static UPDATE: com.arcgismaps.internal.jni.CoreEditOperation;
					public static DELETE: com.arcgismaps.internal.jni.CoreEditOperation;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreEditOperation;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreEditOperation>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreEditOperation;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEditResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEditResult>;
					public mHandle: number;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreEditResult;
					public static createCoreEditResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreEditResult;
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public finalize(): void;
					public dispose(): void;
					public getCompletedWithErrors(): boolean;
					public getObjectType(): com.arcgismaps.internal.jni.CoreEditResultType;
					public getGlobalId(): string;
					public getObjectId(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getEditOperation(): com.arcgismaps.internal.jni.CoreEditOperation;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEditResultType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEditResultType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreEditResultType;
					public static FEATUREEDITRESULT: com.arcgismaps.internal.jni.CoreEditResultType;
					public static EDITRESULT: com.arcgismaps.internal.jni.CoreEditResultType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreEditResultType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreEditResultType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreEditResultType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEditorTrackingInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEditorTrackingInfo>;
					public mHandle: number;
					public static createCoreEditorTrackingInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreEditorTrackingInfo;
					public getEditorTrackingEnabled(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getOwnershipBasedAccessControlEnabled(): boolean;
					public getAllowOthersToDelete(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getAllowOthersToUpdate(): boolean;
					public close(): void;
					public getAllowAnonymousToDelete(): boolean;
					public getAllowAnonymousToUpdate(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreElement>;
					public mHandle: number;
					public getValueAsDistanceSymbolRange(): com.arcgismaps.internal.jni.CoreDistanceSymbolRange;
					public getValueAsOfflineCapability(): com.arcgismaps.internal.jni.CoreOfflineCapability;
					public getObjectType(): com.arcgismaps.internal.jni.CoreElementType;
					public static fromAggregationFeatureReduction(param0: com.arcgismaps.internal.jni.CoreAggregationFeatureReduction): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromUtilityTraceFunction(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunction): void;
					public getValueAsPopupExpressionEvaluation(): com.arcgismaps.internal.jni.CorePopupExpressionEvaluation;
					public static fromJobMessage(param0: com.arcgismaps.internal.jni.CoreJobMessage): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromWMSFeature(param0: com.arcgismaps.internal.jni.CoreWMSFeature): void;
					public getValueAsUtilityTerminal(): com.arcgismaps.internal.jni.CoreUtilityTerminal;
					public static fromGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromCostAttribute(param0: com.arcgismaps.internal.jni.CoreCostAttribute): void;
					public static fromSyncLayerOption(param0: com.arcgismaps.internal.jni.CoreSyncLayerOption): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsAttributeParameterValue(): com.arcgismaps.internal.jni.CoreAttributeParameterValue;
					public getValueAsSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static fromRasterCell(param0: com.arcgismaps.internal.jni.CoreRasterCell): com.arcgismaps.internal.jni.CoreElement;
					public static fromServiceAreaPolygon(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolygon): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromPolylineBarrier(param0: com.arcgismaps.internal.jni.CorePolylineBarrier): void;
					public setValueFromStatisticDefinition(param0: com.arcgismaps.internal.jni.CoreStatisticDefinition): void;
					public setValueFromUtilityTraceResultType(param0: com.arcgismaps.internal.jni.CoreUtilityTraceResultType): void;
					public getValueAsOAuthUserCredential(): com.arcgismaps.internal.jni.CoreOAuthUserCredential;
					public setValueFromGeographicTransformationStep(param0: com.arcgismaps.internal.jni.CoreGeographicTransformationStep): void;
					public constructor();
					public getValueAsFloat64(): number;
					public close(): void;
					public getValueAsLicenseStatus(): com.arcgismaps.internal.jni.CoreLicenseStatus;
					public static fromStop(param0: com.arcgismaps.internal.jni.CoreStop): com.arcgismaps.internal.jni.CoreElement;
					public static fromOGCFeatureCollectionTable(param0: com.arcgismaps.internal.jni.CoreOGCFeatureCollectionTable): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromEstimateTileCacheSizeResult(param0: com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeResult): void;
					public getValueAsWMSFeature(): com.arcgismaps.internal.jni.CoreWMSFeature;
					public static fromSymbolStyleSearchParameters(param0: com.arcgismaps.internal.jni.CoreSymbolStyleSearchParameters): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsOAuthApplicationCredential(): com.arcgismaps.internal.jni.CoreOAuthApplicationCredential;
					public setValueFromTokenCredential(param0: com.arcgismaps.internal.jni.CoreTokenCredential): void;
					public getValueAsAnalysis(): com.arcgismaps.internal.jni.CoreAnalysis;
					public getValueAsDynamicEntity(): com.arcgismaps.internal.jni.CoreDynamicEntity;
					public static fromPolygonBarrier(param0: com.arcgismaps.internal.jni.CorePolygonBarrier): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromFloorLevel(param0: com.arcgismaps.internal.jni.CoreFloorLevel): void;
					public setValueFromUInt8(param0: number): void;
					public setValueFromPreplannedMapArea(param0: com.arcgismaps.internal.jni.CorePreplannedMapArea): void;
					public static fromUtilityTraceFunctionBarrier(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionBarrier): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsClosestFacilityRoute(): com.arcgismaps.internal.jni.CoreClosestFacilityRoute;
					public static fromJob(param0: com.arcgismaps.internal.jni.CoreJob): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsPopupMedia(): com.arcgismaps.internal.jni.CorePopupMedia;
					public setValueFromOGCFeatureCollectionTable(param0: com.arcgismaps.internal.jni.CoreOGCFeatureCollectionTable): void;
					public setValueFromPopupAttachment(param0: com.arcgismaps.internal.jni.CorePopupAttachment): void;
					public setValueFromAggregateField(param0: com.arcgismaps.internal.jni.CoreAggregateField): void;
					public getValueAsEstimateTileCacheSizeResult(): com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeResult;
					public getValueAsSymbolStyleSearchResult(): com.arcgismaps.internal.jni.CoreSymbolStyleSearchResult;
					public getValueAsWMSSublayer(): com.arcgismaps.internal.jni.CoreWMSSublayer;
					public setValueFromDictionarySymbolStyleConfiguration(param0: com.arcgismaps.internal.jni.CoreDictionarySymbolStyleConfiguration): void;
					public setValueFromWifiReading(param0: com.arcgismaps.internal.jni.CoreWifiReading): void;
					public getValueAsArray(): com.arcgismaps.internal.jni.CoreArray;
					public setValueFromWMTSLayerInfo(param0: com.arcgismaps.internal.jni.CoreWMTSLayerInfo): void;
					public static fromSnapSourceSettings(param0: com.arcgismaps.internal.jni.CoreSnapSourceSettings): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromInt16(param0: number): void;
					public setValueFromAttributeParameterValue(param0: com.arcgismaps.internal.jni.CoreAttributeParameterValue): void;
					public setValueFromOfflineMapParametersKey(param0: com.arcgismaps.internal.jni.CoreOfflineMapParametersKey): void;
					public getValueAsClosestFacilityResult(): com.arcgismaps.internal.jni.CoreClosestFacilityResult;
					public static fromDynamicEntityObservation(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservation): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromUInt16(param0: number): void;
					public static fromPortalItem(param0: com.arcgismaps.internal.jni.CorePortalItem): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsClientReference(): any;
					public static fromPopupExpression(param0: com.arcgismaps.internal.jni.CorePopupExpression): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsQueryParameters(): com.arcgismaps.internal.jni.CoreQueryParameters;
					public static fromUtilityTraceFunction(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunction): com.arcgismaps.internal.jni.CoreElement;
					public static fromFloorFacility(param0: com.arcgismaps.internal.jni.CoreFloorFacility): com.arcgismaps.internal.jni.CoreElement;
					public static fromUInt64(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public static fromFeatureSubtype(param0: com.arcgismaps.internal.jni.CoreFeatureSubtype): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromGeoprocessingParameter(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameter): void;
					public getValueAsServiceAreaResult(): com.arcgismaps.internal.jni.CoreServiceAreaResult;
					public static fromDictionary(param0: com.arcgismaps.internal.jni.CoreDictionary): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsIncident(): com.arcgismaps.internal.jni.CoreIncident;
					public setValueFromArcGISTokenInfo(param0: com.arcgismaps.internal.jni.CoreArcGISTokenInfo): void;
					public getValueAsUtilityCategory(): com.arcgismaps.internal.jni.CoreUtilityCategory;
					public setValueFromCodedValue(param0: com.arcgismaps.internal.jni.CoreCodedValue): void;
					public static fromArray(param0: com.arcgismaps.internal.jni.CoreArray): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsRouteResult(): com.arcgismaps.internal.jni.CoreRouteResult;
					public static fromCodedValueDescription(param0: com.arcgismaps.internal.jni.CoreCodedValueDescription): com.arcgismaps.internal.jni.CoreElement;
					public static fromLocalFeatureEdit(param0: com.arcgismaps.internal.jni.CoreLocalFeatureEdit): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityNetworkSource(): com.arcgismaps.internal.jni.CoreUtilityNetworkSource;
					public static fromItemResourceCache(param0: com.arcgismaps.internal.jni.CoreItemResourceCache): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromTokenInfo(param0: com.arcgismaps.internal.jni.CoreTokenInfo): void;
					public getValueAsVector(): com.arcgismaps.internal.jni.CoreVector;
					public static fromInt16(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsLocalFeatureEditsResult(): com.arcgismaps.internal.jni.CoreLocalFeatureEditsResult;
					public getValueAsArcGISCredential(): com.arcgismaps.internal.jni.CoreArcGISCredential;
					public getValueAsWFSFeatureTable(): com.arcgismaps.internal.jni.CoreWFSFeatureTable;
					public getValueAsOfflineMapSyncLayerResult(): com.arcgismaps.internal.jni.CoreOfflineMapSyncLayerResult;
					public static fromUtilityElement(param0: com.arcgismaps.internal.jni.CoreUtilityElement): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromDynamicEntity(param0: com.arcgismaps.internal.jni.CoreDynamicEntity): void;
					public getValueAsPortalItem(): com.arcgismaps.internal.jni.CorePortalItem;
					public static fromDirectionMessage(param0: com.arcgismaps.internal.jni.CoreDirectionMessage): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsGeoPackageRaster(): com.arcgismaps.internal.jni.CoreGeoPackageRaster;
					public setValueFromTravelMode(param0: com.arcgismaps.internal.jni.CoreTravelMode): void;
					public getValueAsRestrictionAttribute(): com.arcgismaps.internal.jni.CoreRestrictionAttribute;
					public setValueFromAttachment(param0: com.arcgismaps.internal.jni.CoreAttachment): void;
					public static fromRouteResult(param0: com.arcgismaps.internal.jni.CoreRouteResult): com.arcgismaps.internal.jni.CoreElement;
					public static fromUtilityAssetType(param0: com.arcgismaps.internal.jni.CoreUtilityAssetType): com.arcgismaps.internal.jni.CoreElement;
					public static fromWFSFeatureTable(param0: com.arcgismaps.internal.jni.CoreWFSFeatureTable): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityAssetType(): com.arcgismaps.internal.jni.CoreUtilityAssetType;
					public getValueAsCostAttribute(): com.arcgismaps.internal.jni.CoreCostAttribute;
					public static fromSyncGeodatabaseParameters(param0: com.arcgismaps.internal.jni.CoreSyncGeodatabaseParameters): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityNetworkState(): com.arcgismaps.internal.jni.CoreUtilityNetworkState;
					public setValueFromIdentifyGraphicsOverlayResult(param0: com.arcgismaps.internal.jni.CoreIdentifyGraphicsOverlayResult): void;
					public setValueFromUtilityNetwork(param0: com.arcgismaps.internal.jni.CoreUtilityNetwork): void;
					public getValueAsOfflineMapCapabilities(): com.arcgismaps.internal.jni.CoreOfflineMapCapabilities;
					public setValueFromRouteParameters(param0: com.arcgismaps.internal.jni.CoreRouteParameters): void;
					public static fromTravelMode(param0: com.arcgismaps.internal.jni.CoreTravelMode): com.arcgismaps.internal.jni.CoreElement;
					public static fromOAuthApplicationTokenInfo(param0: com.arcgismaps.internal.jni.CoreOAuthApplicationTokenInfo): com.arcgismaps.internal.jni.CoreElement;
					public static fromLabelDefinition(param0: com.arcgismaps.internal.jni.CoreLabelDefinition): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromClassBreak(param0: com.arcgismaps.internal.jni.CoreClassBreak): void;
					public setValueFromGenerateGeodatabaseParameters(param0: com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters): void;
					public static fromFeatureType(param0: com.arcgismaps.internal.jni.CoreFeatureType): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsGenerateOfflineMapParameterOverrides(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides;
					public getValueAsUtilityGeometryTraceResult(): com.arcgismaps.internal.jni.CoreUtilityGeometryTraceResult;
					public getValueAsFeatureTableEditResult(): com.arcgismaps.internal.jni.CoreFeatureTableEditResult;
					public setValueFromRelationshipConstraintViolation(param0: com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType): void;
					public getValueAsBookmark(): com.arcgismaps.internal.jni.CoreBookmark;
					public setValueFromPointBarrier(param0: com.arcgismaps.internal.jni.CorePointBarrier): void;
					public setValueFromRelatedFeatureQueryResult(param0: com.arcgismaps.internal.jni.CoreRelatedFeatureQueryResult): void;
					public getValueAsFacility(): com.arcgismaps.internal.jni.CoreFacility;
					public setValueFromPopupElement(param0: com.arcgismaps.internal.jni.CorePopupElement): void;
					public setValueFromDictionary(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public static fromRouteParameters(param0: com.arcgismaps.internal.jni.CoreRouteParameters): com.arcgismaps.internal.jni.CoreElement;
					public static fromAttachment(param0: com.arcgismaps.internal.jni.CoreAttachment): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsDomain(): com.arcgismaps.internal.jni.CoreDomain;
					public setValueFromLayer(param0: com.arcgismaps.internal.jni.CoreLayer): void;
					public getValueAsUInt8(): number;
					public setValueFromJobMessage(param0: com.arcgismaps.internal.jni.CoreJobMessage): void;
					public static fromOfflineMapSyncParameters(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters): com.arcgismaps.internal.jni.CoreElement;
					public static fromTileImageFormat(param0: com.arcgismaps.internal.jni.CoreTileImageFormat): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromServiceAreaResult(param0: com.arcgismaps.internal.jni.CoreServiceAreaResult): void;
					public static fromFeatureCollectionTable(param0: com.arcgismaps.internal.jni.CoreFeatureCollectionTable): com.arcgismaps.internal.jni.CoreElement;
					public static fromFloat64(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public static fromWFSLayerInfo(param0: com.arcgismaps.internal.jni.CoreWFSLayerInfo): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsServiceAreaFacility(): com.arcgismaps.internal.jni.CoreServiceAreaFacility;
					public setValueFromDisplayFilter(param0: com.arcgismaps.internal.jni.CoreDisplayFilter): void;
					public static fromFacility(param0: com.arcgismaps.internal.jni.CoreFacility): com.arcgismaps.internal.jni.CoreElement;
					public static fromPopupExpressionEvaluation(param0: com.arcgismaps.internal.jni.CorePopupExpressionEvaluation): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromStatisticsQueryParameters(param0: com.arcgismaps.internal.jni.CoreStatisticsQueryParameters): void;
					public getValueAsAnnotationSublayer(): com.arcgismaps.internal.jni.CoreAnnotationSublayer;
					public setValueFromPopupExpressionEvaluation(param0: com.arcgismaps.internal.jni.CorePopupExpressionEvaluation): void;
					public setValueFromOAuthUserCredential(param0: com.arcgismaps.internal.jni.CoreOAuthUserCredential): void;
					public static fromBool(param0: boolean): com.arcgismaps.internal.jni.CoreElement;
					public static fromRoute(param0: com.arcgismaps.internal.jni.CoreRoute): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsDatumTransformation(): com.arcgismaps.internal.jni.CoreDatumTransformation;
					public setValueFromGenerateLayerOption(param0: com.arcgismaps.internal.jni.CoreGenerateLayerOption): void;
					public getValueAsOGCFeatureCollectionTable(): com.arcgismaps.internal.jni.CoreOGCFeatureCollectionTable;
					public getValueAsGUID(): com.arcgismaps.internal.jni.CoreGUID;
					public static fromSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsGenerateOfflineMapParameters(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters;
					public setValueFromElevationSource(param0: com.arcgismaps.internal.jni.CoreElevationSource): void;
					public getValueAsENCFeature(): com.arcgismaps.internal.jni.CoreENCFeature;
					public static fromImageOverlay(param0: com.arcgismaps.internal.jni.CoreImageOverlay): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsHorizontalVerticalTransformationStep(): com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep;
					public static fromSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsStop(): com.arcgismaps.internal.jni.CoreStop;
					public setValueFromContingencyConstraintViolation(param0: com.arcgismaps.internal.jni.CoreContingencyConstraintViolation): void;
					public getValueAsFloat32(): number;
					public setValueFromClosestFacilityRoute(param0: com.arcgismaps.internal.jni.CoreClosestFacilityRoute): void;
					public static fromTrackingStatus(param0: com.arcgismaps.internal.jni.CoreTrackingStatus): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromRoute(param0: com.arcgismaps.internal.jni.CoreRoute): void;
					public static fromExtensionLicense(param0: com.arcgismaps.internal.jni.CoreExtensionLicense): com.arcgismaps.internal.jni.CoreElement;
					public static fromWMTSTileMatrixSet(param0: com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromContingency(param0: com.arcgismaps.internal.jni.CoreContingency): void;
					public getValueAsExtensionLicense(): com.arcgismaps.internal.jni.CoreExtensionLicense;
					public setValueFromKMLNode(param0: com.arcgismaps.internal.jni.CoreKMLNode): void;
					public setValueFromRelationshipInfo(param0: com.arcgismaps.internal.jni.CoreRelationshipInfo): void;
					public static nativeDestroy(param0: number): void;
					public static fromPopupElement(param0: com.arcgismaps.internal.jni.CorePopupElement): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUInt64(): number;
					public setValueFromArcGISCredential(param0: com.arcgismaps.internal.jni.CoreArcGISCredential): void;
					public setValueFromLocation(param0: com.arcgismaps.internal.jni.CoreLocation): void;
					public getValueAsWMTSTileMatrixSet(): com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet;
					public static fromRestrictionAttribute(param0: com.arcgismaps.internal.jni.CoreRestrictionAttribute): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsItemResourceCache(): com.arcgismaps.internal.jni.CoreItemResourceCache;
					public getValueAsLevelOfDetail(): com.arcgismaps.internal.jni.CoreLevelOfDetail;
					public getValueAsExportVectorTilesParameters(): com.arcgismaps.internal.jni.CoreExportVectorTilesParameters;
					public setValueFromGeodatabaseFeatureTable(param0: com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable): void;
					public finalize(): void;
					public getValueAsImageFrame(): com.arcgismaps.internal.jni.CoreImageFrame;
					public static fromGraphicsOverlay(param0: com.arcgismaps.internal.jni.CoreGraphicsOverlay): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityElement(): com.arcgismaps.internal.jni.CoreUtilityElement;
					public getValueAsUtilityNetworkAttribute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public getValueAsSyncGeodatabaseParameters(): com.arcgismaps.internal.jni.CoreSyncGeodatabaseParameters;
					public getValueAsGeoprocessingFeatureSet(): com.arcgismaps.internal.jni.CoreGeoprocessingFeatureSet;
					public static fromContingencyConstraintViolation(param0: com.arcgismaps.internal.jni.CoreContingencyConstraintViolation): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsPolygonBarrier(): com.arcgismaps.internal.jni.CorePolygonBarrier;
					public setValueFromHorizontalVerticalTransformationStep(param0: com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep): void;
					public static fromTimestampOffset(param0: com.arcgismaps.internal.jni.CoreTimestampOffset): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromFeatureTable(param0: com.arcgismaps.internal.jni.CoreFeatureTable): void;
					public setValueFromGenerateOfflineMapParameterOverrides(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides): void;
					public getValueAsRequestAttachment(): com.arcgismaps.internal.jni.CoreRequestAttachment;
					public static fromScene(param0: com.arcgismaps.internal.jni.CoreScene): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromLabelDefinition(param0: com.arcgismaps.internal.jni.CoreLabelDefinition): void;
					public getValueAsOAuthUserTokenInfo(): com.arcgismaps.internal.jni.CoreOAuthUserTokenInfo;
					public setValueFromSyncLayerResult(param0: com.arcgismaps.internal.jni.CoreSyncLayerResult): void;
					public static fromField(param0: com.arcgismaps.internal.jni.CoreField): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityTraceFunction(): com.arcgismaps.internal.jni.CoreUtilityTraceFunction;
					public setValueFromGeoPackageFeatureTable(param0: com.arcgismaps.internal.jni.CoreGeoPackageFeatureTable): void;
					public getValueAsSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public static fromString(param0: string): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsColor(): com.arcgismaps.internal.jni.CoreColor;
					public setValueFromServiceAreaFacility(param0: com.arcgismaps.internal.jni.CoreServiceAreaFacility): void;
					public getValueAsUtilityTerminalPath(): com.arcgismaps.internal.jni.CoreUtilityTerminalPath;
					public static fromENCDataset(param0: com.arcgismaps.internal.jni.CoreENCDataset): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsDateOnly(): com.arcgismaps.internal.jni.CoreDateOnly;
					public setValueFromSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getValueAsPopupField(): com.arcgismaps.internal.jni.CorePopupField;
					public getValueAsGeodatabaseFeatureTable(): com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable;
					public setValueFromClientResponse(param0: com.arcgismaps.internal.jni.CoreClientResponse): void;
					public setValueFromENCDataset(param0: com.arcgismaps.internal.jni.CoreENCDataset): void;
					public getValueAsTokenCredential(): com.arcgismaps.internal.jni.CoreTokenCredential;
					public getValueAsWifiReading(): com.arcgismaps.internal.jni.CoreWifiReading;
					public getValueAsJob(): com.arcgismaps.internal.jni.CoreJob;
					public getValueAsPopupRelatedFeaturesSortOrder(): com.arcgismaps.internal.jni.CorePopupRelatedFeaturesSortOrder;
					public getValueAsGeoPackageFeatureTable(): com.arcgismaps.internal.jni.CoreGeoPackageFeatureTable;
					public static fromFeature(param0: com.arcgismaps.internal.jni.CoreFeature): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFeatureTemplate(): com.arcgismaps.internal.jni.CoreFeatureTemplate;
					public getValueAsUtilityDomainNetwork(): com.arcgismaps.internal.jni.CoreUtilityDomainNetwork;
					public static fromClosestFacilityResult(param0: com.arcgismaps.internal.jni.CoreClosestFacilityResult): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsGeometricEffect(): com.arcgismaps.internal.jni.CoreGeometricEffect;
					public getValueAsWMTSLayerInfo(): com.arcgismaps.internal.jni.CoreWMTSLayerInfo;
					public setValueFromRequestAttachment(param0: com.arcgismaps.internal.jni.CoreRequestAttachment): void;
					public static fromOGCFeatureCollectionInfo(param0: com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUniqueValue(): com.arcgismaps.internal.jni.CoreUniqueValue;
					public static fromDirectionManeuver(param0: com.arcgismaps.internal.jni.CoreDirectionManeuver): com.arcgismaps.internal.jni.CoreElement;
					public static fromIdentifyLayerResult(param0: com.arcgismaps.internal.jni.CoreIdentifyLayerResult): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsVectorMarkerSymbolElement(): com.arcgismaps.internal.jni.CoreVectorMarkerSymbolElement;
					public setValueFromFeatureCollectionTable(param0: com.arcgismaps.internal.jni.CoreFeatureCollectionTable): void;
					public getValueAsRelationshipConstraintViolation(): com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType;
					public getValueAsWFSLayerInfo(): com.arcgismaps.internal.jni.CoreWFSLayerInfo;
					public getValueAsWMTSTileMatrix(): com.arcgismaps.internal.jni.CoreWMTSTileMatrix;
					public setValueFromLocatorAttribute(param0: com.arcgismaps.internal.jni.CoreLocatorAttribute): void;
					public static fromContingency(param0: com.arcgismaps.internal.jni.CoreContingency): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsLicenseInfo(): com.arcgismaps.internal.jni.CoreLicenseInfo;
					public getValueAsMapServiceImageFormat(): com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public setValueFromOAuthApplicationTokenInfo(param0: com.arcgismaps.internal.jni.CoreOAuthApplicationTokenInfo): void;
					public getValueAsPopupAttachment(): com.arcgismaps.internal.jni.CorePopupAttachment;
					public setValueFromString(param0: string): void;
					public getValueAsInt64(): number;
					public setValueFromPopupRelatedFeaturesSortOrder(param0: com.arcgismaps.internal.jni.CorePopupRelatedFeaturesSortOrder): void;
					public static fromServiceAreaPolyline(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolyline): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromArcGISFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable): void;
					public static fromWMSFeature(param0: com.arcgismaps.internal.jni.CoreWMSFeature): com.arcgismaps.internal.jni.CoreElement;
					public static fromUtilityAssociation(param0: com.arcgismaps.internal.jni.CoreUtilityAssociation): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsBool(): boolean;
					public setValueFromDirectionEvent(param0: com.arcgismaps.internal.jni.CoreDirectionEvent): void;
					public setValueFromIdentifyLayerResult(param0: com.arcgismaps.internal.jni.CoreIdentifyLayerResult): void;
					public setValueFromStatisticsQueryResult(param0: com.arcgismaps.internal.jni.CoreStatisticsQueryResult): void;
					public setValueFromTileImageFormat(param0: com.arcgismaps.internal.jni.CoreTileImageFormat): void;
					public setValueFromWMSLayerInfo(param0: com.arcgismaps.internal.jni.CoreWMSLayerInfo): void;
					public getValueAsAggregateField(): com.arcgismaps.internal.jni.CoreAggregateField;
					public setValueFromFeatureEditResult(param0: com.arcgismaps.internal.jni.CoreFeatureEditResult): void;
					public static fromGeoprocessingParameter(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameter): com.arcgismaps.internal.jni.CoreElement;
					public static fromRelationshipConstraintViolation(param0: com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType): com.arcgismaps.internal.jni.CoreElement;
					public static fromLevelOfDetail(param0: com.arcgismaps.internal.jni.CoreLevelOfDetail): com.arcgismaps.internal.jni.CoreElement;
					public static fromSubtypeSublayer(param0: com.arcgismaps.internal.jni.CoreSubtypeSublayer): com.arcgismaps.internal.jni.CoreElement;
					public static fromAggregateGeoElement(param0: com.arcgismaps.internal.jni.CoreAggregateGeoElement): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsOGCFeatureCollectionInfo(): com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo;
					public setValueFromFloat64(param0: number): void;
					public setValueFromGeometricEffect(param0: com.arcgismaps.internal.jni.CoreGeometricEffect): void;
					public getValueAsLocation(): com.arcgismaps.internal.jni.CoreLocation;
					public setValueFromFeatureTemplate(param0: com.arcgismaps.internal.jni.CoreFeatureTemplate): void;
					public static fromRenderingRuleInfo(param0: com.arcgismaps.internal.jni.CoreRenderingRuleInfo): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsError(): com.arcgismaps.internal.jni.CoreError;
					public getValueAsAggregationFeatureReduction(): com.arcgismaps.internal.jni.CoreAggregationFeatureReduction;
					public getValueAsPreplannedMapArea(): com.arcgismaps.internal.jni.CorePreplannedMapArea;
					public setValueFromFeatureType(param0: com.arcgismaps.internal.jni.CoreFeatureType): void;
					public static fromGenerateGeodatabaseParameters(param0: com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters): com.arcgismaps.internal.jni.CoreElement;
					public static fromWMSLayerInfo(param0: com.arcgismaps.internal.jni.CoreWMSLayerInfo): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsOAuthApplicationTokenInfo(): com.arcgismaps.internal.jni.CoreOAuthApplicationTokenInfo;
					public static fromDictionarySymbolStyleConfiguration(param0: com.arcgismaps.internal.jni.CoreDictionarySymbolStyleConfiguration): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromRouteResult(param0: com.arcgismaps.internal.jni.CoreRouteResult): void;
					public setValueFromTileCache(param0: com.arcgismaps.internal.jni.CoreTileCache): void;
					public static fromOAuthUserCredential(param0: com.arcgismaps.internal.jni.CoreOAuthUserCredential): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsDateTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public setValueFromIdInfo(param0: com.arcgismaps.internal.jni.CoreIdInfo): void;
					public static fromFloorSite(param0: com.arcgismaps.internal.jni.CoreFloorSite): com.arcgismaps.internal.jni.CoreElement;
					public static fromIdentifyGraphicsOverlayResult(param0: com.arcgismaps.internal.jni.CoreIdentifyGraphicsOverlayResult): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsDynamicEntityObservation(): com.arcgismaps.internal.jni.CoreDynamicEntityObservation;
					public setValueFromUInt64(param0: number): void;
					public static fromFieldDescription(param0: com.arcgismaps.internal.jni.CoreFieldDescription): com.arcgismaps.internal.jni.CoreElement;
					public static fromGeocodeResult(param0: com.arcgismaps.internal.jni.CoreGeocodeResult): com.arcgismaps.internal.jni.CoreElement;
					public static fromServiceAreaFacility(param0: com.arcgismaps.internal.jni.CoreServiceAreaFacility): com.arcgismaps.internal.jni.CoreElement;
					public static fromBookmark(param0: com.arcgismaps.internal.jni.CoreBookmark): com.arcgismaps.internal.jni.CoreElement;
					public static fromFloat32(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public static fromGeoprocessingFeatureSet(param0: com.arcgismaps.internal.jni.CoreGeoprocessingFeatureSet): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityTierGroup(): com.arcgismaps.internal.jni.CoreUtilityTierGroup;
					public setValueFromStop(param0: com.arcgismaps.internal.jni.CoreStop): void;
					public getValueAsGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public setValueFromDownloadPreplannedOfflineMapParameters(param0: com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters): void;
					public setValueFromStatisticRecord(param0: com.arcgismaps.internal.jni.CoreStatisticRecord): void;
					public static fromArcGISCredential(param0: com.arcgismaps.internal.jni.CoreArcGISCredential): com.arcgismaps.internal.jni.CoreElement;
					public static fromFeatureTable(param0: com.arcgismaps.internal.jni.CoreFeatureTable): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsAnalysisOverlay(): com.arcgismaps.internal.jni.CoreAnalysisOverlay;
					public static fromUInt8(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsGeodatabase(): com.arcgismaps.internal.jni.CoreGeodatabase;
					public static fromServiceAreaParameters(param0: com.arcgismaps.internal.jni.CoreServiceAreaParameters): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsSyncLayerResult(): com.arcgismaps.internal.jni.CoreSyncLayerResult;
					public static fromSymbolStyleSearchResult(param0: com.arcgismaps.internal.jni.CoreSymbolStyleSearchResult): com.arcgismaps.internal.jni.CoreElement;
					public static fromOfflineCapability(param0: com.arcgismaps.internal.jni.CoreOfflineCapability): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFormElement(): com.arcgismaps.internal.jni.CoreFormElement;
					public setValueFromExportVectorTilesParameters(param0: com.arcgismaps.internal.jni.CoreExportVectorTilesParameters): void;
					public getValueAsScene(): com.arcgismaps.internal.jni.CoreScene;
					public static fromFloorLevel(param0: com.arcgismaps.internal.jni.CoreFloorLevel): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFloorFacility(): com.arcgismaps.internal.jni.CoreFloorFacility;
					public setValueFromClientReference(param0: any): void;
					public setValueFromPortalItem(param0: com.arcgismaps.internal.jni.CorePortalItem): void;
					public static fromPointBarrier(param0: com.arcgismaps.internal.jni.CorePointBarrier): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsTokenInfo(): com.arcgismaps.internal.jni.CoreTokenInfo;
					public setValueFromBuffer(param0: androidNative.Array<number>): void;
					public static fromPreplannedMapArea(param0: com.arcgismaps.internal.jni.CorePreplannedMapArea): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsImage(): com.arcgismaps.internal.jni.CoreImage;
					public setValueFromArcadeEvaluationResult(param0: com.arcgismaps.internal.jni.CoreArcadeEvaluationResult): void;
					public setValueFromGeocodeResult(param0: com.arcgismaps.internal.jni.CoreGeocodeResult): void;
					public setValueFromFieldGroup(param0: com.arcgismaps.internal.jni.CoreFieldGroup): void;
					public getValueAsGraphicsOverlay(): com.arcgismaps.internal.jni.CoreGraphicsOverlay;
					public getValueAsUtilityTraceFunctionOutput(): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionOutput;
					public setValueFromOfflineCapability(param0: com.arcgismaps.internal.jni.CoreOfflineCapability): void;
					public getValueAsOrderBy(): com.arcgismaps.internal.jni.CoreOrderBy;
					public getValueAsCodedValue(): com.arcgismaps.internal.jni.CoreCodedValue;
					public getValueAsSymbolStyleSearchParameters(): com.arcgismaps.internal.jni.CoreSymbolStyleSearchParameters;
					public static fromGenerateLayerOption(param0: com.arcgismaps.internal.jni.CoreGenerateLayerOption): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFeatureCollectionTable(): com.arcgismaps.internal.jni.CoreFeatureCollectionTable;
					public setValueFromGraphic(param0: com.arcgismaps.internal.jni.CoreGraphic): void;
					public static fromGenerateOfflineMapParameters(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters): com.arcgismaps.internal.jni.CoreElement;
					public static fromTimeOnly(param0: com.arcgismaps.internal.jni.CoreTimeOnly): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFormExpressionEvaluationError(): com.arcgismaps.internal.jni.CoreFormExpressionEvaluationError;
					public getValueAsUtilityAssociation(): com.arcgismaps.internal.jni.CoreUtilityAssociation;
					public static fromGeoprocessingParameters(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameters): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityPropagator(): com.arcgismaps.internal.jni.CoreUtilityPropagator;
					public setValueFromSymbolStyle(param0: com.arcgismaps.internal.jni.CoreSymbolStyle): void;
					public static fromAnnotationSublayer(param0: com.arcgismaps.internal.jni.CoreAnnotationSublayer): com.arcgismaps.internal.jni.CoreElement;
					public static fromDateOnly(param0: com.arcgismaps.internal.jni.CoreDateOnly): com.arcgismaps.internal.jni.CoreElement;
					public static fromEditResult(param0: com.arcgismaps.internal.jni.CoreEditResult): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromDynamicEntityObservation(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservation): void;
					public setValueFromOGCFeatureCollectionInfo(param0: com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo): void;
					public static fromVector(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromVector(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static fromStatisticDefinition(param0: com.arcgismaps.internal.jni.CoreStatisticDefinition): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityNamedTraceConfiguration(): com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfiguration;
					public getValueAsPopup(): com.arcgismaps.internal.jni.CorePopup;
					public setValueFromPopupExpression(param0: com.arcgismaps.internal.jni.CorePopupExpression): void;
					public static fromServiceFeatureTable(param0: com.arcgismaps.internal.jni.CoreServiceFeatureTable): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromPopupMedia(param0: com.arcgismaps.internal.jni.CorePopupMedia): void;
					public getValueAsLayer(): com.arcgismaps.internal.jni.CoreLayer;
					public setValueFromGeoPackageRaster(param0: com.arcgismaps.internal.jni.CoreGeoPackageRaster): void;
					public setValueFromSuggestResult(param0: com.arcgismaps.internal.jni.CoreSuggestResult): void;
					public static fromIdInfo(param0: com.arcgismaps.internal.jni.CoreIdInfo): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromServiceGeodatabase(param0: com.arcgismaps.internal.jni.CoreServiceGeodatabase): void;
					public getValueAsUInt16(): number;
					public static fromTokenInfo(param0: com.arcgismaps.internal.jni.CoreTokenInfo): com.arcgismaps.internal.jni.CoreElement;
					public dispose(): void;
					public setValueFromWMTSTileMatrix(param0: com.arcgismaps.internal.jni.CoreWMTSTileMatrix): void;
					public getValueAsTransportationNetworkDataset(): com.arcgismaps.internal.jni.CoreTransportationNetworkDataset;
					public setValueFromSubtypeSublayer(param0: com.arcgismaps.internal.jni.CoreSubtypeSublayer): void;
					public setValueFromUniqueValue(param0: com.arcgismaps.internal.jni.CoreUniqueValue): void;
					public static fromArcGISFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable): com.arcgismaps.internal.jni.CoreElement;
					public static fromDatumTransformation(param0: com.arcgismaps.internal.jni.CoreDatumTransformation): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsExportTileCacheParameters(): com.arcgismaps.internal.jni.CoreExportTileCacheParameters;
					public setValueFromDistanceSymbolRange(param0: com.arcgismaps.internal.jni.CoreDistanceSymbolRange): void;
					public static fromGenerateOfflineMapParameterOverrides(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFeatureEditResult(): com.arcgismaps.internal.jni.CoreFeatureEditResult;
					public getValueAsOfflineMapUpdatesInfo(): com.arcgismaps.internal.jni.CoreOfflineMapUpdatesInfo;
					public static fromPopup(param0: com.arcgismaps.internal.jni.CorePopup): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsTrackingStatus(): com.arcgismaps.internal.jni.CoreTrackingStatus;
					public static fromDisplayFilter(param0: com.arcgismaps.internal.jni.CoreDisplayFilter): com.arcgismaps.internal.jni.CoreElement;
					public equals(param0: com.arcgismaps.internal.jni.CoreElement): boolean;
					public setValueFromError(param0: com.arcgismaps.internal.jni.CoreError): void;
					public static fromOAuthUserTokenInfo(param0: com.arcgismaps.internal.jni.CoreOAuthUserTokenInfo): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsElevationSource(): com.arcgismaps.internal.jni.CoreElevationSource;
					public getValueAsInt16(): number;
					public getValueAsGeoprocessingParameters(): com.arcgismaps.internal.jni.CoreGeoprocessingParameters;
					public static fromElevationSource(param0: com.arcgismaps.internal.jni.CoreElevationSource): com.arcgismaps.internal.jni.CoreElement;
					public static fromArcGISTokenInfo(param0: com.arcgismaps.internal.jni.CoreArcGISTokenInfo): com.arcgismaps.internal.jni.CoreElement;
					public static fromOfflineMapSyncLayerResult(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncLayerResult): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsKMLNode(): com.arcgismaps.internal.jni.CoreKMLNode;
					public setValueFromGeodatabaseDeltaInfo(param0: com.arcgismaps.internal.jni.CoreGeodatabaseDeltaInfo): void;
					public getValueAsSubtypeSublayer(): com.arcgismaps.internal.jni.CoreSubtypeSublayer;
					public setValueFromMap(param0: com.arcgismaps.internal.jni.CoreMap): void;
					public getValueAsDirectionMessage(): com.arcgismaps.internal.jni.CoreDirectionMessage;
					public getValueAsTileCache(): com.arcgismaps.internal.jni.CoreTileCache;
					public getValueAsRasterCell(): com.arcgismaps.internal.jni.CoreRasterCell;
					public static fromGeoPackageRaster(param0: com.arcgismaps.internal.jni.CoreGeoPackageRaster): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsGeographicTransformationStep(): com.arcgismaps.internal.jni.CoreGeographicTransformationStep;
					public getValueAsGeoprocessingParameter(): com.arcgismaps.internal.jni.CoreGeoprocessingParameter;
					public static fromClosestFacilityParameters(param0: com.arcgismaps.internal.jni.CoreClosestFacilityParameters): com.arcgismaps.internal.jni.CoreElement;
					public static fromGeoPackageFeatureTable(param0: com.arcgismaps.internal.jni.CoreGeoPackageFeatureTable): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromFloorSite(param0: com.arcgismaps.internal.jni.CoreFloorSite): void;
					public static fromPopupAttachment(param0: com.arcgismaps.internal.jni.CorePopupAttachment): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsImageOverlay(): com.arcgismaps.internal.jni.CoreImageOverlay;
					public setValueFromInt32(param0: number): void;
					public getValueAsArcGISTokenInfo(): com.arcgismaps.internal.jni.CoreArcGISTokenInfo;
					public setValueFromAnalysisOverlay(param0: com.arcgismaps.internal.jni.CoreAnalysisOverlay): void;
					public static fromStatisticRecord(param0: com.arcgismaps.internal.jni.CoreStatisticRecord): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsJobMessage(): com.arcgismaps.internal.jni.CoreJobMessage;
					public setValueFromDirectionManeuver(param0: com.arcgismaps.internal.jni.CoreDirectionManeuver): void;
					public static fromGeoprocessingParameterInfo(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameterInfo): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromVectorTileCache(param0: com.arcgismaps.internal.jni.CoreVectorTileCache): void;
					public getValueAsEditResult(): com.arcgismaps.internal.jni.CoreEditResult;
					public static fromSymbolLayer(param0: com.arcgismaps.internal.jni.CoreSymbolLayer): com.arcgismaps.internal.jni.CoreElement;
					public static fromUniqueValue(param0: com.arcgismaps.internal.jni.CoreUniqueValue): com.arcgismaps.internal.jni.CoreElement;
					public static fromGeographicTransformationStep(param0: com.arcgismaps.internal.jni.CoreGeographicTransformationStep): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFloorLevel(): com.arcgismaps.internal.jni.CoreFloorLevel;
					public setValueFromOAuthUserTokenInfo(param0: com.arcgismaps.internal.jni.CoreOAuthUserTokenInfo): void;
					public setValueFromOfflineMapUpdatesInfo(param0: com.arcgismaps.internal.jni.CoreOfflineMapUpdatesInfo): void;
					public setValueFromCodedValueDescription(param0: com.arcgismaps.internal.jni.CoreCodedValueDescription): void;
					public static fromDateTime(param0: com.arcgismaps.internal.jni.CoreDateTime): com.arcgismaps.internal.jni.CoreElement;
					public static fromOfflineMapCapabilities(param0: com.arcgismaps.internal.jni.CoreOfflineMapCapabilities): com.arcgismaps.internal.jni.CoreElement;
					public static fromInt64(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsClassBreak(): com.arcgismaps.internal.jni.CoreClassBreak;
					public setValueFromFieldDescription(param0: com.arcgismaps.internal.jni.CoreFieldDescription): void;
					public setValueFromFeatureQueryResult(param0: com.arcgismaps.internal.jni.CoreFeatureQueryResult): void;
					public static fromFeatureQueryResult(param0: com.arcgismaps.internal.jni.CoreFeatureQueryResult): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsDictionarySymbolStyleConfiguration(): com.arcgismaps.internal.jni.CoreDictionarySymbolStyleConfiguration;
					public getValueAsDownloadPreplannedOfflineMapParameters(): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters;
					public setValueFromOAuthApplicationCredential(param0: com.arcgismaps.internal.jni.CoreOAuthApplicationCredential): void;
					public static fromCodedValue(param0: com.arcgismaps.internal.jni.CoreCodedValue): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsDirectionManeuver(): com.arcgismaps.internal.jni.CoreDirectionManeuver;
					public static fromExportTileCacheParameters(param0: com.arcgismaps.internal.jni.CoreExportTileCacheParameters): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFeature(): com.arcgismaps.internal.jni.CoreFeature;
					public getValueAsStatisticsQueryResult(): com.arcgismaps.internal.jni.CoreStatisticsQueryResult;
					public static fromENCFeature(param0: com.arcgismaps.internal.jni.CoreENCFeature): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromBookmark(param0: com.arcgismaps.internal.jni.CoreBookmark): void;
					public getValueAsUtilityAssetGroup(): com.arcgismaps.internal.jni.CoreUtilityAssetGroup;
					public static fromGeodatabase(param0: com.arcgismaps.internal.jni.CoreGeodatabase): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromLicenseInfo(param0: com.arcgismaps.internal.jni.CoreLicenseInfo): void;
					public getValueAsFieldGroup(): com.arcgismaps.internal.jni.CoreFieldGroup;
					public getValueAsGraphic(): com.arcgismaps.internal.jni.CoreGraphic;
					public static fromTransportationNetworkDataset(param0: com.arcgismaps.internal.jni.CoreTransportationNetworkDataset): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityTerminalConfiguration(): com.arcgismaps.internal.jni.CoreUtilityTerminalConfiguration;
					public getValueAsUtilityTerminalConfigurationPath(): com.arcgismaps.internal.jni.CoreUtilityTerminalConfigurationPath;
					public static fromWMTSTileMatrix(param0: com.arcgismaps.internal.jni.CoreWMTSTileMatrix): com.arcgismaps.internal.jni.CoreElement;
					public static fromAggregateField(param0: com.arcgismaps.internal.jni.CoreAggregateField): com.arcgismaps.internal.jni.CoreElement;
					public static fromClosestFacilityRoute(param0: com.arcgismaps.internal.jni.CoreClosestFacilityRoute): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromLegendInfo(param0: com.arcgismaps.internal.jni.CoreLegendInfo): void;
					public getValueAsStatisticsQueryParameters(): com.arcgismaps.internal.jni.CoreStatisticsQueryParameters;
					public static fromLabelStackSeparator(param0: com.arcgismaps.internal.jni.CoreLabelStackSeparator): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsStatisticRecord(): com.arcgismaps.internal.jni.CoreStatisticRecord;
					public getValueAsPolylineBarrier(): com.arcgismaps.internal.jni.CorePolylineBarrier;
					public setValueFromScene(param0: com.arcgismaps.internal.jni.CoreScene): void;
					public getValueAsRelationshipInfo(): com.arcgismaps.internal.jni.CoreRelationshipInfo;
					public getValueAsUtilityFunctionTraceResult(): com.arcgismaps.internal.jni.CoreUtilityFunctionTraceResult;
					public setValueFromUInt32(param0: number): void;
					public setValueFromFeature(param0: com.arcgismaps.internal.jni.CoreFeature): void;
					public getValueAsLegendInfo(): com.arcgismaps.internal.jni.CoreLegendInfo;
					public setValueFromServiceAreaPolygon(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolygon): void;
					public static fromMapServiceImageFormat(param0: com.arcgismaps.internal.jni.CoreMapServiceImageFormat): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsArcGISSublayer(): com.arcgismaps.internal.jni.CoreArcGISSublayer;
					public setValueFromIncident(param0: com.arcgismaps.internal.jni.CoreIncident): void;
					public setValueFromOrderBy(param0: com.arcgismaps.internal.jni.CoreOrderBy): void;
					public setValueFromImage(param0: com.arcgismaps.internal.jni.CoreImage): void;
					public static fromServiceGeodatabase(param0: com.arcgismaps.internal.jni.CoreServiceGeodatabase): com.arcgismaps.internal.jni.CoreElement;
					public static fromOAuthApplicationCredential(param0: com.arcgismaps.internal.jni.CoreOAuthApplicationCredential): com.arcgismaps.internal.jni.CoreElement;
					public static fromTileCache(param0: com.arcgismaps.internal.jni.CoreTileCache): com.arcgismaps.internal.jni.CoreElement;
					public static fromInt32(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public static fromUtilityTraceResultType(param0: com.arcgismaps.internal.jni.CoreUtilityTraceResultType): com.arcgismaps.internal.jni.CoreElement;
					public static fromRequestAttachment(param0: com.arcgismaps.internal.jni.CoreRequestAttachment): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromExtensionLicense(param0: com.arcgismaps.internal.jni.CoreExtensionLicense): void;
					public setValueFromInt64(param0: number): void;
					public setValueFromFacility(param0: com.arcgismaps.internal.jni.CoreFacility): void;
					public getValueAsOfflineMapSyncParameters(): com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters;
					public getValueAsRelatedFeatureQueryResult(): com.arcgismaps.internal.jni.CoreRelatedFeatureQueryResult;
					public static fromClassBreak(param0: com.arcgismaps.internal.jni.CoreClassBreak): com.arcgismaps.internal.jni.CoreElement;
					public static fromColor(param0: com.arcgismaps.internal.jni.CoreColor): com.arcgismaps.internal.jni.CoreElement;
					public static fromDomain(param0: com.arcgismaps.internal.jni.CoreDomain): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromDomain(param0: com.arcgismaps.internal.jni.CoreDomain): void;
					public setValueFromWFSLayerInfo(param0: com.arcgismaps.internal.jni.CoreWFSLayerInfo): void;
					public setValueFromAggregateGeoElement(param0: com.arcgismaps.internal.jni.CoreAggregateGeoElement): void;
					public setValueFromOfflineMapSyncParameters(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters): void;
					public static fromClientResponse(param0: com.arcgismaps.internal.jni.CoreClientResponse): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsLocatorAttribute(): com.arcgismaps.internal.jni.CoreLocatorAttribute;
					public setValueFromField(param0: com.arcgismaps.internal.jni.CoreField): void;
					public getValueAsGenerateGeodatabaseParameters(): com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters;
					public static fromKMLNode(param0: com.arcgismaps.internal.jni.CoreKMLNode): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsInt8(): number;
					public getValueAsTimeOnly(): com.arcgismaps.internal.jni.CoreTimeOnly;
					public getValueAsFeatureQueryResult(): com.arcgismaps.internal.jni.CoreFeatureQueryResult;
					public setValueFromOfflineMapSyncLayerResult(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncLayerResult): void;
					public setValueFromUtilityPropagator(param0: com.arcgismaps.internal.jni.CoreUtilityPropagator): void;
					public static fromFeatureTemplate(param0: com.arcgismaps.internal.jni.CoreFeatureTemplate): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsSnapSourceSettings(): com.arcgismaps.internal.jni.CoreSnapSourceSettings;
					public static fromInt8(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromEditResult(param0: com.arcgismaps.internal.jni.CoreEditResult): void;
					public static fromAttributeParameterValue(param0: com.arcgismaps.internal.jni.CoreAttributeParameterValue): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromArcGISSublayer(param0: com.arcgismaps.internal.jni.CoreArcGISSublayer): void;
					public static fromScaleRangeDisplayFilter(param0: com.arcgismaps.internal.jni.CoreScaleRangeDisplayFilter): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromSymbolStyleSearchParameters(param0: com.arcgismaps.internal.jni.CoreSymbolStyleSearchParameters): void;
					public getValueAsServiceFeatureTable(): com.arcgismaps.internal.jni.CoreServiceFeatureTable;
					public static fromPolylineBarrier(param0: com.arcgismaps.internal.jni.CorePolylineBarrier): com.arcgismaps.internal.jni.CoreElement;
					public static fromAnalysis(param0: com.arcgismaps.internal.jni.CoreAnalysis): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsSymbolLayer(): com.arcgismaps.internal.jni.CoreSymbolLayer;
					public setValueFromTransportationNetworkDataset(param0: com.arcgismaps.internal.jni.CoreTransportationNetworkDataset): void;
					public getValueAsFeatureType(): com.arcgismaps.internal.jni.CoreFeatureType;
					public setValueFromAnnotationSublayer(param0: com.arcgismaps.internal.jni.CoreAnnotationSublayer): void;
					public setValueFromPopupField(param0: com.arcgismaps.internal.jni.CorePopupField): void;
					public static fromSyncLayerResult(param0: com.arcgismaps.internal.jni.CoreSyncLayerResult): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsKMLGeometry(): com.arcgismaps.internal.jni.CoreKMLGeometry;
					public static createCoreElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public static fromNMEASatelliteInfo(param0: com.arcgismaps.internal.jni.CoreNMEASatelliteInfo): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromPopup(param0: com.arcgismaps.internal.jni.CorePopup): void;
					public getValueAsAttachment(): com.arcgismaps.internal.jni.CoreAttachment;
					public setValueFromItemResourceCache(param0: com.arcgismaps.internal.jni.CoreItemResourceCache): void;
					public getValueAsAggregateGeoElement(): com.arcgismaps.internal.jni.CoreAggregateGeoElement;
					public setValueFromWMSSublayer(param0: com.arcgismaps.internal.jni.CoreWMSSublayer): void;
					public getValueAsUtilityNetwork(): com.arcgismaps.internal.jni.CoreUtilityNetwork;
					public setValueFromGUID(param0: com.arcgismaps.internal.jni.CoreGUID): void;
					public getValueAsIdentifyGraphicsOverlayResult(): com.arcgismaps.internal.jni.CoreIdentifyGraphicsOverlayResult;
					public getValueAsPointBarrier(): com.arcgismaps.internal.jni.CorePointBarrier;
					public getValueAsArcGISFeature(): com.arcgismaps.internal.jni.CoreArcGISFeature;
					public static fromMap(param0: com.arcgismaps.internal.jni.CoreMap): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromLabelingInfo(param0: com.arcgismaps.internal.jni.CoreLabelingInfo): void;
					public getValueAsServiceVersionInfo(): com.arcgismaps.internal.jni.CoreServiceVersionInfo;
					public setValueFromContingentValue(param0: com.arcgismaps.internal.jni.CoreContingentValue): void;
					public getValueAsLocalFeatureEdit(): com.arcgismaps.internal.jni.CoreLocalFeatureEdit;
					public getHandle(): number;
					public static fromEstimateTileCacheSizeResult(param0: com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeResult): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsOfflineMapParametersKey(): com.arcgismaps.internal.jni.CoreOfflineMapParametersKey;
					public static fromExportVectorTilesParameters(param0: com.arcgismaps.internal.jni.CoreExportVectorTilesParameters): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromPolygonBarrier(param0: com.arcgismaps.internal.jni.CorePolygonBarrier): void;
					public getValueAsBuffer(): androidNative.Array<number>;
					public setValueFromTimeOnly(param0: com.arcgismaps.internal.jni.CoreTimeOnly): void;
					public static fromVectorMarkerSymbolElement(param0: com.arcgismaps.internal.jni.CoreVectorMarkerSymbolElement): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromGeoprocessingParameters(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameters): void;
					public setValueFromENCFeature(param0: com.arcgismaps.internal.jni.CoreENCFeature): void;
					public getValueAsServiceAreaPolygon(): com.arcgismaps.internal.jni.CoreServiceAreaPolygon;
					public setValueFromBool(param0: boolean): void;
					public setValueFromLabelStackSeparator(param0: com.arcgismaps.internal.jni.CoreLabelStackSeparator): void;
					public setValueFromScaleRangeDisplayFilter(param0: com.arcgismaps.internal.jni.CoreScaleRangeDisplayFilter): void;
					public setValueFromFloat32(param0: number): void;
					public getValueAsRouteParameters(): com.arcgismaps.internal.jni.CoreRouteParameters;
					public static fromOfflineMapParametersKey(param0: com.arcgismaps.internal.jni.CoreOfflineMapParametersKey): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsClosestFacilityParameters(): com.arcgismaps.internal.jni.CoreClosestFacilityParameters;
					public setValueFromFloorFacility(param0: com.arcgismaps.internal.jni.CoreFloorFacility): void;
					public setValueFromPortal(param0: com.arcgismaps.internal.jni.CorePortal): void;
					public getValueAsField(): com.arcgismaps.internal.jni.CoreField;
					public setValueFromExportTileCacheParameters(param0: com.arcgismaps.internal.jni.CoreExportTileCacheParameters): void;
					public static fromVectorTileCache(param0: com.arcgismaps.internal.jni.CoreVectorTileCache): com.arcgismaps.internal.jni.CoreElement;
					public static fromWifiReading(param0: com.arcgismaps.internal.jni.CoreWifiReading): com.arcgismaps.internal.jni.CoreElement;
					public static fromPopupMedia(param0: com.arcgismaps.internal.jni.CorePopupMedia): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromGraphicsOverlay(param0: com.arcgismaps.internal.jni.CoreGraphicsOverlay): void;
					public setValueFromSnapSourceSettings(param0: com.arcgismaps.internal.jni.CoreSnapSourceSettings): void;
					public getValueAsUtilityTraceFunctionBarrier(): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionBarrier;
					public getValueAsDictionary(): com.arcgismaps.internal.jni.CoreDictionary;
					public getValueAsDirectionEvent(): com.arcgismaps.internal.jni.CoreDirectionEvent;
					public setValueFromImageFrame(param0: com.arcgismaps.internal.jni.CoreImageFrame): void;
					public static fromImage(param0: com.arcgismaps.internal.jni.CoreImage): com.arcgismaps.internal.jni.CoreElement;
					public static fromUInt16(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public static fromClientReference(param0: any): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsGenerateLayerOption(): com.arcgismaps.internal.jni.CoreGenerateLayerOption;
					public getValueAsFloorSite(): com.arcgismaps.internal.jni.CoreFloorSite;
					public isEmpty(): boolean;
					public static fromStatisticsQueryParameters(param0: com.arcgismaps.internal.jni.CoreStatisticsQueryParameters): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFeatureTable(): com.arcgismaps.internal.jni.CoreFeatureTable;
					public static fromUtilityPropagator(param0: com.arcgismaps.internal.jni.CoreUtilityPropagator): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromUtilityCategory(param0: com.arcgismaps.internal.jni.CoreUtilityCategory): void;
					public static fromDynamicEntity(param0: com.arcgismaps.internal.jni.CoreDynamicEntity): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromGeoprocessingParameterInfo(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameterInfo): void;
					public static fromLabelingInfo(param0: com.arcgismaps.internal.jni.CoreLabelingInfo): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsLabelStackSeparator(): com.arcgismaps.internal.jni.CoreLabelStackSeparator;
					public getValueAsArcGISFeatureTable(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public setValueFromSymbolLayer(param0: com.arcgismaps.internal.jni.CoreSymbolLayer): void;
					public getValueAsCodedValueDescription(): com.arcgismaps.internal.jni.CoreCodedValueDescription;
					public static fromLegendInfo(param0: com.arcgismaps.internal.jni.CoreLegendInfo): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsMap(): com.arcgismaps.internal.jni.CoreMap;
					public setValueFromVectorMarkerSymbolElement(param0: com.arcgismaps.internal.jni.CoreVectorMarkerSymbolElement): void;
					public setValueFromDirectionMessage(param0: com.arcgismaps.internal.jni.CoreDirectionMessage): void;
					public getValueAsTravelMode(): com.arcgismaps.internal.jni.CoreTravelMode;
					public static fromPopupRelatedFeaturesSortOrder(param0: com.arcgismaps.internal.jni.CorePopupRelatedFeaturesSortOrder): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsIdentifyLayerResult(): com.arcgismaps.internal.jni.CoreIdentifyLayerResult;
					public setValueFromWMTSTileMatrixSet(param0: com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet): void;
					public static fromOfflineMapUpdatesInfo(param0: com.arcgismaps.internal.jni.CoreOfflineMapUpdatesInfo): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromOfflineMapCapabilities(param0: com.arcgismaps.internal.jni.CoreOfflineMapCapabilities): void;
					public getValueAsStatisticDefinition(): com.arcgismaps.internal.jni.CoreStatisticDefinition;
					public getValueAsTileImageFormat(): com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static fromTokenCredential(param0: com.arcgismaps.internal.jni.CoreTokenCredential): com.arcgismaps.internal.jni.CoreElement;
					public static fromHorizontalVerticalTransformationStep(param0: com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getValueAsInt32(): number;
					public getValueAsSymbolStyle(): com.arcgismaps.internal.jni.CoreSymbolStyle;
					public static fromDistanceSymbolRange(param0: com.arcgismaps.internal.jni.CoreDistanceSymbolRange): com.arcgismaps.internal.jni.CoreElement;
					public static fromLayer(param0: com.arcgismaps.internal.jni.CoreLayer): com.arcgismaps.internal.jni.CoreElement;
					public static fromRelatedFeatureQueryResult(param0: com.arcgismaps.internal.jni.CoreRelatedFeatureQueryResult): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromWFSFeatureTable(param0: com.arcgismaps.internal.jni.CoreWFSFeatureTable): void;
					public getValueAsNMEASatelliteInfo(): com.arcgismaps.internal.jni.CoreNMEASatelliteInfo;
					public static fromArcGISSublayer(param0: com.arcgismaps.internal.jni.CoreArcGISSublayer): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsClientResponse(): com.arcgismaps.internal.jni.CoreClientResponse;
					public setValueFromGeoprocessingFeatureSet(param0: com.arcgismaps.internal.jni.CoreGeoprocessingFeatureSet): void;
					public static fromLocatorAttribute(param0: com.arcgismaps.internal.jni.CoreLocatorAttribute): com.arcgismaps.internal.jni.CoreElement;
					public static fromImageFrame(param0: com.arcgismaps.internal.jni.CoreImageFrame): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsGeocodeResult(): com.arcgismaps.internal.jni.CoreGeocodeResult;
					public setValueFromDateTime(param0: com.arcgismaps.internal.jni.CoreDateTime): void;
					public getValueAsPopupExpression(): com.arcgismaps.internal.jni.CorePopupExpression;
					public getValueAsVectorTileCache(): com.arcgismaps.internal.jni.CoreVectorTileCache;
					public static fromSymbolStyle(param0: com.arcgismaps.internal.jni.CoreSymbolStyle): com.arcgismaps.internal.jni.CoreElement;
					public static fromGraphic(param0: com.arcgismaps.internal.jni.CoreGraphic): com.arcgismaps.internal.jni.CoreElement;
					public static fromSuggestResult(param0: com.arcgismaps.internal.jni.CoreSuggestResult): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFeatureSubtype(): com.arcgismaps.internal.jni.CoreFeatureSubtype;
					public getValueAsGeodatabaseDeltaInfo(): com.arcgismaps.internal.jni.CoreGeodatabaseDeltaInfo;
					public static fromDirectionEvent(param0: com.arcgismaps.internal.jni.CoreDirectionEvent): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsFieldDescription(): com.arcgismaps.internal.jni.CoreFieldDescription;
					public setValueFromKMLGeometry(param0: com.arcgismaps.internal.jni.CoreKMLGeometry): void;
					public setValueFromUtilityElement(param0: com.arcgismaps.internal.jni.CoreUtilityElement): void;
					public static fromGeodatabaseDeltaInfo(param0: com.arcgismaps.internal.jni.CoreGeodatabaseDeltaInfo): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsString(): string;
					public static fromError(param0: com.arcgismaps.internal.jni.CoreError): com.arcgismaps.internal.jni.CoreElement;
					public static fromLicenseInfo(param0: com.arcgismaps.internal.jni.CoreLicenseInfo): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsWMSLayerInfo(): com.arcgismaps.internal.jni.CoreWMSLayerInfo;
					public getValueAsUtilityRule(): com.arcgismaps.internal.jni.CoreUtilityRule;
					public static fromFeatureEditResult(param0: com.arcgismaps.internal.jni.CoreFeatureEditResult): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromRestrictionAttribute(param0: com.arcgismaps.internal.jni.CoreRestrictionAttribute): void;
					public getValueAsSuggestResult(): com.arcgismaps.internal.jni.CoreSuggestResult;
					public setValueFromAnalysis(param0: com.arcgismaps.internal.jni.CoreAnalysis): void;
					public getValueAsPortal(): com.arcgismaps.internal.jni.CorePortal;
					public getValueAsServiceAreaParameters(): com.arcgismaps.internal.jni.CoreServiceAreaParameters;
					public setValueFromRasterCell(param0: com.arcgismaps.internal.jni.CoreRasterCell): void;
					public static fromDownloadPreplannedOfflineMapParameters(param0: com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromServiceAreaPolyline(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolyline): void;
					public setValueFromInt8(param0: number): void;
					public setValueFromTimestampOffset(param0: com.arcgismaps.internal.jni.CoreTimestampOffset): void;
					public getValueAsRenderingRuleInfo(): com.arcgismaps.internal.jni.CoreRenderingRuleInfo;
					public setValueFromMapServiceImageFormat(param0: com.arcgismaps.internal.jni.CoreMapServiceImageFormat): void;
					public getValueAsPopupElement(): com.arcgismaps.internal.jni.CorePopupElement;
					public setValueFromTrackingStatus(param0: com.arcgismaps.internal.jni.CoreTrackingStatus): void;
					public static fromServiceAreaResult(param0: com.arcgismaps.internal.jni.CoreServiceAreaResult): com.arcgismaps.internal.jni.CoreElement;
					public static fromPopupField(param0: com.arcgismaps.internal.jni.CorePopupField): com.arcgismaps.internal.jni.CoreElement;
					public static fromPortal(param0: com.arcgismaps.internal.jni.CorePortal): com.arcgismaps.internal.jni.CoreElement;
					public static fromStatisticsQueryResult(param0: com.arcgismaps.internal.jni.CoreStatisticsQueryResult): com.arcgismaps.internal.jni.CoreElement;
					public static fromQueryParameters(param0: com.arcgismaps.internal.jni.CoreQueryParameters): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsSyncLayerOption(): com.arcgismaps.internal.jni.CoreSyncLayerOption;
					public getValueAsArcadeEvaluationResult(): com.arcgismaps.internal.jni.CoreArcadeEvaluationResult;
					public getValueAsUInt32(): number;
					public getValueAsRoute(): com.arcgismaps.internal.jni.CoreRoute;
					public setValueFromColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getValueAsContingency(): com.arcgismaps.internal.jni.CoreContingency;
					public setValueFromServiceFeatureTable(param0: com.arcgismaps.internal.jni.CoreServiceFeatureTable): void;
					public static fromGeometricEffect(param0: com.arcgismaps.internal.jni.CoreGeometricEffect): com.arcgismaps.internal.jni.CoreElement;
					public static fromIncident(param0: com.arcgismaps.internal.jni.CoreIncident): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsContingencyConstraintViolation(): com.arcgismaps.internal.jni.CoreContingencyConstraintViolation;
					public getValueAsDisplayFilter(): com.arcgismaps.internal.jni.CoreDisplayFilter;
					public getValueAsENCDataset(): com.arcgismaps.internal.jni.CoreENCDataset;
					public getValueAsGeotrigger(): com.arcgismaps.internal.jni.CoreGeotrigger;
					public setValueFromArray(param0: com.arcgismaps.internal.jni.CoreArray): void;
					public setValueFromJob(param0: com.arcgismaps.internal.jni.CoreJob): void;
					public static fromGUID(param0: com.arcgismaps.internal.jni.CoreGUID): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromUtilityTraceFunctionBarrier(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionBarrier): void;
					public static fromUInt32(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsUtilityTier(): com.arcgismaps.internal.jni.CoreUtilityTier;
					public getValueAsScaleRangeDisplayFilter(): com.arcgismaps.internal.jni.CoreScaleRangeDisplayFilter;
					public setValueFromServiceAreaParameters(param0: com.arcgismaps.internal.jni.CoreServiceAreaParameters): void;
					public static fromUtilityCategory(param0: com.arcgismaps.internal.jni.CoreUtilityCategory): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsLabelingInfo(): com.arcgismaps.internal.jni.CoreLabelingInfo;
					public getValueAsUtilityTraceResult(): com.arcgismaps.internal.jni.CoreUtilityTraceResult;
					public setValueFromSyncLayerOption(param0: com.arcgismaps.internal.jni.CoreSyncLayerOption): void;
					public getValueAsTimestampOffset(): com.arcgismaps.internal.jni.CoreTimestampOffset;
					public setValueFromLevelOfDetail(param0: com.arcgismaps.internal.jni.CoreLevelOfDetail): void;
					public setValueFromSymbolStyleSearchResult(param0: com.arcgismaps.internal.jni.CoreSymbolStyleSearchResult): void;
					public static fromOrderBy(param0: com.arcgismaps.internal.jni.CoreOrderBy): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsIdInfo(): com.arcgismaps.internal.jni.CoreIdInfo;
					public static fromKMLGeometry(param0: com.arcgismaps.internal.jni.CoreKMLGeometry): com.arcgismaps.internal.jni.CoreElement;
					public static fromFieldGroup(param0: com.arcgismaps.internal.jni.CoreFieldGroup): com.arcgismaps.internal.jni.CoreElement;
					public static fromCostAttribute(param0: com.arcgismaps.internal.jni.CoreCostAttribute): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromClosestFacilityResult(param0: com.arcgismaps.internal.jni.CoreClosestFacilityResult): void;
					public static fromUtilityNetwork(param0: com.arcgismaps.internal.jni.CoreUtilityNetwork): com.arcgismaps.internal.jni.CoreElement;
					public static fromBuffer(param0: androidNative.Array<number>): com.arcgismaps.internal.jni.CoreElement;
					public clear(): void;
					public setValueFromQueryParameters(param0: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public getValueAsUtilityTraceResultType(): com.arcgismaps.internal.jni.CoreUtilityTraceResultType;
					public static fromWMTSLayerInfo(param0: com.arcgismaps.internal.jni.CoreWMTSLayerInfo): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromSyncGeodatabaseParameters(param0: com.arcgismaps.internal.jni.CoreSyncGeodatabaseParameters): void;
					public static fromArcadeEvaluationResult(param0: com.arcgismaps.internal.jni.CoreArcadeEvaluationResult): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsLabelDefinition(): com.arcgismaps.internal.jni.CoreLabelDefinition;
					public setValueFromGenerateOfflineMapParameters(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters): void;
					public getValueAsServiceAreaPolyline(): com.arcgismaps.internal.jni.CoreServiceAreaPolyline;
					public static fromRelationshipInfo(param0: com.arcgismaps.internal.jni.CoreRelationshipInfo): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromGeodatabase(param0: com.arcgismaps.internal.jni.CoreGeodatabase): void;
					public setValueFromDateOnly(param0: com.arcgismaps.internal.jni.CoreDateOnly): void;
					public static fromGeotrigger(param0: com.arcgismaps.internal.jni.CoreGeotrigger): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsGeoprocessingParameterInfo(): com.arcgismaps.internal.jni.CoreGeoprocessingParameterInfo;
					public static fromAnalysisOverlay(param0: com.arcgismaps.internal.jni.CoreAnalysisOverlay): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromNMEASatelliteInfo(param0: com.arcgismaps.internal.jni.CoreNMEASatelliteInfo): void;
					public setValueFromUtilityAssetType(param0: com.arcgismaps.internal.jni.CoreUtilityAssetType): void;
					public static fromWMSSublayer(param0: com.arcgismaps.internal.jni.CoreWMSSublayer): com.arcgismaps.internal.jni.CoreElement;
					public static fromGeodatabaseFeatureTable(param0: com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromDatumTransformation(param0: com.arcgismaps.internal.jni.CoreDatumTransformation): void;
					public setValueFromFeatureSubtype(param0: com.arcgismaps.internal.jni.CoreFeatureSubtype): void;
					public static fromContingentValue(param0: com.arcgismaps.internal.jni.CoreContingentValue): com.arcgismaps.internal.jni.CoreElement;
					public setValueFromClosestFacilityParameters(param0: com.arcgismaps.internal.jni.CoreClosestFacilityParameters): void;
					public setValueFromAggregationFeatureReduction(param0: com.arcgismaps.internal.jni.CoreAggregationFeatureReduction): void;
					public static fromLocation(param0: com.arcgismaps.internal.jni.CoreLocation): com.arcgismaps.internal.jni.CoreElement;
					public getValueAsContingentValue(): com.arcgismaps.internal.jni.CoreContingentValue;
					public setValueFromImageOverlay(param0: com.arcgismaps.internal.jni.CoreImageOverlay): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreElementAddedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreElementAddedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreElementAddedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						elementAdded(param0: number, param1: com.arcgismaps.internal.jni.CoreElement): void;
					});
					public constructor();
					public elementAdded(param0: number, param1: com.arcgismaps.internal.jni.CoreElement): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreElementReference {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreElementReference>;
					public mHandle: number;
					public static createCoreElementReferenceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreElementReference;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public setValue(param0: com.arcgismaps.internal.jni.CoreElement): void;
					public getValue(): com.arcgismaps.internal.jni.CoreElement;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreElementRemovedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreElementRemovedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreElementRemovedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						elementRemoved(param0: number, param1: com.arcgismaps.internal.jni.CoreElement): void;
					});
					public constructor();
					public elementRemoved(param0: number, param1: com.arcgismaps.internal.jni.CoreElement): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreElementType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreElementType>;
					public static NONE: com.arcgismaps.internal.jni.CoreElementType;
					public static ARCGISFEATURE: com.arcgismaps.internal.jni.CoreElementType;
					public static ARCGISFEATURESERVICEINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static ARCGISMAPSERVICEINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static ARCGISSUBLAYER: com.arcgismaps.internal.jni.CoreElementType;
					public static ARRAY: com.arcgismaps.internal.jni.CoreElementType;
					public static ATTACHMENT: com.arcgismaps.internal.jni.CoreElementType;
					public static ATTRIBUTEPARAMETERVALUE: com.arcgismaps.internal.jni.CoreElementType;
					public static BASEMAP: com.arcgismaps.internal.jni.CoreElementType;
					public static BOOKMARK: com.arcgismaps.internal.jni.CoreElementType;
					public static BOOL: com.arcgismaps.internal.jni.CoreElementType;
					public static BUFFER: com.arcgismaps.internal.jni.CoreElementType;
					public static CLASSBREAK: com.arcgismaps.internal.jni.CoreElementType;
					public static CODEDVALUE: com.arcgismaps.internal.jni.CoreElementType;
					public static CLOSESTFACILITYPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static CLOSESTFACILITYRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static CLOSESTFACILITYROUTE: com.arcgismaps.internal.jni.CoreElementType;
					public static CLOSESTFACILITYTASK: com.arcgismaps.internal.jni.CoreElementType;
					public static COLOR: com.arcgismaps.internal.jni.CoreElementType;
					public static COSTATTRIBUTE: com.arcgismaps.internal.jni.CoreElementType;
					public static DATETIME: com.arcgismaps.internal.jni.CoreElementType;
					public static DICTIONARY: com.arcgismaps.internal.jni.CoreElementType;
					public static DIRECTIONEVENT: com.arcgismaps.internal.jni.CoreElementType;
					public static DIRECTIONMANEUVER: com.arcgismaps.internal.jni.CoreElementType;
					public static DIRECTIONMESSAGE: com.arcgismaps.internal.jni.CoreElementType;
					public static DISTANCESYMBOLRANGE: com.arcgismaps.internal.jni.CoreElementType;
					public static DOMAIN: com.arcgismaps.internal.jni.CoreElementType;
					public static EDITRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static ELEVATIONSOURCE: com.arcgismaps.internal.jni.CoreElementType;
					public static ESTIMATETILECACHESIZERESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static EXPORTTILECACHETASK: com.arcgismaps.internal.jni.CoreElementType;
					public static EXPORTTILECACHEPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static EXTENSIONLICENSE: com.arcgismaps.internal.jni.CoreElementType;
					public static FACILITY: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATURE: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATURECOLLECTION: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATURECOLLECTIONTABLE: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATUREEDITRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATUREQUERYRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATURETABLE: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATURETEMPLATE: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATURETYPE: com.arcgismaps.internal.jni.CoreElementType;
					public static FIELD: com.arcgismaps.internal.jni.CoreElementType;
					public static FLOAT32: com.arcgismaps.internal.jni.CoreElementType;
					public static FLOAT64: com.arcgismaps.internal.jni.CoreElementType;
					public static GENERATEGEODATABASEPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static GENERATELAYEROPTION: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOCODERESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static GEODATABASE: com.arcgismaps.internal.jni.CoreElementType;
					public static GEODATABASEFEATURETABLE: com.arcgismaps.internal.jni.CoreElementType;
					public static GEODATABASESYNCTASK: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOMETRY: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOPROCESSINGFEATURESET: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOPROCESSINGPARAMETER: com.arcgismaps.internal.jni.CoreElementType;
					public static GRAPHIC: com.arcgismaps.internal.jni.CoreElementType;
					public static GRAPHICSOVERLAY: com.arcgismaps.internal.jni.CoreElementType;
					public static GUID: com.arcgismaps.internal.jni.CoreElementType;
					public static IDENTIFYGRAPHICSOVERLAYRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static IDENTIFYLAYERRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static IDINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static IMAGE: com.arcgismaps.internal.jni.CoreElementType;
					public static INCIDENT: com.arcgismaps.internal.jni.CoreElementType;
					public static INT16: com.arcgismaps.internal.jni.CoreElementType;
					public static INT32: com.arcgismaps.internal.jni.CoreElementType;
					public static INT64: com.arcgismaps.internal.jni.CoreElementType;
					public static INT8: com.arcgismaps.internal.jni.CoreElementType;
					public static JOB: com.arcgismaps.internal.jni.CoreElementType;
					public static JOBMESSAGE: com.arcgismaps.internal.jni.CoreElementType;
					public static KMLNODE: com.arcgismaps.internal.jni.CoreElementType;
					public static KMLGEOMETRY: com.arcgismaps.internal.jni.CoreElementType;
					public static LABELINGINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static LAYER: com.arcgismaps.internal.jni.CoreElementType;
					public static LEGENDINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static LEVELOFDETAIL: com.arcgismaps.internal.jni.CoreElementType;
					public static LOADABLEIMAGE: com.arcgismaps.internal.jni.CoreElementType;
					public static LOCATORATTRIBUTE: com.arcgismaps.internal.jni.CoreElementType;
					public static LOCATORTASK: com.arcgismaps.internal.jni.CoreElementType;
					public static MAP: com.arcgismaps.internal.jni.CoreElementType;
					public static MOBILEBASEMAPLAYER: com.arcgismaps.internal.jni.CoreElementType;
					public static MOBILEMAPPACKAGE: com.arcgismaps.internal.jni.CoreElementType;
					public static MODELSCENESYMBOL: com.arcgismaps.internal.jni.CoreElementType;
					public static ORDERBY: com.arcgismaps.internal.jni.CoreElementType;
					public static PICTUREMARKERSYMBOL: com.arcgismaps.internal.jni.CoreElementType;
					public static POINTBARRIER: com.arcgismaps.internal.jni.CoreElementType;
					public static POLYGONBARRIER: com.arcgismaps.internal.jni.CoreElementType;
					public static POLYLINEBARRIER: com.arcgismaps.internal.jni.CoreElementType;
					public static POPUP: com.arcgismaps.internal.jni.CoreElementType;
					public static POPUPFIELD: com.arcgismaps.internal.jni.CoreElementType;
					public static POPUPMEDIA: com.arcgismaps.internal.jni.CoreElementType;
					public static PORTAL: com.arcgismaps.internal.jni.CoreElementType;
					public static PORTALITEM: com.arcgismaps.internal.jni.CoreElementType;
					public static RASTER: com.arcgismaps.internal.jni.CoreElementType;
					public static REQUESTATTACHMENT: com.arcgismaps.internal.jni.CoreElementType;
					public static RESTRICTIONATTRIBUTE: com.arcgismaps.internal.jni.CoreElementType;
					public static ROUTE: com.arcgismaps.internal.jni.CoreElementType;
					public static ROUTEPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static ROUTERESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static ROUTETASK: com.arcgismaps.internal.jni.CoreElementType;
					public static SCENE: com.arcgismaps.internal.jni.CoreElementType;
					public static SERVICEAREAFACILITY: com.arcgismaps.internal.jni.CoreElementType;
					public static SERVICEAREAPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static SERVICEAREAPOLYGON: com.arcgismaps.internal.jni.CoreElementType;
					public static SERVICEAREAPOLYLINE: com.arcgismaps.internal.jni.CoreElementType;
					public static SERVICEAREARESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static SERVICEAREATASK: com.arcgismaps.internal.jni.CoreElementType;
					public static STOP: com.arcgismaps.internal.jni.CoreElementType;
					public static STRING: com.arcgismaps.internal.jni.CoreElementType;
					public static SUGGESTRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static SURFACE: com.arcgismaps.internal.jni.CoreElementType;
					public static SYMBOL: com.arcgismaps.internal.jni.CoreElementType;
					public static SYMBOLSTYLE: com.arcgismaps.internal.jni.CoreElementType;
					public static SYMBOLSTYLESEARCHPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static SYMBOLSTYLESEARCHRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static SYNCGEODATABASEPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static SYNCLAYEROPTION: com.arcgismaps.internal.jni.CoreElementType;
					public static SYNCLAYERRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static TILECACHE: com.arcgismaps.internal.jni.CoreElementType;
					public static TRANSPORTATIONNETWORKDATASET: com.arcgismaps.internal.jni.CoreElementType;
					public static TRAVELMODE: com.arcgismaps.internal.jni.CoreElementType;
					public static UINT16: com.arcgismaps.internal.jni.CoreElementType;
					public static UINT32: com.arcgismaps.internal.jni.CoreElementType;
					public static UINT64: com.arcgismaps.internal.jni.CoreElementType;
					public static UINT8: com.arcgismaps.internal.jni.CoreElementType;
					public static UNIQUEVALUE: com.arcgismaps.internal.jni.CoreElementType;
					public static VARIANT: com.arcgismaps.internal.jni.CoreElementType;
					public static VECTOR: com.arcgismaps.internal.jni.CoreElementType;
					public static VECTORTILESOURCEINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOPROCESSINGPARAMETERINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOPROCESSINGTASK: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOPROCESSINGPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static WMTSLAYERINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static WMTSSERVICEINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static WMTSTILEMATRIX: com.arcgismaps.internal.jni.CoreElementType;
					public static WMTSTILEMATRIXSET: com.arcgismaps.internal.jni.CoreElementType;
					public static TILEIMAGEFORMAT: com.arcgismaps.internal.jni.CoreElementType;
					public static OFFLINEMAPTASK: com.arcgismaps.internal.jni.CoreElementType;
					public static EXPORTVECTORTILESTASK: com.arcgismaps.internal.jni.CoreElementType;
					public static EXPORTVECTORTILESPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static ARCGISFEATURETABLE: com.arcgismaps.internal.jni.CoreElementType;
					public static RELATIONSHIPINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static RELATEDFEATUREQUERYRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static WMTSSERVICE: com.arcgismaps.internal.jni.CoreElementType;
					public static ERROR: com.arcgismaps.internal.jni.CoreElementType;
					public static SERVICEFEATURETABLE: com.arcgismaps.internal.jni.CoreElementType;
					public static GENERATEOFFLINEMAPPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static PICTUREFILLSYMBOL: com.arcgismaps.internal.jni.CoreElementType;
					public static OFFLINECAPABILITY: com.arcgismaps.internal.jni.CoreElementType;
					public static OFFLINEMAPCAPABILITIES: com.arcgismaps.internal.jni.CoreElementType;
					public static RENDERINGRULEINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static LABELDEFINITION: com.arcgismaps.internal.jni.CoreElementType;
					public static RELATIONSHIPCONSTRAINTVIOLATION: com.arcgismaps.internal.jni.CoreElementType;
					public static OFFLINEMAPSYNCTASK: com.arcgismaps.internal.jni.CoreElementType;
					public static OFFLINEMAPSYNCLAYERRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static POPUPRELATEDFEATURESSORTORDER: com.arcgismaps.internal.jni.CoreElementType;
					public static STATISTICDEFINITION: com.arcgismaps.internal.jni.CoreElementType;
					public static STATISTICSQUERYRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static STATISTICRECORD: com.arcgismaps.internal.jni.CoreElementType;
					public static KMLDATASET: com.arcgismaps.internal.jni.CoreElementType;
					public static PREPLANNEDMAPAREA: com.arcgismaps.internal.jni.CoreElementType;
					public static WMSSERVICE: com.arcgismaps.internal.jni.CoreElementType;
					public static WMSSERVICEINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static WMSLAYERINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static MAPSERVICEIMAGEFORMAT: com.arcgismaps.internal.jni.CoreElementType;
					public static SPATIALREFERENCE: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOPACKAGE: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOPACKAGEFEATURETABLE: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOPACKAGERASTER: com.arcgismaps.internal.jni.CoreElementType;
					public static WMSSUBLAYER: com.arcgismaps.internal.jni.CoreElementType;
					public static VECTORTILECACHE: com.arcgismaps.internal.jni.CoreElementType;
					public static ANALYSIS: com.arcgismaps.internal.jni.CoreElementType;
					public static ANALYSISOVERLAY: com.arcgismaps.internal.jni.CoreElementType;
					public static ITEMRESOURCECACHE: com.arcgismaps.internal.jni.CoreElementType;
					public static WMSFEATURE: com.arcgismaps.internal.jni.CoreElementType;
					public static NMEASATELLITEINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static SYMBOLLAYER: com.arcgismaps.internal.jni.CoreElementType;
					public static VECTORMARKERSYMBOLELEMENT: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOMETRICEFFECT: com.arcgismaps.internal.jni.CoreElementType;
					public static PICTUREMARKERSYMBOLLAYER: com.arcgismaps.internal.jni.CoreElementType;
					public static PICTUREFILLSYMBOLLAYER: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATURESUBTYPE: com.arcgismaps.internal.jni.CoreElementType;
					public static LABELSTACKSEPARATOR: com.arcgismaps.internal.jni.CoreElementType;
					public static WFSSERVICE: com.arcgismaps.internal.jni.CoreElementType;
					public static WFSLAYERINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static OFFLINEMAPPARAMETERSKEY: com.arcgismaps.internal.jni.CoreElementType;
					public static GENERATEOFFLINEMAPPARAMETEROVERRIDES: com.arcgismaps.internal.jni.CoreElementType;
					public static QUERYPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static STATISTICSQUERYPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static ROUTETRACKER: com.arcgismaps.internal.jni.CoreElementType;
					public static WFSFEATURETABLE: com.arcgismaps.internal.jni.CoreElementType;
					public static DOWNLOADPREPLANNEDOFFLINEMAPPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static ANNOTATIONSUBLAYER: com.arcgismaps.internal.jni.CoreElementType;
					public static OFFLINEMAPSYNCPARAMETERS: com.arcgismaps.internal.jni.CoreElementType;
					public static OFFLINEMAPUPDATESINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static DICTIONARYSYMBOLSTYLECONFIGURATION: com.arcgismaps.internal.jni.CoreElementType;
					public static LOCATION: com.arcgismaps.internal.jni.CoreElementType;
					public static IMAGEFRAME: com.arcgismaps.internal.jni.CoreElementType;
					public static IMAGEOVERLAY: com.arcgismaps.internal.jni.CoreElementType;
					public static GEODATABASEDELTAINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static DATEONLY: com.arcgismaps.internal.jni.CoreElementType;
					public static TIMEONLY: com.arcgismaps.internal.jni.CoreElementType;
					public static TIMESTAMPOFFSET: com.arcgismaps.internal.jni.CoreElementType;
					public static OGCFEATURESERVICE: com.arcgismaps.internal.jni.CoreElementType;
					public static OGCFEATURECOLLECTIONINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static OGCFEATURECOLLECTIONTABLE: com.arcgismaps.internal.jni.CoreElementType;
					public static DATUMTRANSFORMATION: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOGRAPHICTRANSFORMATIONSTEP: com.arcgismaps.internal.jni.CoreElementType;
					public static HORIZONTALVERTICALTRANSFORMATIONSTEP: com.arcgismaps.internal.jni.CoreElementType;
					public static ENCCELL: com.arcgismaps.internal.jni.CoreElementType;
					public static ENCDATASET: com.arcgismaps.internal.jni.CoreElementType;
					public static ENCEXCHANGESET: com.arcgismaps.internal.jni.CoreElementType;
					public static ENCFEATURE: com.arcgismaps.internal.jni.CoreElementType;
					public static MOBILESCENEPACKAGE: com.arcgismaps.internal.jni.CoreElementType;
					public static POPUPEXPRESSION: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYNETWORK: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYASSETTYPE: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYASSETGROUP: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYCATEGORY: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTERMINAL: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYNETWORKATTRIBUTE: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYNETWORKSOURCE: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYELEMENT: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTRACERESULTTYPE: com.arcgismaps.internal.jni.CoreElementType;
					public static TRACKINGSTATUS: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTRACERESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYDOMAINNETWORK: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTERMINALCONFIGURATION: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTIER: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTIERGROUP: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYPROPAGATOR: com.arcgismaps.internal.jni.CoreElementType;
					public static SUBTYPESUBLAYER: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYASSOCIATION: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTRACEFUNCTIONBARRIER: com.arcgismaps.internal.jni.CoreElementType;
					public static LICENSEINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static RASTERCELL: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTERMINALPATH: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTERMINALCONFIGURATIONPATH: com.arcgismaps.internal.jni.CoreElementType;
					public static POPUPEXPRESSIONEVALUATION: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTRACEFUNCTION: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYFUNCTIONTRACERESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYTRACEFUNCTIONOUTPUT: com.arcgismaps.internal.jni.CoreElementType;
					public static SERVICEVERSIONINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYGEOMETRYTRACERESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static FEATURETABLEEDITRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYNAMEDTRACECONFIGURATION: com.arcgismaps.internal.jni.CoreElementType;
					public static WIFIREADING: com.arcgismaps.internal.jni.CoreElementType;
					public static LOCALFEATUREEDIT: com.arcgismaps.internal.jni.CoreElementType;
					public static FLOORFACILITY: com.arcgismaps.internal.jni.CoreElementType;
					public static FLOORLEVEL: com.arcgismaps.internal.jni.CoreElementType;
					public static FLOORSITE: com.arcgismaps.internal.jni.CoreElementType;
					public static LOCALFEATUREEDITSRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static GEOTRIGGER: com.arcgismaps.internal.jni.CoreElementType;
					public static DISPLAYFILTER: com.arcgismaps.internal.jni.CoreElementType;
					public static SCALERANGEDISPLAYFILTER: com.arcgismaps.internal.jni.CoreElementType;
					public static CONTINGENCY: com.arcgismaps.internal.jni.CoreElementType;
					public static CONTINGENCYCONSTRAINTVIOLATION: com.arcgismaps.internal.jni.CoreElementType;
					public static CONTINGENTVALUE: com.arcgismaps.internal.jni.CoreElementType;
					public static FIELDGROUP: com.arcgismaps.internal.jni.CoreElementType;
					public static ARCADEEVALUATIONRESULT: com.arcgismaps.internal.jni.CoreElementType;
					public static SERVICEGEODATABASE: com.arcgismaps.internal.jni.CoreElementType;
					public static POPUPELEMENT: com.arcgismaps.internal.jni.CoreElementType;
					public static FIELDDESCRIPTION: com.arcgismaps.internal.jni.CoreElementType;
					public static CODEDVALUEDESCRIPTION: com.arcgismaps.internal.jni.CoreElementType;
					public static DYNAMICENTITYOBSERVATION: com.arcgismaps.internal.jni.CoreElementType;
					public static POPUPATTACHMENT: com.arcgismaps.internal.jni.CoreElementType;
					public static LICENSESTATUS: com.arcgismaps.internal.jni.CoreElementType;
					public static ARCGISTOKENINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static TOKENINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static TOKENCREDENTIAL: com.arcgismaps.internal.jni.CoreElementType;
					public static CLIENTRESPONSE: com.arcgismaps.internal.jni.CoreElementType;
					public static CLIENTREFERENCE: com.arcgismaps.internal.jni.CoreElementType;
					public static ARCGISCREDENTIAL: com.arcgismaps.internal.jni.CoreElementType;
					public static OAUTHUSERTOKENINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static OAUTHUSERCREDENTIAL: com.arcgismaps.internal.jni.CoreElementType;
					public static DYNAMICENTITY: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYRULE: com.arcgismaps.internal.jni.CoreElementType;
					public static OAUTHAPPLICATIONTOKENINFO: com.arcgismaps.internal.jni.CoreElementType;
					public static OAUTHAPPLICATIONCREDENTIAL: com.arcgismaps.internal.jni.CoreElementType;
					public static AGGREGATEFIELD: com.arcgismaps.internal.jni.CoreElementType;
					public static AGGREGATEGEOELEMENT: com.arcgismaps.internal.jni.CoreElementType;
					public static FORMELEMENT: com.arcgismaps.internal.jni.CoreElementType;
					public static UTILITYNETWORKSTATE: com.arcgismaps.internal.jni.CoreElementType;
					public static AGGREGATIONFEATUREREDUCTION: com.arcgismaps.internal.jni.CoreElementType;
					public static GEBUILDINGSCENELAYERATTRIBUTESTATISTICS: com.arcgismaps.internal.jni.CoreElementType;
					public static FORMEXPRESSIONEVALUATIONERROR: com.arcgismaps.internal.jni.CoreElementType;
					public static SNAPSOURCESETTINGS: com.arcgismaps.internal.jni.CoreElementType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreElementType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreElementType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreElementType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreElevationSource implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreElevationSource>;
					public mHandle: number;
					public getIsEnabled(): boolean;
					public finalize(): void;
					public setIsEnabled(param0: boolean): void;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public static createCoreElevationSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreElevationSource;
					public setName(param0: string): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreElevationSource;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getObjectType(): com.arcgismaps.internal.jni.CoreElevationSourceType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreElevationSourceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreElevationSourceType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreElevationSourceType;
					public static ARCGISTILEDELEVATIONSOURCE: com.arcgismaps.internal.jni.CoreElevationSourceType;
					public static RASTERELEVATIONSOURCE: com.arcgismaps.internal.jni.CoreElevationSourceType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreElevationSourceType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreElevationSourceType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreElevationSourceType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEllipticArcSegment extends com.arcgismaps.internal.jni.CoreSegment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEllipticArcSegment>;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint, param2: number, param3: boolean, param4: boolean, param5: number, param6: number, param7: com.arcgismaps.internal.jni.CoreSpatialReference);
					public getSemiMinorAxis(): number;
					public static createCircularEllipticArcWithStartEndAndInterior(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint, param2: com.arcgismaps.internal.jni.CorePoint, param3: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreEllipticArcSegment;
					public getCenterPoint(): com.arcgismaps.internal.jni.CorePoint;
					public getCentralAngle(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.arcgismaps.internal.jni.CoreSpatialReference);
					public getIsCircular(): boolean;
					public static createCircularEllipticArcWithCenterRadiusAndAngles(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number, param4: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreEllipticArcSegment;
					public getMinorMajorRatio(): number;
					public getStartAngle(): number;
					public constructor();
					public getIsCounterClockwise(): boolean;
					public getRotationAngle(): number;
					public getSemiMajorAxis(): number;
					public getEndAngle(): number;
					public static createCoreEllipticArcSegmentFromHandle(param0: number): com.arcgismaps.internal.jni.CoreEllipticArcSegment;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEnableSensorRequestCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEnableSensorRequestCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreEnableSensorRequestCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						enableSensorRequest(param0: com.arcgismaps.internal.jni.CoreSensorType): void;
					});
					public constructor();
					public enableSensorRequest(param0: com.arcgismaps.internal.jni.CoreSensorType): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEnsureOnlineMapHasRequestHandlerCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEnsureOnlineMapHasRequestHandlerCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreEnsureOnlineMapHasRequestHandlerCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						ensureOnlineMapHasRequestHandler(): void;
					});
					public constructor();
					public ensureOnlineMapHasRequestHandler(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEnsurePortalItemHasRequestHandlerCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEnsurePortalItemHasRequestHandlerCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreEnsurePortalItemHasRequestHandlerCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						ensurePortalItemHasRequestHandler(): void;
					});
					public constructor();
					public ensurePortalItemHasRequestHandler(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEnvelope extends com.arcgismaps.internal.jni.CoreGeometry {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEnvelope>;
					public getMMax(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: com.arcgismaps.internal.jni.CoreSpatialReference);
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number);
					public getXMin(): number;
					public getYMax(): number;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getCenter(): com.arcgismaps.internal.jni.CorePoint;
					public static createWithMSpatialReference(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreEnvelope;
					public constructor();
					public toJSON(): string;
					public getYMin(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number);
					public static createCoreEnvelopeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreEnvelope;
					public static createWithZMSpatialReference(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreEnvelope;
					public getHeight(): number;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.arcgismaps.internal.jni.CoreSpatialReference);
					public getWidth(): number;
					public getZMax(): number;
					public getMMin(): number;
					public getXMax(): number;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public static createWithM(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): com.arcgismaps.internal.jni.CoreEnvelope;
					public getZMin(): number;
					public static createWithZM(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): com.arcgismaps.internal.jni.CoreEnvelope;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint);
					public getDepth(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEnvelopeBuilder extends com.arcgismaps.internal.jni.CoreGeometryBuilder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEnvelopeBuilder>;
					public getMMax(): number;
					public setXY(param0: number, param1: number, param2: number, param3: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number);
					public setZ(param0: number, param1: number): void;
					public setZMax(param0: number): void;
					public setXMin(param0: number): void;
					public unionWithPoint(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public offsetBy(param0: number, param1: number): void;
					public expandAtAnchor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number): void;
					public setM(param0: number, param1: number): void;
					public static createCoreEnvelopeBuilderFromHandle(param0: number): com.arcgismaps.internal.jni.CoreEnvelopeBuilder;
					public getXMin(): number;
					public normalize(): void;
					public getYMax(): number;
					public getCenter(): com.arcgismaps.internal.jni.CorePoint;
					public setYMax(param0: number): void;
					public constructor();
					public setYMin(param0: number): void;
					public getYMin(): number;
					public expand(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number);
					public setZMin(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public centerAt(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreEnvelope);
					public getHeight(): number;
					public getWidth(): number;
					public getZMax(): number;
					public getMMin(): number;
					public unionWithEnvelope(param0: com.arcgismaps.internal.jni.CoreEnvelope): void;
					public getXMax(): number;
					public changeAspectRatio(param0: number, param1: number): void;
					public normalizeToEnvelope(param0: com.arcgismaps.internal.jni.CoreEnvelope): void;
					public getZMin(): number;
					public setMMax(param0: number): void;
					public adjustForWrapAround(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getDepth(): number;
					public setXMax(param0: number): void;
					public setMMin(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreError {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreError>;
					public mHandle: number;
					public getUserDefinedFailure(): any;
					public getDomain(): com.arcgismaps.internal.jni.CoreErrorDomainType;
					public finalize(): void;
					public dispose(): void;
					public getAdditionalMessage(): string;
					public getAdditionalInformation(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getUnderlyingError(): com.arcgismaps.internal.jni.CoreError;
					public close(): void;
					public getMessage(): string;
					public static createCoreErrorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreError;
					public getHandle(): number;
					public getCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreErrorChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreErrorChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreErrorChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						errorChanged(param0: com.arcgismaps.internal.jni.CoreError): void;
					});
					public constructor();
					public errorChanged(param0: com.arcgismaps.internal.jni.CoreError): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreErrorDomainType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreErrorDomainType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreErrorDomainType;
					public static ARCGISRUNTIME: com.arcgismaps.internal.jni.CoreErrorDomainType;
					public static ARCGISSERVER: com.arcgismaps.internal.jni.CoreErrorDomainType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreErrorDomainType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreErrorDomainType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreErrorDomainType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreErrorType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreErrorType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreErrorType;
					public static SUCCESS: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONNULLPTR: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONINVALIDARGUMENT: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONNOTIMPLEMENTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONOUTOFRANGE: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONINVALIDACCESS: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONILLEGALSTATE: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONNOTFOUND: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONEXISTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONTIMEOUT: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONREGULAREXPRESSION: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONPROPERTYNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONNOPERMISSION: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONFILE: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONFILENOTFOUND: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONINVALIDCALL: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONIO: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONUSERCANCELED: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONINTERNALERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONCONVERSIONFAILED: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONNODATA: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONINVALIDJSON: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONUSERDEFINEDFAILURE: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONBADXML: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONOBJECTALREADYOWNED: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONEXPIRED: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONNULLABILITYVIOLATION: com.arcgismaps.internal.jni.CoreErrorType;
					public static COMMONINVALIDPROPERTY: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEINTERNAL: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEPERM: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEABORT: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEBUSY: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITELOCKED: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITENOMEM: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEREADONLY: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEINTERRUPT: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEIOERR: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITECORRUPT: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITENOTFOUND: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEFULL: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITECANTOPEN: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEPROTOCOL: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEEMPTY: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITESCHEMA: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITETOOBIG: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITECONSTRAINT: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEMISMATCH: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEMISUSE: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITENOLFS: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEAUTH: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEFORMAT: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITERANGE: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITENOTADATABASE: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITENOTICE: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEWARNING: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEROW: com.arcgismaps.internal.jni.CoreErrorType;
					public static SQLITEDONE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYUNKNOWNERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYCORRUPTEDGEOMETRY: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYEMPTYGEOMETRY: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYMATHSINGULARITY: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYBUFFERISTOOSMALL: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYINVALIDSHAPETYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYPROJECTIONOUTOFSUPPORTEDRANGE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYNONSIMPLEGEOMETRY: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYCANNOTCALCULATEGEODESIC: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYNOTATIONCONVERSION: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOMETRYMISSINGGRIDFILE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEVALUEOUTOFRANGE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEDATATYPEMISMATCH: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEBADXML: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEDATABASEALREADYEXISTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEDATABASEDOESNOTEXIST: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASENAMELONGERTHAN128CHARACTERS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEINVALIDSHAPETYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASERASTERNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASERELATIONSHIPCLASSONETOONE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEITEMNOTFOUND: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEDUPLICATECODE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEMISSINGCODE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEWRONGITEMTYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEIDFIELDNOTNULLABLE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEDEFAULTVALUENOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASETABLENOTEDITABLE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEFIELDNOTFOUND: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEFIELDEXISTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTALTERFIELDTYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTALTERFIELDWIDTH: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTALTERFIELDTONULLABLE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTALTERFIELDTOEDITABLE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTALTERFIELDTODELETABLE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTALTERGEOMETRYPROPERTIES: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEUNNAMEDTABLE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEINVALIDTYPEFORDOMAIN: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEMINMAXREVERSED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEFIELDNOTSUPPORTEDONRELATIONSHIPCLASS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASERELATIONSHIPCLASSKEY: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEVALUEISNULL: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEMULTIPLESQLSTATEMENTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASENOSQLSTATEMENTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEGEOMETRYFIELDMISSING: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASETRANSACTIONSTARTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASETRANSACTIONNOTSTARTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESHAPEREQUIRESZ: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESHAPEREQUIRESM: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESHAPENOZ: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESHAPENOM: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESHAPEWRONGTYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTUPDATEFIELDTYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASENOROWSAFFECTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESUBTYPEINVALID: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESUBTYPEMUSTBEINTEGER: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESUBTYPESNOTENABLED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESUBTYPEEXISTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEDUPLICATEFIELDNOTALLOWED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTDELETEFIELD: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEINDEXEXISTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEINDEXNOTFOUND: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECURSORNOTONROW: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEINTERNALERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTWRITEGEODATABASEMANAGEDFIELDS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEITEMALREADYEXISTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEINVALIDSPATIALINDEXNAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEREQUIRESSPATIALINDEX: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASERESERVEDNAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTUPDATESCHEMAIFCHANGETRACKING: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEINVALIDDATE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEDATABASEDOESNOTHAVECHANGES: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEREPLICADOESNOTEXIST: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASESTORAGETYPENOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEREPLICAMODELERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEREPLICACLIENTGENERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEREPLICANOUPLOADTOACKNOWLEDGE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASELASTWRITETIMEINTHEFUTURE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEINVALIDARGUMENT: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASETRANSPORTATIONNETWORKCORRUPT: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASETRANSPORTATIONNETWORKFILEIO: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEFEATUREHASPENDINGEDITS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECHANGETRACKINGNOTENABLED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASETRANSPORTATIONNETWORKFILEOPEN: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASETRANSPORTATIONNETWORKUNSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECANNOTSYNCCOPY: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEACCESSCONTROLDENIED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEGEOMETRYOUTSIDEREPLICAEXTENT: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEUPLOADALREADYINPROGRESS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEDATABASECLOSED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEDOMAINALREADYEXISTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEGEOMETRYTYPENOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEATTACHMENTSREQUIREGLOBALIDS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASECONSTRAINTRULEVIOLATION: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEMAXRULEEVALUATIONLEVELEXCEEDED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEUNSUPPORTEDVERSION: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASETRANSPORTATIONNETWORKUNSUPPORTEDEVALUATOR: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEODATABASEGLOBALIDSUPPORTMISMATCH: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEUNSUPPORTEDFILEFORMAT: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEUNSUPPORTEDSPATIALREFERENCE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEUNSUPPORTEDPROJECTIONTRANSFORMATION: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEGEOCODERCREATION: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEINTERSECTIONSNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEUNINITIALIZEDGEOCODETASK: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEINVALIDLOCATORPROPERTIES: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEREQUIREDFIELDMISSING: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODECANNOTREADADDRESS: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEREVERSEGEOCODINGNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODEGEOMETRYTYPENOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODESUGGESTADDRESSNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOCODESUGGESTRESULTCORRUPTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDROUTESETTINGS: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTNOSOLUTION: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTTASKCANCELED: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDNETWORK: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTDIRECTIONSERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINSUFFICIENTNUMBEROFSTOPS: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTSTOPUNLOCATED: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTSTOPLOCATEDONNONTRAVERSABLEELEMENT: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTPOINTBARRIERINVALIDADDEDCOSTATTRIBUTENAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTLINEBARRIERINVALIDSCALEDCOSTATTRIBUTENAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTPOLYGONBARRIERINVALIDSCALEDCOSTATTRIBUTENAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTPOLYGONBARRIERINVALIDSCALEDCOSTATTRIBUTEVALUE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTPOLYLINEBARRIERINVALIDSCALEDCOSTATTRIBUTEVALUE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDIMPEDANCEATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDRESTRICTIONATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDACCUMULATEATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDDIRECTIONSTIMEATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDDIRECTIONSDISTANCEATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDATTRIBUTEPARAMETERSATTRIBUTENAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDATTRIBUTEPARAMETERSPARAMETERNAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDATTRIBUTEPARAMETERSVALUETYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDATTRIBUTEPARAMETERSRESTRICTIONUSAGEVALUE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTNETWORKHASNOHIERARCHYATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTNOPATHFOUNDBETWEENSTOPS: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTUNDEFINEDINPUTSPATIALREFERENCE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTUNDEFINEDOUTPUTSPATIALREFERENCE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDDIRECTIONSSTYLE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDDIRECTIONSLANGUAGE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTDIRECTIONSTIMEANDIMPEDANCEATTRIBUTEMISMATCH: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDDIRECTIONSROADCLASSATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTSTOPISUNREACHABLE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTSTOPTIMEWINDOWSTARTSBEFOREUNIXEPOCH: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTSTOPTIMEWINDOWISINVERTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTWALKINGMODEROUTETOOLARGE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTSTOPHASNULLGEOMETRY: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTPOINTBARRIERHASNULLGEOMETRY: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTPOLYLINEBARRIERHASNULLGEOMETRY: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTPOLYGONBARRIERHASNULLGEOMETRY: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTUNSUPPORTEDSEARCHWHERECLAUSE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINSUFFICIENTNUMBEROFFACILITIES: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTFACILITYHASNULLGEOMETRY: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTFACILITYHASINVALIDADDEDCOSTATTRIBUTENAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTFACILITYHASNEGATIVEADDEDCOSTATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTFACILITYHASINVALIDIMPEDANCECUTOFF: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINSUFFICIENTNUMBEROFINCIDENTS: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINCIDENTHASNULLGEOMETRY: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINCIDENTHASINVALIDADDEDCOSTATTRIBUTENAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINCIDENTHASNEGATIVEADDEDCOSTATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDTARGETFACILITYCOUNT: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINCIDENTHASINVALIDIMPEDANCECUTOFF: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTSTARTTIMEISBEFOREUNIXEPOCH: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDDEFAULTIMPEDANCECUTOFF: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDDEFAULTTARGETFACILITYCOUNT: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDPOLYGONBUFFERDISTANCE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTPOLYLINESCANNOTBERETURNED: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTTIMEWINDOWSWITHNONTIMEIMPEDANCE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTUNSUPPORTEDSTOPTYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTROUTESTARTSORENDSONWAYPOINT: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTWAYPOINTSANDRESTBREAKSFORBIDDENREORDERING: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTWAYPOINTHASTIMEWINDOWS: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTWAYPOINTHASADDEDCOSTATTRIBUTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTSTOPHASINVALIDCURBAPPROACH: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTPOINTBARRIERHASINVALIDCURBAPPROACH: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTFACILITYHASINVALIDCURBAPPROACH: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINCIDENTHASINVALIDCURBAPPROACH: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTNETWORKDOESNOTSUPPORTDIRECTIONS: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTDIRECTIONSLANGUAGENOTFOUND: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTROUTERESULTCANNOTBEUPDATED: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTNODIRECTIONS: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTNOSTOPS: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDROUTEINDEX: com.arcgismaps.internal.jni.CoreErrorType;
					public static NETWORKANALYSTINVALIDREMAININGDESTINATIONSCOUNT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDTOKEN: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDCHARACTER: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDUNICODE: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDJSONSTART: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDENDOFPAIR: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDENDOFELEMENT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDESCAPESEQUENCE: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDENDOFFIELDNAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDSTARTOFFIELDNAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDSTARTOFCOMMENT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDDECDIGIT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERINVALIDHEXDIGIT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSEREXPECTINGNULL: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSEREXPECTINGTRUE: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSEREXPECTINGFALSE: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSEREXPECTINGCLOSINGQUOTE: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSEREXPECTINGNAN: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSEREXPECTINGENDOFCOMMENT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONPARSERUNEXPECTEDENDOFDATA: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTEXPECTINGSTARTOBJECT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTEXPECTINGSTARTARRAY: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTEXPECTINGVALUEOBJECT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTEXPECTINGVALUEARRAY: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTEXPECTINGVALUEINT32: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTEXPECTINGINTEGERTYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTEXPECTINGNUMBERTYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTEXPECTINGVALUESTRING: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTEXPECTINGVALUEBOOL: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTITERATORNOTSTARTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTITERATORISFINISHED: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTKEYNOTFOUND: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONOBJECTINDEXOUTOFRANGE: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONSTRINGWRITERJSONISCOMPLETE: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONSTRINGWRITERINVALIDJSONINPUT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONSTRINGWRITEREXPECTINGCONTAINER: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONSTRINGWRITEREXPECTINGKEYORENDOBJECT: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONSTRINGWRITEREXPECTINGVALUEORENDARRAY: com.arcgismaps.internal.jni.CoreErrorType;
					public static JSONSTRINGWRITEREXPECTINGVALUE: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGMISSINGSPATIALREFERENCE: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGMISSINGINITIALVIEWPOINT: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGINVALIDRESPONSE: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGMISSINGBINGMAPSKEY: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGUNSUPPORTEDLAYERTYPE: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGSYNCNOTENABLED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGTILEEXPORTNOTENABLED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGMISSINGITEMPROPERTY: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGWEBMAPNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGSPATIALREFERENCEINVALID: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGPACKAGEUNPACKREQUIRED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGUNSUPPORTEDELEVATIONFORMAT: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGWEBSCENENOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGNOTLOADED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGSCHEDULEDUPDATESNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGUTILITYNETWORKTRACEFAILED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGINVALIDARCADEEXPRESSION: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGUTILITYNETWORKTOOMANYASSOCIATIONS: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGMAXFEATURECOUNTEXCEEDED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGBRANCHVERSIONINGNOTSUPPORTEDBYSERVICE: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGPACKAGINGNOTCOMPLETE: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGSYNCDIRECTIONUPLOADNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGTILECACHECOMPACTV2EXPORTNOTENABLED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGLAYERDOESNOTINTERSECTAREAOFINTEREST: com.arcgismaps.internal.jni.CoreErrorType;
					public static MAPPINGSCHEDULEDUPDATEUPLOADREQUIRED: com.arcgismaps.internal.jni.CoreErrorType;
					public static LICENSINGUNLICENSEDFEATURE: com.arcgismaps.internal.jni.CoreErrorType;
					public static LICENSINGLICENSELEVELFIXED: com.arcgismaps.internal.jni.CoreErrorType;
					public static LICENSINGLICENSELEVELALREADYSET: com.arcgismaps.internal.jni.CoreErrorType;
					public static LICENSINGMAINLICENSENOTSET: com.arcgismaps.internal.jni.CoreErrorType;
					public static LICENSINGUNLICENSEDEXTENSION: com.arcgismaps.internal.jni.CoreErrorType;
					public static LICENSINGPORTALUSERWITHNOLICENSE: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDIOSBASEFAILURE: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDBADARRAYNEWLENGTH: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDUNDERFLOWERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDSYSTEMERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDRANGEERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDOVERFLOWERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDOUTOFRANGE: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDLENGTHERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDINVALIDARGUMENT: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDFUTUREERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDDOMAINERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDRUNTIMEERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDLOGICERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDBADWEAKPTR: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDBADTYPEID: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDBADFUNCTIONCALL: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDBADEXCEPTION: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDBADCAST: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDBADALLOC: com.arcgismaps.internal.jni.CoreErrorType;
					public static STDEXCEPTION: com.arcgismaps.internal.jni.CoreErrorType;
					public static NAVIGATIONREROUTINGNOTSUPPORTEDBYSERVICE: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOTRIGGERSFEEDERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOTRIGGERSFENCEPARAMETERSERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static GEOTRIGGERSFENCEDATAWARNING: com.arcgismaps.internal.jni.CoreErrorType;
					public static MOTIONSENSORACCELEROMETERNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MOTIONSENSORGYROSCOPENOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static MOTIONSENSORMAGNETOMETERNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONINVALIDCREDENTIALS: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONUNABLETODETERMINETOKENURL: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONTOKENEXPIRED: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONTOKENREQUIRED: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONINVALIDAPIKEY: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONINVALIDTOKEN: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONFORBIDDEN: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONSSLREQUIRED: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONCREDENTIALCANNOTBESHARED: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONOAUTHFAILURE: com.arcgismaps.internal.jni.CoreErrorType;
					public static AUTHENTICATIONCHALLENGECANCELED: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYNOTSUPPORTED: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYMISSINGCONFIGURATION: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYMISSINGSCRIPT: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYMISSINGDISPLAYNAME: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYCONFIGURATIONPARSINGERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYARCADEPARSINGERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYARCADEEVALUATIONERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYSTYLXCONNECTIONERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYORDEREDANCHORPOINTTOGEOMETRYERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static SYMBOLDICTIONARYGEOMETRYTOORDEREDANCHORPOINTERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMNULLNOTALLOWEDERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMEXCEEDSMAXIMUMDATETIMEERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMLESSTHANMINIMUMDATETIMEERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMEXCEEDSMAXIMUMLENGTHERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMLESSTHANMINIMUMLENGTHERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMEXCEEDSNUMERICMAXIMUMERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMLESSTHANNUMERICMINIMUMERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMNOTINCODEDVALUEDOMAINERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMFIELDISREQUIREDERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static FEATUREFORMINCORRECTVALUETYPEERROR: com.arcgismaps.internal.jni.CoreErrorType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreErrorType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreErrorType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreErrorType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEsriVectorTilesDownloadOption {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption>;
					public static USEORIGINALSERVICE: com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption;
					public static USEREDUCEDFONTSSERVICE: com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEstimateTileCacheSizeJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeJob>;
					public getResult(): com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeResult;
					public static createCoreEstimateTileCacheSizeJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeJob;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreEstimateTileCacheSizeResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeResult>;
					public mHandle: number;
					public getTileCount(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public getFileSize(): number;
					public close(): void;
					public dispose(): void;
					public static createCoreEstimateTileCacheSizeResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeResult;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExpiration {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExpiration>;
					public mHandle: number;
					public getType(): com.arcgismaps.internal.jni.CoreExpirationType;
					public getDateTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getMessage(): string;
					public static createCoreExpirationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExpiration;
					public getHandle(): number;
					public getIsExpired(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExpirationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExpirationType>;
					public static ALLOWEXPIREDACCESS: com.arcgismaps.internal.jni.CoreExpirationType;
					public static PREVENTEXPIREDACCESS: com.arcgismaps.internal.jni.CoreExpirationType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreExpirationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreExpirationType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreExpirationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExportTileCacheJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExportTileCacheJob>;
					public static createCoreExportTileCacheJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExportTileCacheJob;
					public getResult(): com.arcgismaps.internal.jni.CoreTileCache;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExportTileCacheParameters extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExportTileCacheParameters>;
					public mHandle: number;
					public getCompressionQuality(): number;
					public setCompressionQuality(param0: number): void;
					public getAreaOfInterest(): com.arcgismaps.internal.jni.CoreGeometry;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public dispose(): void;
					public setLevelIds(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static createCoreExportTileCacheParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExportTileCacheParameters;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public clone(): com.arcgismaps.internal.jni.CoreExportTileCacheParameters;
					public setAreaOfInterest(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getLevelIds(): com.arcgismaps.internal.jni.CoreVector;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExportTileCacheTask implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExportTileCacheTask>;
					public mHandle: number;
					public constructor(param0: string);
					public exportTileCache(param0: com.arcgismaps.internal.jni.CoreExportTileCacheParameters, param1: string): com.arcgismaps.internal.jni.CoreExportTileCacheJob;
					public finalize(): void;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public estimateTileCacheSize(param0: com.arcgismaps.internal.jni.CoreExportTileCacheParameters): com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeJob;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public setAPIKey(param0: string): void;
					public onRequestRequired(param0: number): void;
					public static createCoreExportTileCacheTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExportTileCacheTask;
					public getMapServiceInfo(): com.arcgismaps.internal.jni.CoreArcGISMapServiceInfo;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public createDefaultExportTileCacheParametersAsync(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: number): com.arcgismaps.internal.jni.CoreTask;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExportVectorTilesJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExportVectorTilesJob>;
					public getParameters(): com.arcgismaps.internal.jni.CoreExportVectorTilesParameters;
					public setEnsurePortalItemHasRequestHandlerCallback(param0: com.arcgismaps.internal.jni.CoreEnsurePortalItemHasRequestHandlerCallbackListener): void;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public dispose(): void;
					public getItemResourceCachePath(): string;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public onEnsurePortalItemHasRequestHandler(): void;
					public toJSON(): string;
					public getVectorTileCachePath(): string;
					public getPortalItem(): com.arcgismaps.internal.jni.CorePortalItem;
					public static createCoreExportVectorTilesJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExportVectorTilesJob;
					public getResult(): com.arcgismaps.internal.jni.CoreExportVectorTilesResult;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExportVectorTilesParameters extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExportVectorTilesParameters>;
					public mHandle: number;
					public static createCoreExportVectorTilesParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExportVectorTilesParameters;
					public getAreaOfInterest(): com.arcgismaps.internal.jni.CoreGeometry;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public dispose(): void;
					public setMaxLevel(param0: number): void;
					public setEsriVectorTilesDownloadOption(param0: com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption): void;
					public clone(): com.arcgismaps.internal.jni.CoreExportVectorTilesParameters;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getEsriVectorTilesDownloadOption(): com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption;
					public close(): void;
					public getMaxLevel(): number;
					public setAreaOfInterest(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExportVectorTilesResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExportVectorTilesResult>;
					public mHandle: number;
					public static createCoreExportVectorTilesResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExportVectorTilesResult;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getVectorTileCache(): com.arcgismaps.internal.jni.CoreVectorTileCache;
					public getItemResourceCache(): com.arcgismaps.internal.jni.CoreItemResourceCache;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExportVectorTilesTask implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExportVectorTilesTask>;
					public mHandle: number;
					public setEnsurePortalItemHasRequestHandlerCallback(param0: com.arcgismaps.internal.jni.CoreEnsurePortalItemHasRequestHandlerCallbackListener): void;
					public exportVectorTiles(param0: com.arcgismaps.internal.jni.CoreExportVectorTilesParameters, param1: string): com.arcgismaps.internal.jni.CoreExportVectorTilesJob;
					public constructor(param0: string);
					public exportVectorTilesWithItemResourceCache(param0: com.arcgismaps.internal.jni.CoreExportVectorTilesParameters, param1: string, param2: string): com.arcgismaps.internal.jni.CoreExportVectorTilesJob;
					public finalize(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem);
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public getPortalItem(): com.arcgismaps.internal.jni.CorePortalItem;
					public onDoneLoading(param0: number): void;
					public setAPIKey(param0: string): void;
					public createDefaultExportVectorTilesParametersAsync(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number): com.arcgismaps.internal.jni.CoreTask;
					public getVectorTileSourceInfo(): com.arcgismaps.internal.jni.CoreVectorTileSourceInfo;
					public onRequestRequired(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public dispose(): void;
					public cancelLoad(): void;
					public getHasStyleResources(): boolean;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public static createCoreExportVectorTilesTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExportVectorTilesTask;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public onEnsurePortalItemHasRequestHandler(): void;
					public static nativeDestroy(param0: number): void;
					public exportStyleResourceCache(param0: string): com.arcgismaps.internal.jni.CoreExportVectorTilesJob;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExpressionPopupElement extends com.arcgismaps.internal.jni.CorePopupElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExpressionPopupElement>;
					public setPopupExpression(param0: com.arcgismaps.internal.jni.CorePopupExpression): void;
					public static createCoreExpressionPopupElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExpressionPopupElement;
					public getPopupExpression(): com.arcgismaps.internal.jni.CorePopupExpression;
					public constructor();
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupExpression);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExtensionLicense {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExtensionLicense>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getIsPermanent(): boolean;
					public getLicenseStatus(): com.arcgismaps.internal.jni.CoreLicenseStatus;
					public getExpiry(): com.arcgismaps.internal.jni.CoreDateTime;
					public static createCoreExtensionLicenseFromHandle(param0: number): com.arcgismaps.internal.jni.CoreExtensionLicense;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreExtrusionMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreExtrusionMode>;
					public static NONE: com.arcgismaps.internal.jni.CoreExtrusionMode;
					public static MINIMUM: com.arcgismaps.internal.jni.CoreExtrusionMode;
					public static MAXIMUM: com.arcgismaps.internal.jni.CoreExtrusionMode;
					public static ABSOLUTEHEIGHT: com.arcgismaps.internal.jni.CoreExtrusionMode;
					public static BASEHEIGHT: com.arcgismaps.internal.jni.CoreExtrusionMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreExtrusionMode>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreExtrusionMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreExtrusionMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFacility {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFacility>;
					public mHandle: number;
					public getCurrentBearingTolerance(): number;
					public setNavigationSpeed(param0: number): void;
					public static createCoreFacilityFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFacility;
					public finalize(): void;
					public setNavigationLatency(param0: number): void;
					public getFacilityId(): number;
					public setImpedanceCutoff(param0: number): void;
					public constructor();
					public getImpedanceCutoff(): number;
					public close(): void;
					public setCurbApproach(param0: com.arcgismaps.internal.jni.CoreCurbApproach): void;
					public getNavigationSpeed(): number;
					public setNetworkLocation(param0: com.arcgismaps.internal.jni.CoreNetworkLocation): void;
					public getLocationStatus(): com.arcgismaps.internal.jni.CoreLocationStatus;
					public getNetworkLocation(): com.arcgismaps.internal.jni.CoreNetworkLocation;
					public getCurrentBearing(): number;
					public setCurrentBearingTolerance(param0: number): void;
					public dispose(): void;
					public getDistanceToNetworkLocation(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint);
					public getCurbApproach(): com.arcgismaps.internal.jni.CoreCurbApproach;
					public setFacilityId(param0: number): void;
					public getGeometry(): com.arcgismaps.internal.jni.CorePoint;
					public setName(param0: string): void;
					public setCurrentBearing(param0: number): void;
					public clone(): com.arcgismaps.internal.jni.CoreFacility;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getNavigationLatency(): number;
					public setAddedCost(param0: string, param1: number): void;
					public getAddedCost(param0: string): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFacilityLayerDefinition extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFacilityLayerDefinition>;
					public mHandle: number;
					public getLayerId(): string;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getNameField(): string;
					public constructor(param0: string, param1: string, param2: string, param3: string);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static createCoreFacilityLayerDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFacilityLayerDefinition;
					public toJSON(): string;
					public close(): void;
					public getFacilityIdField(): string;
					public getSiteIdField(): string;
					public getHandle(): number;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreFacilityLayerDefinition;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeature implements com.arcgismaps.internal.jni.CoreGeoElement, com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeature>;
					public mHandle: number;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getInstanceId(): java.lang.Long;
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public getFeatureTable(): com.arcgismaps.internal.jni.CoreFeatureTable;
					public getObjectType(): com.arcgismaps.internal.jni.CoreFeatureObjectType;
					public finalize(): void;
					public getIsAddedToTable(): boolean;
					public dispose(): void;
					public refresh(): boolean;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeature;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					public static createCoreFeatureFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeature;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureCollection implements com.arcgismaps.internal.jni.CoreJSONSerializable, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureCollection>;
					public mHandle: number;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getTables(): com.arcgismaps.internal.jni.CoreVector;
					public load(): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public toJSON(): string;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreFeatureCollection;
					public onRequestRequired(param0: number): void;
					public static createCoreFeatureCollectionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureCollection;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getItem(): com.arcgismaps.internal.jni.CoreItem;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public setItem(param0: com.arcgismaps.internal.jni.CoreItem): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureCollectionLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureCollectionLayer>;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public static createCoreFeatureCollectionLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureCollectionLayer;
					public getFeatureCollection(): com.arcgismaps.internal.jni.CoreFeatureCollection;
					public cancelLoad(): void;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public getLayers(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getName(): string;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureCollection);
					public setIsVisible(param0: boolean): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureCollectionTable extends com.arcgismaps.internal.jni.CoreFeatureTable implements com.arcgismaps.internal.jni.CoreFeatureSet {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureCollectionTable>;
					public setRenderer(param0: com.arcgismaps.internal.jni.CoreRenderer): void;
					public getTitle(): string;
					public setTitle(param0: string): void;
					public static createCoreFeatureCollectionTableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureCollectionTable;
					public load(): void;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreVector);
					public constructor();
					public iterator(): com.arcgismaps.internal.jni.CoreIterator;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreGeometryType, param2: com.arcgismaps.internal.jni.CoreSpatialReference);
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getLayerInfo(): com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfo;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreElement);
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreGeometryType, param2: com.arcgismaps.internal.jni.CoreSpatialReference, param3: boolean, param4: boolean);
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setIsPopupEnabled(param0: boolean): void;
					public getSymbolOverride(param0: com.arcgismaps.internal.jni.CoreFeature): com.arcgismaps.internal.jni.CoreSymbol;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public setSymbolOverride(param0: com.arcgismaps.internal.jni.CoreFeature, param1: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureEditResult extends com.arcgismaps.internal.jni.CoreEditResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureEditResult>;
					public getAttachmentResults(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreFeatureEditResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureEditResult;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureFenceParameters extends com.arcgismaps.internal.jni.CoreFenceParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureFenceParameters>;
					public getAreaOfInterest(): com.arcgismaps.internal.jni.CoreGeometry;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTable);
					public getWhereClause(): string;
					public setWhereClause(param0: string): void;
					public getFeatureTable(): com.arcgismaps.internal.jni.CoreFeatureTable;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTable, param1: number);
					public static createCoreFeatureFenceParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureFenceParameters;
					public setAreaOfInterest(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureForm {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureForm>;
					public mHandle: number;
					public getTitle(): string;
					public evaluateExpressionsAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setValidationErrorsChangedCallback(param0: com.arcgismaps.internal.jni.CoreFeatureFormValidationErrorsChangedCallbackListener): void;
					public onTitleChanged(param0: androidNative.Array<number>): void;
					public finalize(): void;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISFeature, param1: com.arcgismaps.internal.jni.CoreFeatureFormDefinition);
					public getElements(): com.arcgismaps.internal.jni.CoreArray;
					public setTitleChangedCallback(param0: com.arcgismaps.internal.jni.CoreTitleChangedCallbackListener): void;
					public getDefinition(): com.arcgismaps.internal.jni.CoreFeatureFormDefinition;
					public static createCoreFeatureFormFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureForm;
					public onValidationErrorsChanged(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getFeature(): com.arcgismaps.internal.jni.CoreArcGISFeature;
					public getValidationErrors(): com.arcgismaps.internal.jni.CoreDictionary;
					public getPreserveFieldValuesWhenHidden(): boolean;
					public getDescription(): string;
					public discardEdits(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureFormDefinition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureFormDefinition>;
					public mHandle: number;
					public getTitle(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public static createCoreFeatureFormDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureFormDefinition;
					public close(): void;
					public dispose(): void;
					public getDescription(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureFormValidationErrorsChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureFormValidationErrorsChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreFeatureFormValidationErrorsChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						validationErrorsChanged(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					});
					public constructor();
					public validationErrorsChanged(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureLayer extends com.arcgismaps.internal.jni.CoreLayer implements com.arcgismaps.internal.jni.CoreFloorAware, com.arcgismaps.internal.jni.CorePopupSource, com.arcgismaps.internal.jni.CoreRefreshable, com.arcgismaps.internal.jni.CoreSnapSource, com.arcgismaps.internal.jni.CoreTimeAware {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureLayer>;
					public setRenderer(param0: com.arcgismaps.internal.jni.CoreRenderer): void;
					public setFeaturesVisible(param0: com.arcgismaps.internal.jni.CoreVector, param1: boolean): void;
					public finalize(): void;
					public setFeatureReduction(param0: com.arcgismaps.internal.jni.CoreFeatureReduction): void;
					public getTimeOffset(): com.arcgismaps.internal.jni.CoreTimeValue;
					public setDisplayFilterDefinition(param0: com.arcgismaps.internal.jni.CoreDisplayFilterDefinition): void;
					public getFeatureReduction(): com.arcgismaps.internal.jni.CoreFeatureReduction;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public getTimeInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public setSelectionWidth(param0: number): void;
					public setTilingMode(param0: com.arcgismaps.internal.jni.CoreFeatureTilingMode): void;
					public retryLoad(): void;
					public getSupportsTimeFiltering(): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem, param1: number);
					public constructor();
					public getCanChangeVisibility(): boolean;
					public getRenderingMode(): com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getIsTimeFilteringEnabled(): boolean;
					public getLabelsEnabled(): boolean;
					public selectFeature(param0: com.arcgismaps.internal.jni.CoreFeature): void;
					public getInstanceId(): java.lang.Long;
					public resetRenderer(): void;
					public getRefreshInterval(): number;
					public selectFeatures(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public cancelLoad(): void;
					public setRenderingMode(param0: com.arcgismaps.internal.jni.CoreFeatureRenderingMode): void;
					public resetFeaturesVisible(): void;
					public setTimeOffset(param0: com.arcgismaps.internal.jni.CoreTimeValue): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setSceneProperties(param0: com.arcgismaps.internal.jni.CoreLayerSceneProperties): void;
					public setIsPopupEnabled(param0: boolean): void;
					public setLabelsEnabled(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
					public getIsPopupEnabled(): boolean;
					public setIsTimeFilteringEnabled(param0: boolean): void;
					public getSelectionWidth(): number;
					public getLabelDefinitions(): com.arcgismaps.internal.jni.CoreVector;
					public unselectFeature(param0: com.arcgismaps.internal.jni.CoreFeature): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public onFullTimeExtentChanged(): void;
					public getFeatureFormDefinition(): com.arcgismaps.internal.jni.CoreFeatureFormDefinition;
					public getIsVisible(): boolean;
					public load(): void;
					public getScaleSymbols(): boolean;
					public selectFeaturesWithQuery(param0: com.arcgismaps.internal.jni.CoreQueryParameters, param1: com.arcgismaps.internal.jni.CoreSelectionMode): com.arcgismaps.internal.jni.CoreTask;
					public setFeatureVisible(param0: com.arcgismaps.internal.jni.CoreFeature, param1: boolean): void;
					public isVisibleAtScale(param0: number): boolean;
					public setLabelDefinitions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getSelectionColor(): com.arcgismaps.internal.jni.CoreColor;
					public getFullTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getSceneProperties(): com.arcgismaps.internal.jni.CoreLayerSceneProperties;
					public setScaleSymbols(param0: boolean): void;
					public static createCoreFeatureLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureLayer;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getDisplayFilterDefinition(): com.arcgismaps.internal.jni.CoreDisplayFilterDefinition;
					public setFloorDefinition(param0: com.arcgismaps.internal.jni.CoreLayerFloorDefinition): void;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getFeatureTable(): com.arcgismaps.internal.jni.CoreFeatureTable;
					public dispose(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getFloorDefinition(): com.arcgismaps.internal.jni.CoreLayerFloorDefinition;
					public clearSelection(): void;
					public getSelectedFeatures(): com.arcgismaps.internal.jni.CoreTask;
					public setRefreshInterval(param0: number): void;
					public setDefinitionExpression(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTable);
					public getName(): string;
					public setFullTimeExtentChangedCallback(param0: com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener): void;
					public setIsVisible(param0: boolean): void;
					public unselectFeatures(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getDefinitionExpression(): string;
					public setSelectionColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getTilingMode(): com.arcgismaps.internal.jni.CoreFeatureTilingMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureObjectType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureObjectType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreFeatureObjectType;
					public static ARCGISFEATURE: com.arcgismaps.internal.jni.CoreFeatureObjectType;
					public static FEATURE: com.arcgismaps.internal.jni.CoreFeatureObjectType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFeatureObjectType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFeatureObjectType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFeatureObjectType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureQueryResult extends com.arcgismaps.internal.jni.CoreFeatureSet {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureQueryResult>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public iterator(): com.arcgismaps.internal.jni.CoreIterator;
					public getIsTransferLimitExceeded(): boolean;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public static createCoreFeatureQueryResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureQueryResult;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureReduction {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureReduction>;
					public mHandle: number;
					public setEnabled(param0: boolean): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreFeatureReductionType;
					public static nativeDestroy(param0: number): void;
					public static createCoreFeatureReductionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureReduction;
					public constructor();
					public finalize(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureReduction;
					public close(): void;
					public dispose(): void;
					public getEnabled(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureReductionType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureReductionType>;
					public static CLUSTERINGFEATUREREDUCTION: com.arcgismaps.internal.jni.CoreFeatureReductionType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFeatureReductionType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFeatureReductionType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFeatureReductionType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureRenderingMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureRenderingMode>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
					public static STATIC: com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
					public static DYNAMIC: com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFeatureRenderingMode>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureRequestMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureRequestMode>;
					public static UNDEFINED: com.arcgismaps.internal.jni.CoreFeatureRequestMode;
					public static ONINTERACTIONCACHE: com.arcgismaps.internal.jni.CoreFeatureRequestMode;
					public static ONINTERACTIONNOCACHE: com.arcgismaps.internal.jni.CoreFeatureRequestMode;
					public static MANUALCACHE: com.arcgismaps.internal.jni.CoreFeatureRequestMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFeatureRequestMode>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFeatureRequestMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFeatureRequestMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureServiceCapabilities {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureServiceCapabilities>;
					public mHandle: number;
					public getSupportsEditing(): boolean;
					public getSupportsCreate(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getSupportsQuery(): boolean;
					public getSupportsUpdate(): boolean;
					public getSupportsDelete(): boolean;
					public static nativeDestroy(param0: number): void;
					public static createCoreFeatureServiceCapabilitiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureServiceCapabilities;
					public constructor();
					public close(): void;
					public getSupportsSync(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureServiceLayerIdInfo extends com.arcgismaps.internal.jni.CoreIdInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureServiceLayerIdInfo>;
					public getMaxScale(): number;
					public getMinScale(): number;
					public getDefaultVisibility(): boolean;
					public getServiceType(): com.arcgismaps.internal.jni.CoreArcGISFeatureLayerInfoServiceType;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public static createCoreFeatureServiceLayerIdInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureServiceLayerIdInfo;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureServiceSessionType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureServiceSessionType>;
					public static TRANSIENT: com.arcgismaps.internal.jni.CoreFeatureServiceSessionType;
					public static PERSISTENT: com.arcgismaps.internal.jni.CoreFeatureServiceSessionType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFeatureServiceSessionType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFeatureServiceSessionType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFeatureServiceSessionType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureSet {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureSet>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreFeatureSet interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getFields(): com.arcgismaps.internal.jni.CoreArray;
						getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
						getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
						iterator(): com.arcgismaps.internal.jni.CoreIterator;
					});
					public constructor();
					public iterator(): com.arcgismaps.internal.jni.CoreIterator;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureSubtype {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureSubtype>;
					public mHandle: number;
					public getPrototypeAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getCode(): com.arcgismaps.internal.jni.CoreElement;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getDomains(): com.arcgismaps.internal.jni.CoreDictionary;
					public getFieldOverrides(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreFeatureSubtypeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureSubtype;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureTable implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable, com.arcgismaps.internal.jni.CorePopupSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureTable>;
					public mHandle: number;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureTable;
					public getHasZ(): boolean;
					public updateFeature(param0: com.arcgismaps.internal.jni.CoreFeature): com.arcgismaps.internal.jni.CoreTask;
					public finalize(): void;
					public queryStatistics(param0: com.arcgismaps.internal.jni.CoreStatisticsQueryParameters): com.arcgismaps.internal.jni.CoreTask;
					public getLayer(): com.arcgismaps.internal.jni.CoreLayer;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public queryFeatureCount(param0: com.arcgismaps.internal.jni.CoreQueryParameters): com.arcgismaps.internal.jni.CoreTask;
					public close(): void;
					public createFeature(): com.arcgismaps.internal.jni.CoreFeature;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public updateFeatures(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public onRequestRequired(param0: number): void;
					public deleteFeature(param0: com.arcgismaps.internal.jni.CoreFeature): com.arcgismaps.internal.jni.CoreTask;
					public getDisplayName(): string;
					public canAdd(): boolean;
					public getInstanceId(): java.lang.Long;
					public canUpdate(param0: com.arcgismaps.internal.jni.CoreFeature): boolean;
					public createFeatureWithAttributes(param0: com.arcgismaps.internal.jni.CoreDictionary, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreFeature;
					public queryFeatures(param0: com.arcgismaps.internal.jni.CoreQueryParameters): com.arcgismaps.internal.jni.CoreTask;
					public cancelLoad(): void;
					public getHasM(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getHasGeometry(): boolean;
					public queryExtent(param0: com.arcgismaps.internal.jni.CoreQueryParameters): com.arcgismaps.internal.jni.CoreTask;
					public static createCoreFeatureTableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureTable;
					public setIsPopupEnabled(param0: boolean): void;
					public addFeatures(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public getHandle(): number;
					public getIsPopupEnabled(): boolean;
					public canEditGeometry(): boolean;
					public getTableName(): string;
					public load(): void;
					public setDisplayName(param0: string): void;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreFeatureTableType;
					public onDoneLoading(param0: number): void;
					public getNumberOfFeatures(): number;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getField(param0: string): com.arcgismaps.internal.jni.CoreField;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public canDelete(param0: com.arcgismaps.internal.jni.CoreFeature): boolean;
					public dispose(): void;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public addFeature(param0: com.arcgismaps.internal.jni.CoreFeature): com.arcgismaps.internal.jni.CoreTask;
					public static nativeDestroy(param0: number): void;
					public getIsEditable(): boolean;
					public deleteFeatures(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getFeatureLayer(): com.arcgismaps.internal.jni.CoreFeatureLayer;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureTableEditResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureTableEditResult>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getFeatureTable(): com.arcgismaps.internal.jni.CoreFeatureTable;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreFeatureTableEditResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureTableEditResult;
					public getEditResults(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureTableType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureTableType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static FEATURETABLE: com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static SERVICEFEATURETABLE: com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static GEODATABASEFEATURETABLE: com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static FEATURECOLLECTIONTABLE: com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static SHAPEFILEFEATURETABLE: com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static GEOPACKAGEFEATURETABLE: com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static WFSFEATURETABLE: com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static OGCFEATURECOLLECTIONTABLE: com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFeatureTableType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFeatureTableType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFeatureTableType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureTemplate {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureTemplate>;
					public mHandle: number;
					public static createCoreFeatureTemplateFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureTemplate;
					public getPrototypeAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getDescription(): string;
					public getDrawingTool(): com.arcgismaps.internal.jni.CoreDrawingTool;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureTilingMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureTilingMode>;
					public static ENABLEDWHENSUPPORTED: com.arcgismaps.internal.jni.CoreFeatureTilingMode;
					public static DISABLED: com.arcgismaps.internal.jni.CoreFeatureTilingMode;
					public static ENABLEDWITHFULLRESOLUTIONWHENSUPPORTED: com.arcgismaps.internal.jni.CoreFeatureTilingMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFeatureTilingMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFeatureTilingMode>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFeatureTilingMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFeatureType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFeatureType>;
					public mHandle: number;
					public getTemplates(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getDomains(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCoreFeatureTypeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFeatureType;
					public getId(): com.arcgismaps.internal.jni.CoreElement;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFenceEnterExitSpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship>;
					public static ENTERINTERSECTSANDEXITDOESNOTINTERSECT: com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship;
					public static ENTERCONTAINSANDEXITDOESNOTCONTAIN: com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship;
					public static ENTERCONTAINSANDEXITDOESNOTINTERSECT: com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFenceGeotrigger extends com.arcgismaps.internal.jni.CoreGeotrigger {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFenceGeotrigger>;
					public getFeedAccuracyMode(): com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeotriggerFeed, param1: com.arcgismaps.internal.jni.CoreFenceRuleType, param2: com.arcgismaps.internal.jni.CoreFenceParameters, param3: com.arcgismaps.internal.jni.CoreArcadeExpression, param4: string);
					public static createCoreFenceGeotriggerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFenceGeotrigger;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public getEnterExitSpatialRelationship(): com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship;
					public getRuleType(): com.arcgismaps.internal.jni.CoreFenceRuleType;
					public setRuleType(param0: com.arcgismaps.internal.jni.CoreFenceRuleType): void;
					public setFeedAccuracyMode(param0: com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeotriggerFeed, param1: com.arcgismaps.internal.jni.CoreFenceRuleType, param2: com.arcgismaps.internal.jni.CoreFenceParameters);
					public setEnterExitSpatialRelationship(param0: com.arcgismaps.internal.jni.CoreFenceEnterExitSpatialRelationship): void;
					public getFenceParameters(): com.arcgismaps.internal.jni.CoreFenceParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFenceGeotriggerFeedAccuracyMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode>;
					public static USEGEOMETRY: com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode;
					public static USEGEOMETRYWITHACCURACY: com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFenceGeotriggerFeedAccuracyMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFenceGeotriggerNotificationInfo extends com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFenceGeotriggerNotificationInfo>;
					public getFenceGeoElement(): com.arcgismaps.internal.jni.CoreElement;
					public static createCoreFenceGeotriggerNotificationInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFenceGeotriggerNotificationInfo;
					public getFenceGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getFenceId(): string;
					public getFenceNotificationType(): com.arcgismaps.internal.jni.CoreFenceNotificationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFenceNotificationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFenceNotificationType>;
					public static ENTERED: com.arcgismaps.internal.jni.CoreFenceNotificationType;
					public static EXITED: com.arcgismaps.internal.jni.CoreFenceNotificationType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFenceNotificationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFenceNotificationType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFenceNotificationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFenceParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFenceParameters>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getBufferDistance(): number;
					public finalize(): void;
					public static createCoreFenceParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFenceParameters;
					public static createFromGeoElement(param0: com.arcgismaps.internal.jni.CoreElement, param1: number): com.arcgismaps.internal.jni.CoreFenceParameters;
					public close(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFenceParameters;
					public getObjectType(): com.arcgismaps.internal.jni.CoreFenceParametersType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFenceParametersType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFenceParametersType>;
					public static GRAPHICFENCEPARAMETERS: com.arcgismaps.internal.jni.CoreFenceParametersType;
					public static FEATUREFENCEPARAMETERS: com.arcgismaps.internal.jni.CoreFenceParametersType;
					public static GRAPHICSOVERLAYFENCEPARAMETERS: com.arcgismaps.internal.jni.CoreFenceParametersType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFenceParametersType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFenceParametersType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFenceParametersType>;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFenceRuleType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFenceRuleType>;
					public static ENTER: com.arcgismaps.internal.jni.CoreFenceRuleType;
					public static EXIT: com.arcgismaps.internal.jni.CoreFenceRuleType;
					public static ENTEROREXIT: com.arcgismaps.internal.jni.CoreFenceRuleType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFenceRuleType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFenceRuleType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFenceRuleType;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreField {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreField>;
					public mHandle: number;
					public static createBigInt(param0: string, param1: string): com.arcgismaps.internal.jni.CoreField;
					public static createDate(param0: string, param1: string): com.arcgismaps.internal.jni.CoreField;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreField;
					public finalize(): void;
					public getLength(): number;
					public getDomain(): com.arcgismaps.internal.jni.CoreDomain;
					public getEditable(): boolean;
					public static createCoreFieldFromHandle(param0: number): com.arcgismaps.internal.jni.CoreField;
					public constructor();
					public static createTimestampOffset(param0: string, param1: string): com.arcgismaps.internal.jni.CoreField;
					public toJSON(): string;
					public close(): void;
					public static createText(param0: string, param1: string, param2: number): com.arcgismaps.internal.jni.CoreField;
					public static createDateOnly(param0: string, param1: string): com.arcgismaps.internal.jni.CoreField;
					public static createLongInt(param0: string, param1: string): com.arcgismaps.internal.jni.CoreField;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFieldType, param1: string, param2: string, param3: number, param4: com.arcgismaps.internal.jni.CoreDomain, param5: boolean, param6: boolean);
					public getNullable(): boolean;
					public static createShortInt(param0: string, param1: string): com.arcgismaps.internal.jni.CoreField;
					public static createFloat(param0: string, param1: string): com.arcgismaps.internal.jni.CoreField;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getFieldType(): com.arcgismaps.internal.jni.CoreFieldType;
					public static createDouble(param0: string, param1: string): com.arcgismaps.internal.jni.CoreField;
					public static createTimeOnly(param0: string, param1: string): com.arcgismaps.internal.jni.CoreField;
					public getAlias(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFieldDescription {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFieldDescription>;
					public mHandle: number;
					public setNullable(param0: boolean): void;
					public finalize(): void;
					public getLength(): number;
					public dispose(): void;
					public setFieldType(param0: com.arcgismaps.internal.jni.CoreFieldType): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreFieldType);
					public getEditable(): boolean;
					public setLength(param0: number): void;
					public setName(param0: string): void;
					public getDomainName(): string;
					public setEditable(param0: boolean): void;
					public getNullable(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setAlias(param0: string): void;
					public getName(): string;
					public getFieldType(): com.arcgismaps.internal.jni.CoreFieldType;
					public close(): void;
					public static createCoreFieldDescriptionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFieldDescription;
					public setDomainName(param0: string): void;
					public getAlias(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFieldFormElement extends com.arcgismaps.internal.jni.CoreFormElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFieldFormElement>;
					public getInput(): com.arcgismaps.internal.jni.CoreFormInput;
					public setIsEditableChangedCallback(param0: com.arcgismaps.internal.jni.CoreIsEditableChangedCallbackListener): void;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public static createCoreFieldFormElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFieldFormElement;
					public onIsRequiredChanged(param0: boolean): void;
					public dispose(): void;
					public getDomain(): com.arcgismaps.internal.jni.CoreDomain;
					public setIsRequiredChangedCallback(param0: com.arcgismaps.internal.jni.CoreIsRequiredChangedCallbackListener): void;
					public updateValue(param0: com.arcgismaps.internal.jni.CoreElement): void;
					public getFormattedValue(): string;
					public onIsEditableChanged(param0: boolean): void;
					public setValueChangedCallback(param0: com.arcgismaps.internal.jni.CoreValueChangedCallbackListener): void;
					public getValue(): com.arcgismaps.internal.jni.CoreElement;
					public getHint(): string;
					public onValidationErrorsChanged(param0: number): void;
					public getIsEditable(): boolean;
					public onValueChanged(param0: number): void;
					public getFieldType(): com.arcgismaps.internal.jni.CoreFieldType;
					public getIsRequired(): boolean;
					public getValidationErrors(): com.arcgismaps.internal.jni.CoreArray;
					public setValidationErrorsChangedCallback(param0: com.arcgismaps.internal.jni.CoreFieldFormElementValidationErrorsChangedCallbackListener): void;
					public getFieldName(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFieldFormElementValidationErrorsChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFieldFormElementValidationErrorsChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreFieldFormElementValidationErrorsChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						validationErrorsChanged(param0: com.arcgismaps.internal.jni.CoreArray): void;
					});
					public constructor();
					public validationErrorsChanged(param0: com.arcgismaps.internal.jni.CoreArray): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFieldGroup {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFieldGroup>;
					public mHandle: number;
					public static createCoreFieldGroupFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFieldGroup;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getContingencies(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getIsEditingRestrictive(): boolean;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFieldType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFieldType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreFieldType;
					public static INT16: com.arcgismaps.internal.jni.CoreFieldType;
					public static INT32: com.arcgismaps.internal.jni.CoreFieldType;
					public static INT64: com.arcgismaps.internal.jni.CoreFieldType;
					public static GUID: com.arcgismaps.internal.jni.CoreFieldType;
					public static FLOAT32: com.arcgismaps.internal.jni.CoreFieldType;
					public static FLOAT64: com.arcgismaps.internal.jni.CoreFieldType;
					public static DATE: com.arcgismaps.internal.jni.CoreFieldType;
					public static TEXT: com.arcgismaps.internal.jni.CoreFieldType;
					public static OID: com.arcgismaps.internal.jni.CoreFieldType;
					public static GLOBALID: com.arcgismaps.internal.jni.CoreFieldType;
					public static BLOB: com.arcgismaps.internal.jni.CoreFieldType;
					public static GEOMETRY: com.arcgismaps.internal.jni.CoreFieldType;
					public static RASTER: com.arcgismaps.internal.jni.CoreFieldType;
					public static XML: com.arcgismaps.internal.jni.CoreFieldType;
					public static DATEONLY: com.arcgismaps.internal.jni.CoreFieldType;
					public static TIMEONLY: com.arcgismaps.internal.jni.CoreFieldType;
					public static TIMESTAMPOFFSET: com.arcgismaps.internal.jni.CoreFieldType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFieldType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFieldType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFieldType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFieldsPopupElement extends com.arcgismaps.internal.jni.CorePopupElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFieldsPopupElement>;
					public getTitle(): string;
					public setDescription(param0: string): void;
					public getFormattedValues(): com.arcgismaps.internal.jni.CoreArray;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArray);
					public setTitle(param0: string): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getLabels(): com.arcgismaps.internal.jni.CoreArray;
					public constructor();
					public static createCoreFieldsPopupElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFieldsPopupElement;
					public toJSON(): string;
					public getFields(): com.arcgismaps.internal.jni.CoreVector;
					public getDescription(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFilePathSerializationCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFilePathSerializationCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreFilePathSerializationCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						filePathSerialization(param0: com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection, param1: com.arcgismaps.internal.jni.CoreElementReference): void;
					});
					public constructor();
					public filePathSerialization(param0: com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection, param1: com.arcgismaps.internal.jni.CoreElementReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFilePathSerializationParameterDirection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection>;
					public static TOJSON: com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection;
					public static FROMJSON: com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFilePathSerializationParameterDirection;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFileRequest extends com.arcgismaps.internal.jni.CoreRequest {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFileRequest>;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public getAPIKey(): string;
					public setIsPausedChangedCallback(param0: com.arcgismaps.internal.jni.CoreIsPausedChangedCallbackListener): void;
					public dispose(): void;
					public setTotalBytesToReceive(param0: number): void;
					public getFilePath(): string;
					public getIsPaused(): boolean;
					public static createCoreFileRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFileRequest;
					public onIsPausedChanged(): void;
					public setCurrentBytesReceived(param0: number): void;
					public getPersistentRequestId(): string;
					public setPersistentRequestId(param0: string): void;
					public setAPIKey(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFillSymbol extends com.arcgismaps.internal.jni.CoreSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFillSymbol>;
					public setOutline(param0: com.arcgismaps.internal.jni.CoreLineSymbol): void;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getOutline(): com.arcgismaps.internal.jni.CoreLineSymbol;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public static createCoreFillSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFillSymbol;
					public equals(param0: com.arcgismaps.internal.jni.CoreFillSymbol): boolean;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFillSymbolLayer extends com.arcgismaps.internal.jni.CoreSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFillSymbolLayer>;
					public constructor();
					public static createCoreFillSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFillSymbolLayer;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFloorAware {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFloorAware>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreFloorAware interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getFloorDefinition(): com.arcgismaps.internal.jni.CoreLayerFloorDefinition;
						setFloorDefinition(param0: com.arcgismaps.internal.jni.CoreLayerFloorDefinition): void;
					});
					public constructor();
					public setFloorDefinition(param0: com.arcgismaps.internal.jni.CoreLayerFloorDefinition): void;
					public getFloorDefinition(): com.arcgismaps.internal.jni.CoreLayerFloorDefinition;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFloorFacility extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFloorFacility>;
					public mHandle: number;
					public getLevels(): com.arcgismaps.internal.jni.CoreArray;
					public getFacilityId(): string;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getSite(): com.arcgismaps.internal.jni.CoreFloorSite;
					public static createCoreFloorFacilityFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFloorFacility;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFloorLevel extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFloorLevel>;
					public mHandle: number;
					public getLongName(): string;
					public getInstanceId(): java.lang.Long;
					public getLevelNumber(): number;
					public finalize(): void;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getIsVisible(): boolean;
					public getVerticalOrder(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getFacility(): com.arcgismaps.internal.jni.CoreFloorFacility;
					public getShortName(): string;
					public getLevelId(): string;
					public close(): void;
					public setIsVisible(param0: boolean): void;
					public static createCoreFloorLevelFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFloorLevel;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFloorManager implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFloorManager>;
					public mHandle: number;
					public getLevelLayer(): com.arcgismaps.internal.jni.CoreLayer;
					public getLevels(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getFacilities(): com.arcgismaps.internal.jni.CoreArray;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public static createCoreFloorManagerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFloorManager;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getSites(): com.arcgismaps.internal.jni.CoreArray;
					public getInstanceId(): java.lang.Long;
					public getFacilityLayer(): com.arcgismaps.internal.jni.CoreLayer;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public getSiteLayer(): com.arcgismaps.internal.jni.CoreLayer;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFloorSite extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFloorSite>;
					public mHandle: number;
					public getSiteId(): string;
					public getInstanceId(): java.lang.Long;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getFacilities(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreFloorSiteFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFloorSite;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFontDecoration {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFontDecoration>;
					public static LINETHROUGH: com.arcgismaps.internal.jni.CoreFontDecoration;
					public static NONE: com.arcgismaps.internal.jni.CoreFontDecoration;
					public static UNDERLINE: com.arcgismaps.internal.jni.CoreFontDecoration;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFontDecoration>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFontDecoration;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFontDecoration;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFontStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFontStyle>;
					public static ITALIC: com.arcgismaps.internal.jni.CoreFontStyle;
					public static NORMAL: com.arcgismaps.internal.jni.CoreFontStyle;
					public static OBLIQUE: com.arcgismaps.internal.jni.CoreFontStyle;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFontStyle;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFontStyle;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFontStyle>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFontWeight {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFontWeight>;
					public static BOLD: com.arcgismaps.internal.jni.CoreFontWeight;
					public static NORMAL: com.arcgismaps.internal.jni.CoreFontWeight;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFontWeight;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFontWeight>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFontWeight;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFormElement extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFormElement>;
					public mHandle: number;
					public getLabel(): string;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getIsVisible(): boolean;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setIsVisibleChangedCallback(param0: com.arcgismaps.internal.jni.CoreIsVisibleChangedCallbackListener): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFormElement;
					public onIsVisibleChanged(param0: boolean): void;
					public static createCoreFormElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFormElement;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getObjectType(): com.arcgismaps.internal.jni.CoreFormElementType;
					public hash(): number;
					public close(): void;
					public getDescription(): string;
					public getHandle(): number;
					public equals(param0: com.arcgismaps.internal.jni.CoreFormElement): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFormElementType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFormElementType>;
					public static UNSUPPORTEDFORMELEMENT: com.arcgismaps.internal.jni.CoreFormElementType;
					public static FIELDFORMELEMENT: com.arcgismaps.internal.jni.CoreFormElementType;
					public static GROUPFORMELEMENT: com.arcgismaps.internal.jni.CoreFormElementType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFormElementType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFormElementType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFormElementType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFormExpressionEvaluationError {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFormExpressionEvaluationError>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreFormExpressionEvaluationErrorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFormExpressionEvaluationError;
					public getExpressionName(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFormGroupState {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFormGroupState>;
					public static COLLAPSED: com.arcgismaps.internal.jni.CoreFormGroupState;
					public static EXPANDED: com.arcgismaps.internal.jni.CoreFormGroupState;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFormGroupState;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFormGroupState>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFormGroupState;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFormInput {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFormInput>;
					public mHandle: number;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFormInput;
					public getObjectType(): com.arcgismaps.internal.jni.CoreFormInputType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreFormInputFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFormInput;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFormInputNoValueOption {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFormInputNoValueOption>;
					public static SHOW: com.arcgismaps.internal.jni.CoreFormInputNoValueOption;
					public static HIDE: com.arcgismaps.internal.jni.CoreFormInputNoValueOption;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFormInputNoValueOption;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFormInputNoValueOption;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFormInputNoValueOption>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFormInputType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFormInputType>;
					public static UNSUPPORTEDFORMINPUT: com.arcgismaps.internal.jni.CoreFormInputType;
					public static COMBOBOXFORMINPUT: com.arcgismaps.internal.jni.CoreFormInputType;
					public static DATETIMEPICKERFORMINPUT: com.arcgismaps.internal.jni.CoreFormInputType;
					public static RADIOBUTTONSFORMINPUT: com.arcgismaps.internal.jni.CoreFormInputType;
					public static SWITCHFORMINPUT: com.arcgismaps.internal.jni.CoreFormInputType;
					public static TEXTAREAFORMINPUT: com.arcgismaps.internal.jni.CoreFormInputType;
					public static TEXTBOXFORMINPUT: com.arcgismaps.internal.jni.CoreFormInputType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreFormInputType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreFormInputType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreFormInputType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFrameCameraAddRastersParameters extends com.arcgismaps.internal.jni.CoreAddRastersParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFrameCameraAddRastersParameters>;
					public setFramesFile(param0: string): void;
					public setCamerasFile(param0: string): void;
					public getShareRasterInfo(): boolean;
					public getCamerasFile(): string;
					public constructor();
					public getFramesFile(): string;
					public static createCoreFrameCameraAddRastersParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFrameCameraAddRastersParameters;
					public setShareRasterInfo(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFreehandTool extends com.arcgismaps.internal.jni.CoreGeometryEditorTool {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFreehandTool>;
					public constructor();
					public setConfiguration(param0: com.arcgismaps.internal.jni.CoreInteractionConfiguration): void;
					public static createCoreFreehandToolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreFreehandTool;
					public getConfiguration(): com.arcgismaps.internal.jni.CoreInteractionConfiguration;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreFullTimeExtentChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						fullTimeExtentChanged(): void;
					});
					public constructor();
					public fullTimeExtentChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGARSConversionMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGARSConversionMode>;
					public static LOWERLEFT: com.arcgismaps.internal.jni.CoreGARSConversionMode;
					public static CENTER: com.arcgismaps.internal.jni.CoreGARSConversionMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGARSConversionMode>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGARSConversionMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGARSConversionMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGUID {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGUID>;
					public mHandle: number;
					public toString(): string;
					public constructor(param0: string);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreGUIDFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGUID;
					public equals(param0: com.arcgismaps.internal.jni.CoreGUID): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGenerateGeodatabaseJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGenerateGeodatabaseJob>;
					public getResult(): com.arcgismaps.internal.jni.CoreGeodatabase;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public static createCoreGenerateGeodatabaseJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGenerateGeodatabaseJob;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGenerateGeodatabaseParameters extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters>;
					public mHandle: number;
					public getSyncContingentValues(): boolean;
					public finalize(): void;
					public setSyncAnnotations(param0: boolean): void;
					public getOutSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public setSyncModel(param0: com.arcgismaps.internal.jni.CoreSyncModel): void;
					public getReturnAttachments(): boolean;
					public constructor();
					public getExtent(): com.arcgismaps.internal.jni.CoreGeometry;
					public close(): void;
					public setSyncDimensions(param0: boolean): void;
					public getSyncAnnotations(): boolean;
					public setUtilityNetworkSyncMode(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode): void;
					public setAttachmentSyncDirection(param0: com.arcgismaps.internal.jni.CoreAttachmentSyncDirection): void;
					public getInstanceId(): java.lang.Long;
					public dispose(): void;
					public getUtilityNetworkSyncMode(): com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode;
					public clone(): com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters;
					public getLayerOptions(): com.arcgismaps.internal.jni.CoreVector;
					public setLayerOptions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getAttachmentSyncDirection(): com.arcgismaps.internal.jni.CoreAttachmentSyncDirection;
					public setReturnAttachments(param0: boolean): void;
					public static createCoreGenerateGeodatabaseParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters;
					public setExtent(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public static nativeDestroy(param0: number): void;
					public getSyncDimensions(): boolean;
					public setOutSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public setSyncContingentValues(param0: boolean): void;
					public getHandle(): number;
					public getSyncModel(): com.arcgismaps.internal.jni.CoreSyncModel;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGenerateLayerOption {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGenerateLayerOption>;
					public mHandle: number;
					public getWhereClause(): string;
					public finalize(): void;
					public static createCoreGenerateLayerOptionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGenerateLayerOption;
					public getQueryOption(): com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption;
					public clone(): com.arcgismaps.internal.jni.CoreGenerateLayerOption;
					public dispose(): void;
					public constructor(param0: number, param1: string);
					public setQueryOption(param0: com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption): void;
					public constructor(param0: number, param1: boolean);
					public getLayerId(): number;
					public setLayerId(param0: number): void;
					public getIncludeRelated(): boolean;
					public setUseGeometry(param0: boolean): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setIncludeRelated(param0: boolean): void;
					public setWhereClause(param0: string): void;
					public getUseGeometry(): boolean;
					public close(): void;
					public constructor(param0: number);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGenerateLayerQueryOption {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption>;
					public static ALL: com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption;
					public static NONE: com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption;
					public static USEFILTER: com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGenerateOfflineMapJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGenerateOfflineMapJob>;
					public static createCoreGenerateOfflineMapJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGenerateOfflineMapJob;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getTask(): com.arcgismaps.internal.jni.CoreOfflineMapTask;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getOnlineMap(): com.arcgismaps.internal.jni.CoreMap;
					public getParameters(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getParameterOverrides(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides;
					public toJSON(): string;
					public getDownloadDirectoryPath(): string;
					public getResult(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapResult;
					public getJobs(): com.arcgismaps.internal.jni.CoreArrayObservable;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGenerateOfflineMapParameterOverrides {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides>;
					public mHandle: number;
					public getExportTileCacheParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public getExportVectorTilesParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public setExportVectorTilesParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public finalize(): void;
					public dispose(): void;
					public static createCoreGenerateOfflineMapParameterOverridesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides;
					public setGenerateGeodatabaseParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public getOnlineLayers(): com.arcgismaps.internal.jni.CoreVector;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getOnlineTables(): com.arcgismaps.internal.jni.CoreVector;
					public setExportTileCacheParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public getGenerateGeodatabaseParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGenerateOfflineMapParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters>;
					public mHandle: number;
					public setIsDefinitionExpressionFilterEnabled(param0: boolean): void;
					public setReferenceBasemapDirectory(param0: string): void;
					public getAreaOfInterest(): com.arcgismaps.internal.jni.CoreGeometry;
					public static createCoreGenerateOfflineMapParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters;
					public finalize(): void;
					public setMinScale(param0: number): void;
					public getOnlineOnlyServicesOption(): com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: number);
					public setEsriVectorTilesDownloadOption(param0: com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption): void;
					public getMinScale(): number;
					public setOnlineOnlyServicesOption(param0: com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption): void;
					public constructor();
					public close(): void;
					public setContinueOnErrors(param0: boolean): void;
					public getReturnLayerAttachmentOption(): com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption;
					public setUpdateMode(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode): void;
					public getReferenceBasemapFilename(): string;
					public setAreaOfInterest(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public setDestinationTableRowFilter(param0: com.arcgismaps.internal.jni.CoreDestinationTableRowFilter): void;
					public setMaxScale(param0: number): void;
					public setAttachmentSyncDirection(param0: com.arcgismaps.internal.jni.CoreAttachmentSyncDirection): void;
					public dispose(): void;
					public setIncludeBasemap(param0: boolean): void;
					public setReturnLayerAttachmentOption(param0: com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption): void;
					public setReturnSchemaOnlyForEditableLayers(param0: boolean): void;
					public getAttachmentSyncDirection(): com.arcgismaps.internal.jni.CoreAttachmentSyncDirection;
					public setItemInfo(param0: com.arcgismaps.internal.jni.CoreOfflineMapItemInfo): void;
					public getReturnSchemaOnlyForEditableLayers(): boolean;
					public getMaxScale(): number;
					public getReferenceBasemapDirectory(): string;
					public setReferenceBasemapFilename(param0: string): void;
					public static nativeDestroy(param0: number): void;
					public getDestinationTableRowFilter(): com.arcgismaps.internal.jni.CoreDestinationTableRowFilter;
					public getEsriVectorTilesDownloadOption(): com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption;
					public getIsDefinitionExpressionFilterEnabled(): boolean;
					public getIncludeBasemap(): boolean;
					public getContinueOnErrors(): boolean;
					public getUpdateMode(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode;
					public getItemInfo(): com.arcgismaps.internal.jni.CoreOfflineMapItemInfo;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGenerateOfflineMapResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGenerateOfflineMapResult>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getTableErrors(): com.arcgismaps.internal.jni.CoreDictionary;
					public getLayerErrors(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getMobileMapPackage(): com.arcgismaps.internal.jni.CoreMobileMapPackage;
					public close(): void;
					public dispose(): void;
					public getOfflineMap(): com.arcgismaps.internal.jni.CoreMap;
					public static createCoreGenerateOfflineMapResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGenerateOfflineMapResult;
					public getHandle(): number;
					public getHasErrors(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGenerateOfflineMapUpdateMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode>;
					public static SYNCWITHFEATURESERVICES: com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode;
					public static NOUPDATES: com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoElement>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreGeoElement interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
						getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
						setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
						computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					});
					public constructor();
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoElementLineOfSight extends com.arcgismaps.internal.jni.CoreLineOfSight {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoElementLineOfSight>;
					public getTargetOffsetX(): number;
					public setTargetOffsetX(param0: number): void;
					public getObserverOffsetZ(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreElement, param1: com.arcgismaps.internal.jni.CoreElement);
					public setTargetOffsetY(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public setTargetOffsetZ(param0: number): void;
					public setObserverOffsetZ(param0: number): void;
					public getTargetGeoElement(): com.arcgismaps.internal.jni.CoreElement;
					public setObserverOffsetX(param0: number): void;
					public getObserverOffsetY(): number;
					public setObserverOffsetY(param0: number): void;
					public getTargetOffsetY(): number;
					public constructor();
					public getObserverOffsetX(): number;
					public getObserverGeoElement(): com.arcgismaps.internal.jni.CoreElement;
					public static createCoreGeoElementLineOfSightFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoElementLineOfSight;
					public getTargetOffsetZ(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoElementViewshed extends com.arcgismaps.internal.jni.CoreViewshed {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoElementViewshed>;
					public getInstanceId(): java.lang.Long;
					public getOffsetZ(): number;
					public getHeadingOffset(): number;
					public getOffsetX(): number;
					public setOffsetX(param0: number): void;
					public getGeoElement(): com.arcgismaps.internal.jni.CoreElement;
					public setOffsetY(param0: number): void;
					public setOffsetZ(param0: number): void;
					public setPitchOffset(param0: number): void;
					public static createCoreGeoElementViewshedFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoElementViewshed;
					public constructor(param0: com.arcgismaps.internal.jni.CoreElement, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number);
					public constructor();
					public getOffsetY(): number;
					public setHeadingOffset(param0: number): void;
					public getPitchOffset(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoModel implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoModel>;
					public mHandle: number;
					public setTables(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getVersion(): string;
					public onBasemapChanged(param0: number): void;
					public setBasemap(param0: com.arcgismaps.internal.jni.CoreBasemap): void;
					public finalize(): void;
					public getTables(): com.arcgismaps.internal.jni.CoreVector;
					public load(): void;
					public getInitialViewpoint(): com.arcgismaps.internal.jni.CoreViewpoint;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getTransportationNetworks(): com.arcgismaps.internal.jni.CoreArray;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public setFloorDefinition(param0: com.arcgismaps.internal.jni.CoreGeoModelFloorDefinition): void;
					public getLoadSettings(): com.arcgismaps.internal.jni.CoreLoadSettings;
					public setOperationalLayers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public onDoneLoading(param0: number): void;
					public setBookmarks(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public onRequestRequired(param0: number): void;
					public getFloorManager(): com.arcgismaps.internal.jni.CoreFloorManager;
					public getFloorDefinition(): com.arcgismaps.internal.jni.CoreGeoModelFloorDefinition;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public clone(): com.arcgismaps.internal.jni.CoreGeoModel;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoModel;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getItem(): com.arcgismaps.internal.jni.CoreItem;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getGeotriggersInfo(): com.arcgismaps.internal.jni.CoreGeotriggersInfo;
					public setInitialViewpoint(param0: com.arcgismaps.internal.jni.CoreViewpoint): void;
					public static nativeDestroy(param0: number): void;
					public setBasemapChangedCallback(param0: com.arcgismaps.internal.jni.CoreBasemapChangedCallbackListener): void;
					public setItem(param0: com.arcgismaps.internal.jni.CoreItem): void;
					public getBookmarks(): com.arcgismaps.internal.jni.CoreVector;
					public getOperationalLayers(): com.arcgismaps.internal.jni.CoreVector;
					public setLoadSettings(param0: com.arcgismaps.internal.jni.CoreLoadSettings): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static createCoreGeoModelFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoModel;
					public getBasemap(): com.arcgismaps.internal.jni.CoreBasemap;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeoModelType;
					public getHandle(): number;
					public equals(param0: com.arcgismaps.internal.jni.CoreGeoModel): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoModelFloorDefinition extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoModelFloorDefinition>;
					public mHandle: number;
					public getFacilityLayerDefinition(): com.arcgismaps.internal.jni.CoreFacilityLayerDefinition;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreGeoModelFloorDefinition;
					public dispose(): void;
					public getLevelLayerDefinition(): com.arcgismaps.internal.jni.CoreLevelLayerDefinition;
					public static createCoreGeoModelFloorDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoModelFloorDefinition;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreFacilityLayerDefinition, param1: com.arcgismaps.internal.jni.CoreLevelLayerDefinition, param2: com.arcgismaps.internal.jni.CoreSiteLayerDefinition);
					public getSiteLayerDefinition(): com.arcgismaps.internal.jni.CoreSiteLayerDefinition;
					public toJSON(): string;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoModelType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoModelType>;
					public static MAP: com.arcgismaps.internal.jni.CoreGeoModelType;
					public static SCENE: com.arcgismaps.internal.jni.CoreGeoModelType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeoModelType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeoModelType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeoModelType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoPackage implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoPackage>;
					public mHandle: number;
					public constructor(param0: string);
					public getInstanceId(): java.lang.Long;
					public getGeoPackageFeatureTables(): com.arcgismaps.internal.jni.CoreArray;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPath(): string;
					public retryLoad(): void;
					public static createCoreGeoPackageFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoPackage;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public getGeoPackageRasters(): com.arcgismaps.internal.jni.CoreArray;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoPackageFeatureTable extends com.arcgismaps.internal.jni.CoreFeatureTable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoPackageFeatureTable>;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public static createCoreGeoPackageFeatureTableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoPackageFeatureTable;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setIsPopupEnabled(param0: boolean): void;
					public getDescription(): string;
					public getGeoPackage(): com.arcgismaps.internal.jni.CoreGeoPackage;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoPackageRaster extends com.arcgismaps.internal.jni.CoreRaster {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoPackageRaster>;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public load(): void;
					public getDescription(): string;
					public getGeoPackage(): com.arcgismaps.internal.jni.CoreGeoPackage;
					public static createCoreGeoPackageRasterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoPackageRaster;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoView {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoView>;
					public mHandle: number;
					public getDrawStatus(): com.arcgismaps.internal.jni.CoreDrawStatus;
					public setLayerViewStateChangedCallback(param0: com.arcgismaps.internal.jni.CoreLayerViewStateChangedCallbackListener): void;
					public identifyGraphicsOverlayWithMaxResults(param0: com.arcgismaps.internal.jni.CoreGraphicsOverlay, param1: androidNative.Array<number>, param2: number, param3: boolean, param4: number): com.arcgismaps.internal.jni.CoreTask;
					public geometryEditorInteractionCancel(): void;
					public geometryEditorInteractionTap(param0: androidNative.Array<number>, param1: com.arcgismaps.internal.jni.CoreInteractionDeviceType): boolean;
					public static createCoreGeoViewFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoView;
					public constructor();
					public getLabeling(): com.arcgismaps.internal.jni.CoreViewLabelProperties;
					public close(): void;
					public setSpatialReferenceChangedCallback(param0: com.arcgismaps.internal.jni.CoreSpatialReferenceChangedCallbackListener): void;
					public getIsInteracting(): boolean;
					public identifyLayers(param0: androidNative.Array<number>, param1: number, param2: boolean): com.arcgismaps.internal.jni.CoreTask;
					public getIsAttributionTextVisible(): boolean;
					public interactionZoomInAnimated(param0: androidNative.Array<number>, param1: number): void;
					public setBookmarkAsync(param0: com.arcgismaps.internal.jni.CoreBookmark): com.arcgismaps.internal.jni.CoreTask;
					public onNavigationChanged(param0: boolean): void;
					public getHeight(): number;
					public setSelectionProperties(param0: com.arcgismaps.internal.jni.CoreSelectionProperties): void;
					public geometryEditorInteractionDragStart(param0: androidNative.Array<number>, param1: com.arcgismaps.internal.jni.CoreInteractionDeviceType): boolean;
					public onDrawRequested(): void;
					public getLayerViewState(param0: com.arcgismaps.internal.jni.CoreLayer): com.arcgismaps.internal.jni.CoreLayerViewState;
					public geometryEditorInteractionLongPress(param0: androidNative.Array<number>, param1: com.arcgismaps.internal.jni.CoreInteractionDeviceType): boolean;
					public geometryEditorInteractionDragEnd(param0: androidNative.Array<number>): void;
					public hasValidSize(): void;
					public setIsAttributionTextVisible(param0: boolean): void;
					public getSelectionProperties(): com.arcgismaps.internal.jni.CoreSelectionProperties;
					public setTimeExtentChangedCallback(param0: com.arcgismaps.internal.jni.CoreTimeExtentChangedCallbackListener): void;
					public setLabeling(param0: com.arcgismaps.internal.jni.CoreViewLabelProperties): void;
					public getTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public identifyGraphicsOverlaysWithMaxResults(param0: androidNative.Array<number>, param1: number, param2: boolean, param3: number): com.arcgismaps.internal.jni.CoreTask;
					public setDrawStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreDrawStatusChangedCallbackListener): void;
					public onSpatialReferenceChanged(): void;
					public setNavigationChangedCallback(param0: com.arcgismaps.internal.jni.CoreNavigationChangedCallbackListener): void;
					public identifyLayerWithMaxResults(param0: com.arcgismaps.internal.jni.CoreLayer, param1: androidNative.Array<number>, param2: number, param3: boolean, param4: number): com.arcgismaps.internal.jni.CoreTask;
					public setAttributionChangedCallback(param0: com.arcgismaps.internal.jni.CoreAttributionChangedCallbackListener): void;
					public geometryEditorInteractionReticlePosition(param0: androidNative.Array<number>, param1: com.arcgismaps.internal.jni.CoreInteractionDeviceType): void;
					public setViewpointChangedCallback(param0: com.arcgismaps.internal.jni.CoreViewpointChangedCallbackListener): void;
					public onTimeExtentChanged(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoView;
					public getHandle(): number;
					public onLayerViewStateChanged(param0: number, param1: number): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeoViewType;
					public getGraphicsOverlays(): com.arcgismaps.internal.jni.CoreVector;
					public resize(param0: number, param1: number): void;
					public isPaused(): boolean;
					public setScreenScale(param0: number): void;
					public draw(param0: com.arcgismaps.internal.jni.CoreDevice): void;
					public setViewpointAsync(param0: com.arcgismaps.internal.jni.CoreViewpoint): com.arcgismaps.internal.jni.CoreTask;
					public getIsNavigating(): boolean;
					public identifyLayer(param0: com.arcgismaps.internal.jni.CoreLayer, param1: androidNative.Array<number>, param2: number, param3: boolean): com.arcgismaps.internal.jni.CoreTask;
					public getAttributionText(): string;
					public setIsInteracting(param0: boolean): void;
					public geometryEditorInteractionMouseMove(param0: androidNative.Array<number>, param1: com.arcgismaps.internal.jni.CoreInteractionDeviceType): void;
					public pulse(): void;
					public dispose(): void;
					public getWidth(): number;
					public identifyGraphicsOverlays(param0: androidNative.Array<number>, param1: number, param2: boolean): com.arcgismaps.internal.jni.CoreTask;
					public getIsWrapAroundEnabled(): boolean;
					public setDrawRequestedCallback(param0: com.arcgismaps.internal.jni.CoreDrawRequestedCallbackListener): void;
					public geometryEditorInteractionDragMove(param0: androidNative.Array<number>): void;
					public onAttributionChanged(): void;
					public setViewpointWithDurationAsync(param0: com.arcgismaps.internal.jni.CoreViewpoint, param1: number): com.arcgismaps.internal.jni.CoreTask;
					public setTimeExtent(param0: com.arcgismaps.internal.jni.CoreTimeExtent): void;
					public geometryEditorInteractionMouseExit(): void;
					public onViewpointChanged(): void;
					public setViewpoint(param0: com.arcgismaps.internal.jni.CoreViewpoint): void;
					public setGraphicsOverlays(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static nativeDestroy(param0: number): void;
					public exportImageAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getCurrentViewpoint(param0: com.arcgismaps.internal.jni.CoreViewpointType): com.arcgismaps.internal.jni.CoreViewpoint;
					public identifyLayersWithMaxResults(param0: androidNative.Array<number>, param1: number, param2: boolean, param3: number): com.arcgismaps.internal.jni.CoreTask;
					public interactionZoomOutAnimated(param0: androidNative.Array<number>, param1: number): void;
					public pause(param0: com.arcgismaps.internal.jni.CoreDevice, param1: com.arcgismaps.internal.jni.CoreGraphicsHardwareResources): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public onDrawStatusChanged(param0: number): void;
					public identifyGraphicsOverlay(param0: com.arcgismaps.internal.jni.CoreGraphicsOverlay, param1: androidNative.Array<number>, param2: number, param3: boolean): com.arcgismaps.internal.jni.CoreTask;
					public setPulseRate(param0: number): void;
					public resume(param0: com.arcgismaps.internal.jni.CoreDevice): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoViewType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoViewType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreGeoViewType;
					public static MAPVIEW: com.arcgismaps.internal.jni.CoreGeoViewType;
					public static SCENEVIEW: com.arcgismaps.internal.jni.CoreGeoViewType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeoViewType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeoViewType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeoViewType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeocodeParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeocodeParameters>;
					public mHandle: number;
					public getSearchArea(): com.arcgismaps.internal.jni.CoreGeometry;
					public getCountryCode(): string;
					public finalize(): void;
					public getCategories(): com.arcgismaps.internal.jni.CoreVector;
					public getOutputLanguageCode(): string;
					public setForStorage(param0: boolean): void;
					public getPreferredSearchLocation(): com.arcgismaps.internal.jni.CorePoint;
					public setResultAttributeNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setSearchArea(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public setMaxResults(param0: number): void;
					public getResultAttributeNames(): com.arcgismaps.internal.jni.CoreVector;
					public getMinScore(): number;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getForStorage(): boolean;
					public constructor();
					public setOutputLanguageCode(param0: string): void;
					public close(): void;
					public getMaxResults(): number;
					public dispose(): void;
					public setPreferredSearchLocation(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public setOutputSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public static nativeDestroy(param0: number): void;
					public setCountryCode(param0: string): void;
					public setMinScore(param0: number): void;
					public static createCoreGeocodeParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeocodeParameters;
					public setCategories(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeocodeResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeocodeResult>;
					public mHandle: number;
					public getLabel(): string;
					public static createCoreGeocodeResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeocodeResult;
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getScore(): number;
					public dispose(): void;
					public getDisplayLocation(): com.arcgismaps.internal.jni.CorePoint;
					public getRouteLocation(): com.arcgismaps.internal.jni.CorePoint;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getInputLocation(): com.arcgismaps.internal.jni.CorePoint;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodatabase implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodatabase>;
					public mHandle: number;
					public constructor(param0: string);
					public finalize(): void;
					public getInTransaction(): boolean;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public createTableAsync(param0: com.arcgismaps.internal.jni.CoreTableDescription): com.arcgismaps.internal.jni.CoreTask;
					public retryLoad(): void;
					public constructor();
					public close(): void;
					public getGeodatabaseAnnotationTables(): com.arcgismaps.internal.jni.CoreArray;
					public getGenerateGeodatabaseGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getGeodatabaseFeatureTables(): com.arcgismaps.internal.jni.CoreArray;
					public getUtilityNetworks(): com.arcgismaps.internal.jni.CoreArray;
					public onRequestRequired(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public rollbackTransaction(): void;
					public cancelLoad(): void;
					public deleteDomainAsync(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public getSyncId(): com.arcgismaps.internal.jni.CoreGUID;
					public createDomainAsync(param0: com.arcgismaps.internal.jni.CoreDomainDescription): com.arcgismaps.internal.jni.CoreTask;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getIsSyncEnabled(): boolean;
					public getGeodatabaseAnnotationTable(param0: string): com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable;
					public getGeodatabaseAnnotationTableByServiceLayerId(param0: number): com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable;
					public getHandle(): number;
					public getGeodatabaseDimensionTables(): com.arcgismaps.internal.jni.CoreArray;
					public load(): void;
					public getUtilityNetwork(param0: string): com.arcgismaps.internal.jni.CoreUtilityNetwork;
					public onTransactionStatusChanged(param0: boolean): void;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setTransactionStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreTransactionStatusChangedCallbackListener): void;
					public onLoadStatusChanged(param0: number): void;
					public getGeodatabaseDimensionTableByServiceLayerId(param0: number): com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable;
					public getGeodatabaseFeatureTable(param0: string): com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable;
					public onDoneLoading(param0: number): void;
					public getGeodatabaseFeatureTableByServiceLayerId(param0: number): com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable;
					public getGeodatabaseDimensionTable(param0: string): com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public beginTransaction(): void;
					public dispose(): void;
					public static createAsync(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getServiceURL(): string;
					public commitTransaction(): void;
					public deleteTableAsync(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public getDomains(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getPath(): string;
					public getGenerateGeodatabaseExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public hasLocalEdits(): boolean;
					public static nativeDestroy(param0: number): void;
					public static createCoreGeodatabaseFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeodatabase;
					public getMinServerGeneration(): number;
					public getSyncModel(): com.arcgismaps.internal.jni.CoreSyncModel;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodatabaseDataset {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodatabaseDataset>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreGeodatabaseDataset interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getGeodatabase(): com.arcgismaps.internal.jni.CoreGeodatabase;
						getType(): com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType;
						getName(): string;
					});
					public constructor();
					public getName(): string;
					public getType(): com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType;
					public getGeodatabase(): com.arcgismaps.internal.jni.CoreGeodatabase;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodatabaseDatasetType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType;
					public static TRANSPORTATIONNETWORKDATASET: com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodatabaseDeltaInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodatabaseDeltaInfo>;
					public mHandle: number;
					public static createCoreGeodatabaseDeltaInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeodatabaseDeltaInfo;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public getDownloadDeltaPath(): string;
					public close(): void;
					public dispose(): void;
					public getGeodatabasePath(): string;
					public getUploadDeltaPath(): string;
					public getFeatureServiceURL(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodatabaseFeatureTable extends com.arcgismaps.internal.jni.CoreArcGISFeatureTable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable>;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public load(): void;
					public static createCoreGeodatabaseFeatureTableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeodatabaseFeatureTable, param1: com.arcgismaps.internal.jni.CoreRelationshipInfo);
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setIsPopupEnabled(param0: boolean): void;
					public hasLocalEditsSince(param0: com.arcgismaps.internal.jni.CoreDateTime): boolean;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getGeodatabase(): com.arcgismaps.internal.jni.CoreGeodatabase;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodatabaseSyncTask implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodatabaseSyncTask>;
					public mHandle: number;
					public static importDeltaAsync(param0: com.arcgismaps.internal.jni.CoreGeodatabase, param1: string): com.arcgismaps.internal.jni.CoreTask;
					public constructor(param0: string);
					public generateGeodatabase(param0: com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters, param1: string): com.arcgismaps.internal.jni.CoreGenerateGeodatabaseJob;
					public finalize(): void;
					public static createCoreGeodatabaseSyncTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeodatabaseSyncTask;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public syncGeodatabaseWithSyncDirection(param0: com.arcgismaps.internal.jni.CoreSyncDirection, param1: boolean, param2: com.arcgismaps.internal.jni.CoreGeodatabase): com.arcgismaps.internal.jni.CoreSyncGeodatabaseJob;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public setAPIKey(param0: string): void;
					public unregisterGeodatabaseAsync(param0: com.arcgismaps.internal.jni.CoreGeodatabase): com.arcgismaps.internal.jni.CoreTask;
					public syncGeodatabase(param0: com.arcgismaps.internal.jni.CoreSyncGeodatabaseParameters, param1: com.arcgismaps.internal.jni.CoreGeodatabase): com.arcgismaps.internal.jni.CoreSyncGeodatabaseJob;
					public onRequestRequired(param0: number): void;
					public unregisterGeodatabaseWithSyncIdAsync(param0: com.arcgismaps.internal.jni.CoreGUID): com.arcgismaps.internal.jni.CoreTask;
					public createDefaultSyncGeodatabaseParametersWithSyncDirectionAsync(param0: com.arcgismaps.internal.jni.CoreGeodatabase, param1: com.arcgismaps.internal.jni.CoreSyncDirection): com.arcgismaps.internal.jni.CoreTask;
					public createDefaultGenerateGeodatabaseParametersAsync(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public dispose(): void;
					public cancelLoad(): void;
					public createDefaultSyncGeodatabaseParametersAsync(param0: com.arcgismaps.internal.jni.CoreGeodatabase): com.arcgismaps.internal.jni.CoreTask;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getFeatureServiceInfo(): com.arcgismaps.internal.jni.CoreArcGISFeatureServiceInfo;
					public static nativeDestroy(param0: number): void;
					public static exportDeltaAsync(param0: com.arcgismaps.internal.jni.CoreGeodatabase, param1: string): com.arcgismaps.internal.jni.CoreTask;
					public registerSyncEnabledGeodatabaseAsync(param0: com.arcgismaps.internal.jni.CoreGeodatabase): com.arcgismaps.internal.jni.CoreTask;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodesicEllipseParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodesicEllipseParameters>;
					public mHandle: number;
					public finalize(): void;
					public setAxisDirection(param0: number): void;
					public getAngularUnit(): com.arcgismaps.internal.jni.CoreAngularUnit;
					public getCenter(): com.arcgismaps.internal.jni.CorePoint;
					public constructor();
					public setGeometryType(param0: com.arcgismaps.internal.jni.CoreGeometryType): void;
					public getLinearUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public getMaxPointCount(): number;
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number);
					public setSemiAxis2Length(param0: number): void;
					public setLinearUnit(param0: com.arcgismaps.internal.jni.CoreLinearUnit): void;
					public getMaxSegmentLength(): number;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreAngularUnit, param2: com.arcgismaps.internal.jni.CorePoint, param3: com.arcgismaps.internal.jni.CoreLinearUnit, param4: number, param5: number, param6: com.arcgismaps.internal.jni.CoreGeometryType, param7: number, param8: number);
					public getSemiAxis2Length(): number;
					public setMaxPointCount(param0: number): void;
					public dispose(): void;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public setSemiAxis1Length(param0: number): void;
					public static createCoreGeodesicEllipseParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeodesicEllipseParameters;
					public getAxisDirection(): number;
					public setAngularUnit(param0: com.arcgismaps.internal.jni.CoreAngularUnit): void;
					public static nativeDestroy(param0: number): void;
					public getSemiAxis1Length(): number;
					public setCenter(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public setMaxSegmentLength(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodesicSectorParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodesicSectorParameters>;
					public mHandle: number;
					public setSectorAngle(param0: number): void;
					public finalize(): void;
					public setAxisDirection(param0: number): void;
					public getStartDirection(): number;
					public getAngularUnit(): com.arcgismaps.internal.jni.CoreAngularUnit;
					public getCenter(): com.arcgismaps.internal.jni.CorePoint;
					public constructor();
					public setGeometryType(param0: com.arcgismaps.internal.jni.CoreGeometryType): void;
					public getLinearUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public getMaxPointCount(): number;
					public close(): void;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreAngularUnit, param2: com.arcgismaps.internal.jni.CorePoint, param3: com.arcgismaps.internal.jni.CoreLinearUnit, param4: number, param5: number, param6: com.arcgismaps.internal.jni.CoreGeometryType, param7: number, param8: number, param9: number, param10: number);
					public setSemiAxis2Length(param0: number): void;
					public setLinearUnit(param0: com.arcgismaps.internal.jni.CoreLinearUnit): void;
					public getSectorAngle(): number;
					public getMaxSegmentLength(): number;
					public getSemiAxis2Length(): number;
					public setMaxPointCount(param0: number): void;
					public static createCoreGeodesicSectorParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeodesicSectorParameters;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number, param4: number);
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public setStartDirection(param0: number): void;
					public setSemiAxis1Length(param0: number): void;
					public getAxisDirection(): number;
					public setAngularUnit(param0: com.arcgismaps.internal.jni.CoreAngularUnit): void;
					public static nativeDestroy(param0: number): void;
					public getSemiAxis1Length(): number;
					public setCenter(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public setMaxSegmentLength(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodeticCurveType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodeticCurveType>;
					public static GEODESIC: com.arcgismaps.internal.jni.CoreGeodeticCurveType;
					public static LOXODROME: com.arcgismaps.internal.jni.CoreGeodeticCurveType;
					public static GREATELLIPTIC: com.arcgismaps.internal.jni.CoreGeodeticCurveType;
					public static NORMALSECTION: com.arcgismaps.internal.jni.CoreGeodeticCurveType;
					public static SHAPEPRESERVING: com.arcgismaps.internal.jni.CoreGeodeticCurveType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeodeticCurveType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeodeticCurveType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeodeticCurveType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeodeticDistanceResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeodeticDistanceResult>;
					public mHandle: number;
					public getAzimuth1(): number;
					public getAzimuthUnit(): com.arcgismaps.internal.jni.CoreAngularUnit;
					public getDistance(): number;
					public static nativeDestroy(param0: number): void;
					public static createCoreGeodeticDistanceResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeodeticDistanceResult;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getAzimuth2(): number;
					public getDistanceUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeographicTransformation extends com.arcgismaps.internal.jni.CoreDatumTransformation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeographicTransformation>;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreArray);
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeographicTransformationStep);
					public static createCoreGeographicTransformationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeographicTransformation;
					public getSteps(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeographicTransformationStep {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeographicTransformationStep>;
					public mHandle: number;
					public getInverse(): com.arcgismaps.internal.jni.CoreGeographicTransformationStep;
					public constructor(param0: string);
					public getHash(): number;
					public finalize(): void;
					public dispose(): void;
					public static createCoreGeographicTransformationStepFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeographicTransformationStep;
					public getWKID(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getIsInverse(): boolean;
					public getProjectionEngineFilenames(): com.arcgismaps.internal.jni.CoreArray;
					public equals(param0: com.arcgismaps.internal.jni.CoreGeographicTransformationStep): boolean;
					public getIsMissingProjectionEngineFiles(): boolean;
					public constructor(param0: number);
					public getHandle(): number;
					public getWKText(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometricEffect {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometricEffect>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getHash(): number;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreGeometricEffectFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometricEffect;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometricEffect;
					public clone(): com.arcgismaps.internal.jni.CoreGeometricEffect;
					public equals(param0: com.arcgismaps.internal.jni.CoreGeometricEffect): boolean;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeometricEffectType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometricEffectType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometricEffectType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreGeometricEffectType;
					public static DASHGEOMETRICEFFECT: com.arcgismaps.internal.jni.CoreGeometricEffectType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeometricEffectType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeometricEffectType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeometricEffectType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometry extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometry>;
					public mHandle: number;
					public getHasZ(): boolean;
					public equals(param0: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public equalsWithTolerance(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number): boolean;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getHash(): number;
					public finalize(): void;
					public dispose(): void;
					public getDimension(): com.arcgismaps.internal.jni.CoreGeometryDimension;
					public getHasM(): boolean;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometry;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreGeometry;
					public static createCoreGeometryFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometry;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static fromJSONWithSpatialReference(param0: string, param1: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreGeometry;
					public toJSON(): string;
					public close(): void;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getIsEmpty(): boolean;
					public getHandle(): number;
					public getHasCurves(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryBuilder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryBuilder>;
					public mHandle: number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeometryBuilderType;
					public static createFromGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometryBuilder;
					public getHasZ(): boolean;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryBuilder;
					public static createFromGeometryTypeAndSpatialReference(param0: com.arcgismaps.internal.jni.CoreGeometryType, param1: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreGeometryBuilder;
					public static createCoreGeometryBuilderFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryBuilder;
					public replaceGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public finalize(): void;
					public dispose(): void;
					public getHasM(): boolean;
					public toGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getIsSketchValid(): boolean;
					public close(): void;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getIsEmpty(): boolean;
					public getHandle(): number;
					public getHasCurves(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryBuilderType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryBuilderType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreGeometryBuilderType;
					public static POINTBUILDER: com.arcgismaps.internal.jni.CoreGeometryBuilderType;
					public static ENVELOPEBUILDER: com.arcgismaps.internal.jni.CoreGeometryBuilderType;
					public static POLYLINEBUILDER: com.arcgismaps.internal.jni.CoreGeometryBuilderType;
					public static POLYGONBUILDER: com.arcgismaps.internal.jni.CoreGeometryBuilderType;
					public static MULTIPOINTBUILDER: com.arcgismaps.internal.jni.CoreGeometryBuilderType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeometryBuilderType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeometryBuilderType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeometryBuilderType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreGeometryChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						geometryChanged(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					});
					public constructor();
					public geometryChanged(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryDimension {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryDimension>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreGeometryDimension;
					public static POINT: com.arcgismaps.internal.jni.CoreGeometryDimension;
					public static CURVE: com.arcgismaps.internal.jni.CoreGeometryDimension;
					public static AREA: com.arcgismaps.internal.jni.CoreGeometryDimension;
					public static VOLUME: com.arcgismaps.internal.jni.CoreGeometryDimension;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeometryDimension;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeometryDimension>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeometryDimension;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditor {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditor>;
					public mHandle: number;
					public setTool(param0: com.arcgismaps.internal.jni.CoreGeometryEditorTool): void;
					public deleteSelectedElement(): void;
					public rotateSelectedElement(param0: number, param1: com.arcgismaps.internal.jni.CorePoint): void;
					public onIsStartedChanged(param0: boolean): void;
					public replaceGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public finalize(): void;
					public clearGeometry(): void;
					public moveSelectedElement(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public undo(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getIsVisible(): boolean;
					public redo(): void;
					public onCanUndoChanged(param0: boolean): void;
					public getCanRedo(): boolean;
					public scaleSelectedElement(param0: number, param1: number, param2: com.arcgismaps.internal.jni.CorePoint): void;
					public setCanRedoChangedCallback(param0: com.arcgismaps.internal.jni.CoreCanRedoChangedCallbackListener): void;
					public constructor();
					public close(): void;
					public static createCoreGeometryEditorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditor;
					public getCanUndo(): boolean;
					public setGeometryChangedCallback(param0: com.arcgismaps.internal.jni.CoreGeometryChangedCallbackListener): void;
					public getSelectedElement(): com.arcgismaps.internal.jni.CoreGeometryEditorElement;
					public onGeometryChanged(param0: number): void;
					public dispose(): void;
					public moveSelectedElementWithDelta(param0: number, param1: number): void;
					public setIsStartedChangedCallback(param0: com.arcgismaps.internal.jni.CoreIsStartedChangedCallbackListener): void;
					public onCanRedoChanged(param0: boolean): void;
					public startWithGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getTool(): com.arcgismaps.internal.jni.CoreGeometryEditorTool;
					public onSelectedElementChanged(param0: number): void;
					public stop(): com.arcgismaps.internal.jni.CoreGeometry;
					public clearSelection(): void;
					public insertVertex(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public static nativeDestroy(param0: number): void;
					public getIsStarted(): boolean;
					public setSelectedElementChangedCallback(param0: com.arcgismaps.internal.jni.CoreSelectedElementChangedCallbackListener): void;
					public selectPart(param0: number): void;
					public startWithGeometryType(param0: com.arcgismaps.internal.jni.CoreGeometryType): void;
					public setIsVisible(param0: boolean): void;
					public setCanUndoChangedCallback(param0: com.arcgismaps.internal.jni.CoreCanUndoChangedCallbackListener): void;
					public setSnapSettings(param0: com.arcgismaps.internal.jni.CoreSnapSettings): void;
					public selectGeometry(): void;
					public getSnapSettings(): com.arcgismaps.internal.jni.CoreSnapSettings;
					public selectVertex(param0: number, param1: number): void;
					public getHandle(): number;
					public selectMidVertex(param0: number, param1: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorElement>;
					public mHandle: number;
					public getCanDelete(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeometryEditorElementType;
					public static createCoreGeometryEditorElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorElement;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorElement;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getCanRotate(): boolean;
					public getCanMove(): boolean;
					public close(): void;
					public getCanScale(): boolean;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorElementType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorElementType>;
					public static GEOMETRYEDITORGEOMETRY: com.arcgismaps.internal.jni.CoreGeometryEditorElementType;
					public static GEOMETRYEDITORPART: com.arcgismaps.internal.jni.CoreGeometryEditorElementType;
					public static GEOMETRYEDITORVERTEX: com.arcgismaps.internal.jni.CoreGeometryEditorElementType;
					public static GEOMETRYEDITORMIDVERTEX: com.arcgismaps.internal.jni.CoreGeometryEditorElementType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorElementType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeometryEditorElementType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeometryEditorElementType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorGeometry extends com.arcgismaps.internal.jni.CoreGeometryEditorElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorGeometry>;
					public static createCoreGeometryEditorGeometryFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorGeometry;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorMidVertex extends com.arcgismaps.internal.jni.CoreGeometryEditorElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorMidVertex>;
					public getSegmentIndex(): number;
					public getPartIndex(): number;
					public getPoint(): com.arcgismaps.internal.jni.CorePoint;
					public static createCoreGeometryEditorMidVertexFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorMidVertex;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorPart extends com.arcgismaps.internal.jni.CoreGeometryEditorElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorPart>;
					public static createCoreGeometryEditorPartFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorPart;
					public getPartIndex(): number;
					public getPart(): com.arcgismaps.internal.jni.CoreImmutablePart;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorScaleMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode>;
					public static STRETCH: com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode;
					public static UNIFORM: com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorStyle>;
					public mHandle: number;
					public getSelectedMidVertexSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setBoundingBoxSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setOpacity(param0: number): void;
					public finalize(): void;
					public setSelectedVertexSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getFeedbackLineSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getVertexSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setVertexSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setBoundingBoxHandleSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public constructor();
					public getFeedbackVertexSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setSnappedToLineSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getSnappedToVertexSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public close(): void;
					public getMultipleSnapCandidatesSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getOpacity(): number;
					public static createCoreGeometryEditorStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorStyle;
					public getMidVertexSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getRotateHandleSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getBoundingBoxSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public dispose(): void;
					public getBoundingBoxHandleSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setMultipleSnapCandidatesSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setFillSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getLineSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getVertexTextSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public static nativeDestroy(param0: number): void;
					public setLineSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setMidVertexSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setSelectedMidVertexSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getSnappedToLineSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getFillSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setFeedbackVertexSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setRotateHandleSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setFeedbackLineSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setVertexTextSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getSelectedVertexSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setSnappedToVertexSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorTool {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorTool>;
					public mHandle: number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeometryEditorToolType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public static createCoreGeometryEditorToolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorTool;
					public close(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorTool;
					public setStyle(param0: com.arcgismaps.internal.jni.CoreGeometryEditorStyle): void;
					public getHandle(): number;
					public getStyle(): com.arcgismaps.internal.jni.CoreGeometryEditorStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorToolType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorToolType>;
					public static VERTEXTOOL: com.arcgismaps.internal.jni.CoreGeometryEditorToolType;
					public static FREEHANDTOOL: com.arcgismaps.internal.jni.CoreGeometryEditorToolType;
					public static SHAPETOOL: com.arcgismaps.internal.jni.CoreGeometryEditorToolType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeometryEditorToolType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorToolType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeometryEditorToolType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEditorVertex extends com.arcgismaps.internal.jni.CoreGeometryEditorElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEditorVertex>;
					public getPartIndex(): number;
					public getPoint(): com.arcgismaps.internal.jni.CorePoint;
					public getVertexIndex(): number;
					public static createCoreGeometryEditorVertexFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeometryEditorVertex;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryEngine {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryEngine>;
					public static boundary(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static area(param0: com.arcgismaps.internal.jni.CoreGeometry): number;
					public static cut(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CorePolyline): com.arcgismaps.internal.jni.CoreArray;
					public static extend(param0: com.arcgismaps.internal.jni.CorePolyline, param1: com.arcgismaps.internal.jni.CorePolyline, param2: number): com.arcgismaps.internal.jni.CorePolyline;
					public static intersections(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreArray;
					public static offset(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: com.arcgismaps.internal.jni.CoreGeometryOffsetType, param3: number, param4: number): com.arcgismaps.internal.jni.CoreGeometry;
					public static nearestCoordinateGeodetic(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CorePoint, param2: number, param3: com.arcgismaps.internal.jni.CoreLinearUnit): com.arcgismaps.internal.jni.CoreProximityResult;
					public static setM(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number): com.arcgismaps.internal.jni.CoreGeometry;
					public static within(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public static reshape(param0: com.arcgismaps.internal.jni.CoreMultipart, param1: com.arcgismaps.internal.jni.CorePolyline): com.arcgismaps.internal.jni.CoreMultipart;
					public static densify(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number): com.arcgismaps.internal.jni.CoreGeometry;
					public static setZAndM(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: number): com.arcgismaps.internal.jni.CoreGeometry;
					public static sectorGeodesic(param0: com.arcgismaps.internal.jni.CoreGeodesicSectorParameters): com.arcgismaps.internal.jni.CoreGeometry;
					public constructor();
					public static combineExtents(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreEnvelope;
					public static moveGeodetic(param0: com.arcgismaps.internal.jni.CoreVector, param1: number, param2: com.arcgismaps.internal.jni.CoreLinearUnit, param3: number, param4: com.arcgismaps.internal.jni.CoreAngularUnit, param5: com.arcgismaps.internal.jni.CoreGeodeticCurveType): com.arcgismaps.internal.jni.CoreArray;
					public static relate(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry, param2: string): boolean;
					public static simplify(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static move(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: number): com.arcgismaps.internal.jni.CoreGeometry;
					public static disjoint(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public static symmetricDifference(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static nearestVertex(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CorePoint): com.arcgismaps.internal.jni.CoreProximityResult;
					public static fractionAlong(param0: com.arcgismaps.internal.jni.CorePolyline, param1: com.arcgismaps.internal.jni.CorePoint, param2: number): number;
					public static equals(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public static setZ(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number): com.arcgismaps.internal.jni.CoreGeometry;
					public static isSimple(param0: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public static lengthGeodetic(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreLinearUnit, param2: com.arcgismaps.internal.jni.CoreGeodeticCurveType): number;
					public static intersection(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static unionCollection(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreGeometry;
					public static convexHullCollection(param0: com.arcgismaps.internal.jni.CoreVector, param1: boolean): com.arcgismaps.internal.jni.CoreArray;
					public static convexHull(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static contains(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public static overlaps(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public static distanceGeodetic(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint, param2: com.arcgismaps.internal.jni.CoreLinearUnit, param3: com.arcgismaps.internal.jni.CoreAngularUnit, param4: com.arcgismaps.internal.jni.CoreGeodeticCurveType): com.arcgismaps.internal.jni.CoreGeodeticDistanceResult;
					public static bufferGeodeticCollection(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreVector, param2: com.arcgismaps.internal.jni.CoreLinearUnit, param3: number, param4: com.arcgismaps.internal.jni.CoreGeodeticCurveType, param5: boolean): com.arcgismaps.internal.jni.CoreArray;
					public static clip(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreEnvelope): com.arcgismaps.internal.jni.CoreGeometry;
					public static bufferGeodetic(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: com.arcgismaps.internal.jni.CoreLinearUnit, param3: number, param4: com.arcgismaps.internal.jni.CoreGeodeticCurveType): com.arcgismaps.internal.jni.CorePolygon;
					public static rotate(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: com.arcgismaps.internal.jni.CorePoint): com.arcgismaps.internal.jni.CoreGeometry;
					public static projectWithTransformation(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreDatumTransformation): com.arcgismaps.internal.jni.CoreGeometry;
					public static densifyGeodetic(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: com.arcgismaps.internal.jni.CoreLinearUnit, param3: com.arcgismaps.internal.jni.CoreGeodeticCurveType): com.arcgismaps.internal.jni.CoreGeometry;
					public static removeZ(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static ellipseGeodesic(param0: com.arcgismaps.internal.jni.CoreGeodesicEllipseParameters): com.arcgismaps.internal.jni.CoreGeometry;
					public static normalizeCentralMeridian(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static project(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreGeometry;
					public static createPointAlong(param0: com.arcgismaps.internal.jni.CorePolyline, param1: number): com.arcgismaps.internal.jni.CorePoint;
					public static crosses(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public static combineExtentsCollection(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreEnvelope;
					public static scale(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CorePoint): com.arcgismaps.internal.jni.CoreGeometry;
					public static labelPoint(param0: com.arcgismaps.internal.jni.CorePolygon): com.arcgismaps.internal.jni.CorePoint;
					public static length(param0: com.arcgismaps.internal.jni.CoreGeometry): number;
					public static nearestCoordinate(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CorePoint): com.arcgismaps.internal.jni.CoreProximityResult;
					public static areaGeodetic(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreAreaUnit, param2: com.arcgismaps.internal.jni.CoreGeodeticCurveType): number;
					public static removeM(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static removeZAndM(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static touches(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public static bufferCollection(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreVector, param2: boolean): com.arcgismaps.internal.jni.CoreArray;
					public static union(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static generalize(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: boolean): com.arcgismaps.internal.jni.CoreGeometry;
					public static intersects(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): boolean;
					public static difference(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreGeometry;
					public static autoComplete(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreArray;
					public static buffer(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number): com.arcgismaps.internal.jni.CorePolygon;
					public static distance(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreGeometry): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryExtendOptions {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryExtendOptions>;
					public static DEFAULT: number;
					public static RELOCATEENDS: number;
					public static KEEPENDATTRIBUTES: number;
					public static NOENDATTRIBUTES: number;
					public static DONOTEXTENDFROMSTARTPOINT: number;
					public static DONOTEXTENDFROMENDPOINT: number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryOffsetType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryOffsetType>;
					public static MITERED: com.arcgismaps.internal.jni.CoreGeometryOffsetType;
					public static BEVELLED: com.arcgismaps.internal.jni.CoreGeometryOffsetType;
					public static ROUNDED: com.arcgismaps.internal.jni.CoreGeometryOffsetType;
					public static SQUARED: com.arcgismaps.internal.jni.CoreGeometryOffsetType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeometryOffsetType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeometryOffsetType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeometryOffsetType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeometryType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeometryType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreGeometryType;
					public static POINT: com.arcgismaps.internal.jni.CoreGeometryType;
					public static ENVELOPE: com.arcgismaps.internal.jni.CoreGeometryType;
					public static POLYLINE: com.arcgismaps.internal.jni.CoreGeometryType;
					public static POLYGON: com.arcgismaps.internal.jni.CoreGeometryType;
					public static MULTIPOINT: com.arcgismaps.internal.jni.CoreGeometryType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeometryType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeometryType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeometryType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingBoolean extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingBoolean>;
					public setValue(param0: boolean): void;
					public constructor(param0: boolean);
					public static createCoreGeoprocessingBooleanFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingBoolean;
					public constructor();
					public getValue(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingDataFile extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter implements com.arcgismaps.internal.jni.CoreRequestable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingDataFile>;
					public constructor(param0: string);
					public static createCoreGeoprocessingDataFileFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingDataFile;
					public finalize(): void;
					public dispose(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setInputFilePath(param0: string): void;
					public getURL(): string;
					public setUploadId(param0: string): void;
					public setURL(param0: string): void;
					public constructor();
					public getInputFilePath(): string;
					public getUploadId(): string;
					public fetchFileAsync(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public onRequestRequired(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingDate extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingDate>;
					public static createCoreGeoprocessingDateFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingDate;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDateTime);
					public constructor();
					public getValue(): com.arcgismaps.internal.jni.CoreDateTime;
					public setValue(param0: com.arcgismaps.internal.jni.CoreDateTime): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingDouble extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingDouble>;
					public constructor();
					public getValue(): number;
					public setValue(param0: number): void;
					public constructor(param0: number);
					public static createCoreGeoprocessingDoubleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingDouble;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingExecutionType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType;
					public static ASYNCHRONOUSSUBMIT: com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType;
					public static SYNCHRONOUSEXECUTE: com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingFeatureSet extends com.arcgismaps.internal.jni.CoreFeatureSet {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingFeatureSet>;
					public mHandle: number;
					public static createCoreGeoprocessingFeatureSetFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingFeatureSet;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public iterator(): com.arcgismaps.internal.jni.CoreIterator;
					public getIsTransferLimitExceeded(): boolean;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingFeatures extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter implements com.arcgismaps.internal.jni.CoreRequestable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingFeatures>;
					public getCanFetchOutputFeatures(): boolean;
					public fetchOutputFeaturesAsync(): com.arcgismaps.internal.jni.CoreTask;
					public constructor(param0: string);
					public finalize(): void;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreElement);
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public setURL(param0: string): void;
					public constructor();
					public setFeatures(param0: com.arcgismaps.internal.jni.CoreElement): void;
					public static createCoreGeoprocessingFeaturesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingFeatures;
					public onRequestRequired(param0: number): void;
					public getFeatures(): com.arcgismaps.internal.jni.CoreElement;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingJob>;
					public getResult(): com.arcgismaps.internal.jni.CoreGeoprocessingResult;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public static createCoreGeoprocessingJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingJob;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getParameters(): com.arcgismaps.internal.jni.CoreGeoprocessingParameters;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingLinearUnit extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnit>;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreLinearUnit);
					public setDistance(param0: number): void;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits);
					public getDistance(): number;
					public static createCoreGeoprocessingLinearUnitFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnit;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreLinearUnitId);
					public constructor();
					public getLinearUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public setUnit(param0: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits): void;
					public constructor(param0: number);
					public getUnit(): com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingLinearUnits {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static CENTIMETER: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static DECIMETER: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static KILOMETER: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static METER: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static MILLIMETER: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static POINT: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static USNAUTICALMILE: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static USSURVEYFOOT: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static USSURVEYINCH: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static USSURVEYMILE: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static USSURVEYYARD: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingLong extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingLong>;
					public static createCoreGeoprocessingLongFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingLong;
					public constructor();
					public getValue(): number;
					public setValue(param0: number): void;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingMultiValue extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingMultiValue>;
					public getValueParameterType(): com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType, param1: com.arcgismaps.internal.jni.CoreVector);
					public getValues(): com.arcgismaps.internal.jni.CoreVector;
					public static createCoreGeoprocessingMultiValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingMultiValue;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType);
					public setValues(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingParameter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingParameter>;
					public mHandle: number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreGeoprocessingParameterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingParameter;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingParameter;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingParameterDirection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingParameterDirection>;
					public static INPUT: com.arcgismaps.internal.jni.CoreGeoprocessingParameterDirection;
					public static OUTPUT: com.arcgismaps.internal.jni.CoreGeoprocessingParameterDirection;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeoprocessingParameterDirection>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeoprocessingParameterDirection;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingParameterDirection;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingParameterInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingParameterInfo>;
					public mHandle: number;
					public getDisplayName(): string;
					public finalize(): void;
					public dispose(): void;
					public getCategory(): string;
					public getDefaultParameter(): com.arcgismaps.internal.jni.CoreGeoprocessingParameter;
					public getFeaturesRequireGeometry(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public static createCoreGeoprocessingParameterInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingParameterInfo;
					public getDirection(): com.arcgismaps.internal.jni.CoreGeoprocessingParameterDirection;
					public getMultiValueDataType(): com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public close(): void;
					public getChoiceList(): com.arcgismaps.internal.jni.CoreArray;
					public getDataType(): com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public getIsRequired(): boolean;
					public getDescription(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingParameterType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingParameterType>;
					public static GEOPROCESSINGBOOLEAN: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGDATAFILE: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGDATE: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGDOUBLE: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGFEATURES: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGLINEARUNIT: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGLONG: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGMULTIVALUE: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGRASTER: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGSTRING: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static GEOPROCESSINGUNKNOWNPARAMETER: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeoprocessingParameterType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingParameters>;
					public mHandle: number;
					public getInputs(): com.arcgismaps.internal.jni.CoreDictionary;
					public setProcessSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType);
					public static createCoreGeoprocessingParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingParameters;
					public getReturnM(): boolean;
					public finalize(): void;
					public getExecutionType(): com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType;
					public dispose(): void;
					public setOutputSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public getReturnZ(): boolean;
					public getProcessSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public setReturnZ(param0: boolean): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public setReturnM(param0: boolean): void;
					public setInputs(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingRaster extends com.arcgismaps.internal.jni.CoreGeoprocessingDataFile {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingRaster>;
					public constructor(param0: string, param1: string);
					public constructor(param0: string);
					public getFormat(): string;
					public constructor();
					public static createCoreGeoprocessingRasterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingRaster;
					public setFormat(param0: string): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingResult>;
					public mHandle: number;
					public static createCoreGeoprocessingResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingResult;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public getOutputs(): com.arcgismaps.internal.jni.CoreDictionary;
					public close(): void;
					public dispose(): void;
					public getMapImageLayer(): com.arcgismaps.internal.jni.CoreArcGISMapImageLayer;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingString extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingString>;
					public getValue(): string;
					public constructor(param0: string);
					public constructor();
					public static createCoreGeoprocessingStringFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingString;
					public setValue(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingTask extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingTask>;
					public mHandle: number;
					public constructor(param0: string);
					public getGeoprocessingTaskInfo(): com.arcgismaps.internal.jni.CoreGeoprocessingTaskInfo;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public static createCoreGeoprocessingTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingTask;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public createDefaultParametersAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getURL(): string;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public createJob(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameters): com.arcgismaps.internal.jni.CoreGeoprocessingJob;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingTaskInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingTaskInfo>;
					public mHandle: number;
					public getDisplayName(): string;
					public finalize(): void;
					public getExecutionType(): com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType;
					public dispose(): void;
					public getCategory(): string;
					public getHelpURL(): string;
					public getURL(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getParameterInfos(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public static createCoreGeoprocessingTaskInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingTaskInfo;
					public getDescription(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeoprocessingUnknownParameter extends com.arcgismaps.internal.jni.CoreGeoprocessingParameter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeoprocessingUnknownParameter>;
					public static createCoreGeoprocessingUnknownParameterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeoprocessingUnknownParameter;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotrigger extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotrigger>;
					public mHandle: number;
					public setRequestedActions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getInstanceId(): java.lang.Long;
					public static createCoreGeotriggerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeotrigger;
					public finalize(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeotrigger;
					public getMessageExpression(): com.arcgismaps.internal.jni.CoreArcadeExpression;
					public getFeed(): com.arcgismaps.internal.jni.CoreGeotriggerFeed;
					public getRequestedActions(): com.arcgismaps.internal.jni.CoreVector;
					public getGeotriggerId(): string;
					public setName(param0: string): void;
					public setMessageExpression(param0: com.arcgismaps.internal.jni.CoreArcadeExpression): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeotriggerType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggerFeed {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggerFeed>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeotriggerFeedType;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeotriggerFeed;
					public static createCoreGeotriggerFeedFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeotriggerFeed;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggerFeedType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggerFeedType>;
					public static LOCATIONGEOTRIGGERFEED: com.arcgismaps.internal.jni.CoreGeotriggerFeedType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeotriggerFeedType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeotriggerFeedType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeotriggerFeedType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggerMonitor extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggerMonitor>;
					public mHandle: number;
					public static createCoreGeotriggerMonitorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeotriggerMonitor;
					public onWarningChanged(param0: number): void;
					public getStatus(): com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus;
					public onGeotriggerNotificationEvent(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public setStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatusChangedCallbackListener): void;
					public startAsync(): com.arcgismaps.internal.jni.CoreTask;
					public finalize(): void;
					public dispose(): void;
					public setGeotriggerNotificationEventCallback(param0: com.arcgismaps.internal.jni.CoreGeotriggerMonitorNotificationCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeotrigger);
					public getGeotrigger(): com.arcgismaps.internal.jni.CoreGeotrigger;
					public getWarning(): com.arcgismaps.internal.jni.CoreError;
					public onStatusChanged(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public stop(): void;
					public setWarningChangedCallback(param0: com.arcgismaps.internal.jni.CoreWarningChangedCallbackListener): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggerMonitorNotificationCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggerMonitorNotificationCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreGeotriggerMonitorNotificationCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						notification(param0: com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfo): void;
					});
					public constructor();
					public notification(param0: com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfo): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggerMonitorStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus>;
					public static STOPPED: com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus;
					public static STARTING: com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus;
					public static STARTED: com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus;
					public static FAILEDTOSTART: com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggerMonitorStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						statusChanged(param0: com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus): void;
					});
					public constructor();
					public statusChanged(param0: com.arcgismaps.internal.jni.CoreGeotriggerMonitorStatus): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggerNotificationInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfo>;
					public mHandle: number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfoType;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfo;
					public getFeedLocation(): com.arcgismaps.internal.jni.CoreLocation;
					public getActions(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public dispose(): void;
					public getMessageProperties(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getGeotriggerMonitor(): com.arcgismaps.internal.jni.CoreGeotriggerMonitor;
					public getMessage(): string;
					public getFeedEntityId(): string;
					public static createCoreGeotriggerNotificationInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfo;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggerNotificationInfoType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfoType>;
					public static FENCEGEOTRIGGERNOTIFICATIONINFO: com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfoType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfoType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfoType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeotriggerNotificationInfoType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggerType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggerType>;
					public static FENCEGEOTRIGGER: com.arcgismaps.internal.jni.CoreGeotriggerType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGeotriggerType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGeotriggerType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGeotriggerType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGeotriggersInfo extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGeotriggersInfo>;
					public mHandle: number;
					public static createCoreGeotriggersInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGeotriggersInfo;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getGeotriggers(): com.arcgismaps.internal.jni.CoreVector;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGetResourceStringCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGetResourceStringCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreGetResourceStringCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getResourceString(param0: string, param1: string, param2: com.arcgismaps.internal.jni.CoreArray, param3: com.arcgismaps.internal.jni.CoreElementReference): void;
					});
					public constructor();
					public getResourceString(param0: string, param1: string, param2: com.arcgismaps.internal.jni.CoreArray, param3: com.arcgismaps.internal.jni.CoreElementReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGlobeCameraController extends com.arcgismaps.internal.jni.CoreCameraController {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGlobeCameraController>;
					public constructor();
					public static createCoreGlobeCameraControllerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGlobeCameraController;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGraphic implements com.arcgismaps.internal.jni.CoreGeoElement, com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGraphic>;
					public mHandle: number;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public finalize(): void;
					public getZIndex(): number;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getIsVisible(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry);
					public setPointGeometry(param0: number, param1: number, param2: number, param3: number, param4: boolean, param5: boolean, param6: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDictionary);
					public constructor();
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreSymbol);
					public equals(param0: com.arcgismaps.internal.jni.CoreGraphic): boolean;
					public getInstanceId(): java.lang.Long;
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public getSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreDictionary);
					public getIsSelected(): boolean;
					public static createCoreGraphicFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGraphic;
					public setIsSelected(param0: boolean): void;
					public static nativeDestroy(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreDictionary, param2: com.arcgismaps.internal.jni.CoreSymbol);
					public getGraphicsOverlay(): com.arcgismaps.internal.jni.CoreGraphicsOverlay;
					public setZIndex(param0: number): void;
					public setIsVisible(param0: boolean): void;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGraphicFenceParameters extends com.arcgismaps.internal.jni.CoreFenceParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGraphicFenceParameters>;
					public static createCoreGraphicFenceParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGraphicFenceParameters;
					public getGraphics(): com.arcgismaps.internal.jni.CoreVector;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreArray);
					public constructor(param0: com.arcgismaps.internal.jni.CoreArray, param1: number);
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGraphicsHardwareResources {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGraphicsHardwareResources>;
					public static RECYCLE: com.arcgismaps.internal.jni.CoreGraphicsHardwareResources;
					public static SAVE: com.arcgismaps.internal.jni.CoreGraphicsHardwareResources;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGraphicsHardwareResources;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGraphicsHardwareResources;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGraphicsHardwareResources>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGraphicsOverlay implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CorePopupSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGraphicsOverlay>;
					public mHandle: number;
					public setRenderer(param0: com.arcgismaps.internal.jni.CoreRenderer): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreGraphicsOverlay): boolean;
					public getGraphics(): com.arcgismaps.internal.jni.CoreVector;
					public getId(): string;
					public getLabelDefinitions(): com.arcgismaps.internal.jni.CoreVector;
					public setOpacity(param0: number): void;
					public finalize(): void;
					public setMinScale(param0: number): void;
					public static graphicQueryResult(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public setFeatureReduction(param0: com.arcgismaps.internal.jni.CoreFeatureReduction): void;
					public getIsVisible(): boolean;
					public getScaleSymbols(): boolean;
					public getFeatureReduction(): com.arcgismaps.internal.jni.CoreFeatureReduction;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public getMinScale(): number;
					public setLabelDefinitions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getSelectionColor(): com.arcgismaps.internal.jni.CoreColor;
					public constructor();
					public getSceneProperties(): com.arcgismaps.internal.jni.CoreLayerSceneProperties;
					public setScaleSymbols(param0: boolean): void;
					public close(): void;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public setRenderingMode(param0: com.arcgismaps.internal.jni.CoreGraphicsRenderingMode): void;
					public getOpacity(): number;
					public unselectGraphics(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setMaxScale(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public getLabelsEnabled(): boolean;
					public dispose(): void;
					public static createCoreGraphicsOverlayFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGraphicsOverlay;
					public setGraphics(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public selectGraphics(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public clearSelection(): void;
					public getMaxScale(): number;
					public setSceneProperties(param0: com.arcgismaps.internal.jni.CoreLayerSceneProperties): void;
					public getSelectedGraphics(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public setIsPopupEnabled(param0: boolean): void;
					public setIsVisible(param0: boolean): void;
					public getRenderingMode(): com.arcgismaps.internal.jni.CoreGraphicsRenderingMode;
					public setId(param0: string): void;
					public setLabelsEnabled(param0: boolean): void;
					public setSelectionColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getHandle(): number;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGraphicsOverlayFenceParameters extends com.arcgismaps.internal.jni.CoreFenceParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGraphicsOverlayFenceParameters>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGraphicsOverlay, param1: number);
					public constructor(param0: com.arcgismaps.internal.jni.CoreGraphicsOverlay);
					public constructor();
					public getGraphicsOverlay(): com.arcgismaps.internal.jni.CoreGraphicsOverlay;
					public static createCoreGraphicsOverlayFenceParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGraphicsOverlayFenceParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGraphicsRenderingMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGraphicsRenderingMode>;
					public static DYNAMIC: com.arcgismaps.internal.jni.CoreGraphicsRenderingMode;
					public static STATIC: com.arcgismaps.internal.jni.CoreGraphicsRenderingMode;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGraphicsRenderingMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGraphicsRenderingMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGraphicsRenderingMode>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGrid {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGrid>;
					public mHandle: number;
					public setLabelOffset(param0: number): void;
					public getLabelPosition(): com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public setLabelPosition(param0: com.arcgismaps.internal.jni.CoreGridLabelPosition): void;
					public finalize(): void;
					public dispose(): void;
					public setLineSymbol(param0: number, param1: com.arcgismaps.internal.jni.CoreSymbol): void;
					public static createCoreGridFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGrid;
					public getIsVisible(): boolean;
					public getTextSymbol(param0: number): com.arcgismaps.internal.jni.CoreSymbol;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGrid;
					public getLineSymbol(param0: number): com.arcgismaps.internal.jni.CoreSymbol;
					public getLevelCount(): number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreGridType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public setIsVisible(param0: boolean): void;
					public getLabelOffset(): number;
					public getLabelVisibility(): boolean;
					public setTextSymbol(param0: number, param1: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setLabelVisibility(param0: boolean): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGridLabelPosition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGridLabelPosition>;
					public static GEOGRAPHIC: com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public static BOTTOMLEFT: com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public static BOTTOMRIGHT: com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public static TOPLEFT: com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public static TOPRIGHT: com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public static CENTER: com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public static ALLSIDES: com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGridLabelPosition;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGridLabelPosition>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGridType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGridType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreGridType;
					public static LATITUDELONGITUDEGRID: com.arcgismaps.internal.jni.CoreGridType;
					public static UTMGRID: com.arcgismaps.internal.jni.CoreGridType;
					public static MGRSGRID: com.arcgismaps.internal.jni.CoreGridType;
					public static USNGGRID: com.arcgismaps.internal.jni.CoreGridType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGridType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGridType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGridType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGroupFormElement extends com.arcgismaps.internal.jni.CoreFormElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGroupFormElement>;
					public getInstanceId(): java.lang.Long;
					public getInitialState(): com.arcgismaps.internal.jni.CoreFormGroupState;
					public getElements(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreGroupFormElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGroupFormElement;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGroupLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGroupLayer>;
					public setVisibilityMode(param0: com.arcgismaps.internal.jni.CoreGroupVisibilityMode): void;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public static createCoreGroupLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreGroupLayer;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public getLayers(): com.arcgismaps.internal.jni.CoreVector;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getName(): string;
					public setLayers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setIsVisible(param0: boolean): void;
					public getShowChildrenInLegend(): boolean;
					public setShowChildrenInLegend(param0: boolean): void;
					public getVisibilityMode(): com.arcgismaps.internal.jni.CoreGroupVisibilityMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreGroupVisibilityMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreGroupVisibilityMode>;
					public static INDEPENDENT: com.arcgismaps.internal.jni.CoreGroupVisibilityMode;
					public static INHERITED: com.arcgismaps.internal.jni.CoreGroupVisibilityMode;
					public static EXCLUSIVE: com.arcgismaps.internal.jni.CoreGroupVisibilityMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreGroupVisibilityMode>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreGroupVisibilityMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreGroupVisibilityMode;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreHTTPOperation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreHTTPOperation>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreHTTPOperation;
					public static GET: com.arcgismaps.internal.jni.CoreHTTPOperation;
					public static POST: com.arcgismaps.internal.jni.CoreHTTPOperation;
					public static MULTIPARTPOST: com.arcgismaps.internal.jni.CoreHTTPOperation;
					public static RAWPOST: com.arcgismaps.internal.jni.CoreHTTPOperation;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreHTTPOperation;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreHTTPOperation;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreHTTPOperation>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreHatchFillSymbolLayer extends com.arcgismaps.internal.jni.CoreFillSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreHatchFillSymbolLayer>;
					public getAngle(): number;
					public constructor();
					public setSeparation(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMultilayerPolylineSymbol, param1: number);
					public setPolyline(param0: com.arcgismaps.internal.jni.CoreMultilayerPolylineSymbol): void;
					public setAngle(param0: number): void;
					public static createCoreHatchFillSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreHatchFillSymbolLayer;
					public getPolyline(): com.arcgismaps.internal.jni.CoreMultilayerPolylineSymbol;
					public getSeparation(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreHeatmapRenderer extends com.arcgismaps.internal.jni.CoreRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreHeatmapRenderer>;
					public static createCoreHeatmapRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreHeatmapRenderer;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreHillshadeRenderer extends com.arcgismaps.internal.jni.CoreRasterRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreHillshadeRenderer>;
					public constructor(param0: number, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreSlopeType, param4: number, param5: number, param6: number);
					public getZFactor(): number;
					public getPixelSizePower(): number;
					public getOutputBitDepth(): number;
					public constructor();
					public getAltitude(): number;
					public static createCoreHillshadeRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreHillshadeRenderer;
					public getPixelSizeFactor(): number;
					public getSlopeType(): com.arcgismaps.internal.jni.CoreSlopeType;
					public getAzimuth(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreHistogramEqualizationStretchParameters extends com.arcgismaps.internal.jni.CoreStretchParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreHistogramEqualizationStretchParameters>;
					public constructor();
					public static createCoreHistogramEqualizationStretchParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreHistogramEqualizationStretchParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreHorizontalAlignment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreHorizontalAlignment>;
					public static CENTER: com.arcgismaps.internal.jni.CoreHorizontalAlignment;
					public static JUSTIFY: com.arcgismaps.internal.jni.CoreHorizontalAlignment;
					public static LEFT: com.arcgismaps.internal.jni.CoreHorizontalAlignment;
					public static RIGHT: com.arcgismaps.internal.jni.CoreHorizontalAlignment;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreHorizontalAlignment;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreHorizontalAlignment;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreHorizontalAlignment>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreHorizontalVerticalTransformation extends com.arcgismaps.internal.jni.CoreDatumTransformation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformation>;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreArray);
					public static createCoreHorizontalVerticalTransformationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformation;
					public constructor(param0: com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep);
					public getSteps(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreHorizontalVerticalTransformationStep {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep>;
					public mHandle: number;
					public constructor(param0: string);
					public getHash(): number;
					public finalize(): void;
					public dispose(): void;
					public getInverse(): com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep;
					public getWKID(): number;
					public static createCoreHorizontalVerticalTransformationStepFromHandle(param0: number): com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getIsInverse(): boolean;
					public getProjectionEngineFilenames(): com.arcgismaps.internal.jni.CoreArray;
					public equals(param0: com.arcgismaps.internal.jni.CoreHorizontalVerticalTransformationStep): boolean;
					public getIsMissingProjectionEngineFiles(): boolean;
					public constructor(param0: number);
					public getHandle(): number;
					public getWKText(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIconUpdatedCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIconUpdatedCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreIconUpdatedCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						iconUpdatedCallback(): void;
					});
					public constructor();
					public iconUpdatedCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIdInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIdInfo>;
					public mHandle: number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreIdInfoType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public getId(): number;
					public close(): void;
					public dispose(): void;
					public static createCoreIdInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIdInfo;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIdInfo;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIdInfoType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIdInfoType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreIdInfoType;
					public static IDINFO: com.arcgismaps.internal.jni.CoreIdInfoType;
					public static MAPSERVICELAYERIDINFO: com.arcgismaps.internal.jni.CoreIdInfoType;
					public static FEATURESERVICELAYERIDINFO: com.arcgismaps.internal.jni.CoreIdInfoType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreIdInfoType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreIdInfoType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreIdInfoType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIdentifyGraphicsOverlayResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIdentifyGraphicsOverlayResult>;
					public mHandle: number;
					public getGeoElements(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public getGraphicsOverlay(): com.arcgismaps.internal.jni.CoreGraphicsOverlay;
					public finalize(): void;
					public static createCoreIdentifyGraphicsOverlayResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIdentifyGraphicsOverlayResult;
					public getGraphics(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public dispose(): void;
					public getPopups(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIdentifyLayerResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIdentifyLayerResult>;
					public mHandle: number;
					public getLayerContent(): com.arcgismaps.internal.jni.CoreElement;
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public finalize(): void;
					public dispose(): void;
					public getPopups(): com.arcgismaps.internal.jni.CoreArray;
					public getSublayerResults(): com.arcgismaps.internal.jni.CoreArray;
					public getGeoElements(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getIsTransferLimitExceeded(): boolean;
					public close(): void;
					public static createCoreIdentifyLayerResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIdentifyLayerResult;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImage {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImage>;
					public mHandle: number;
					public static createCoreImageFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImage;
					public constructor(param0: number, param1: number, param2: androidNative.Array<number>);
					public constructor(param0: string);
					public getHeight(): number;
					public finalize(): void;
					public dispose(): void;
					public getWidth(): number;
					public getBuffer(): androidNative.Array<number>;
					public getEncodedBuffer(): com.arcgismaps.internal.jni.CoreByteArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public equals(param0: com.arcgismaps.internal.jni.CoreImage): boolean;
					public close(): void;
					public constructor(param0: androidNative.Array<number>);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImageAdjustmentLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImageAdjustmentLayer>;
					public getGamma(): number;
					public getIsVisible(): boolean;
					public load(): void;
					public setContrast(param0: number): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public setBrightness(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public static createCoreImageAdjustmentLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImageAdjustmentLayer;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public getContrast(): number;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public setGamma(param0: number): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
					public getBrightness(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImageFrame extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImageFrame>;
					public mHandle: number;
					public constructor(param0: string);
					public finalize(): void;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImage, param1: com.arcgismaps.internal.jni.CoreEnvelope);
					public retryLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImage, param1: com.arcgismaps.internal.jni.CorePolygon);
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreEnvelope);
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getURI(): string;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CorePolygon);
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public getImage(): com.arcgismaps.internal.jni.CoreImage;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public static createCoreImageFrameFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImageFrame;
					public getQuadrilateral(): com.arcgismaps.internal.jni.CorePolygon;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImageOverlay {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImageOverlay>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImageFrame);
					public getImageFrame(): com.arcgismaps.internal.jni.CoreImageFrame;
					public setOpacity(param0: number): void;
					public finalize(): void;
					public dispose(): void;
					public static createCoreImageOverlayFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImageOverlay;
					public setImageFrame(param0: com.arcgismaps.internal.jni.CoreImageFrame): void;
					public getIsVisible(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public setIsVisible(param0: boolean): void;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getHandle(): number;
					public getOpacity(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImageRequest extends com.arcgismaps.internal.jni.CoreRequest {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImageRequest>;
					public getInstanceId(): java.lang.Long;
					public getAPIKey(): string;
					public static createCoreImageRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImageRequest;
					public setAPIKey(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImageServiceRaster extends com.arcgismaps.internal.jni.CoreRaster {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImageServiceRaster>;
					public getMosaicRule(): com.arcgismaps.internal.jni.CoreMosaicRule;
					public constructor(param0: string);
					public setMosaicRule(param0: com.arcgismaps.internal.jni.CoreMosaicRule): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRasterFunction);
					public getServiceInfo(): com.arcgismaps.internal.jni.CoreArcGISImageServiceInfo;
					public cancelLoad(): void;
					public setRenderingRule(param0: com.arcgismaps.internal.jni.CoreRenderingRule): void;
					public load(): void;
					public getURL(): string;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getRenderingRule(): com.arcgismaps.internal.jni.CoreRenderingRule;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public static createCoreImageServiceRasterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImageServiceRaster;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImageTiledLayer extends com.arcgismaps.internal.jni.CoreImageAdjustmentLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImageTiledLayer>;
					public setTile(param0: com.arcgismaps.internal.jni.CoreTileKey, param1: androidNative.Array<number>): void;
					public setTileWithResponse(param0: com.arcgismaps.internal.jni.CoreTileKey, param1: any): void;
					public finalize(): void;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public onTileRequest(param0: number): void;
					public setAttribution(param0: string): void;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileInfo, param1: com.arcgismaps.internal.jni.CoreEnvelope);
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getTileInfo(): com.arcgismaps.internal.jni.CoreTileInfo;
					public getNoDataTileBehavior(): com.arcgismaps.internal.jni.CoreNoDataTileBehavior;
					public setNoDataTile(param0: com.arcgismaps.internal.jni.CoreTileKey): void;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public static createCoreImageTiledLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImageTiledLayer;
					public cancelLoad(): void;
					public setCancelTileRequestCallback(param0: com.arcgismaps.internal.jni.CoreTileCallbackListener): void;
					public setNoDataTileBehavior(param0: com.arcgismaps.internal.jni.CoreNoDataTileBehavior): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getName(): string;
					public onCancelTileRequest(param0: number): void;
					public setIsVisible(param0: boolean): void;
					public setTileRequestCallback(param0: com.arcgismaps.internal.jni.CoreTileCallbackListener): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImmutablePart {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImmutablePart>;
					public mHandle: number;
					public getSegmentIndexFromStartPointIndex(param0: number): number;
					public getPointCount(): number;
					public getSegmentCount(): number;
					public finalize(): void;
					public static createCoreImmutablePartFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImmutablePart;
					public dispose(): void;
					public getEndPoint(): com.arcgismaps.internal.jni.CorePoint;
					public getPoint(param0: number): com.arcgismaps.internal.jni.CorePoint;
					public getStartPoint(): com.arcgismaps.internal.jni.CorePoint;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getSegment(param0: number): com.arcgismaps.internal.jni.CoreSegment;
					public close(): void;
					public getSegmentIndexFromEndPointIndex(param0: number): number;
					public getStartPointIndexFromSegmentIndex(param0: number): number;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getPoints(): com.arcgismaps.internal.jni.CoreImmutablePointCollection;
					public getIsEmpty(): boolean;
					public getEndPointIndexFromSegmentIndex(param0: number): number;
					public getHandle(): number;
					public getHasCurves(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImmutablePartCollection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImmutablePartCollection>;
					public mHandle: number;
					public static createCoreImmutablePartCollectionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImmutablePartCollection;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getPart(param0: number): com.arcgismaps.internal.jni.CoreImmutablePart;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getIsEmpty(): boolean;
					public getSize(): number;
					public indexOf(param0: com.arcgismaps.internal.jni.CoreImmutablePart): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreImmutablePointCollection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreImmutablePointCollection>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public indexOf(param0: com.arcgismaps.internal.jni.CorePoint): number;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static createCoreImmutablePointCollectionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreImmutablePointCollection;
					public getIsEmpty(): boolean;
					public getSize(): number;
					public getPoint(param0: number): com.arcgismaps.internal.jni.CorePoint;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIncident {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIncident>;
					public mHandle: number;
					public getCurrentBearingTolerance(): number;
					public setNavigationSpeed(param0: number): void;
					public finalize(): void;
					public setTargetFacilityCount(param0: number): void;
					public getTargetFacilityCount(): number;
					public getIncidentId(): number;
					public setNavigationLatency(param0: number): void;
					public setImpedanceCutoff(param0: number): void;
					public constructor();
					public getImpedanceCutoff(): number;
					public static createCoreIncidentFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIncident;
					public close(): void;
					public setCurbApproach(param0: com.arcgismaps.internal.jni.CoreCurbApproach): void;
					public getNavigationSpeed(): number;
					public setNetworkLocation(param0: com.arcgismaps.internal.jni.CoreNetworkLocation): void;
					public getLocationStatus(): com.arcgismaps.internal.jni.CoreLocationStatus;
					public getNetworkLocation(): com.arcgismaps.internal.jni.CoreNetworkLocation;
					public getCurrentBearing(): number;
					public setCurrentBearingTolerance(param0: number): void;
					public dispose(): void;
					public getDistanceToNetworkLocation(): number;
					public clone(): com.arcgismaps.internal.jni.CoreIncident;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint);
					public getCurbApproach(): com.arcgismaps.internal.jni.CoreCurbApproach;
					public getGeometry(): com.arcgismaps.internal.jni.CorePoint;
					public setName(param0: string): void;
					public setCurrentBearing(param0: number): void;
					public setIncidentId(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getNavigationLatency(): number;
					public setAddedCost(param0: string, param1: number): void;
					public getAddedCost(param0: string): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIndoorPositioningDefinition extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIndoorPositioningDefinition>;
					public mHandle: number;
					public static createCoreIndoorPositioningDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIndoorPositioningDefinition;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIndoorsLocationDataSource extends com.arcgismaps.internal.jni.CoreLocationDataSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIndoorsLocationDataSource>;
					public onWarningChanged(param0: number): void;
					public onRequestDisableSensor(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreIndoorPositioningDefinition);
					public constructor(param0: string);
					public pushiBeaconReading(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: string, param2: number): void;
					public finalize(): void;
					public handleEnableSensorRequest(param0: com.arcgismaps.internal.jni.CoreSensorType, param1: any): void;
					public onRequestEnableSensor(param0: number): void;
					public getConfiguration(): com.arcgismaps.internal.jni.CoreIndoorsLocationDataSourceConfiguration;
					public getLevelsTable(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public pushAccelerometerReading(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: number, param2: number, param3: number): void;
					public setStartFinishedCallback(param0: com.arcgismaps.internal.jni.CoreStartFinishedCallbackListener): void;
					public setRequestEnableSensorCallback(param0: com.arcgismaps.internal.jni.CoreEnableSensorRequestCallbackListener): void;
					public static createCoreIndoorsLocationDataSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIndoorsLocationDataSource;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTable, param1: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param2: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param3: com.arcgismaps.internal.jni.CoreGUID);
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTable, param1: com.arcgismaps.internal.jni.CoreArcGISFeatureTable);
					public getPathwaysTable(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public onStartFinished(param0: number): void;
					public setRequestDisableSensorCallback(param0: com.arcgismaps.internal.jni.CoreDisableSensorRequestCallbackListener): void;
					public pushGPSLocation(param0: com.arcgismaps.internal.jni.CoreLocation): void;
					public pushWifiScan(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: com.arcgismaps.internal.jni.CoreArray): void;
					public setWarningChangedCallback(param0: com.arcgismaps.internal.jni.CoreWarningChangedCallbackListener): void;
					public setConfiguration(param0: com.arcgismaps.internal.jni.CoreIndoorsLocationDataSourceConfiguration): void;
					public getPositioningId(): com.arcgismaps.internal.jni.CoreGUID;
					public getInstanceId(): java.lang.Long;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTable, param1: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param2: com.arcgismaps.internal.jni.CoreGUID);
					public getWarning(): com.arcgismaps.internal.jni.CoreError;
					public pushMagnetometerReading(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: number, param2: number, param3: number): void;
					public getPositioningTable(): com.arcgismaps.internal.jni.CoreFeatureTable;
					public pushGyroscopeReading(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: number, param2: number, param3: number): void;
					public handleDisableSensorRequest(param0: com.arcgismaps.internal.jni.CoreSensorType, param1: any): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIndoorsLocationDataSourceConfiguration {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIndoorsLocationDataSourceConfiguration>;
					public mHandle: number;
					public setIsIPSAreaSnappingEnabled(param0: boolean): void;
					public getPathSnappingDistance(): number;
					public setPathSnappingDistance(param0: number): void;
					public getIsPathSnappingEnabled(): boolean;
					public setIsStationarySmoothingEnabled(param0: boolean): void;
					public finalize(): void;
					public setIsGNSSEnabled(param0: boolean): void;
					public dispose(): void;
					public getIsIPSAreaSnappingEnabled(): boolean;
					public getIsStationarySmoothingEnabled(): boolean;
					public static createCoreIndoorsLocationDataSourceConfigurationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIndoorsLocationDataSourceConfiguration;
					public setIsMotionSmoothingEnabled(param0: boolean): void;
					public setIsPathSnappingEnabled(param0: boolean): void;
					public getIsGNSSEnabled(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getIsMotionSmoothingEnabled(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreInfoCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreInfoCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreInfoCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						info(): void;
					});
					public constructor();
					public info(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreInheritedDomain extends com.arcgismaps.internal.jni.CoreDomain {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreInheritedDomain>;
					public static createCoreInheritedDomainFromHandle(param0: number): com.arcgismaps.internal.jni.CoreInheritedDomain;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreInsets {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreInsets>;
					public mHandle: number;
					public setRight(param0: number): void;
					public getBottom(): number;
					public getRight(): number;
					public finalize(): void;
					public setTop(param0: number): void;
					public dispose(): void;
					public getTop(): number;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public static createCoreInsetsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreInsets;
					public setBottom(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getLeft(): number;
					public setLeft(param0: number): void;
					public getIsEmpty(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreInstanceId>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreInstanceId interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getInstanceId(): java.lang.Long;
					});
					public constructor();
					public getInstanceId(): java.lang.Long;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIntegratedMeshLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIntegratedMeshLayer>;
					public constructor(param0: string);
					public static createCoreIntegratedMeshLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIntegratedMeshLayer;
					public getAltitudeOffset(): number;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public setAltitudeUnit(param0: com.arcgismaps.internal.jni.CoreLinearUnit): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getURI(): string;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getAltitudeUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getName(): string;
					public setAltitudeOffset(param0: number): void;
					public setIsVisible(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreInteractionConfiguration {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreInteractionConfiguration>;
					public mHandle: number;
					public getAllowGeometrySelection(): boolean;
					public finalize(): void;
					public setAllowDeletingSelectedElement(param0: boolean): void;
					public getAllowMidVertexSelection(): boolean;
					public setAllowMidVertexSelection(param0: boolean): void;
					public getRequireSelectionBeforeMove(): boolean;
					public getAllowScalingSelectedElement(): boolean;
					public setAllowVertexCreation(param0: boolean): void;
					public constructor();
					public setAllowMovingSelectedElement(param0: boolean): void;
					public close(): void;
					public getAllowDeletingSelectedElement(): boolean;
					public getAllowVertexCreation(): boolean;
					public setRequireSelectionBeforeMove(param0: boolean): void;
					public getAllowMovingSelectedElement(): boolean;
					public setAllowPartCreation(param0: boolean): void;
					public getAllowVertexSelection(): boolean;
					public setAllowTransformation(param0: boolean): void;
					public setAllowRotatingSelectedElement(param0: boolean): void;
					public setAllowVertexSelection(param0: boolean): void;
					public getScaleMode(): com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode;
					public dispose(): void;
					public setAllowCreation(param0: boolean): void;
					public getAllowPartSelection(): boolean;
					public setAllowDeletion(param0: boolean): void;
					public setAllowGeometrySelection(param0: boolean): void;
					public static nativeDestroy(param0: number): void;
					public static createCoreInteractionConfigurationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreInteractionConfiguration;
					public setAllowPartSelection(param0: boolean): void;
					public setScaleMode(param0: com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode): void;
					public getAllowPartCreation(): boolean;
					public getAllowRotatingSelectedElement(): boolean;
					public setAllowSelection(param0: boolean): void;
					public setAllowScalingSelectedElement(param0: boolean): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreInteractionDeviceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreInteractionDeviceType>;
					public static MOUSE: com.arcgismaps.internal.jni.CoreInteractionDeviceType;
					public static TOUCH: com.arcgismaps.internal.jni.CoreInteractionDeviceType;
					public static STYLUS: com.arcgismaps.internal.jni.CoreInteractionDeviceType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreInteractionDeviceType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreInteractionDeviceType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreInteractionDeviceType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIsEditableChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIsEditableChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreIsEditableChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						isEditableChanged(param0: boolean): void;
					});
					public constructor();
					public isEditableChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIsPausedChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIsPausedChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreIsPausedChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						isPausedChanged(): void;
					});
					public constructor();
					public isPausedChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIsRequiredChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIsRequiredChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreIsRequiredChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						isRequiredChanged(param0: boolean): void;
					});
					public constructor();
					public isRequiredChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIsStartedChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIsStartedChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreIsStartedChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						isStartedChanged(param0: boolean): void;
					});
					public constructor();
					public isStartedChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIsVisibleChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIsVisibleChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreIsVisibleChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						isVisibleChanged(param0: boolean): void;
					});
					public constructor();
					public isVisibleChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIssuedChallengeCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIssuedChallengeCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreIssuedChallengeCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						issuedChallenge(param0: com.arcgismaps.internal.jni.CoreArcGISAuthenticationChallenge): void;
					});
					public constructor();
					public issuedChallenge(param0: com.arcgismaps.internal.jni.CoreArcGISAuthenticationChallenge): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreItem extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreItem>;
					public mHandle: number;
					public getTitle(): string;
					public setDescription(param0: string): void;
					public setTitle(param0: string): void;
					public finalize(): void;
					public fetchData(): com.arcgismaps.internal.jni.CoreTask;
					public getTermsOfUse(): string;
					public setThumbnailWithImage(param0: com.arcgismaps.internal.jni.CoreImage): void;
					public setSnippet(param0: string): void;
					public setTags(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setAccessInformation(param0: string): void;
					public getSnippet(): string;
					public constructor();
					public getThumbnail(): com.arcgismaps.internal.jni.CoreLoadableImage;
					public getTypeKeywords(): com.arcgismaps.internal.jni.CoreVector;
					public close(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreItem;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getItemId(): string;
					public getObjectType(): com.arcgismaps.internal.jni.CoreItemType;
					public getInstanceId(): java.lang.Long;
					public getTags(): com.arcgismaps.internal.jni.CoreVector;
					public dispose(): void;
					public setItemId(param0: string): void;
					public setExtent(param0: com.arcgismaps.internal.jni.CoreEnvelope): void;
					public setTypeKeywords(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getCreated(): com.arcgismaps.internal.jni.CoreDateTime;
					public setName(param0: string): void;
					public getSpatialReferenceName(): string;
					public getModified(): com.arcgismaps.internal.jni.CoreDateTime;
					public static createCoreItemFromHandle(param0: number): com.arcgismaps.internal.jni.CoreItem;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getAccessInformation(): string;
					public setTermsOfUse(param0: string): void;
					public updateItemPropertiesAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getDescription(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreItemResourceCache extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreItemResourceCache>;
					public mHandle: number;
					public constructor(param0: string);
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public static createCoreItemResourceCacheFromHandle(param0: number): com.arcgismaps.internal.jni.CoreItemResourceCache;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPath(): string;
					public retryLoad(): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public getItem(): com.arcgismaps.internal.jni.CoreLocalItem;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreItemType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreItemType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreItemType;
					public static PORTALITEM: com.arcgismaps.internal.jni.CoreItemType;
					public static LOCALITEM: com.arcgismaps.internal.jni.CoreItemType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreItemType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreItemType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreItemType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreIterator {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreIterator>;
					public mHandle: number;
					public next(): com.arcgismaps.internal.jni.CoreElement;
					public reset(): void;
					public static createCoreIteratorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreIterator;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
					public hasNext(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJSONRequest extends com.arcgismaps.internal.jni.CoreRequest {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJSONRequest>;
					public getInstanceId(): java.lang.Long;
					public getAPIKey(): string;
					public setAPIKey(param0: string): void;
					public static createCoreJSONRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreJSONRequest;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJSONSerializable>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreJSONSerializable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
						getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
						toJSON(): string;
					});
					public constructor();
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJob implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreJSONSerializable, com.arcgismaps.internal.jni.CoreRequestable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJob>;
					public mHandle: number;
					public pause(): boolean;
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getServerJobId(): string;
					public setJobDoneCallback(param0: com.arcgismaps.internal.jni.CoreJobDoneCallbackListener): void;
					public start(): boolean;
					public constructor();
					public toJSON(): string;
					public close(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreJob;
					public getObjectType(): com.arcgismaps.internal.jni.CoreJobType;
					public onJobDone(): void;
					public cancelAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getServicePollingDelay(): com.arcgismaps.internal.jni.CoreServicePollingDelay;
					public setServicePollingDelay(param0: com.arcgismaps.internal.jni.CoreServicePollingDelay): void;
					public static createCoreJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreJob;
					public onRequestRequired(param0: number): void;
					public checkStatusAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setMessageAddedCallback(param0: com.arcgismaps.internal.jni.CoreMessageAddedCallbackListener): void;
					public getInstanceId(): java.lang.Long;
					public dispose(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getStatus(): com.arcgismaps.internal.jni.CoreJobStatus;
					public getMessages(): com.arcgismaps.internal.jni.CoreArray;
					public getProgress(): number;
					public setStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreJobStatusChangedCallbackListener): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreJob;
					public onStatusChanged(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public onMessageAdded(param0: number): void;
					public onProgressChanged(): void;
					public setProgressChangedCallback(param0: com.arcgismaps.internal.jni.CoreProgressChangedCallbackListener): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJobDoneCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJobDoneCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreJobDoneCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						jobDone(): void;
					});
					public constructor();
					public jobDone(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJobMessage {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJobMessage>;
					public mHandle: number;
					public getTimestamp(): com.arcgismaps.internal.jni.CoreDateTime;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getMessage(): string;
					public static createCoreJobMessageFromHandle(param0: number): com.arcgismaps.internal.jni.CoreJobMessage;
					public getSource(): com.arcgismaps.internal.jni.CoreJobMessageSource;
					public getHandle(): number;
					public getSeverity(): com.arcgismaps.internal.jni.CoreJobMessageSeverity;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJobMessageSeverity {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJobMessageSeverity>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreJobMessageSeverity;
					public static INFO: com.arcgismaps.internal.jni.CoreJobMessageSeverity;
					public static WARNING: com.arcgismaps.internal.jni.CoreJobMessageSeverity;
					public static ERROR: com.arcgismaps.internal.jni.CoreJobMessageSeverity;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreJobMessageSeverity>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreJobMessageSeverity;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreJobMessageSeverity;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJobMessageSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJobMessageSource>;
					public static CLIENT: com.arcgismaps.internal.jni.CoreJobMessageSource;
					public static SERVICE: com.arcgismaps.internal.jni.CoreJobMessageSource;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreJobMessageSource>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreJobMessageSource;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreJobMessageSource;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJobRequest extends com.arcgismaps.internal.jni.CoreRequest {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJobRequest>;
					public getInstanceId(): java.lang.Long;
					public getAPIKey(): string;
					public setAPIKey(param0: string): void;
					public static createCoreJobRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreJobRequest;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJobStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJobStatus>;
					public static NOTSTARTED: com.arcgismaps.internal.jni.CoreJobStatus;
					public static STARTED: com.arcgismaps.internal.jni.CoreJobStatus;
					public static PAUSED: com.arcgismaps.internal.jni.CoreJobStatus;
					public static SUCCEEDED: com.arcgismaps.internal.jni.CoreJobStatus;
					public static FAILED: com.arcgismaps.internal.jni.CoreJobStatus;
					public static CANCELING: com.arcgismaps.internal.jni.CoreJobStatus;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreJobStatus>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreJobStatus;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreJobStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJobStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJobStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreJobStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						statusChanged(param0: com.arcgismaps.internal.jni.CoreJobStatus): void;
					});
					public constructor();
					public statusChanged(param0: com.arcgismaps.internal.jni.CoreJobStatus): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJobType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJobType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreJobType;
					public static GENERATEGEODATABASEJOB: com.arcgismaps.internal.jni.CoreJobType;
					public static SYNCGEODATABASEJOB: com.arcgismaps.internal.jni.CoreJobType;
					public static EXPORTTILECACHEJOB: com.arcgismaps.internal.jni.CoreJobType;
					public static ESTIMATETILECACHESIZEJOB: com.arcgismaps.internal.jni.CoreJobType;
					public static GEOPROCESSINGJOB: com.arcgismaps.internal.jni.CoreJobType;
					public static GENERATEOFFLINEMAPJOB: com.arcgismaps.internal.jni.CoreJobType;
					public static EXPORTVECTORTILESJOB: com.arcgismaps.internal.jni.CoreJobType;
					public static OFFLINEMAPSYNCJOB: com.arcgismaps.internal.jni.CoreJobType;
					public static DOWNLOADPREPLANNEDOFFLINEMAPJOB: com.arcgismaps.internal.jni.CoreJobType;
					public static UTILITYNETWORKVALIDATIONJOB: com.arcgismaps.internal.jni.CoreJobType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreJobType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreJobType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreJobType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreJoinType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreJoinType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreJoinType;
					public static INNERJOIN: com.arcgismaps.internal.jni.CoreJoinType;
					public static LEFTOUTERJOIN: com.arcgismaps.internal.jni.CoreJoinType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreJoinType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreJoinType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreJoinType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLAltitudeMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLAltitudeMode>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
					public static CLAMPTOGROUND: com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
					public static RELATIVETOGROUND: com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
					public static ABSOLUTE: com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLAltitudeMode>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLAudioPlayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLAudioPlayer>;
					public mHandle: number;
					public static createCoreKMLAudioPlayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLAudioPlayer;
					public constructor(param0: string);
					public getSource(): string;
					public finalize(): void;
					public dispose(): void;
					public getTotalDuration(): number;
					public onDestroy(): void;
					public setPauseCallback(param0: com.arcgismaps.internal.jni.CorePauseCallbackCallbackListener): void;
					public setTotalDuration(param0: number): void;
					public setDestroyCallback(param0: com.arcgismaps.internal.jni.CoreDestroyCallbackCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public onGetCurrentPosition(): void;
					public onPause(): void;
					public onPlay(): void;
					public setGetTotalDurationCallback(param0: com.arcgismaps.internal.jni.CoreTotalDurationCallbackCallbackListener): void;
					public close(): void;
					public getCurrentPosition(): number;
					public setGetCurrentPositionCallback(param0: com.arcgismaps.internal.jni.CoreCurrentPositionCallbackCallbackListener): void;
					public setCurrentPosition(param0: number): void;
					public setPlayCallback(param0: com.arcgismaps.internal.jni.CorePlayCallbackCallbackListener): void;
					public getHandle(): number;
					public onGetTotalDuration(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLColorMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLColorMode>;
					public static NORMAL: com.arcgismaps.internal.jni.CoreKMLColorMode;
					public static RANDOM: com.arcgismaps.internal.jni.CoreKMLColorMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLColorMode>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLColorMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLColorMode;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLColorStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLColorStyle>;
					public mHandle: number;
					public getColorMode(): com.arcgismaps.internal.jni.CoreKMLColorMode;
					public finalize(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLColorStyle;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreKMLStyleType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public setColorMode(param0: com.arcgismaps.internal.jni.CoreKMLColorMode): void;
					public static createCoreKMLColorStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLColorStyle;
					public getHandle(): number;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLContainer extends com.arcgismaps.internal.jni.CoreKMLNode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLContainer>;
					public getListItemType(): com.arcgismaps.internal.jni.CoreKMLListItemType;
					public getIsPartiallyVisible(): boolean;
					public setListItemType(param0: com.arcgismaps.internal.jni.CoreKMLListItemType): void;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public setChildNodes(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static createCoreKMLContainerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLContainer;
					public setIsOpen(param0: boolean): void;
					public getChildNodes(): com.arcgismaps.internal.jni.CoreVector;
					public getIsOpen(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLDataset implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLDataset>;
					public mHandle: number;
					public constructor(param0: string);
					public finalize(): void;
					public load(): void;
					public setKMLNetworkLinkMessageReceivedCallback(param0: com.arcgismaps.internal.jni.CoreOnKMLNetworkLinkMessageReceivedCallbackListener): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getRootNodes(): com.arcgismaps.internal.jni.CoreArray;
					public retryLoad(): void;
					public onKMLNetworkLinkMessageReceived(param0: number, param1: androidNative.Array<number>): void;
					public onKMLNodeRefreshStatusChanged(param0: number, param1: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setKMLNodeBalloonVisibilityChangedCallback(param0: com.arcgismaps.internal.jni.CoreOnKMLNodeBalloonVisibilityChangedCallbackListener): void;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getURI(): string;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public onKMLNodeBalloonVisibilityChanged(param0: number, param1: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLNode);
					public static createCoreKMLDatasetFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLDataset;
					public setKMLNodeRefreshStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreOnKMLNodeRefreshStatusChangedCallbackListener): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLDocument extends com.arcgismaps.internal.jni.CoreKMLContainer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLDocument>;
					public static createCoreKMLDocumentFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLDocument;
					public getInstanceId(): java.lang.Long;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLFolder extends com.arcgismaps.internal.jni.CoreKMLContainer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLFolder>;
					public static createCoreKMLFolderFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLFolder;
					public getInstanceId(): java.lang.Long;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLGeometry {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLGeometry>;
					public mHandle: number;
					public getIsExtruded(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreKMLAltitudeMode, param2: boolean, param3: boolean);
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreKMLAltitudeMode);
					public static createCoreKMLGeometryFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLGeometry;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getAltitudeMode(): com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreKMLAltitudeMode, param2: boolean);
					public getType(): com.arcgismaps.internal.jni.CoreKMLGeometryType;
					public getIsTessellated(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLGeometryType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLGeometryType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreKMLGeometryType;
					public static POINT: com.arcgismaps.internal.jni.CoreKMLGeometryType;
					public static POLYLINE: com.arcgismaps.internal.jni.CoreKMLGeometryType;
					public static POLYGON: com.arcgismaps.internal.jni.CoreKMLGeometryType;
					public static MODEL: com.arcgismaps.internal.jni.CoreKMLGeometryType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLGeometryType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLGeometryType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLGeometryType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLGraphicType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLGraphicType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static NONE: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static POINT: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static POLYLINE: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static POLYGON: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static EXTRUDEDPOINT: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static EXTRUDEDPOLYLINE: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static EXTRUDEDPOLYGON: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static MODEL: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static MULTIGEOMETRY: com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLGraphicType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLGraphicType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLGroundOverlay extends com.arcgismaps.internal.jni.CoreKMLNode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLGroundOverlay>;
					public setDrawOrder(param0: number): void;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getDrawOrder(): number;
					public getInstanceId(): java.lang.Long;
					public getAltitude(): number;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public setAltitudeMode(param0: com.arcgismaps.internal.jni.CoreKMLAltitudeMode): void;
					public setIcon(param0: com.arcgismaps.internal.jni.CoreKMLIcon): void;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getIcon(): com.arcgismaps.internal.jni.CoreKMLIcon;
					public static createCoreKMLGroundOverlayFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLGroundOverlay;
					public setAltitude(param0: number): void;
					public setRotation(param0: number): void;
					public getRotation(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreKMLIcon);
					public constructor();
					public getAltitudeMode(): com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLIcon {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLIcon>;
					public mHandle: number;
					public static createCoreKMLIconFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLIcon;
					public getURI(): string;
					public getRefreshMode(): com.arcgismaps.internal.jni.CoreKMLRefreshMode;
					public constructor(param0: string);
					public setRefreshMode(param0: com.arcgismaps.internal.jni.CoreKMLRefreshMode): void;
					public finalize(): void;
					public dispose(): void;
					public getRefreshInterval(): number;
					public setViewRefreshMode(param0: com.arcgismaps.internal.jni.CoreKMLViewRefreshMode): void;
					public getViewRefreshMode(): com.arcgismaps.internal.jni.CoreKMLViewRefreshMode;
					public setRefreshInterval(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getViewRefreshTime(): number;
					public setViewRefreshTime(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLIconStyle extends com.arcgismaps.internal.jni.CoreKMLColorStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLIconStyle>;
					public getIcon(): com.arcgismaps.internal.jni.CoreKMLIcon;
					public setHotSpot(param0: com.arcgismaps.internal.jni.CoreKMLImageCoordinate): void;
					public setScale(param0: number): void;
					public constructor();
					public getHeading(): number;
					public getScale(): number;
					public getHotSpot(): com.arcgismaps.internal.jni.CoreKMLImageCoordinate;
					public setIcon(param0: com.arcgismaps.internal.jni.CoreKMLIcon): void;
					public static createCoreKMLIconStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLIconStyle;
					public setHeading(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLIcon, param1: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLImageCoordinate {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLImageCoordinate>;
					public mHandle: number;
					public getYUnits(): com.arcgismaps.internal.jni.CoreKMLUnitsType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getX(): number;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreKMLImageCoordinateFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLImageCoordinate;
					public constructor(param0: number, param1: number, param2: com.arcgismaps.internal.jni.CoreKMLUnitsType, param3: com.arcgismaps.internal.jni.CoreKMLUnitsType);
					public getY(): number;
					public getXUnits(): com.arcgismaps.internal.jni.CoreKMLUnitsType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLLabelStyle extends com.arcgismaps.internal.jni.CoreKMLColorStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLLabelStyle>;
					public setScale(param0: number): void;
					public constructor();
					public static createCoreKMLLabelStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLLabelStyle;
					public getScale(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreColor, param1: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLLayer extends com.arcgismaps.internal.jni.CoreLayer implements com.arcgismaps.internal.jni.CoreTimeAware {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLLayer>;
					public setIsTimeFilteringEnabled(param0: boolean): void;
					public onFullTimeExtentChanged(): void;
					public finalize(): void;
					public getDataset(): com.arcgismaps.internal.jni.CoreKMLDataset;
					public getTimeOffset(): com.arcgismaps.internal.jni.CoreTimeValue;
					public getIsVisible(): boolean;
					public load(): void;
					public getTimeInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getSupportsTimeFiltering(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public getFullTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLDataset);
					public getIsTimeFilteringEnabled(): boolean;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public setTimeOffset(param0: com.arcgismaps.internal.jni.CoreTimeValue): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getName(): string;
					public setFullTimeExtentChangedCallback(param0: com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener): void;
					public static createCoreKMLLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLLayer;
					public setIsVisible(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLLineStyle extends com.arcgismaps.internal.jni.CoreKMLColorStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLLineStyle>;
					public constructor();
					public setWidth(param0: number): void;
					public getWidth(): number;
					public static createCoreKMLLineStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLLineStyle;
					public constructor(param0: com.arcgismaps.internal.jni.CoreColor, param1: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLListItemType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLListItemType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreKMLListItemType;
					public static CHECK: com.arcgismaps.internal.jni.CoreKMLListItemType;
					public static RADIOFOLDER: com.arcgismaps.internal.jni.CoreKMLListItemType;
					public static CHECKHIDECHILDREN: com.arcgismaps.internal.jni.CoreKMLListItemType;
					public static CHECKOFFONLY: com.arcgismaps.internal.jni.CoreKMLListItemType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLListItemType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLListItemType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLListItemType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLNetworkLink extends com.arcgismaps.internal.jni.CoreKMLNode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLNetworkLink>;
					public getListItemType(): com.arcgismaps.internal.jni.CoreKMLListItemType;
					public constructor(param0: string);
					public static createCoreKMLNetworkLinkFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLNetworkLink;
					public setViewRefreshMode(param0: com.arcgismaps.internal.jni.CoreKMLViewRefreshMode): void;
					public setURI(param0: string): void;
					public getCanFlyToNode(): boolean;
					public getIsPartiallyVisible(): boolean;
					public setListItemType(param0: com.arcgismaps.internal.jni.CoreKMLListItemType): void;
					public constructor();
					public getViewRefreshTime(): number;
					public getHasRefreshVisibility(): boolean;
					public setViewRefreshTime(param0: number): void;
					public setCanFlyToNode(param0: boolean): void;
					public getURI(): string;
					public getRefreshMode(): com.arcgismaps.internal.jni.CoreKMLRefreshMode;
					public getInstanceId(): java.lang.Long;
					public setRefreshMode(param0: com.arcgismaps.internal.jni.CoreKMLRefreshMode): void;
					public getRefreshInterval(): number;
					public setIsOpen(param0: boolean): void;
					public getViewRefreshMode(): com.arcgismaps.internal.jni.CoreKMLViewRefreshMode;
					public setHasRefreshVisibility(param0: boolean): void;
					public refresh(): void;
					public setRefreshInterval(param0: number): void;
					public getChildNodes(): com.arcgismaps.internal.jni.CoreArray;
					public getIsOpen(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLNode extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLNode>;
					public mHandle: number;
					public setDescription(param0: string): void;
					public getId(): string;
					public finalize(): void;
					public getViewpoint(): com.arcgismaps.internal.jni.CoreKMLViewpoint;
					public getIsVisible(): boolean;
					public setStyle(param0: com.arcgismaps.internal.jni.CoreKMLStyle): void;
					public setSnippet(param0: string): void;
					public static createCoreKMLNodeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLNode;
					public getAddress(): string;
					public getSnippetMaxLines(): number;
					public onRefreshStatusChangedEvent(): void;
					public getUXIconId(): number;
					public getSnippet(): string;
					public constructor();
					public setIsHighlighted(param0: boolean): void;
					public close(): void;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getHighlightStyle(): com.arcgismaps.internal.jni.CoreKMLStyle;
					public setIconUpdateCallback(param0: com.arcgismaps.internal.jni.CoreIconUpdatedCallbackCallbackListener): void;
					public saveAsAsync(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public setViewpoint(param0: com.arcgismaps.internal.jni.CoreKMLViewpoint): void;
					public getBalloonBackgroundColor(): com.arcgismaps.internal.jni.CoreColor;
					public getParentNode(): com.arcgismaps.internal.jni.CoreKMLNode;
					public setSnippetMaxLines(param0: number): void;
					public setHighlightStyle(param0: com.arcgismaps.internal.jni.CoreKMLStyle): void;
					public getInstanceId(): java.lang.Long;
					public getRefreshStatus(): com.arcgismaps.internal.jni.CoreKMLRefreshStatus;
					public getStyle(): com.arcgismaps.internal.jni.CoreKMLStyle;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLNode;
					public setAddress(param0: string): void;
					public onIconUpdate(): void;
					public setTimeExtent(param0: com.arcgismaps.internal.jni.CoreTimeExtent): void;
					public getIsHighlighted(): boolean;
					public setName(param0: string): void;
					public getUXIcon(): com.arcgismaps.internal.jni.CoreImage;
					public getBalloonContent(): string;
					public getTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public setRefreshStatusChangedEventCallback(param0: com.arcgismaps.internal.jni.CoreRefreshStatusChangedCallbackCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getRefreshError(): com.arcgismaps.internal.jni.CoreError;
					public setIsVisible(param0: boolean): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreKMLNodeType;
					public setId(param0: string): void;
					public getDescription(): string;
					public getUXIconColor(): com.arcgismaps.internal.jni.CoreColor;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLNodeType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLNodeType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static KMLDOCUMENT: com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static KMLFOLDER: com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static KMLNETWORKLINK: com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static KMLPLACEMARK: com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static KMLPHOTOOVERLAY: com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static KMLGROUNDOVERLAY: com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static KMLSCREENOVERLAY: com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static KMLTOUR: com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLNodeType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLNodeType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLNodeType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLPhotoOverlay extends com.arcgismaps.internal.jni.CoreKMLNode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLPhotoOverlay>;
					public getInstanceId(): java.lang.Long;
					public static createCoreKMLPhotoOverlayFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLPhotoOverlay;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLPlacemark extends com.arcgismaps.internal.jni.CoreKMLNode implements com.arcgismaps.internal.jni.CoreGeoElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLPlacemark>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLGeometry);
					public getGeometries(): com.arcgismaps.internal.jni.CoreVector;
					public static createCoreKMLPlacemarkFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLPlacemark;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public getGraphicType(): com.arcgismaps.internal.jni.CoreKMLGraphicType;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLPolygonStyle extends com.arcgismaps.internal.jni.CoreKMLColorStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLPolygonStyle>;
					public setIsOutlined(param0: boolean): void;
					public constructor();
					public setIsFilled(param0: boolean): void;
					public getIsFilled(): boolean;
					public getIsOutlined(): boolean;
					public static createCoreKMLPolygonStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLPolygonStyle;
					public constructor(param0: com.arcgismaps.internal.jni.CoreColor);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLRefreshMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLRefreshMode>;
					public static ONCHANGE: com.arcgismaps.internal.jni.CoreKMLRefreshMode;
					public static ONINTERVAL: com.arcgismaps.internal.jni.CoreKMLRefreshMode;
					public static ONEXPIRE: com.arcgismaps.internal.jni.CoreKMLRefreshMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLRefreshMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLRefreshMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLRefreshMode>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLRefreshStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLRefreshStatus>;
					public static NONE: com.arcgismaps.internal.jni.CoreKMLRefreshStatus;
					public static INPROGRESS: com.arcgismaps.internal.jni.CoreKMLRefreshStatus;
					public static COMPLETED: com.arcgismaps.internal.jni.CoreKMLRefreshStatus;
					public static FAILED: com.arcgismaps.internal.jni.CoreKMLRefreshStatus;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLRefreshStatus;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLRefreshStatus>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLRefreshStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLScreenOverlay extends com.arcgismaps.internal.jni.CoreKMLNode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLScreenOverlay>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLIcon);
					public setDrawOrder(param0: number): void;
					public getOverlayCoordinate(): com.arcgismaps.internal.jni.CoreKMLImageCoordinate;
					public setRotationCoordinate(param0: com.arcgismaps.internal.jni.CoreKMLImageCoordinate): void;
					public getDrawOrder(): number;
					public getInstanceId(): java.lang.Long;
					public static createCoreKMLScreenOverlayFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLScreenOverlay;
					public setIcon(param0: com.arcgismaps.internal.jni.CoreKMLIcon): void;
					public setSize(param0: com.arcgismaps.internal.jni.CoreKMLImageCoordinate): void;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getIcon(): com.arcgismaps.internal.jni.CoreKMLIcon;
					public getRotationCoordinate(): com.arcgismaps.internal.jni.CoreKMLImageCoordinate;
					public setRotation(param0: number): void;
					public getRotation(): number;
					public setScreenCoordinate(param0: com.arcgismaps.internal.jni.CoreKMLImageCoordinate): void;
					public constructor();
					public setOverlayCoordinate(param0: com.arcgismaps.internal.jni.CoreKMLImageCoordinate): void;
					public getSize(): com.arcgismaps.internal.jni.CoreKMLImageCoordinate;
					public getScreenCoordinate(): com.arcgismaps.internal.jni.CoreKMLImageCoordinate;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLStyle>;
					public mHandle: number;
					public getIconStyle(): com.arcgismaps.internal.jni.CoreKMLIconStyle;
					public getLineStyle(): com.arcgismaps.internal.jni.CoreKMLLineStyle;
					public finalize(): void;
					public setIconStyle(param0: com.arcgismaps.internal.jni.CoreKMLIconStyle): void;
					public dispose(): void;
					public setPolygonStyle(param0: com.arcgismaps.internal.jni.CoreKMLPolygonStyle): void;
					public getLabelStyle(): com.arcgismaps.internal.jni.CoreKMLLabelStyle;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setLineStyle(param0: com.arcgismaps.internal.jni.CoreKMLLineStyle): void;
					public close(): void;
					public static createCoreKMLStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLStyle;
					public getPolygonStyle(): com.arcgismaps.internal.jni.CoreKMLPolygonStyle;
					public getHandle(): number;
					public setLabelStyle(param0: com.arcgismaps.internal.jni.CoreKMLLabelStyle): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLStyleType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLStyleType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreKMLStyleType;
					public static KMLLINESTYLE: com.arcgismaps.internal.jni.CoreKMLStyleType;
					public static KMLICONSTYLE: com.arcgismaps.internal.jni.CoreKMLStyleType;
					public static KMLPOLYGONSTYLE: com.arcgismaps.internal.jni.CoreKMLStyleType;
					public static KMLLABELSTYLE: com.arcgismaps.internal.jni.CoreKMLStyleType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLStyleType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLStyleType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLStyleType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLTour extends com.arcgismaps.internal.jni.CoreKMLNode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLTour>;
					public onTourStatusChanged(param0: number): void;
					public setTourStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreTourStatusChangedCallbackCallbackListener): void;
					public getInstanceId(): java.lang.Long;
					public getTourStatus(): com.arcgismaps.internal.jni.CoreKMLTourStatus;
					public finalize(): void;
					public dispose(): void;
					public static createCoreKMLTourFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLTour;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLTourController {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLTourController>;
					public mHandle: number;
					public reset(): void;
					public finalize(): void;
					public dispose(): void;
					public getTotalDuration(): number;
					public registerAudioPlayer(param0: com.arcgismaps.internal.jni.CoreKMLAudioPlayer): void;
					public setTour(param0: com.arcgismaps.internal.jni.CoreKMLTour): void;
					public onCreateAudioPlayer(param0: androidNative.Array<number>): void;
					public getTour(): com.arcgismaps.internal.jni.CoreKMLTour;
					public setCurrentPositionChangedCallback(param0: com.arcgismaps.internal.jni.CoreCurrentPositionChangedCallbackCallbackListener): void;
					public setCreateAudioPlayerCallback(param0: com.arcgismaps.internal.jni.CoreCreateAudioPlayerCallbackCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public pause(): void;
					public static createCoreKMLTourControllerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLTourController;
					public onTotalDurationChanged(param0: number): void;
					public close(): void;
					public onCurrentPositionChanged(param0: number): void;
					public getCurrentPosition(): number;
					public play(): void;
					public setTotalDurationChangedCallback(param0: com.arcgismaps.internal.jni.CoreTotalDurationChangedCallbackCallbackListener): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLTourStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLTourStatus>;
					public static NOTINITIALIZED: com.arcgismaps.internal.jni.CoreKMLTourStatus;
					public static INITIALIZING: com.arcgismaps.internal.jni.CoreKMLTourStatus;
					public static INITIALIZED: com.arcgismaps.internal.jni.CoreKMLTourStatus;
					public static PLAYING: com.arcgismaps.internal.jni.CoreKMLTourStatus;
					public static PAUSED: com.arcgismaps.internal.jni.CoreKMLTourStatus;
					public static COMPLETED: com.arcgismaps.internal.jni.CoreKMLTourStatus;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLTourStatus>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLTourStatus;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLTourStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLUnitsType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLUnitsType>;
					public static FRACTION: com.arcgismaps.internal.jni.CoreKMLUnitsType;
					public static PIXELS: com.arcgismaps.internal.jni.CoreKMLUnitsType;
					public static INSETPIXELS: com.arcgismaps.internal.jni.CoreKMLUnitsType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLUnitsType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLUnitsType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLUnitsType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLViewRefreshMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLViewRefreshMode>;
					public static NEVER: com.arcgismaps.internal.jni.CoreKMLViewRefreshMode;
					public static ONSTOP: com.arcgismaps.internal.jni.CoreKMLViewRefreshMode;
					public static ONREQUEST: com.arcgismaps.internal.jni.CoreKMLViewRefreshMode;
					public static ONREGION: com.arcgismaps.internal.jni.CoreKMLViewRefreshMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLViewRefreshMode>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLViewRefreshMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLViewRefreshMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLViewpoint {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLViewpoint>;
					public mHandle: number;
					public getPitch(): number;
					public static createCameraViewpoint(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number, param4: com.arcgismaps.internal.jni.CoreKMLAltitudeMode): com.arcgismaps.internal.jni.CoreKMLViewpoint;
					public static createCoreKMLViewpointFromHandle(param0: number): com.arcgismaps.internal.jni.CoreKMLViewpoint;
					public finalize(): void;
					public dispose(): void;
					public getHeading(): number;
					public getRange(): number;
					public getLocation(): com.arcgismaps.internal.jni.CorePoint;
					public getType(): com.arcgismaps.internal.jni.CoreKMLViewpointType;
					public static createLookAtViewpoint(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number, param4: com.arcgismaps.internal.jni.CoreKMLAltitudeMode): com.arcgismaps.internal.jni.CoreKMLViewpoint;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getAltitudeMode(): com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
					public close(): void;
					public getRoll(): number;
					public getHandle(): number;
					public static createWithViewpoint(param0: com.arcgismaps.internal.jni.CoreViewpoint): com.arcgismaps.internal.jni.CoreKMLViewpoint;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreKMLViewpointType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreKMLViewpointType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreKMLViewpointType;
					public static CAMERA: com.arcgismaps.internal.jni.CoreKMLViewpointType;
					public static LOOKAT: com.arcgismaps.internal.jni.CoreKMLViewpointType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreKMLViewpointType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreKMLViewpointType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreKMLViewpointType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelAngle extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelAngle>;
					public mHandle: number;
					public getAngleExpression(): com.arcgismaps.internal.jni.CoreArcadeExpression;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreLabelAngle;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcadeExpression, param1: com.arcgismaps.internal.jni.CoreLabelAngleRotationType);
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcadeExpression);
					public static createCoreLabelAngleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLabelAngle;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setAngleExpression(param0: com.arcgismaps.internal.jni.CoreArcadeExpression): void;
					public toJSON(): string;
					public setRotationType(param0: com.arcgismaps.internal.jni.CoreLabelAngleRotationType): void;
					public close(): void;
					public getRotationType(): com.arcgismaps.internal.jni.CoreLabelAngleRotationType;
					public getHandle(): number;
					public clone(): com.arcgismaps.internal.jni.CoreLabelAngle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelAngleRotationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelAngleRotationType>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelAngleRotationType;
					public static ARITHMETIC: com.arcgismaps.internal.jni.CoreLabelAngleRotationType;
					public static GEOGRAPHIC: com.arcgismaps.internal.jni.CoreLabelAngleRotationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelAngleRotationType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelAngleRotationType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelAngleRotationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelBarrierWeight {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelBarrierWeight>;
					public static NONE: com.arcgismaps.internal.jni.CoreLabelBarrierWeight;
					public static LOW: com.arcgismaps.internal.jni.CoreLabelBarrierWeight;
					public static MEDIUM: com.arcgismaps.internal.jni.CoreLabelBarrierWeight;
					public static HIGH: com.arcgismaps.internal.jni.CoreLabelBarrierWeight;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelBarrierWeight;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelBarrierWeight>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelBarrierWeight;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelDeconflictionStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy;
					public static DYNAMIC: com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy;
					public static NONE: com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy;
					public static STATIC: com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy;
					public static DYNAMICNEVERREMOVE: com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelDefinition extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelDefinition>;
					public mHandle: number;
					public setUseCodedValues(param0: boolean): void;
					public setRepeatStrategy(param0: com.arcgismaps.internal.jni.CoreLabelRepeatStrategy): void;
					public getWhereClause(): string;
					public getOverrunStrategy(): com.arcgismaps.internal.jni.CoreLabelOverrunStrategy;
					public setStackSeparators(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public finalize(): void;
					public setMinScale(param0: number): void;
					public setRemoveDuplicatesStrategy(param0: com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy): void;
					public getOffsetDistance(): number;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getMinScale(): number;
					public setTextSymbol(param0: com.arcgismaps.internal.jni.CoreTextSymbol): void;
					public constructor();
					public setLineConnection(param0: com.arcgismaps.internal.jni.CoreLabelLineConnection): void;
					public getStackAlignment(): com.arcgismaps.internal.jni.CoreLabelStackAlignment;
					public toJSON(): string;
					public setLineOrientation(param0: com.arcgismaps.internal.jni.CoreLabelLineOrientation): void;
					public close(): void;
					public setPlacement(param0: com.arcgismaps.internal.jni.CoreLabelingPlacement): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreLabelDefinition;
					public getFeatureInteriorOverlapStrategy(): com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
					public getPriority(): number;
					public getStackStrategy(): com.arcgismaps.internal.jni.CoreLabelStackStrategy;
					public getUseCodedValues(): boolean;
					public getPlacement(): com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public getStackSeparators(): com.arcgismaps.internal.jni.CoreVector;
					public setTextLayout(param0: com.arcgismaps.internal.jni.CoreLabelTextLayout): void;
					public setExpression(param0: com.arcgismaps.internal.jni.CoreLabelExpression): void;
					public getDeconflictionStrategy(): com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy;
					public setName(param0: string): void;
					public setRepeatDistance(param0: number): void;
					public getAngle(): com.arcgismaps.internal.jni.CoreLabelAngle;
					public setRemoveDuplicatesDistance(param0: number): void;
					public getStackRowLength(): number;
					public getExpression(): com.arcgismaps.internal.jni.CoreLabelExpression;
					public setStackRowLength(param0: number): void;
					public setWhereClause(param0: string): void;
					public getMultipartStrategy(): com.arcgismaps.internal.jni.CoreLabelMultipartStrategy;
					public setOffsetDistance(param0: number): void;
					public setGeometryStrategy(param0: com.arcgismaps.internal.jni.CoreLabelGeometryStrategy): void;
					public getHandle(): number;
					public getTextLayout(): com.arcgismaps.internal.jni.CoreLabelTextLayout;
					public getLineConnection(): com.arcgismaps.internal.jni.CoreLabelLineConnection;
					public setStackBreakPosition(param0: com.arcgismaps.internal.jni.CoreLabelStackBreakPosition): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLabelExpression, param1: com.arcgismaps.internal.jni.CoreTextSymbol);
					public setStackStrategy(param0: com.arcgismaps.internal.jni.CoreLabelStackStrategy): void;
					public static createCoreLabelDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLabelDefinition;
					public setOverrunStrategy(param0: com.arcgismaps.internal.jni.CoreLabelOverrunStrategy): void;
					public getTextSymbol(): com.arcgismaps.internal.jni.CoreTextSymbol;
					public getRemoveDuplicatesStrategy(): com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy;
					public getGeometryStrategy(): com.arcgismaps.internal.jni.CoreLabelGeometryStrategy;
					public setAngle(param0: com.arcgismaps.internal.jni.CoreLabelAngle): void;
					public setDeconflictionStrategy(param0: com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy): void;
					public setMaxScale(param0: number): void;
					public setMultipartStrategy(param0: com.arcgismaps.internal.jni.CoreLabelMultipartStrategy): void;
					public getStackBreakPosition(): com.arcgismaps.internal.jni.CoreLabelStackBreakPosition;
					public setStackAlignment(param0: com.arcgismaps.internal.jni.CoreLabelStackAlignment): void;
					public getLineOrientation(): com.arcgismaps.internal.jni.CoreLabelLineOrientation;
					public dispose(): void;
					public getTextOrientation(): com.arcgismaps.internal.jni.CoreLabelTextOrientation;
					public setFeatureInteriorOverlapStrategy(param0: com.arcgismaps.internal.jni.CoreLabelOverlapStrategy): void;
					public getRemoveDuplicatesDistance(): number;
					public getMaxScale(): number;
					public getRepeatDistance(): number;
					public getFeatureBoundaryOverlapStrategy(): com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
					public getLabelOverlapStrategy(): com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getRepeatStrategy(): com.arcgismaps.internal.jni.CoreLabelRepeatStrategy;
					public setTextOrientation(param0: com.arcgismaps.internal.jni.CoreLabelTextOrientation): void;
					public setLabelOverlapStrategy(param0: com.arcgismaps.internal.jni.CoreLabelOverlapStrategy): void;
					public setFeatureBoundaryOverlapStrategy(param0: com.arcgismaps.internal.jni.CoreLabelOverlapStrategy): void;
					public setPriority(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelExpression {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelExpression>;
					public mHandle: number;
					public static createCoreLabelExpressionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLabelExpression;
					public getExpression(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLabelExpression;
					public clone(): com.arcgismaps.internal.jni.CoreLabelExpression;
					public setExpression(param0: string): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreLabelExpressionType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelExpressionType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelExpressionType>;
					public static ARCADELABELEXPRESSION: com.arcgismaps.internal.jni.CoreLabelExpressionType;
					public static SIMPLELABELEXPRESSION: com.arcgismaps.internal.jni.CoreLabelExpressionType;
					public static WEBMAPLABELEXPRESSION: com.arcgismaps.internal.jni.CoreLabelExpressionType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelExpressionType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelExpressionType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelExpressionType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelGeometryStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelGeometryStrategy>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelGeometryStrategy;
					public static USEGEOMETRY: com.arcgismaps.internal.jni.CoreLabelGeometryStrategy;
					public static USECLIPPEDGEOMETRY: com.arcgismaps.internal.jni.CoreLabelGeometryStrategy;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelGeometryStrategy>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelGeometryStrategy;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelGeometryStrategy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelLineConnection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelLineConnection>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelLineConnection;
					public static MINIMIZELABELS: com.arcgismaps.internal.jni.CoreLabelLineConnection;
					public static NONE: com.arcgismaps.internal.jni.CoreLabelLineConnection;
					public static UNAMBIGUOUSLABELS: com.arcgismaps.internal.jni.CoreLabelLineConnection;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelLineConnection;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelLineConnection>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelLineConnection;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelLineOrientation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelLineOrientation>;
					public static DIRECTION: com.arcgismaps.internal.jni.CoreLabelLineOrientation;
					public static SCREEN: com.arcgismaps.internal.jni.CoreLabelLineOrientation;
					public static UNCONSTRAINED: com.arcgismaps.internal.jni.CoreLabelLineOrientation;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelLineOrientation;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelLineOrientation>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelLineOrientation;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelMultipartStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelMultipartStrategy>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelMultipartStrategy;
					public static LABELLARGEST: com.arcgismaps.internal.jni.CoreLabelMultipartStrategy;
					public static LABELPERFEATURE: com.arcgismaps.internal.jni.CoreLabelMultipartStrategy;
					public static LABELPERPART: com.arcgismaps.internal.jni.CoreLabelMultipartStrategy;
					public static LABELPERSEGMENT: com.arcgismaps.internal.jni.CoreLabelMultipartStrategy;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelMultipartStrategy;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelMultipartStrategy>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelMultipartStrategy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelOverlapStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelOverlapStrategy>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
					public static ALLOW: com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
					public static AVOID: com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
					public static EXCLUDE: com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelOverlapStrategy>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelOverrunStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelOverrunStrategy>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelOverrunStrategy;
					public static NONE: com.arcgismaps.internal.jni.CoreLabelOverrunStrategy;
					public static ALLOW: com.arcgismaps.internal.jni.CoreLabelOverrunStrategy;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelOverrunStrategy>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelOverrunStrategy;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelOverrunStrategy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelRemoveDuplicatesStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy;
					public static ALL: com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy;
					public static FEATURETYPE: com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy;
					public static LABELCLASS: com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy;
					public static NONE: com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelRepeatStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelRepeatStrategy>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelRepeatStrategy;
					public static NONE: com.arcgismaps.internal.jni.CoreLabelRepeatStrategy;
					public static REPEAT: com.arcgismaps.internal.jni.CoreLabelRepeatStrategy;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelRepeatStrategy;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelRepeatStrategy>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelRepeatStrategy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelStackAlignment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelStackAlignment>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelStackAlignment;
					public static DYNAMIC: com.arcgismaps.internal.jni.CoreLabelStackAlignment;
					public static TEXTSYMBOL: com.arcgismaps.internal.jni.CoreLabelStackAlignment;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelStackAlignment;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelStackAlignment;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelStackAlignment>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelStackBreakPosition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelStackBreakPosition>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelStackBreakPosition;
					public static AFTER: com.arcgismaps.internal.jni.CoreLabelStackBreakPosition;
					public static BEFORE: com.arcgismaps.internal.jni.CoreLabelStackBreakPosition;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelStackBreakPosition;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelStackBreakPosition;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelStackBreakPosition>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelStackSeparator extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelStackSeparator>;
					public mHandle: number;
					public getForced(): boolean;
					public getSeparator(): string;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreLabelStackSeparator;
					public finalize(): void;
					public dispose(): void;
					public static createCoreLabelStackSeparatorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLabelStackSeparator;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setSeparator(param0: string): void;
					public getBreakPosition(): com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition;
					public setBreakPosition(param0: com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition): void;
					public setVisible(param0: boolean): void;
					public getVisible(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setForced(param0: boolean): void;
					public toJSON(): string;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelStackSeparatorBreakPosition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition;
					public static AFTER: com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition;
					public static BEFORE: com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelStackStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelStackStrategy>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelStackStrategy;
					public static NONE: com.arcgismaps.internal.jni.CoreLabelStackStrategy;
					public static ALLOW: com.arcgismaps.internal.jni.CoreLabelStackStrategy;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelStackStrategy>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelStackStrategy;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelStackStrategy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelTextLayout {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelTextLayout>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelTextLayout;
					public static HORIZONTAL: com.arcgismaps.internal.jni.CoreLabelTextLayout;
					public static PERPENDICULAR: com.arcgismaps.internal.jni.CoreLabelTextLayout;
					public static STRAIGHT: com.arcgismaps.internal.jni.CoreLabelTextLayout;
					public static FOLLOWFEATURE: com.arcgismaps.internal.jni.CoreLabelTextLayout;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelTextLayout>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelTextLayout;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelTextLayout;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelTextOrientation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelTextOrientation>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelTextOrientation;
					public static DIRECTION: com.arcgismaps.internal.jni.CoreLabelTextOrientation;
					public static SCREEN: com.arcgismaps.internal.jni.CoreLabelTextOrientation;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelTextOrientation;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelTextOrientation;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelTextOrientation>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelingInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelingInfo>;
					public mHandle: number;
					public getSymbol(): com.arcgismaps.internal.jni.CoreTextSymbol;
					public getLabelExpression(): string;
					public getWhere(): string;
					public getUseCodedValues(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getMaxScale(): number;
					public getMinScale(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public static createCoreLabelingInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLabelingInfo;
					public getLabelPlacement(): com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLabelingPlacement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLabelingPlacement>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEABOVEAFTER: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEABOVEALONG: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEABOVEBEFORE: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEABOVEEND: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEABOVESTART: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEBELOWAFTER: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEBELOWALONG: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEBELOWBEFORE: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEBELOWEND: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINEBELOWSTART: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINECENTERAFTER: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINECENTERALONG: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINECENTERBEFORE: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINECENTEREND: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static LINECENTERSTART: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POINTABOVECENTER: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POINTABOVELEFT: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POINTABOVERIGHT: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POINTBELOWCENTER: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POINTBELOWLEFT: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POINTBELOWRIGHT: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POINTCENTERCENTER: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POINTCENTERLEFT: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POINTCENTERRIGHT: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static POLYGONALWAYSHORIZONTAL: com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLabelingPlacement;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLabelingPlacement>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLabelingPlacement;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLatitudeLongitudeFormat {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat>;
					public static DECIMALDEGREES: com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat;
					public static DEGREESDECIMALMINUTES: com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat;
					public static DEGREESMINUTESSECONDS: com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLatitudeLongitudeFormat>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLatitudeLongitudeGrid extends com.arcgismaps.internal.jni.CoreGrid {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLatitudeLongitudeGrid>;
					public static createCoreLatitudeLongitudeGridFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLatitudeLongitudeGrid;
					public constructor();
					public getLabelFormat(): com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat;
					public setLabelFormat(param0: com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLatitudeLongitudeGridLabelFormat {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat>;
					public static DECIMALDEGREES: com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat;
					public static DEGREESMINUTESSECONDS: com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLayer implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLayerContent, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLayer>;
					public mHandle: number;
					public equals(param0: com.arcgismaps.internal.jni.CoreLayer): boolean;
					public setDescription(param0: string): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreLayerType;
					public getId(): string;
					public setOpacity(param0: number): void;
					public finalize(): void;
					public setMinScale(param0: number): void;
					public onSubLayerContentChanged(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public static invalidId(): number;
					public retryLoad(): void;
					public getMinScale(): number;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public close(): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public onRequestRequired(param0: number): void;
					public getOpacity(): number;
					public getInstanceId(): java.lang.Long;
					public getHash(): number;
					public cancelLoad(): void;
					public setName(param0: string): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getShowInLegend(): boolean;
					public getDescription(): string;
					public getHandle(): number;
					public onVisibilityChanged(param0: boolean): void;
					public getFullExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public setVisibilityChangedCallback(param0: com.arcgismaps.internal.jni.CoreVisibilityChangedCallbackListener): void;
					public getIsIdentifyEnabled(): boolean;
					public getIsVisible(): boolean;
					public load(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLayer;
					public isVisibleAtScale(param0: number): boolean;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public clone(): com.arcgismaps.internal.jni.CoreLayer;
					public onDoneLoading(param0: number): void;
					public setMaxScale(param0: number): void;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public getAttribution(): string;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getItem(): com.arcgismaps.internal.jni.CoreItem;
					public getMaxScale(): number;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
					public setId(param0: string): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static createCoreLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLayer;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLayerContent {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLayerContent>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLayerContent interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
						getName(): string;
						getCanChangeVisibility(): boolean;
						getIsVisible(): boolean;
						getShowInLegend(): boolean;
						setIsVisible(param0: boolean): void;
						setShowInLegend(param0: boolean): void;
						fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
						isVisibleAtScale(param0: number): boolean;
						setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					});
					public constructor();
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
					public getCanChangeVisibility(): boolean;
					public getIsVisible(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLayerFloorDefinition extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLayerFloorDefinition>;
					public mHandle: number;
					public getFloorField(): string;
					public constructor(param0: string);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreLayerFloorDefinition;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public toJSON(): string;
					public close(): void;
					public static createCoreLayerFloorDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLayerFloorDefinition;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLayerSceneProperties {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLayerSceneProperties>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public getAltitudeOffset(): number;
					public getAltitudeUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public setAltitudeUnit(param0: com.arcgismaps.internal.jni.CoreLinearUnit): void;
					public getSurfacePlacement(): com.arcgismaps.internal.jni.CoreSurfacePlacement;
					public setSurfacePlacement(param0: com.arcgismaps.internal.jni.CoreSurfacePlacement): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSurfacePlacement);
					public static nativeDestroy(param0: number): void;
					public static createCoreLayerScenePropertiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLayerSceneProperties;
					public constructor();
					public close(): void;
					public setAltitudeOffset(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLayerTimeInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLayerTimeInfo>;
					public mHandle: number;
					public getTimeUnit(): com.arcgismaps.internal.jni.CoreTimeUnit;
					public finalize(): void;
					public dispose(): void;
					public getHasLiveData(): boolean;
					public getTrackIdField(): string;
					public static createCoreLayerTimeInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLayerTimeInfo;
					public getTimeReference(): com.arcgismaps.internal.jni.CoreTimeReference;
					public getStartTimeField(): string;
					public getTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public getInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getEndTimeField(): string;
					public getTimeInterval(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLayerType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLayerType>;
					public static UNKNOWNLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static IMAGETILEDLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static SERVICEIMAGETILEDLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static ARCGISMAPIMAGELAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static ARCGISTILEDLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static FEATURECOLLECTIONLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static FEATURELAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static KMLLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static BINGMAPLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static RASTERLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static UNSUPPORTEDLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static MOBILEBASEMAPLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static ARCGISVECTORTILEDLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static ARCGISSCENELAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static WMTSLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static OPENSTREETMAPLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static WEBTILEDLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static BINGMAPSLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static ENCLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static WMSLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static INTEGRATEDMESHLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static POINTCLOUDLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static GROUPLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static ANNOTATIONLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static SUBTYPEFEATURELAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static DIMENSIONLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static DYNAMICENTITYLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public static OGC3DTILESLAYER: com.arcgismaps.internal.jni.CoreLayerType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLayerType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLayerType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLayerType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLayerViewState {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLayerViewState>;
					public mHandle: number;
					public static createCoreLayerViewStateFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLayerViewState;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getStatus(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLayerViewStateChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLayerViewStateChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLayerViewStateChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						layerViewStateChanged(param0: com.arcgismaps.internal.jni.CoreLayer, param1: com.arcgismaps.internal.jni.CoreLayerViewState): void;
					});
					public constructor();
					public layerViewStateChanged(param0: com.arcgismaps.internal.jni.CoreLayer, param1: com.arcgismaps.internal.jni.CoreLayerViewState): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLayerViewStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLayerViewStatus>;
					public static ACTIVE: number;
					public static NOTVISIBLE: number;
					public static OUTOFSCALE: number;
					public static LOADING: number;
					public static ERROR: number;
					public static WARNING: number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLegendInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLegendInfo>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getHash(): number;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreLegendInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLegendInfo;
					public equals(param0: com.arcgismaps.internal.jni.CoreLegendInfo): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLevelLayerDefinition extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLevelLayerDefinition>;
					public mHandle: number;
					public getLayerId(): string;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreLevelLayerDefinition;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getLongNameField(): string;
					public getShortNameField(): string;
					public getLevelIdField(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getVerticalOrderField(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public toJSON(): string;
					public close(): void;
					public getFacilityIdField(): string;
					public getLevelNumberField(): string;
					public constructor(param0: string, param1: string, param2: string, param3: string, param4: string, param5: string, param6: string);
					public static createCoreLevelLayerDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLevelLayerDefinition;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLevelOfDetail {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLevelOfDetail>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getScale(): number;
					public getLevel(): number;
					public getResolution(): number;
					public static createCoreLevelOfDetailFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLevelOfDetail;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLicense {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLicense>;
					public mHandle: number;
					public getLicenseType(): com.arcgismaps.internal.jni.CoreLicenseType;
					public finalize(): void;
					public dispose(): void;
					public getIsPermanent(): boolean;
					public getLicenseStatus(): com.arcgismaps.internal.jni.CoreLicenseStatus;
					public static createCoreLicenseFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLicense;
					public getLicenseLevel(): com.arcgismaps.internal.jni.CoreLicenseLevel;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getExtensions(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public getExpiry(): com.arcgismaps.internal.jni.CoreDateTime;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLicenseInfo extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLicenseInfo>;
					public mHandle: number;
					public constructor(param0: string);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreLicenseInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLicenseInfo;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreLicenseInfo;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLicenseLevel {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLicenseLevel>;
					public static DEVELOPER: com.arcgismaps.internal.jni.CoreLicenseLevel;
					public static LITE: com.arcgismaps.internal.jni.CoreLicenseLevel;
					public static BASIC: com.arcgismaps.internal.jni.CoreLicenseLevel;
					public static STANDARD: com.arcgismaps.internal.jni.CoreLicenseLevel;
					public static ADVANCED: com.arcgismaps.internal.jni.CoreLicenseLevel;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLicenseLevel>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLicenseLevel;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLicenseLevel;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLicenseResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLicenseResult>;
					public mHandle: number;
					public static createCoreLicenseResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLicenseResult;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getLicenseStatus(): com.arcgismaps.internal.jni.CoreLicenseStatus;
					public getExtensionsStatus(): com.arcgismaps.internal.jni.CoreDictionary;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLicenseStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLicenseStatus>;
					public static INVALID: com.arcgismaps.internal.jni.CoreLicenseStatus;
					public static EXPIRED: com.arcgismaps.internal.jni.CoreLicenseStatus;
					public static LOGINREQUIRED: com.arcgismaps.internal.jni.CoreLicenseStatus;
					public static VALID: com.arcgismaps.internal.jni.CoreLicenseStatus;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLicenseStatus;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLicenseStatus>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLicenseStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLicenseType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLicenseType>;
					public static DEVELOPER: com.arcgismaps.internal.jni.CoreLicenseType;
					public static NAMEDUSER: com.arcgismaps.internal.jni.CoreLicenseType;
					public static LICENSEKEY: com.arcgismaps.internal.jni.CoreLicenseType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLicenseType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLicenseType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLicenseType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLightingMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLightingMode>;
					public static NOLIGHT: com.arcgismaps.internal.jni.CoreLightingMode;
					public static LIGHT: com.arcgismaps.internal.jni.CoreLightingMode;
					public static LIGHTANDSHADOWS: com.arcgismaps.internal.jni.CoreLightingMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLightingMode>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLightingMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLightingMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLineOfSight extends com.arcgismaps.internal.jni.CoreAnalysis {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLineOfSight>;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public dispose(): void;
					public getTargetVisibility(): com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility;
					public static getLineWidth(): number;
					public static createCoreLineOfSightFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLineOfSight;
					public static getVisibleColor(): com.arcgismaps.internal.jni.CoreColor;
					public setTargetVisibilityChangedCallback(param0: com.arcgismaps.internal.jni.CoreTargetVisibilityChangedCallbackListener): void;
					public static setLineWidth(param0: number): void;
					public constructor();
					public static setVisibleColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public onTargetVisibilityChanged(param0: number): void;
					public static getObstructedColor(): com.arcgismaps.internal.jni.CoreColor;
					public static setObstructedColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLineOfSightTargetVisibility {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility>;
					public static VISIBLE: com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility;
					public static OBSTRUCTED: com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLineSegment extends com.arcgismaps.internal.jni.CoreSegment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLineSegment>;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public static createCoreLineSegmentFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLineSegment;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint, param2: com.arcgismaps.internal.jni.CoreSpatialReference);
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint);
					public constructor();
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.arcgismaps.internal.jni.CoreSpatialReference);
					public static createLineAtAngleFromStartPoint(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number): com.arcgismaps.internal.jni.CoreLineSegment;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: com.arcgismaps.internal.jni.CoreSpatialReference);
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLineSymbol extends com.arcgismaps.internal.jni.CoreSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLineSymbol>;
					public getAntiAlias(): boolean;
					public getInstanceId(): java.lang.Long;
					public setWidth(param0: number): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getWidth(): number;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
					public static createCoreLineSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLineSymbol;
					public constructor();
					public toJSON(): string;
					public setAntiAlias(param0: boolean): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreLineSymbol): boolean;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLinearUnit extends com.arcgismaps.internal.jni.CoreUnit {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLinearUnit>;
					public convertFrom(param0: com.arcgismaps.internal.jni.CoreLinearUnit, param1: number): number;
					public static createCoreLinearUnitFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLinearUnit;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreLinearUnitId);
					public fromMeters(param0: number): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreAreaUnit);
					public toMeters(param0: number): number;
					public convertTo(param0: com.arcgismaps.internal.jni.CoreLinearUnit, param1: number): number;
					public getLinearUnitId(): com.arcgismaps.internal.jni.CoreLinearUnitId;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLinearUnitId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLinearUnitId>;
					public static OTHER: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static MILLIMETERS: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static CENTIMETERS: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static METERS: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static FEET: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static NAUTICALMILES: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static KILOMETERS: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static MILES: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static YARDS: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static INCHES: com.arcgismaps.internal.jni.CoreLinearUnitId;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLinearUnitId;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLinearUnitId>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLinearUnitId;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLoadRequest extends com.arcgismaps.internal.jni.CoreRequest {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLoadRequest>;
					public static createCoreLoadRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLoadRequest;
					public getInstanceId(): java.lang.Long;
					public getAPIKey(): string;
					public setAPIKey(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLoadRequestedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLoadRequestedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLoadRequestedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						loadRequested(): void;
					});
					public constructor();
					public loadRequested(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLoadSettings {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLoadSettings>;
					public mHandle: number;
					public setFeatureServiceSessionType(param0: com.arcgismaps.internal.jni.CoreFeatureServiceSessionType): void;
					public getPreferredPointFeatureRenderingMode(): com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
					public getFeatureRequestMode(): com.arcgismaps.internal.jni.CoreFeatureRequestMode;
					public finalize(): void;
					public setFeatureTilingMode(param0: com.arcgismaps.internal.jni.CoreFeatureTilingMode): void;
					public getPreferredPolylineFeatureRenderingMode(): com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
					public dispose(): void;
					public setPreferredPointFeatureRenderingMode(param0: com.arcgismaps.internal.jni.CoreFeatureRenderingMode): void;
					public getUseAdvancedSymbology(): boolean;
					public getPreferredPolygonFeatureRenderingMode(): com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public static createCoreLoadSettingsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLoadSettings;
					public setFeatureRequestMode(param0: com.arcgismaps.internal.jni.CoreFeatureRequestMode): void;
					public getFeatureServiceSessionType(): com.arcgismaps.internal.jni.CoreFeatureServiceSessionType;
					public setUseAdvancedSymbology(param0: boolean): void;
					public setPreferredPolylineFeatureRenderingMode(param0: com.arcgismaps.internal.jni.CoreFeatureRenderingMode): void;
					public setPreferredPolygonFeatureRenderingMode(param0: com.arcgismaps.internal.jni.CoreFeatureRenderingMode): void;
					public getHandle(): number;
					public getFeatureTilingMode(): com.arcgismaps.internal.jni.CoreFeatureTilingMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLoadStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLoadStatus>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreLoadStatus;
					public static LOADED: com.arcgismaps.internal.jni.CoreLoadStatus;
					public static LOADING: com.arcgismaps.internal.jni.CoreLoadStatus;
					public static FAILEDTOLOAD: com.arcgismaps.internal.jni.CoreLoadStatus;
					public static NOTLOADED: com.arcgismaps.internal.jni.CoreLoadStatus;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLoadStatus>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLoadStatus;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLoadStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLoadStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						loadStatusChanged(param0: com.arcgismaps.internal.jni.CoreLoadStatus): void;
					});
					public constructor();
					public loadStatusChanged(param0: com.arcgismaps.internal.jni.CoreLoadStatus): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLoadable extends com.arcgismaps.internal.jni.CoreRequestable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLoadable>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLoadable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getLoadError(): com.arcgismaps.internal.jni.CoreError;
						getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
						cancelLoad(): void;
						load(): void;
						retryLoad(): void;
						setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
						setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
						setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					});
					public constructor();
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLoadableImage extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLoadableImage>;
					public mHandle: number;
					public static createCoreLoadableImageFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLoadableImage;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImage);
					public getURI(): string;
					public constructor(param0: string);
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public getImage(): com.arcgismaps.internal.jni.CoreImage;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocalFeatureEdit {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocalFeatureEdit>;
					public mHandle: number;
					public static createCoreLocalFeatureEditFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocalFeatureEdit;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getFeature(): com.arcgismaps.internal.jni.CoreFeature;
					public getEditDateTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public getOperation(): com.arcgismaps.internal.jni.CoreEditOperation;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocalFeatureEditsResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocalFeatureEditsResult>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public iterator(): com.arcgismaps.internal.jni.CoreIterator;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreLocalFeatureEditsResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocalFeatureEditsResult;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocalItem extends com.arcgismaps.internal.jni.CoreItem {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocalItem>;
					public getPath(): string;
					public getOriginalPortalItemId(): string;
					public getType(): com.arcgismaps.internal.jni.CoreLocalItemType;
					public getInstanceId(): java.lang.Long;
					public setOriginalPortalItemId(param0: string): void;
					public getPortalURL(): string;
					public setType(param0: com.arcgismaps.internal.jni.CoreLocalItemType): void;
					public static createCoreLocalItemFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocalItem;
					public setPath(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocalItemType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocalItemType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreLocalItemType;
					public static MOBILEMAP: com.arcgismaps.internal.jni.CoreLocalItemType;
					public static MOBILESCENE: com.arcgismaps.internal.jni.CoreLocalItemType;
					public static MOBILEMAPPACKAGE: com.arcgismaps.internal.jni.CoreLocalItemType;
					public static MOBILESCENEPACKAGE: com.arcgismaps.internal.jni.CoreLocalItemType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLocalItemType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLocalItemType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLocalItemType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocation>;
					public mHandle: number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreLocationType;
					public getTimestamp(): com.arcgismaps.internal.jni.CoreDateTime;
					public getPosition(): com.arcgismaps.internal.jni.CorePoint;
					public finalize(): void;
					public dispose(): void;
					public getCourse(): number;
					public static createCoreLocationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocation;
					public getHorizontalAccuracy(): number;
					public getVelocity(): number;
					public getVerticalAccuracy(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocation;
					public close(): void;
					public getAdditionalSourceProperties(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: com.arcgismaps.internal.jni.CorePoint, param2: number, param3: number, param4: number, param5: number, param6: boolean);
					public constructor(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: com.arcgismaps.internal.jni.CorePoint, param2: number, param3: number, param4: number, param5: number, param6: boolean, param7: com.arcgismaps.internal.jni.CoreDictionary);
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number, param4: boolean);
					public getLastKnown(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDataSource extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDataSource>;
					public mHandle: number;
					public stopAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public startAsync(): com.arcgismaps.internal.jni.CoreTask;
					public finalize(): void;
					public getStatus(): com.arcgismaps.internal.jni.CoreLocationDataSourceStatus;
					public updateLocation(param0: com.arcgismaps.internal.jni.CoreLocation): void;
					public start(): void;
					public setStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLocationDataSourceStatusChangedCallbackListener): void;
					public updateHeading(param0: number): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreLocationDataSourceType;
					public constructor();
					public onLocationDataSourceStop(): void;
					public close(): void;
					public handleStop(): void;
					public setLocationDataSourceStopCallback(param0: com.arcgismaps.internal.jni.CoreStopCallbackCallbackListener): void;
					public getUserDefinedFailure(): any;
					public handleStart(param0: any): void;
					public onHeadingChanged(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public dispose(): void;
					public setErrorChangedCallback(param0: com.arcgismaps.internal.jni.CoreErrorChangedCallbackListener): void;
					public setLocationDataSourceStartCallback(param0: com.arcgismaps.internal.jni.CoreStartCallbackCallbackListener): void;
					public onLocationChanged(param0: number): void;
					public getStarted(): boolean;
					public setHeadingChangedCallback(param0: com.arcgismaps.internal.jni.CoreLocationDataSourceHeadingChangedCallbackListener): void;
					public setLocationChangedCallback(param0: com.arcgismaps.internal.jni.CoreLocationDataSourceLocationChangedCallbackListener): void;
					public static createCoreLocationDataSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocationDataSource;
					public onStatusChanged(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public onLocationDataSourceStart(): void;
					public onErrorChanged(param0: number): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocationDataSource;
					public stop(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDataSourceHeadingChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDataSourceHeadingChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLocationDataSourceHeadingChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						headingChanged(param0: number): void;
					});
					public constructor();
					public headingChanged(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDataSourceLocationChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDataSourceLocationChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLocationDataSourceLocationChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						locationChanged(param0: com.arcgismaps.internal.jni.CoreLocation): void;
					});
					public constructor();
					public locationChanged(param0: com.arcgismaps.internal.jni.CoreLocation): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDataSourceStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDataSourceStatus>;
					public static STOPPED: com.arcgismaps.internal.jni.CoreLocationDataSourceStatus;
					public static STARTING: com.arcgismaps.internal.jni.CoreLocationDataSourceStatus;
					public static STARTED: com.arcgismaps.internal.jni.CoreLocationDataSourceStatus;
					public static STOPPING: com.arcgismaps.internal.jni.CoreLocationDataSourceStatus;
					public static FAILEDTOSTART: com.arcgismaps.internal.jni.CoreLocationDataSourceStatus;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLocationDataSourceStatus>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLocationDataSourceStatus;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLocationDataSourceStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDataSourceStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDataSourceStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLocationDataSourceStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						statusChanged(param0: com.arcgismaps.internal.jni.CoreLocationDataSourceStatus): void;
					});
					public constructor();
					public statusChanged(param0: com.arcgismaps.internal.jni.CoreLocationDataSourceStatus): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDataSourceType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreLocationDataSourceType;
					public static LOCATIONDATASOURCE: com.arcgismaps.internal.jni.CoreLocationDataSourceType;
					public static SIMULATEDLOCATIONDATASOURCE: com.arcgismaps.internal.jni.CoreLocationDataSourceType;
					public static INDOORSLOCATIONDATASOURCE: com.arcgismaps.internal.jni.CoreLocationDataSourceType;
					public static ROUTETRACKERLOCATIONDATASOURCE: com.arcgismaps.internal.jni.CoreLocationDataSourceType;
					public static NMEALOCATIONDATASOURCE: com.arcgismaps.internal.jni.CoreLocationDataSourceType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLocationDataSourceType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLocationDataSourceType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLocationDataSourceType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDisplay extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDisplay>;
					public mHandle: number;
					public getShowLocation(): boolean;
					public setOpacity(param0: number): void;
					public getWanderExtentFactor(): number;
					public finalize(): void;
					public setCourseSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setAutoPanModeChangedCallback(param0: com.arcgismaps.internal.jni.CoreAutoPanModeChangedCallbackListener): void;
					public getDataSource(): com.arcgismaps.internal.jni.CoreLocationDataSource;
					public setStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLocationDisplayStatusChangedCallbackListener): void;
					public constructor();
					public setDefaultSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public close(): void;
					public getAccuracySymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setInitialZoomScale(param0: number): void;
					public getOpacity(): number;
					public getInstanceId(): java.lang.Long;
					public setHeadingSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getCourseSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getHeadingSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public onLocationChanged(param0: number): void;
					public getMapLocation(): com.arcgismaps.internal.jni.CorePoint;
					public onStatusChanged(param0: boolean): void;
					public setShowAccuracy(param0: boolean): void;
					public getShowPingAnimationSymbol(): boolean;
					public stop(): void;
					public getAcquiringSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getLocation(): com.arcgismaps.internal.jni.CoreLocation;
					public setShowPingAnimationSymbol(param0: boolean): void;
					public getHandle(): number;
					public setAcquiringSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getNavigationPointHeightFactor(): number;
					public getUseCourseSymbolOnMovement(): boolean;
					public onAutoPanModeChanged(param0: number): void;
					public start(): void;
					public setAutoPanMode(param0: com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode): void;
					public setAccuracySymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public getDefaultSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getAutoPanMode(): com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode;
					public setLocationChangedCallback(param0: com.arcgismaps.internal.jni.CoreLocationDisplayLocationChangedCallbackListener): void;
					public static createCoreLocationDisplayFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocationDisplay;
					public getPingAnimationSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public setPingAnimationSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public setShowLocation(param0: boolean): void;
					public dispose(): void;
					public getHeading(): number;
					public getStarted(): boolean;
					public setWanderExtentFactor(param0: number): void;
					public getShowAccuracy(): boolean;
					public static nativeDestroy(param0: number): void;
					public setUseCourseSymbolOnMovement(param0: boolean): void;
					public setDataSource(param0: com.arcgismaps.internal.jni.CoreLocationDataSource): void;
					public setNavigationPointHeightFactor(param0: number): void;
					public getInitialZoomScale(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDisplayAutoPanMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode>;
					public static OFF: com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode;
					public static RECENTER: com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode;
					public static NAVIGATION: com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode;
					public static COMPASSNAVIGATION: com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode>;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDisplayLocationChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDisplayLocationChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLocationDisplayLocationChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						locationChanged(param0: com.arcgismaps.internal.jni.CoreLocation): void;
					});
					public constructor();
					public locationChanged(param0: com.arcgismaps.internal.jni.CoreLocation): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDisplayStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDisplayStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreLocationDisplayStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						statusChanged(param0: boolean): void;
					});
					public constructor();
					public statusChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationDistanceMeasurement extends com.arcgismaps.internal.jni.CoreAnalysis {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationDistanceMeasurement>;
					public getEndLocation(): com.arcgismaps.internal.jni.CorePoint;
					public getUnitSystem(): com.arcgismaps.internal.jni.CoreUnitSystem;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public getVerticalDistance(): com.arcgismaps.internal.jni.CoreDistance;
					public dispose(): void;
					public getDirectDistance(): com.arcgismaps.internal.jni.CoreDistance;
					public getStartLocation(): com.arcgismaps.internal.jni.CorePoint;
					public setEndLocation(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint);
					public constructor();
					public getHorizontalDistance(): com.arcgismaps.internal.jni.CoreDistance;
					public setUnitSystem(param0: com.arcgismaps.internal.jni.CoreUnitSystem): void;
					public onMeasurementChanged(param0: number, param1: number, param2: number): void;
					public static createCoreLocationDistanceMeasurementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocationDistanceMeasurement;
					public setMeasurementChangedCallback(param0: com.arcgismaps.internal.jni.CoreMeasurementChangedCallbackListener): void;
					public setStartLocation(param0: com.arcgismaps.internal.jni.CorePoint): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationGeotriggerFeed extends com.arcgismaps.internal.jni.CoreGeotriggerFeed {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationGeotriggerFeed>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLocationDataSource);
					public getFilter(): com.arcgismaps.internal.jni.CoreArcadeExpression;
					public constructor();
					public getLocationDataSource(): com.arcgismaps.internal.jni.CoreLocationDataSource;
					public setFilter(param0: com.arcgismaps.internal.jni.CoreArcadeExpression): void;
					public static createCoreLocationGeotriggerFeedFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocationGeotriggerFeed;
					public setLocationDataSource(param0: com.arcgismaps.internal.jni.CoreLocationDataSource): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationLineOfSight extends com.arcgismaps.internal.jni.CoreLineOfSight {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationLineOfSight>;
					public getObserverLocation(): com.arcgismaps.internal.jni.CorePoint;
					public getTargetLocation(): com.arcgismaps.internal.jni.CorePoint;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint);
					public getInstanceId(): java.lang.Long;
					public constructor();
					public setObserverLocation(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public setTargetLocation(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public static createCoreLocationLineOfSightFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocationLineOfSight;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationSourcePropertiesKeys {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationSourcePropertiesKeys>;
					public static getFloor(): string;
					public constructor();
					public static getPositionSource(): string;
					public static getFloorLevelId(): string;
					public static getSatelliteCount(): string;
					public static getTransmitterCount(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationStatus>;
					public static NOTLOCATED: com.arcgismaps.internal.jni.CoreLocationStatus;
					public static ONCLOSEST: com.arcgismaps.internal.jni.CoreLocationStatus;
					public static ONCLOSESTNOTRESTRICTED: com.arcgismaps.internal.jni.CoreLocationStatus;
					public static NOTREACHED: com.arcgismaps.internal.jni.CoreLocationStatus;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLocationStatus;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLocationStatus>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLocationStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationToScreenResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationToScreenResult>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public static createCoreLocationToScreenResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocationToScreenResult;
					public close(): void;
					public dispose(): void;
					public getVisibility(): com.arcgismaps.internal.jni.CoreSceneLocationVisibility;
					public getScreenPoint(): androidNative.Array<number>;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreLocationType;
					public static LOCATION: com.arcgismaps.internal.jni.CoreLocationType;
					public static NMEALOCATION: com.arcgismaps.internal.jni.CoreLocationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreLocationType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreLocationType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreLocationType;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocationViewshed extends com.arcgismaps.internal.jni.CoreViewshed {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocationViewshed>;
					public getPitch(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreCamera, param1: number, param2: number);
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number);
					public getInstanceId(): java.lang.Long;
					public constructor();
					public setLocation(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public getHeading(): number;
					public setPitch(param0: number): void;
					public updateFromCamera(param0: com.arcgismaps.internal.jni.CoreCamera): void;
					public static createCoreLocationViewshedFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocationViewshed;
					public getLocation(): com.arcgismaps.internal.jni.CorePoint;
					public setHeading(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocatorAttribute {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocatorAttribute>;
					public mHandle: number;
					public getDisplayName(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getType(): com.arcgismaps.internal.jni.CoreElementType;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreLocatorAttributeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocatorAttribute;
					public getRequired(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocatorInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocatorInfo>;
					public mHandle: number;
					public getVersion(): string;
					public getSupportsAddresses(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getIntersectionResultAttributes(): com.arcgismaps.internal.jni.CoreArray;
					public getSearchAttributes(): com.arcgismaps.internal.jni.CoreArray;
					public getSupportsIntersections(): boolean;
					public getProperties(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getSupportsSuggestions(): boolean;
					public close(): void;
					public getResultAttributes(): com.arcgismaps.internal.jni.CoreArray;
					public getSupportsPOI(): boolean;
					public static createCoreLocatorInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocatorInfo;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getDescription(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreLocatorTask implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreLocatorTask>;
					public mHandle: number;
					public geocodeWithSuggestResultAndParameters(param0: com.arcgismaps.internal.jni.CoreSuggestResult, param1: com.arcgismaps.internal.jni.CoreGeocodeParameters): com.arcgismaps.internal.jni.CoreTask;
					public constructor(param0: string);
					public geocode(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public finalize(): void;
					public geocodeWithParameters(param0: string, param1: com.arcgismaps.internal.jni.CoreGeocodeParameters): com.arcgismaps.internal.jni.CoreTask;
					public geocodeWithSearchValues(param0: com.arcgismaps.internal.jni.CoreDictionary): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public getLocatorInfo(): com.arcgismaps.internal.jni.CoreLocatorInfo;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public setAPIKey(param0: string): void;
					public geocodeWithSuggestResult(param0: com.arcgismaps.internal.jni.CoreSuggestResult): com.arcgismaps.internal.jni.CoreTask;
					public onRequestRequired(param0: number): void;
					public static createCoreLocatorTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreLocatorTask;
					public suggestWithParameters(param0: string, param1: com.arcgismaps.internal.jni.CoreSuggestParameters): com.arcgismaps.internal.jni.CoreTask;
					public getURI(): string;
					public suggest(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public dispose(): void;
					public cancelLoad(): void;
					public reverseGeocode(param0: com.arcgismaps.internal.jni.CorePoint): com.arcgismaps.internal.jni.CoreTask;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public reverseGeocodeWithParameters(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreReverseGeocodeParameters): com.arcgismaps.internal.jni.CoreTask;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public geocodeWithSearchValuesAndParameters(param0: com.arcgismaps.internal.jni.CoreDictionary, param1: com.arcgismaps.internal.jni.CoreGeocodeParameters): com.arcgismaps.internal.jni.CoreTask;
					public static nativeDestroy(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMGRSConversionMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMGRSConversionMode>;
					public static AUTOMATIC: com.arcgismaps.internal.jni.CoreMGRSConversionMode;
					public static NEW180INZONE01: com.arcgismaps.internal.jni.CoreMGRSConversionMode;
					public static NEW180INZONE60: com.arcgismaps.internal.jni.CoreMGRSConversionMode;
					public static OLD180INZONE01: com.arcgismaps.internal.jni.CoreMGRSConversionMode;
					public static OLD180INZONE60: com.arcgismaps.internal.jni.CoreMGRSConversionMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreMGRSConversionMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreMGRSConversionMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreMGRSConversionMode>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMGRSGrid extends com.arcgismaps.internal.jni.CoreGrid {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMGRSGrid>;
					public getLabelUnit(): com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit;
					public constructor();
					public setLabelUnit(param0: com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit): void;
					public static createCoreMGRSGridFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMGRSGrid;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMGRSGridLabelUnit {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit>;
					public static KILOMETERSMETERS: com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit;
					public static METERS: com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreManualDisplayFilterDefinition extends com.arcgismaps.internal.jni.CoreDisplayFilterDefinition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreManualDisplayFilterDefinition>;
					public getActiveFilter(): com.arcgismaps.internal.jni.CoreDisplayFilter;
					public getAvailableFilters(): com.arcgismaps.internal.jni.CoreVector;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDisplayFilter, param1: com.arcgismaps.internal.jni.CoreVector);
					public constructor();
					public setActiveFilter(param0: com.arcgismaps.internal.jni.CoreDisplayFilter): void;
					public setAvailableFilters(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static createCoreManualDisplayFilterDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreManualDisplayFilterDefinition;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMap extends com.arcgismaps.internal.jni.CoreGeoModel implements com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMap>;
					public static createCoreMapFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMap;
					public constructor(param0: string);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setMinScale(param0: number): void;
					public load(): void;
					public getMaxExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getMinScale(): number;
					public canSaveWithoutForce(): boolean;
					public getIndoorPositioningDefinition(): com.arcgismaps.internal.jni.CoreIndoorPositioningDefinition;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public toJSON(): string;
					public getNamedTraceConfigurationsFromUtilityNetworkAsync(param0: com.arcgismaps.internal.jni.CoreUtilityNetwork): com.arcgismaps.internal.jni.CoreTask;
					public constructor(param0: com.arcgismaps.internal.jni.CoreBasemap);
					public getURI(): string;
					public setMaxScale(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public getInstanceId(): java.lang.Long;
					public getSourceType(): com.arcgismaps.internal.jni.CoreMapSourceType;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public setUtilityNetworks(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreMap;
					public constructor(param0: com.arcgismaps.internal.jni.CoreBasemapStyle);
					public getMaxScale(): number;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setMaxExtent(param0: com.arcgismaps.internal.jni.CoreEnvelope): void;
					public getOfflineSettings(): com.arcgismaps.internal.jni.CoreOfflineSettings;
					public getBackgroundColor(): com.arcgismaps.internal.jni.CoreColor;
					public setReferenceScale(param0: number): void;
					public getReferenceScale(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
					public setBackgroundColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getUtilityNetworks(): com.arcgismaps.internal.jni.CoreVector;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMapServiceCapabilities {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMapServiceCapabilities>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getSupportsMap(): boolean;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreMapServiceCapabilitiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMapServiceCapabilities;
					public getSupportsData(): boolean;
					public getSupportsQuery(): boolean;
					public getSupportsTilesOnly(): boolean;
					public getSupportsTilemap(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMapServiceImageFormat {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMapServiceImageFormat>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static DEFAULT: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static PNG: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static PNG8: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static PNG24: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static PNG32: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static JPG: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static JPGPNG: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static BMP: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static GIF: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static TIFF: com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreMapServiceImageFormat>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMapServiceLayerIdInfo extends com.arcgismaps.internal.jni.CoreIdInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMapServiceLayerIdInfo>;
					public getMaxScale(): number;
					public getMinScale(): number;
					public getSublayerIds(): com.arcgismaps.internal.jni.CoreArray;
					public getServiceType(): com.arcgismaps.internal.jni.CoreArcGISMapServiceSublayerType;
					public getDefaultVisibility(): boolean;
					public getParentLayerId(): number;
					public static createCoreMapServiceLayerIdInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMapServiceLayerIdInfo;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMapSourceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMapSourceType>;
					public static WEBMAP: com.arcgismaps.internal.jni.CoreMapSourceType;
					public static MOBILEMAPPACKAGE: com.arcgismaps.internal.jni.CoreMapSourceType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreMapSourceType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreMapSourceType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreMapSourceType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMapSublayerSource extends com.arcgismaps.internal.jni.CoreSublayerSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMapSublayerSource>;
					public constructor();
					public setGeodatabaseVersion(param0: string): void;
					public getGeodatabaseVersion(): string;
					public static createCoreMapSublayerSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMapSublayerSource;
					public getMapSublayerId(): number;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMapView extends com.arcgismaps.internal.jni.CoreGeoView {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMapView>;
					public showMagnifierAt(param0: androidNative.Array<number>): void;
					public getGrid(): com.arcgismaps.internal.jni.CoreGrid;
					public getMap(): com.arcgismaps.internal.jni.CoreMap;
					public setWrapAroundMode(param0: com.arcgismaps.internal.jni.CoreWrapAroundMode): void;
					public onScaleChanged(): void;
					public setViewpointCenterAsync(param0: com.arcgismaps.internal.jni.CorePoint): com.arcgismaps.internal.jni.CoreTask;
					public showMagnifierWithOffsetAt(param0: androidNative.Array<number>): void;
					public getViewInsets(): com.arcgismaps.internal.jni.CoreInsets;
					public getMagnifierEnabled(): boolean;
					public setMap(param0: com.arcgismaps.internal.jni.CoreMap): void;
					public locationToScreen(param0: com.arcgismaps.internal.jni.CorePoint): androidNative.Array<number>;
					public constructor();
					public stopAnimations(): void;
					public getWrapAroundMode(): com.arcgismaps.internal.jni.CoreWrapAroundMode;
					public getGeometryEditor(): com.arcgismaps.internal.jni.CoreGeometryEditor;
					public setRotationChangedCallback(param0: com.arcgismaps.internal.jni.CoreRotationChangedCallbackListener): void;
					public screenToLocation(param0: androidNative.Array<number>): com.arcgismaps.internal.jni.CorePoint;
					public constructor(param0: number, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CorePulseThread);
					public interactionZoomToScale(param0: number, param1: androidNative.Array<number>): void;
					public getVisibleArea(): com.arcgismaps.internal.jni.CorePolygon;
					public setViewpointRotationAsync(param0: number): com.arcgismaps.internal.jni.CoreTask;
					public setMagnifierZoomFactor(param0: number): void;
					public setViewpointGeometryWithPaddingAsync(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number): com.arcgismaps.internal.jni.CoreTask;
					public setViewInsets(param0: com.arcgismaps.internal.jni.CoreInsets): void;
					public static createCoreMapViewFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMapView;
					public setGrid(param0: com.arcgismaps.internal.jni.CoreGrid): void;
					public getRotation(): number;
					public setGeometryEditor(param0: com.arcgismaps.internal.jni.CoreGeometryEditor): void;
					public interactionRotate(param0: number, param1: androidNative.Array<number>): void;
					public getLocationDisplay(): com.arcgismaps.internal.jni.CoreLocationDisplay;
					public getScale(): number;
					public getUnitsPerDIP(): number;
					public setMagnifierImages(param0: com.arcgismaps.internal.jni.CoreImage, param1: com.arcgismaps.internal.jni.CoreImage): void;
					public setBackgroundGrid(param0: com.arcgismaps.internal.jni.CoreBackgroundGrid): void;
					public setLocationDisplay(param0: com.arcgismaps.internal.jni.CoreLocationDisplay): void;
					public interactionFlingAnimated(param0: number, param1: number): void;
					public setViewpointGeometryAsync(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreTask;
					public areInsetsValidAfterResize(): boolean;
					public onRotationChanged(): void;
					public setViewpointCenterWithScaleAsync(param0: com.arcgismaps.internal.jni.CorePoint, param1: number): com.arcgismaps.internal.jni.CoreTask;
					public getMagnifierZoomFactor(): number;
					public setScaleChangedCallback(param0: com.arcgismaps.internal.jni.CoreScaleChangedCallbackListener): void;
					public dispose(): void;
					public stopPanAnimations(): void;
					public interactionUseLocationDisplayAnchor(): boolean;
					public hideMagnifier(): void;
					public setAllowMagnifierToPanMap(param0: boolean): void;
					public getBackgroundGrid(): com.arcgismaps.internal.jni.CoreBackgroundGrid;
					public setViewpointWithDurationAndCurveAsync(param0: com.arcgismaps.internal.jni.CoreViewpoint, param1: number, param2: com.arcgismaps.internal.jni.CoreAnimationCurve): com.arcgismaps.internal.jni.CoreTask;
					public setMagnifierEnabled(param0: boolean): void;
					public getAllowMagnifierToPanMap(): boolean;
					public interactionDrag(param0: number, param1: number): void;
					public setViewpointScaleAsync(param0: number): com.arcgismaps.internal.jni.CoreTask;
					public setMagnifierImagesWithSize(param0: com.arcgismaps.internal.jni.CoreImage, param1: com.arcgismaps.internal.jni.CoreImage, param2: number, param3: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMarkerSceneSymbol extends com.arcgismaps.internal.jni.CoreSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMarkerSceneSymbol>;
					public getPitch(): number;
					public getAnchorPosition(): com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition;
					public getInstanceId(): java.lang.Long;
					public getHeight(): number;
					public setWidth(param0: number): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setHeight(param0: number): void;
					public setRoll(param0: number): void;
					public getHeading(): number;
					public setPitch(param0: number): void;
					public getWidth(): number;
					public setAnchorPosition(param0: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition): void;
					public setDepth(param0: number): void;
					public setHeading(param0: number): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public constructor();
					public toJSON(): string;
					public getDepth(): number;
					public getRoll(): number;
					public static createCoreMarkerSceneSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMarkerSceneSymbol;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMarkerSymbol extends com.arcgismaps.internal.jni.CoreSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMarkerSymbol>;
					public static createCoreMarkerSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMarkerSymbol;
					public setLeaderOffsetY(param0: number): void;
					public setAngleAlignment(param0: com.arcgismaps.internal.jni.CoreSymbolAngleAlignment): void;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getOffsetX(): number;
					public equals(param0: com.arcgismaps.internal.jni.CoreMarkerSymbol): boolean;
					public setOffsetX(param0: number): void;
					public setLeaderOffsetX(param0: number): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getLeaderOffsetX(): number;
					public setOffsetY(param0: number): void;
					public getAngleAlignment(): com.arcgismaps.internal.jni.CoreSymbolAngleAlignment;
					public getAngle(): number;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
					public constructor();
					public getOffsetY(): number;
					public toJSON(): string;
					public setRotationType(param0: com.arcgismaps.internal.jni.CoreRotationType): void;
					public setAngle(param0: number): void;
					public getLeaderOffsetY(): number;
					public getRotationType(): com.arcgismaps.internal.jni.CoreRotationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMarkerSymbolLayer extends com.arcgismaps.internal.jni.CoreSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMarkerSymbolLayer>;
					public setSize(param0: number): void;
					public constructor();
					public getOffsetY(): number;
					public getHeading(): number;
					public static createCoreMarkerSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMarkerSymbolLayer;
					public getAnchor(): com.arcgismaps.internal.jni.CoreSymbolAnchor;
					public setAnchor(param0: com.arcgismaps.internal.jni.CoreSymbolAnchor): void;
					public getOffsetX(): number;
					public setOffsetX(param0: number): void;
					public getSize(): number;
					public setHeading(param0: number): void;
					public setOffsetY(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMeasurementChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMeasurementChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreMeasurementChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						measurementChanged(param0: com.arcgismaps.internal.jni.CoreDistance, param1: com.arcgismaps.internal.jni.CoreDistance, param2: com.arcgismaps.internal.jni.CoreDistance): void;
					});
					public constructor();
					public measurementChanged(param0: com.arcgismaps.internal.jni.CoreDistance, param1: com.arcgismaps.internal.jni.CoreDistance, param2: com.arcgismaps.internal.jni.CoreDistance): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMediaPopupElement extends com.arcgismaps.internal.jni.CorePopupElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMediaPopupElement>;
					public getTitle(): string;
					public setDescription(param0: string): void;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreArray);
					public getMedia(): com.arcgismaps.internal.jni.CoreVector;
					public setTitle(param0: string): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public static createCoreMediaPopupElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMediaPopupElement;
					public getDescription(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMessageAddedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMessageAddedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreMessageAddedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						messageAdded(param0: com.arcgismaps.internal.jni.CoreJobMessage): void;
					});
					public constructor();
					public messageAdded(param0: com.arcgismaps.internal.jni.CoreJobMessage): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMinMaxStretchParameters extends com.arcgismaps.internal.jni.CoreStretchParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMinMaxStretchParameters>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreVector);
					public static createCoreMinMaxStretchParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMinMaxStretchParameters;
					public getMaxValues(): com.arcgismaps.internal.jni.CoreArray;
					public constructor();
					public getMinValues(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMobileBasemapLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMobileBasemapLayer>;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getPath(): string;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public getSublayerIds(): com.arcgismaps.internal.jni.CoreArray;
					public getName(): string;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setIsVisible(param0: boolean): void;
					public getCanChangeVisibility(): boolean;
					public static createCoreMobileBasemapLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMobileBasemapLayer;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMobileMapPackage extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMobileMapPackage>;
					public mHandle: number;
					public getVersion(): string;
					public constructor(param0: string);
					public finalize(): void;
					public static unpackAsync(param0: string, param1: string): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getLocatorTask(): com.arcgismaps.internal.jni.CoreLocatorTask;
					public getMaps(): com.arcgismaps.internal.jni.CoreArray;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getExpiration(): com.arcgismaps.internal.jni.CoreExpiration;
					public getItem(): com.arcgismaps.internal.jni.CoreItem;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPath(): string;
					public static nativeDestroy(param0: number): void;
					public static createCoreMobileMapPackageFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMobileMapPackage;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMobileScenePackage extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMobileScenePackage>;
					public mHandle: number;
					public getVersion(): string;
					public constructor(param0: string);
					public finalize(): void;
					public static unpackAsync(param0: string, param1: string): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public static createCoreMobileScenePackageFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMobileScenePackage;
					public getScenes(): com.arcgismaps.internal.jni.CoreArray;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getLocatorTask(): com.arcgismaps.internal.jni.CoreLocatorTask;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getExpiration(): com.arcgismaps.internal.jni.CoreExpiration;
					public getItem(): com.arcgismaps.internal.jni.CoreItem;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPath(): string;
					public static nativeDestroy(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreModelSceneSymbol extends com.arcgismaps.internal.jni.CoreMarkerSceneSymbol implements com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreModelSceneSymbol>;
					public getURI(): string;
					public constructor(param0: string);
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public dispose(): void;
					public static createCoreModelSceneSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreModelSceneSymbol;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getSymbolSizeUnits(): com.arcgismaps.internal.jni.CoreSymbolSizeUnits;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public toJSON(): string;
					public constructor(param0: string, param1: number);
					public onDoneLoading(param0: number): void;
					public setSymbolSizeUnits(param0: com.arcgismaps.internal.jni.CoreSymbolSizeUnits): void;
					public onRequestRequired(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMosaicDatasetRaster extends com.arcgismaps.internal.jni.CoreRaster {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMosaicDatasetRaster>;
					public static createCoreMosaicDatasetRasterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMosaicDatasetRaster;
					public static getNames(param0: string): com.arcgismaps.internal.jni.CoreArray;
					public constructor(param0: string);
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public static createWithDatabasePathAndName(param0: string, param1: string, param2: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreMosaicDatasetRaster;
					public static remove(param0: com.arcgismaps.internal.jni.CoreGeodatabase, param1: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRasterFunction);
					public cancelLoad(): void;
					public load(): void;
					public static createWithGeodatabaseAndName(param0: com.arcgismaps.internal.jni.CoreGeodatabase, param1: string, param2: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreMosaicDatasetRaster;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public addRasters(param0: com.arcgismaps.internal.jni.CoreAddRastersParameters): com.arcgismaps.internal.jni.CoreTask;
					public constructor(param0: string, param1: string);
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMosaicMethod {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMosaicMethod>;
					public static NONE: com.arcgismaps.internal.jni.CoreMosaicMethod;
					public static CENTER: com.arcgismaps.internal.jni.CoreMosaicMethod;
					public static NORTHWEST: com.arcgismaps.internal.jni.CoreMosaicMethod;
					public static NADIR: com.arcgismaps.internal.jni.CoreMosaicMethod;
					public static VIEWPOINT: com.arcgismaps.internal.jni.CoreMosaicMethod;
					public static ATTRIBUTE: com.arcgismaps.internal.jni.CoreMosaicMethod;
					public static LOCKRASTER: com.arcgismaps.internal.jni.CoreMosaicMethod;
					public static SEAMLINE: com.arcgismaps.internal.jni.CoreMosaicMethod;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreMosaicMethod;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreMosaicMethod;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreMosaicMethod>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMosaicOperation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMosaicOperation>;
					public static FIRST: com.arcgismaps.internal.jni.CoreMosaicOperation;
					public static LAST: com.arcgismaps.internal.jni.CoreMosaicOperation;
					public static MIN: com.arcgismaps.internal.jni.CoreMosaicOperation;
					public static MAX: com.arcgismaps.internal.jni.CoreMosaicOperation;
					public static MEAN: com.arcgismaps.internal.jni.CoreMosaicOperation;
					public static BLEND: com.arcgismaps.internal.jni.CoreMosaicOperation;
					public static SUM: com.arcgismaps.internal.jni.CoreMosaicOperation;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreMosaicOperation;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreMosaicOperation;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreMosaicOperation>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMosaicRule {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMosaicRule>;
					public mHandle: number;
					public getWhereClause(): string;
					public finalize(): void;
					public getViewpoint(): com.arcgismaps.internal.jni.CoreViewpoint;
					public setMosaicOperation(param0: com.arcgismaps.internal.jni.CoreMosaicOperation): void;
					public getMosaicMethod(): com.arcgismaps.internal.jni.CoreMosaicMethod;
					public getSortValue(): string;
					public getRasterIds(): com.arcgismaps.internal.jni.CoreVector;
					public constructor();
					public getItemRenderingRule(): com.arcgismaps.internal.jni.CoreRenderingRule;
					public close(): void;
					public getSortField(): string;
					public setIsAscending(param0: boolean): void;
					public setRasterIds(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getLockRasterIds(): com.arcgismaps.internal.jni.CoreVector;
					public setSortField(param0: string): void;
					public static createCoreMosaicRuleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMosaicRule;
					public setSortValue(param0: string): void;
					public setLockRasterIds(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public dispose(): void;
					public getIsAscending(): boolean;
					public setMosaicMethod(param0: com.arcgismaps.internal.jni.CoreMosaicMethod): void;
					public getMosaicOperation(): com.arcgismaps.internal.jni.CoreMosaicOperation;
					public setItemRenderingRule(param0: com.arcgismaps.internal.jni.CoreRenderingRule): void;
					public setViewpoint(param0: com.arcgismaps.internal.jni.CoreViewpoint): void;
					public static nativeDestroy(param0: number): void;
					public setWhereClause(param0: string): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMultilayerPointSymbol extends com.arcgismaps.internal.jni.CoreMultilayerSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMultilayerPointSymbol>;
					public setAngleAlignment(param0: com.arcgismaps.internal.jni.CoreSymbolAngleAlignment): void;
					public setSize(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getSize(): number;
					public static createCoreMultilayerPointSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMultilayerPointSymbol;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreSymbolReferenceProperties);
					public getAngleAlignment(): com.arcgismaps.internal.jni.CoreSymbolAngleAlignment;
					public getAngle(): number;
					public constructor();
					public toJSON(): string;
					public setAngle(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMultilayerPolygonSymbol extends com.arcgismaps.internal.jni.CoreMultilayerSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMultilayerPolygonSymbol>;
					public static createCoreMultilayerPolygonSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMultilayerPolygonSymbol;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreSymbolReferenceProperties);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMultilayerPolylineSymbol extends com.arcgismaps.internal.jni.CoreMultilayerSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMultilayerPolylineSymbol>;
					public getInstanceId(): java.lang.Long;
					public static createCoreMultilayerPolylineSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMultilayerPolylineSymbol;
					public constructor();
					public setWidth(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getWidth(): number;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreSymbolReferenceProperties);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMultilayerSymbol extends com.arcgismaps.internal.jni.CoreSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMultilayerSymbol>;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public static createCoreMultilayerSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMultilayerSymbol;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public getReferenceProperties(): com.arcgismaps.internal.jni.CoreSymbolReferenceProperties;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getSymbolLayers(): com.arcgismaps.internal.jni.CoreVector;
					public setReferenceProperties(param0: com.arcgismaps.internal.jni.CoreSymbolReferenceProperties): void;
					public setSymbolLayers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMultipart extends com.arcgismaps.internal.jni.CoreGeometry {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMultipart>;
					public static createCoreMultipartFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMultipart;
					public constructor();
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getParts(): com.arcgismaps.internal.jni.CoreImmutablePartCollection;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMultipartBuilder extends com.arcgismaps.internal.jni.CoreGeometryBuilder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMultipartBuilder>;
					public getParts(): com.arcgismaps.internal.jni.CoreMutablePartCollection;
					public addPoint(param0: com.arcgismaps.internal.jni.CorePoint): number;
					public constructor();
					public static createCoreMultipartBuilderFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMultipartBuilder;
					public setParts(param0: com.arcgismaps.internal.jni.CoreMutablePartCollection): void;
					public addPointXY(param0: number, param1: number): number;
					public addPointXYZ(param0: number, param1: number, param2: number): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMultipoint extends com.arcgismaps.internal.jni.CoreGeometry {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMultipoint>;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getPoints(): com.arcgismaps.internal.jni.CoreImmutablePointCollection;
					public static createCoreMultipointFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMultipoint;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMultipointBuilder extends com.arcgismaps.internal.jni.CoreGeometryBuilder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMultipointBuilder>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public constructor();
					public setPoints(param0: com.arcgismaps.internal.jni.CoreMutablePointCollection): void;
					public getPoints(): com.arcgismaps.internal.jni.CoreMutablePointCollection;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMultipoint);
					public static createCoreMultipointBuilderFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMultipointBuilder;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMutablePart {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMutablePart>;
					public mHandle: number;
					public getSegmentIndexFromStartPointIndex(param0: number): number;
					public getPointCount(): number;
					public getSegmentCount(): number;
					public finalize(): void;
					public insertPoint(param0: number, param1: com.arcgismaps.internal.jni.CorePoint): void;
					public addSegment(param0: com.arcgismaps.internal.jni.CoreSegment): number;
					public getStartPoint(): com.arcgismaps.internal.jni.CorePoint;
					public addPointXYZ(param0: number, param1: number, param2: number): number;
					public insertSegment(param0: number, param1: com.arcgismaps.internal.jni.CoreSegment): void;
					public constructor();
					public getSegment(param0: number): com.arcgismaps.internal.jni.CoreSegment;
					public close(): void;
					public getSegmentIndexFromEndPointIndex(param0: number): number;
					public getPoints(): com.arcgismaps.internal.jni.CoreImmutablePointCollection;
					public addPointXY(param0: number, param1: number): number;
					public insertPointXYZ(param0: number, param1: number, param2: number, param3: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public addPoint(param0: com.arcgismaps.internal.jni.CorePoint): number;
					public dispose(): void;
					public getEndPoint(): com.arcgismaps.internal.jni.CorePoint;
					public getPoint(param0: number): com.arcgismaps.internal.jni.CorePoint;
					public setPoint(param0: number, param1: com.arcgismaps.internal.jni.CorePoint): void;
					public removeSegment(param0: number): void;
					public insertPointXY(param0: number, param1: number, param2: number): void;
					public static createCoreMutablePartFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMutablePart;
					public static nativeDestroy(param0: number): void;
					public removeAll(): void;
					public getStartPointIndexFromSegmentIndex(param0: number): number;
					public removePoint(param0: number): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getIsEmpty(): boolean;
					public getEndPointIndexFromSegmentIndex(param0: number): number;
					public setSegment(param0: number, param1: com.arcgismaps.internal.jni.CoreSegment): void;
					public getHandle(): number;
					public getHasCurves(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMutablePartCollection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMutablePartCollection>;
					public mHandle: number;
					public insertPart(param0: number, param1: com.arcgismaps.internal.jni.CoreMutablePart): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public removePart(param0: number): void;
					public finalize(): void;
					public dispose(): void;
					public indexOf(param0: com.arcgismaps.internal.jni.CoreMutablePart): number;
					public static createCoreMutablePartCollectionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMutablePartCollection;
					public getSize(): number;
					public getPart(param0: number): com.arcgismaps.internal.jni.CoreMutablePart;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public removeAll(): void;
					public close(): void;
					public setPart(param0: number, param1: com.arcgismaps.internal.jni.CoreMutablePart): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getIsEmpty(): boolean;
					public addPart(param0: com.arcgismaps.internal.jni.CoreMutablePart): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreMutablePointCollection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreMutablePointCollection>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public addPoint(param0: com.arcgismaps.internal.jni.CorePoint): number;
					public indexOf(param0: com.arcgismaps.internal.jni.CorePoint): number;
					public finalize(): void;
					public insertPoint(param0: number, param1: com.arcgismaps.internal.jni.CorePoint): void;
					public dispose(): void;
					public getSize(): number;
					public getPoint(param0: number): com.arcgismaps.internal.jni.CorePoint;
					public setPoint(param0: number, param1: com.arcgismaps.internal.jni.CorePoint): void;
					public addPointXYZ(param0: number, param1: number, param2: number): number;
					public insertPointXY(param0: number, param1: number, param2: number): void;
					public addPointsFromImmutable(param0: com.arcgismaps.internal.jni.CoreImmutablePointCollection): void;
					public static createCoreMutablePointCollectionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreMutablePointCollection;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public removeAll(): void;
					public close(): void;
					public removePoint(param0: number): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public addPoints(param0: com.arcgismaps.internal.jni.CoreMutablePointCollection): void;
					public addPointXY(param0: number, param1: number): number;
					public getIsEmpty(): boolean;
					public insertPointXYZ(param0: number, param1: number, param2: number, param3: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNMEAAccuracyType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNMEAAccuracyType>;
					public static GST: com.arcgismaps.internal.jni.CoreNMEAAccuracyType;
					public static GSA: com.arcgismaps.internal.jni.CoreNMEAAccuracyType;
					public static GGA: com.arcgismaps.internal.jni.CoreNMEAAccuracyType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreNMEAAccuracyType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreNMEAAccuracyType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreNMEAAccuracyType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNMEAFixType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNMEAFixType>;
					public static INVALID: com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static STANDARD: com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static DGPS: com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static PPS: com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static RTK: com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static FRTK: com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static ESTIMATED: com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static MANUAL: com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static SIMULATION: com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreNMEAFixType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreNMEAFixType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreNMEAFixType;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNMEAGNSSSystem {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNMEAGNSSSystem>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
					public static GPS: com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
					public static GLONASS: com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
					public static GALILEO: com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
					public static BDS: com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
					public static QZSS: com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
					public static NAVIC: com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreNMEAGNSSSystem>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNMEALocation extends com.arcgismaps.internal.jni.CoreLocation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNMEALocation>;
					public getSatellites(): com.arcgismaps.internal.jni.CoreArray;
					public getAccuracyType(): com.arcgismaps.internal.jni.CoreNMEAAccuracyType;
					public getGeoidalSeparation(): number;
					public static createCoreNMEALocationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreNMEALocation;
					public getReceivedPosition(): com.arcgismaps.internal.jni.CorePoint;
					public getPDOP(): number;
					public getReferenceStationId(): number;
					public getHDOP(): number;
					public getHeightAboveGeoid(): number;
					public getFixType(): com.arcgismaps.internal.jni.CoreNMEAFixType;
					public getVDOP(): number;
					public getDGPSAge(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNMEALocationDataSource extends com.arcgismaps.internal.jni.CoreLocationDataSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNMEALocationDataSource>;
					public onSatellitesChanged(param0: number): void;
					public getReceiverSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public pushData(param0: androidNative.Array<number>): void;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public dispose(): void;
					public getOutputDatumTransformation(): com.arcgismaps.internal.jni.CoreDatumTransformation;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static createCoreNMEALocationDataSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreNMEALocationDataSource;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference, param1: com.arcgismaps.internal.jni.CoreSpatialReference);
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreDatumTransformation);
					public setSatellitesChangedCallback(param0: com.arcgismaps.internal.jni.CoreSatellitesChangedCallbackListener): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNMEASatelliteInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNMEASatelliteInfo>;
					public mHandle: number;
					public getElevation(): number;
					public finalize(): void;
					public getId(): number;
					public dispose(): void;
					public getSystem(): com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
					public getInUse(): boolean;
					public static createCoreNMEASatelliteInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreNMEASatelliteInfo;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getSNR(): number;
					public getAzimuth(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNavigationChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNavigationChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreNavigationChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						navigationChanged(param0: boolean): void;
					});
					public constructor();
					public navigationChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNavigationConstraint {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNavigationConstraint>;
					public static NONE: com.arcgismaps.internal.jni.CoreNavigationConstraint;
					public static STAYABOVE: com.arcgismaps.internal.jni.CoreNavigationConstraint;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreNavigationConstraint;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreNavigationConstraint;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreNavigationConstraint>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNetworkDirectionsSupport {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport;
					public static UNSUPPORTED: com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport;
					public static SUPPORTED: com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNetworkLocation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNetworkLocation>;
					public mHandle: number;
					public getOnRightSideOfSource(): boolean;
					public finalize(): void;
					public dispose(): void;
					public static createCoreNetworkLocationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreNetworkLocation;
					public getSourceName(): string;
					public getSourceObjectPosition(): com.arcgismaps.internal.jni.CoreSourceObjectPosition;
					public setOnRightSideOfSource(param0: boolean): void;
					public setSourceObjectPosition(param0: com.arcgismaps.internal.jni.CoreSourceObjectPosition): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setSourceName(param0: string): void;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNewVoiceGuidanceCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNewVoiceGuidanceCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreNewVoiceGuidanceCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						newVoiceGuidance(param0: com.arcgismaps.internal.jni.CoreVoiceGuidance): void;
					});
					public constructor();
					public newVoiceGuidance(param0: com.arcgismaps.internal.jni.CoreVoiceGuidance): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreNoDataTileBehavior {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreNoDataTileBehavior>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreNoDataTileBehavior;
					public static UPSAMPLE: com.arcgismaps.internal.jni.CoreNoDataTileBehavior;
					public static BLANK: com.arcgismaps.internal.jni.CoreNoDataTileBehavior;
					public static SHOW: com.arcgismaps.internal.jni.CoreNoDataTileBehavior;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreNoDataTileBehavior;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreNoDataTileBehavior>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreNoDataTileBehavior;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOAuthApplicationCredential extends com.arcgismaps.internal.jni.CoreArcGISCredential {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOAuthApplicationCredential>;
					public static createCoreOAuthApplicationCredentialFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOAuthApplicationCredential;
					public getClientId(): string;
					public getTokenExpirationInterval(): number;
					public getTokenInfoAsync(): com.arcgismaps.internal.jni.CoreTask;
					public static createAsync(param0: string, param1: string, param2: string, param3: number): com.arcgismaps.internal.jni.CoreTask;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getPortalURL(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOAuthApplicationTokenInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOAuthApplicationTokenInfo>;
					public mHandle: number;
					public getExpirationDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public finalize(): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreOAuthApplicationTokenInfo): boolean;
					public close(): void;
					public dispose(): void;
					public getAccessToken(): string;
					public static createCoreOAuthApplicationTokenInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOAuthApplicationTokenInfo;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOAuthUserConfiguration extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOAuthUserConfiguration>;
					public mHandle: number;
					public static createCoreOAuthUserConfigurationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOAuthUserConfiguration;
					public constructor(param0: string, param1: string, param2: string, param3: string, param4: number, param5: number, param6: number, param7: boolean, param8: com.arcgismaps.internal.jni.CoreUserInterfaceStyle, param9: boolean);
					public getCulture(): string;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getRedirectURL(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor();
					public hash(): number;
					public toJSON(): string;
					public close(): void;
					public getPortalURL(): string;
					public getClientId(): string;
					public getFederatedTokenExpirationInterval(): number;
					public canBeUsedForURL(param0: string): boolean;
					public dispose(): void;
					public getPreferPrivateWebBrowserSession(): boolean;
					public getRefreshTokenExchangeInterval(): number;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreOAuthUserConfiguration;
					public getShowCancelButton(): boolean;
					public static nativeDestroy(param0: number): void;
					public getUserInterfaceStyle(): com.arcgismaps.internal.jni.CoreUserInterfaceStyle;
					public getRefreshTokenExpirationInterval(): number;
					public equals(param0: com.arcgismaps.internal.jni.CoreOAuthUserConfiguration): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOAuthUserCredential extends com.arcgismaps.internal.jni.CoreArcGISCredential {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOAuthUserCredential>;
					public getTokenInfoAsync(): com.arcgismaps.internal.jni.CoreTask;
					public static createAsync(param0: com.arcgismaps.internal.jni.CoreOAuthUserConfiguration): com.arcgismaps.internal.jni.CoreTask;
					public revokeTokenAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getConfiguration(): com.arcgismaps.internal.jni.CoreOAuthUserConfiguration;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getAuthorizationCode(): string;
					public static createCoreOAuthUserCredentialFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOAuthUserCredential;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createWithLoginContextAsync(param0: com.arcgismaps.internal.jni.CoreOAuthUserConfiguration, param1: any): com.arcgismaps.internal.jni.CoreTask;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOAuthUserLoginCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOAuthUserLoginCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreOAuthUserLoginCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						OAuthUserLogin(param0: com.arcgismaps.internal.jni.CoreOAuthUserLoginPrompt): void;
					});
					public constructor();
					public OAuthUserLogin(param0: com.arcgismaps.internal.jni.CoreOAuthUserLoginPrompt): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOAuthUserLoginPrompt {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOAuthUserLoginPrompt>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public getPreferPrivateWebBrowserSession(): boolean;
					public getRedirectURL(): string;
					public respondWithError(param0: any): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getContext(): any;
					public close(): void;
					public static createCoreOAuthUserLoginPromptFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOAuthUserLoginPrompt;
					public getHandle(): number;
					public getAuthorizeURL(): string;
					public respond(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOAuthUserTokenInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOAuthUserTokenInfo>;
					public mHandle: number;
					public equals(param0: com.arcgismaps.internal.jni.CoreOAuthUserTokenInfo): boolean;
					public finalize(): void;
					public getRefreshToken(): string;
					public dispose(): void;
					public getIsSSLRequired(): boolean;
					public getAccessToken(): string;
					public getRefreshTokenExpirationDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public getExpirationDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public close(): void;
					public getRefreshTokenExchangeDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public static createCoreOAuthUserTokenInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOAuthUserTokenInfo;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOGC3DTilesLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOGC3DTilesLayer>;
					public constructor(param0: string);
					public getOccludeSurface(): boolean;
					public setCustomParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem);
					public getAltitudeOffset(): number;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public getCustomParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setOccludeSurface(param0: boolean): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getURI(): string;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static createCoreOGC3DTilesLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOGC3DTilesLayer;
					public getName(): string;
					public setAltitudeOffset(param0: number): void;
					public setIsVisible(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOGCAxisOrder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOGCAxisOrder>;
					public static AUTO: com.arcgismaps.internal.jni.CoreOGCAxisOrder;
					public static SWAP: com.arcgismaps.internal.jni.CoreOGCAxisOrder;
					public static NOSWAP: com.arcgismaps.internal.jni.CoreOGCAxisOrder;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreOGCAxisOrder>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreOGCAxisOrder;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreOGCAxisOrder;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOGCFeatureCollectionInfo extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo>;
					public mHandle: number;
					public getTitle(): string;
					public getInstanceId(): java.lang.Long;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getCollectionId(): string;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getDescription(): string;
					public static createCoreOGCFeatureCollectionInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOGCFeatureCollectionTable extends com.arcgismaps.internal.jni.CoreFeatureTable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOGCFeatureCollectionTable>;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public static createCoreOGCFeatureCollectionTableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOGCFeatureCollectionTable;
					public getFeatureRequestMode(): com.arcgismaps.internal.jni.CoreFeatureRequestMode;
					public getFeatureCollectionInfo(): com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public load(): void;
					public getURL(): string;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public populateFromService(param0: com.arcgismaps.internal.jni.CoreQueryParameters, param1: boolean, param2: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public constructor(param0: string, param1: string);
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo);
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setIsPopupEnabled(param0: boolean): void;
					public setFeatureRequestMode(param0: com.arcgismaps.internal.jni.CoreFeatureRequestMode): void;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOGCFeatureService extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOGCFeatureService>;
					public mHandle: number;
					public getServiceInfo(): com.arcgismaps.internal.jni.CoreOGCFeatureServiceInfo;
					public constructor(param0: string);
					public setCustomParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getCustomParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public static createCoreOGCFeatureServiceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOGCFeatureService;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOGCFeatureServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOGCFeatureServiceInfo>;
					public mHandle: number;
					public getTitle(): string;
					public getFeatureCollectionInfos(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getDescription(): string;
					public static createCoreOGCFeatureServiceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOGCFeatureServiceInfo;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineCapability {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineCapability>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreOfflineCapabilityFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineCapability;
					public getRemainsOnline(): boolean;
					public getHandle(): number;
					public getSupportsOffline(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapCapabilities {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapCapabilities>;
					public mHandle: number;
					public static createCoreOfflineMapCapabilitiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapCapabilities;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getTableCapabilities(): com.arcgismaps.internal.jni.CoreDictionary;
					public getLayerCapabilities(): com.arcgismaps.internal.jni.CoreDictionary;
					public getHandle(): number;
					public getHasErrors(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapItemInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapItemInfo>;
					public mHandle: number;
					public getTitle(): string;
					public setThumbnail(param0: com.arcgismaps.internal.jni.CoreImage): void;
					public setDescription(param0: string): void;
					public getTags(): com.arcgismaps.internal.jni.CoreVector;
					public setTitle(param0: string): void;
					public finalize(): void;
					public dispose(): void;
					public getTermsOfUse(): string;
					public setSnippet(param0: string): void;
					public setTags(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setAccessInformation(param0: string): void;
					public getSnippet(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getAccessInformation(): string;
					public close(): void;
					public setTermsOfUse(param0: string): void;
					public static createCoreOfflineMapItemInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapItemInfo;
					public getDescription(): string;
					public getThumbnail(): com.arcgismaps.internal.jni.CoreImage;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapParametersKey extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapParametersKey>;
					public mHandle: number;
					public getInstanceId(): java.lang.Long;
					public constructor(param0: com.arcgismaps.internal.jni.CoreServiceFeatureTable);
					public finalize(): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreOfflineMapParametersKey): boolean;
					public dispose(): void;
					public getServiceURL(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLayer);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetwork);
					public hash(): number;
					public close(): void;
					public clone(): com.arcgismaps.internal.jni.CoreOfflineMapParametersKey;
					public static createCoreOfflineMapParametersKeyFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapParametersKey;
					public getType(): com.arcgismaps.internal.jni.CoreOfflineMapParametersType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapParametersType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapParametersType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreOfflineMapParametersType;
					public static GENERATEGEODATABASE: com.arcgismaps.internal.jni.CoreOfflineMapParametersType;
					public static EXPORTVECTORTILES: com.arcgismaps.internal.jni.CoreOfflineMapParametersType;
					public static EXPORTTILECACHE: com.arcgismaps.internal.jni.CoreOfflineMapParametersType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreOfflineMapParametersType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapParametersType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreOfflineMapParametersType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapSyncJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapSyncJob>;
					public getParameters(): com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters;
					public getInstanceId(): java.lang.Long;
					public getPortalItems(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public static createCoreOfflineMapSyncJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapSyncJob;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getResult(): com.arcgismaps.internal.jni.CoreOfflineMapSyncResult;
					public getGeodatabaseDeltaInfos(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getJobs(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapSyncLayerResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapSyncLayerResult>;
					public mHandle: number;
					public getEditErrors(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreOfflineMapSyncLayerResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapSyncLayerResult;
					public getHandle(): number;
					public getHasErrors(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapSyncParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters>;
					public mHandle: number;
					public setPreplannedScheduledUpdatesOption(param0: com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption): void;
					public finalize(): void;
					public setRollbackOnFailure(param0: boolean): void;
					public dispose(): void;
					public getPreplannedScheduledUpdatesOption(): com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setSyncDirection(param0: com.arcgismaps.internal.jni.CoreSyncDirection): void;
					public getRollbackOnFailure(): boolean;
					public getKeepGeodatabaseDeltas(): boolean;
					public getSyncDirection(): com.arcgismaps.internal.jni.CoreSyncDirection;
					public close(): void;
					public setKeepGeodatabaseDeltas(param0: boolean): void;
					public static createCoreOfflineMapSyncParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapSyncResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapSyncResult>;
					public mHandle: number;
					public static createCoreOfflineMapSyncResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapSyncResult;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getIsMobileMapPackageReopenRequired(): boolean;
					public getTableResults(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getLayerResults(): com.arcgismaps.internal.jni.CoreDictionary;
					public getHandle(): number;
					public getHasErrors(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapSyncTask extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapSyncTask>;
					public mHandle: number;
					public finalize(): void;
					public getMap(): com.arcgismaps.internal.jni.CoreMap;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getUpdateCapabilities(): com.arcgismaps.internal.jni.CoreOfflineMapUpdateCapabilities;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public checkForUpdatesAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static createCoreOfflineMapSyncTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapSyncTask;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMap);
					public syncOfflineMap(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters): com.arcgismaps.internal.jni.CoreOfflineMapSyncJob;
					public static nativeDestroy(param0: number): void;
					public getPortalItems(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getHandle(): number;
					public createDefaultOfflineMapSyncParametersAsync(): com.arcgismaps.internal.jni.CoreTask;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapTask extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapTask>;
					public mHandle: number;
					public getOfflineMapCapabilitiesAsync(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters): com.arcgismaps.internal.jni.CoreTask;
					public finalize(): void;
					public generateOfflineMap(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters, param1: string): com.arcgismaps.internal.jni.CoreGenerateOfflineMapJob;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem);
					public getPreplannedMapAreasAsync(): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public getOnlineMap(): com.arcgismaps.internal.jni.CoreMap;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public createGenerateOfflineMapParameterOverridesAsync(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters): com.arcgismaps.internal.jni.CoreTask;
					public retryLoad(): void;
					public static createCoreOfflineMapTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapTask;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public setEnsureOnlineMapHasRequestHandlerCallback(param0: com.arcgismaps.internal.jni.CoreEnsureOnlineMapHasRequestHandlerCallbackListener): void;
					public close(): void;
					public getPortalItem(): com.arcgismaps.internal.jni.CorePortalItem;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public createDefaultGenerateOfflineMapParametersWithAreaOfInterestMinScaleMaxScaleAsync(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: number): com.arcgismaps.internal.jni.CoreTask;
					public createDefaultDownloadPreplannedOfflineMapParametersAsync(param0: com.arcgismaps.internal.jni.CorePreplannedMapArea): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public onEnsureOnlineMapHasRequestHandler(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public downloadPreplannedOfflineMapWithParameters(param0: com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters, param1: string): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapJob;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMap);
					public static nativeDestroy(param0: number): void;
					public generateOfflineMapWithParametersDownloadDirectoryParameterOverrides(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters, param1: string, param2: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides): com.arcgismaps.internal.jni.CoreGenerateOfflineMapJob;
					public createDefaultGenerateOfflineMapParametersAsync(param0: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreTask;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapUpdateCapabilities {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapUpdateCapabilities>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getSupportsSyncWithFeatureServices(): boolean;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getSupportsScheduledUpdatesForFeatures(): boolean;
					public static createCoreOfflineMapUpdateCapabilitiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapUpdateCapabilities;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineMapUpdatesInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineMapUpdatesInfo>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getIsMobileMapPackageReopenRequired(): boolean;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getScheduledUpdatesDownloadSize(): number;
					public getUploadAvailability(): com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability;
					public static createCoreOfflineMapUpdatesInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineMapUpdatesInfo;
					public getHandle(): number;
					public getDownloadAvailability(): com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineSettings {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineSettings>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public getAttachmentSyncDirection(): com.arcgismaps.internal.jni.CoreAttachmentSyncDirection;
					public getReturnSchemaOnlyForEditableLayers(): boolean;
					public getOnlineLayers(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getOnlineTables(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public getReturnLayerAttachmentOption(): com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption;
					public getReferenceBasemapFilename(): string;
					public static createCoreOfflineSettingsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOfflineSettings;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOfflineUpdateAvailability {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability>;
					public static INDETERMINATE: com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability;
					public static AVAILABLE: com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability;
					public static NONE: com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOnKMLNetworkLinkMessageReceivedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOnKMLNetworkLinkMessageReceivedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreOnKMLNetworkLinkMessageReceivedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						onKMLNetworkLinkMessageReceived(param0: com.arcgismaps.internal.jni.CoreKMLNetworkLink, param1: string): void;
					});
					public constructor();
					public onKMLNetworkLinkMessageReceived(param0: com.arcgismaps.internal.jni.CoreKMLNetworkLink, param1: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOnKMLNodeBalloonVisibilityChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOnKMLNodeBalloonVisibilityChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreOnKMLNodeBalloonVisibilityChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						onKMLNodeBalloonVisibilityChanged(param0: com.arcgismaps.internal.jni.CoreKMLNode, param1: boolean): void;
					});
					public constructor();
					public onKMLNodeBalloonVisibilityChanged(param0: com.arcgismaps.internal.jni.CoreKMLNode, param1: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOnKMLNodeRefreshStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOnKMLNodeRefreshStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreOnKMLNodeRefreshStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						onKMLNodeRefreshStatusChanged(param0: com.arcgismaps.internal.jni.CoreKMLNode, param1: com.arcgismaps.internal.jni.CoreKMLRefreshStatus): void;
					});
					public constructor();
					public onKMLNodeRefreshStatusChanged(param0: com.arcgismaps.internal.jni.CoreKMLNode, param1: com.arcgismaps.internal.jni.CoreKMLRefreshStatus): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOnlineOnlyServicesOption {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption>;
					public static EXCLUDE: com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption;
					public static INCLUDE: com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption;
					public static USEAUTHOREDSETTINGS: com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOpenStreetMapLayer extends com.arcgismaps.internal.jni.CoreWebTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOpenStreetMapLayer>;
					public constructor(param0: string);
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreVector, param2: com.arcgismaps.internal.jni.CoreTileInfo, param3: com.arcgismaps.internal.jni.CoreEnvelope);
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileInfo, param1: com.arcgismaps.internal.jni.CoreEnvelope);
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreVector);
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public static createCoreOpenStreetMapLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOpenStreetMapLayer;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreTileInfo, param2: com.arcgismaps.internal.jni.CoreEnvelope);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOrbitGeoElementCameraController extends com.arcgismaps.internal.jni.CoreCameraController {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOrbitGeoElementCameraController>;
					public setIsAutoRollEnabled(param0: boolean): void;
					public onCameraDistanceChanged(): void;
					public setTargetOffsetY(param0: number): void;
					public getMaxCameraPitchOffset(): number;
					public finalize(): void;
					public getTargetGeoElement(): com.arcgismaps.internal.jni.CoreElement;
					public setMaxCameraHeadingOffset(param0: number): void;
					public getIsCameraDistanceInteractive(): boolean;
					public getIsAutoPitchEnabled(): boolean;
					public constructor();
					public setIsCameraPitchOffsetInteractive(param0: boolean): void;
					public getIsAutoHeadingEnabled(): boolean;
					public onCameraPitchOffsetChanged(): void;
					public getTargetOffsetX(): number;
					public setTargetVerticalScreenFactor(param0: number): void;
					public setCameraHeadingOffset(param0: number): void;
					public getMinCameraPitchOffset(): number;
					public setTargetOffsetZ(param0: number): void;
					public setCameraHeadingOffsetChangedCallback(param0: com.arcgismaps.internal.jni.CoreCameraControllerHeadingChangedCallbackListener): void;
					public setMinCameraHeadingOffset(param0: number): void;
					public moveCameraAsync(param0: number, param1: number, param2: number, param3: number): com.arcgismaps.internal.jni.CoreTask;
					public getMaxCameraDistance(): number;
					public setCameraPitchOffset(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreElement, param1: number);
					public getMaxCameraHeadingOffset(): number;
					public getTargetVerticalScreenFactor(): number;
					public getMinCameraDistance(): number;
					public setIsCameraHeadingOffsetInteractive(param0: boolean): void;
					public setCameraDistanceChangedCallback(param0: com.arcgismaps.internal.jni.CoreDistanceChangedCallbackListener): void;
					public getTargetOffsetY(): number;
					public getMinCameraHeadingOffset(): number;
					public setMaxCameraPitchOffset(param0: number): void;
					public getIsAutoRollEnabled(): boolean;
					public getIsCameraPitchOffsetInteractive(): boolean;
					public getCameraDistance(): number;
					public getCameraHeadingOffset(): number;
					public setTargetOffsetX(param0: number): void;
					public setIsAutoPitchEnabled(param0: boolean): void;
					public setMaxCameraDistance(param0: number): void;
					public setMinCameraDistance(param0: number): void;
					public onCameraHeadingOffsetChanged(): void;
					public setCameraDistance(param0: number): void;
					public static createCoreOrbitGeoElementCameraControllerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOrbitGeoElementCameraController;
					public dispose(): void;
					public setMinCameraPitchOffset(param0: number): void;
					public getIsCameraHeadingOffsetInteractive(): boolean;
					public setIsAutoHeadingEnabled(param0: boolean): void;
					public setIsCameraDistanceInteractive(param0: boolean): void;
					public getCameraPitchOffset(): number;
					public setCameraPitchOffsetChangedCallback(param0: com.arcgismaps.internal.jni.CorePitchChangedCallbackListener): void;
					public setTargetOffsetsAsync(param0: number, param1: number, param2: number, param3: number): com.arcgismaps.internal.jni.CoreTask;
					public getTargetOffsetZ(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOrbitLocationCameraController extends com.arcgismaps.internal.jni.CoreCameraController {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOrbitLocationCameraController>;
					public onCameraDistanceChanged(): void;
					public getMaxCameraPitchOffset(): number;
					public finalize(): void;
					public getMinCameraDistance(): number;
					public setMaxCameraHeadingOffset(param0: number): void;
					public setIsCameraHeadingOffsetInteractive(param0: boolean): void;
					public setCameraDistanceChangedCallback(param0: com.arcgismaps.internal.jni.CoreDistanceChangedCallbackListener): void;
					public getMinCameraHeadingOffset(): number;
					public getIsCameraDistanceInteractive(): boolean;
					public setMaxCameraPitchOffset(param0: number): void;
					public constructor();
					public setIsCameraPitchOffsetInteractive(param0: boolean): void;
					public getIsCameraPitchOffsetInteractive(): boolean;
					public getCameraDistance(): number;
					public onCameraPitchOffsetChanged(): void;
					public getCameraHeadingOffset(): number;
					public getTargetLocation(): com.arcgismaps.internal.jni.CorePoint;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number);
					public setCameraHeadingOffset(param0: number): void;
					public setMaxCameraDistance(param0: number): void;
					public setMinCameraDistance(param0: number): void;
					public onCameraHeadingOffsetChanged(): void;
					public setCameraDistance(param0: number): void;
					public getMinCameraPitchOffset(): number;
					public setCameraHeadingOffsetChangedCallback(param0: com.arcgismaps.internal.jni.CoreCameraControllerHeadingChangedCallbackListener): void;
					public dispose(): void;
					public setMinCameraPitchOffset(param0: number): void;
					public getIsCameraHeadingOffsetInteractive(): boolean;
					public setMinCameraHeadingOffset(param0: number): void;
					public static createCoreOrbitLocationCameraControllerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOrbitLocationCameraController;
					public setIsCameraDistanceInteractive(param0: boolean): void;
					public moveCameraAsync(param0: number, param1: number, param2: number, param3: number): com.arcgismaps.internal.jni.CoreTask;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CorePoint);
					public getMaxCameraDistance(): number;
					public setCameraPitchOffset(param0: number): void;
					public getCameraPitchOffset(): number;
					public setCameraPitchOffsetChangedCallback(param0: com.arcgismaps.internal.jni.CorePitchChangedCallbackListener): void;
					public getMaxCameraHeadingOffset(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOrderBy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOrderBy>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreOrderByFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOrderBy;
					public setSortOrder(param0: com.arcgismaps.internal.jni.CoreSortOrder): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreSortOrder);
					public setFieldName(param0: string): void;
					public getFieldName(): string;
					public getHandle(): number;
					public getSortOrder(): com.arcgismaps.internal.jni.CoreSortOrder;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOriginCameraChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOriginCameraChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreOriginCameraChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						originCameraChanged(): void;
					});
					public constructor();
					public originCameraChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreOwnershipBasedAccessControlInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreOwnershipBasedAccessControlInfo>;
					public mHandle: number;
					public getAllowOthersToDelete(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getAllowOthersToUpdate(): boolean;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getAllowAnonymousToDelete(): boolean;
					public static createCoreOwnershipBasedAccessControlInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreOwnershipBasedAccessControlInfo;
					public getAllowAnonymousToUpdate(): boolean;
					public getAllowOthersToQuery(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePansharpenType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePansharpenType>;
					public static NONE: com.arcgismaps.internal.jni.CorePansharpenType;
					public static IHS: com.arcgismaps.internal.jni.CorePansharpenType;
					public static BROVEY: com.arcgismaps.internal.jni.CorePansharpenType;
					public static MEAN: com.arcgismaps.internal.jni.CorePansharpenType;
					public static ESRI: com.arcgismaps.internal.jni.CorePansharpenType;
					public static GRAMSCHMIDT: com.arcgismaps.internal.jni.CorePansharpenType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePansharpenType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePansharpenType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePansharpenType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePauseCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePauseCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CorePauseCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						pauseCallback(): void;
					});
					public constructor();
					public pauseCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePercentClipStretchParameters extends com.arcgismaps.internal.jni.CoreStretchParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePercentClipStretchParameters>;
					public constructor();
					public getMax(): number;
					public static createCorePercentClipStretchParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CorePercentClipStretchParameters;
					public getMin(): number;
					public constructor(param0: number, param1: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePictureFillSymbol extends com.arcgismaps.internal.jni.CoreFillSymbol implements com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePictureFillSymbol>;
					public equals(param0: com.arcgismaps.internal.jni.CorePictureFillSymbol): boolean;
					public constructor(param0: string);
					public setOpacity(param0: number): void;
					public setScaleX(param0: number): void;
					public finalize(): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setHeight(param0: number): void;
					public getOffsetX(): number;
					public load(): void;
					public setOffsetX(param0: number): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getOffsetY(): number;
					public onLoadStatusChanged(param0: number): void;
					public toJSON(): string;
					public setAngle(param0: number): void;
					public onDoneLoading(param0: number): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreFillSymbol): boolean;
					public onRequestRequired(param0: number): void;
					public getOpacity(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImage);
					public getScaleY(): number;
					public toMultilayerSymbol(): com.arcgismaps.internal.jni.CoreMultilayerPolygonSymbol;
					public getInstanceId(): java.lang.Long;
					public getHeight(): number;
					public setWidth(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public getWidth(): number;
					public cancelLoad(): void;
					public getImage(): com.arcgismaps.internal.jni.CoreImage;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public setOffsetY(param0: number): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getAngle(): number;
					public getScaleX(): number;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
					public setScaleY(param0: number): void;
					public static createCorePictureFillSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CorePictureFillSymbol;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePictureFillSymbolLayer extends com.arcgismaps.internal.jni.CoreFillSymbolLayer implements com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePictureFillSymbolLayer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImage);
					public getURI(): string;
					public static createCorePictureFillSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CorePictureFillSymbolLayer;
					public constructor(param0: string);
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public getImage(): com.arcgismaps.internal.jni.CoreImage;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setTintColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getTintColor(): com.arcgismaps.internal.jni.CoreColor;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePictureMarkerSymbol extends com.arcgismaps.internal.jni.CoreMarkerSymbol implements com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePictureMarkerSymbol>;
					public constructor(param0: string);
					public equals(param0: com.arcgismaps.internal.jni.CorePictureMarkerSymbol): boolean;
					public setOpacity(param0: number): void;
					public finalize(): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setHeight(param0: number): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreMarkerSymbol): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public toJSON(): string;
					public toMultilayerSymbol(): com.arcgismaps.internal.jni.CoreMultilayerPointSymbol;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getOpacity(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImage);
					public static createCorePictureMarkerSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CorePictureMarkerSymbol;
					public getInstanceId(): java.lang.Long;
					public getHeight(): number;
					public setWidth(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public getWidth(): number;
					public cancelLoad(): void;
					public getImage(): com.arcgismaps.internal.jni.CoreImage;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePictureMarkerSymbolLayer extends com.arcgismaps.internal.jni.CoreMarkerSymbolLayer implements com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePictureMarkerSymbolLayer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImage);
					public getURI(): string;
					public constructor(param0: string);
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public getImage(): com.arcgismaps.internal.jni.CoreImage;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setTintColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getTintColor(): com.arcgismaps.internal.jni.CoreColor;
					public static createCorePictureMarkerSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CorePictureMarkerSymbolLayer;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePitchChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePitchChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CorePitchChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						pitchChanged(): void;
					});
					public constructor();
					public pitchChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePixelType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePixelType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CorePixelType;
					public static UINT1: com.arcgismaps.internal.jni.CorePixelType;
					public static UINT2: com.arcgismaps.internal.jni.CorePixelType;
					public static UINT4: com.arcgismaps.internal.jni.CorePixelType;
					public static UINT8: com.arcgismaps.internal.jni.CorePixelType;
					public static INT8: com.arcgismaps.internal.jni.CorePixelType;
					public static UINT16: com.arcgismaps.internal.jni.CorePixelType;
					public static INT16: com.arcgismaps.internal.jni.CorePixelType;
					public static UINT32: com.arcgismaps.internal.jni.CorePixelType;
					public static INT32: com.arcgismaps.internal.jni.CorePixelType;
					public static FLOAT32: com.arcgismaps.internal.jni.CorePixelType;
					public static FLOAT64: com.arcgismaps.internal.jni.CorePixelType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePixelType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePixelType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePixelType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePlatformHelpersProvider {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePlatformHelpersProvider>;
					public mHandle: number;
					public setConvertNumberCallback(param0: com.arcgismaps.internal.jni.CoreConvertNumberCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public setApplicationLocaleCallback(param0: com.arcgismaps.internal.jni.CoreApplicationLocaleCallbackListener): void;
					public static createCorePlatformHelpersProviderFromHandle(param0: number): com.arcgismaps.internal.jni.CorePlatformHelpersProvider;
					public onApplicationLocale(param0: number): void;
					public setConvertDateTimeCallback(param0: com.arcgismaps.internal.jni.CoreConvertDateTimeCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public onConvertNumber(param0: number, param1: number, param2: boolean, param3: boolean, param4: number): void;
					public close(): void;
					public onConvertDateTime(param0: number, param1: number, param2: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePlayCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePlayCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CorePlayCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						playCallback(): void;
					});
					public constructor();
					public playCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePoint extends com.arcgismaps.internal.jni.CoreGeometry {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePoint>;
					public constructor(param0: number, param1: number, param2: com.arcgismaps.internal.jni.CoreSpatialReference);
					public constructor(param0: number, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreSpatialReference);
					public getX(): number;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getY(): number;
					public static createWithZMSpatialReference(param0: number, param1: number, param2: number, param3: number, param4: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CorePoint;
					public static createCorePointFromHandle(param0: number): com.arcgismaps.internal.jni.CorePoint;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createWithZM(param0: number, param1: number, param2: number, param3: number): com.arcgismaps.internal.jni.CorePoint;
					public static createWithMSpatialReference(param0: number, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CorePoint;
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public toJSON(): string;
					public getZ(): number;
					public getM(): number;
					public static createWithM(param0: number, param1: number, param2: number): com.arcgismaps.internal.jni.CorePoint;
					public constructor(param0: number, param1: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePointBarrier {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePointBarrier>;
					public mHandle: number;
					public setBarrierId(param0: number): void;
					public finalize(): void;
					public clone(): com.arcgismaps.internal.jni.CorePointBarrier;
					public dispose(): void;
					public static createCorePointBarrierFromHandle(param0: number): com.arcgismaps.internal.jni.CorePointBarrier;
					public setGeometry(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint);
					public getCurbApproach(): com.arcgismaps.internal.jni.CoreCurbApproach;
					public getGeometry(): com.arcgismaps.internal.jni.CorePoint;
					public setName(param0: string): void;
					public getType(): com.arcgismaps.internal.jni.CoreBarrierType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public setAddedCost(param0: string, param1: number): void;
					public close(): void;
					public getBarrierId(): number;
					public setType(param0: com.arcgismaps.internal.jni.CoreBarrierType): void;
					public getAddedCost(param0: string): number;
					public setCurbApproach(param0: com.arcgismaps.internal.jni.CoreCurbApproach): void;
					public getHandle(): number;
					public getLocationStatus(): com.arcgismaps.internal.jni.CoreLocationStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePointBuilder extends com.arcgismaps.internal.jni.CoreGeometryBuilder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePointBuilder>;
					public setXY(param0: number, param1: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public setY(param0: number): void;
					public getX(): number;
					public setZ(param0: number): void;
					public normalizeToPointClosestTo(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public static createCorePointBuilderFromHandle(param0: number): com.arcgismaps.internal.jni.CorePointBuilder;
					public setX(param0: number): void;
					public offsetBy(param0: number, param1: number): void;
					public getY(): number;
					public normalize(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint);
					public setM(param0: number): void;
					public normalizeToEnvelope(param0: com.arcgismaps.internal.jni.CoreEnvelope): void;
					public constructor();
					public getZ(): number;
					public getM(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePointCloudLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePointCloudLayer>;
					public constructor(param0: string);
					public getAltitudeOffset(): number;
					public setURI(param0: string): void;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public setAltitudeUnit(param0: com.arcgismaps.internal.jni.CoreLinearUnit): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getURI(): string;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getAltitudeUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static createCorePointCloudLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CorePointCloudLayer;
					public getName(): string;
					public setAltitudeOffset(param0: number): void;
					public setIsVisible(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePolygon extends com.arcgismaps.internal.jni.CoreMultipart {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePolygon>;
					public static createCorePolygonFromHandle(param0: number): com.arcgismaps.internal.jni.CorePolygon;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public toPolyline(): com.arcgismaps.internal.jni.CorePolyline;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePolygonBarrier {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePolygonBarrier>;
					public mHandle: number;
					public setBarrierId(param0: number): void;
					public finalize(): void;
					public setGeometry(param0: com.arcgismaps.internal.jni.CorePolygon): void;
					public dispose(): void;
					public setScaleFactorForCost(param0: string, param1: number): void;
					public getGeometry(): com.arcgismaps.internal.jni.CorePolygon;
					public setName(param0: string): void;
					public getScaleFactorForCost(param0: string): number;
					public constructor(param0: com.arcgismaps.internal.jni.CorePolygon);
					public getType(): com.arcgismaps.internal.jni.CoreBarrierType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public clone(): com.arcgismaps.internal.jni.CorePolygonBarrier;
					public close(): void;
					public getBarrierId(): number;
					public setType(param0: com.arcgismaps.internal.jni.CoreBarrierType): void;
					public static createCorePolygonBarrierFromHandle(param0: number): com.arcgismaps.internal.jni.CorePolygonBarrier;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePolygonBuilder extends com.arcgismaps.internal.jni.CoreMultipartBuilder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePolygonBuilder>;
					public constructor(param0: com.arcgismaps.internal.jni.CorePolygon);
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public constructor();
					public toPolyline(): com.arcgismaps.internal.jni.CorePolyline;
					public static createCorePolygonBuilderFromHandle(param0: number): com.arcgismaps.internal.jni.CorePolygonBuilder;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePolyline extends com.arcgismaps.internal.jni.CoreMultipart {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePolyline>;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public static createCorePolylineFromHandle(param0: number): com.arcgismaps.internal.jni.CorePolyline;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePolylineBarrier {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePolylineBarrier>;
					public mHandle: number;
					public static createCorePolylineBarrierFromHandle(param0: number): com.arcgismaps.internal.jni.CorePolylineBarrier;
					public setBarrierId(param0: number): void;
					public getGeometry(): com.arcgismaps.internal.jni.CorePolyline;
					public finalize(): void;
					public dispose(): void;
					public setScaleFactorForCost(param0: string, param1: number): void;
					public setName(param0: string): void;
					public getScaleFactorForCost(param0: string): number;
					public getType(): com.arcgismaps.internal.jni.CoreBarrierType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public setGeometry(param0: com.arcgismaps.internal.jni.CorePolyline): void;
					public close(): void;
					public getBarrierId(): number;
					public setType(param0: com.arcgismaps.internal.jni.CoreBarrierType): void;
					public clone(): com.arcgismaps.internal.jni.CorePolylineBarrier;
					public constructor(param0: com.arcgismaps.internal.jni.CorePolyline);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePolylineBuilder extends com.arcgismaps.internal.jni.CoreMultipartBuilder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePolylineBuilder>;
					public static createCorePolylineBuilderFromHandle(param0: number): com.arcgismaps.internal.jni.CorePolylineBuilder;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSpatialReference);
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CorePolyline);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopup {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopup>;
					public mHandle: number;
					public getTitle(): string;
					public evaluateExpressionsAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getRequestables(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public static toDateTimeFormat(param0: com.arcgismaps.internal.jni.CorePopupDateFormat): com.arcgismaps.internal.jni.CoreDateTimeFormat;
					public getSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public static fromGeoElement(param0: com.arcgismaps.internal.jni.CoreElement): com.arcgismaps.internal.jni.CorePopup;
					public finalize(): void;
					public static createCorePopupFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopup;
					public getEvaluatedElements(): com.arcgismaps.internal.jni.CoreArray;
					public dispose(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getGeoElement(): com.arcgismaps.internal.jni.CoreElement;
					public getFieldValue(param0: com.arcgismaps.internal.jni.CorePopupField): com.arcgismaps.internal.jni.CoreElement;
					public constructor(param0: com.arcgismaps.internal.jni.CoreElement, param1: com.arcgismaps.internal.jni.CorePopupDefinition);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public substitute(param0: string): string;
					public getFormattedValue(param0: com.arcgismaps.internal.jni.CorePopupField): string;
					public getFieldValueFromStringAndPopupElement(param0: string, param1: com.arcgismaps.internal.jni.CorePopupElement): com.arcgismaps.internal.jni.CoreElement;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupAttachment implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupAttachment>;
					public mHandle: number;
					public finalize(): void;
					public getType(): com.arcgismaps.internal.jni.CorePopupAttachmentType;
					public load(): void;
					public getSize(): number;
					public getAttachment(): com.arcgismaps.internal.jni.CoreAttachment;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public getIsLocal(): boolean;
					public onRequestRequired(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public getContentType(): string;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public createFullImageAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getFilePath(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static createCorePopupAttachmentFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupAttachment;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public createThumbnailAsync(param0: number, param1: number): com.arcgismaps.internal.jni.CoreTask;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupAttachmentType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupAttachmentType>;
					public static IMAGE: com.arcgismaps.internal.jni.CorePopupAttachmentType;
					public static VIDEO: com.arcgismaps.internal.jni.CorePopupAttachmentType;
					public static DOCUMENT: com.arcgismaps.internal.jni.CorePopupAttachmentType;
					public static OTHER: com.arcgismaps.internal.jni.CorePopupAttachmentType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePopupAttachmentType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePopupAttachmentType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePopupAttachmentType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupAttachmentsDisplayType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType>;
					public static LIST: com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType;
					public static PREVIEW: com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType;
					public static AUTO: com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupDateFormat {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupDateFormat>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static DAYSHORTMONTHYEAR: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static LONGDATE: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static LONGMONTHDAYYEAR: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static LONGMONTHYEAR: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATE: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATELE: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATELELONGTIME: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATELELONGTIME24: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATELESHORTTIME: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATELESHORTTIME24: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATELONGTIME: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATELONGTIME24: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATESHORTTIME: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTDATESHORTTIME24: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static SHORTMONTHYEAR: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static YEAR: com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePopupDateFormat;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePopupDateFormat;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePopupDateFormat>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupDefinition extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupDefinition>;
					public mHandle: number;
					public getTitle(): string;
					public setDescription(param0: string): void;
					public setTitle(param0: string): void;
					public finalize(): void;
					public setAllowEditGeometry(param0: boolean): void;
					public setAllowDelete(param0: boolean): void;
					public setExpressions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getAllowEditGeometry(): boolean;
					public setElements(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor();
					public getMedia(): com.arcgismaps.internal.jni.CoreVector;
					public getShowAttachments(): boolean;
					public close(): void;
					public static createCorePopupDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupDefinition;
					public static fromGeoElement(param0: com.arcgismaps.internal.jni.CoreElement): com.arcgismaps.internal.jni.CorePopupDefinition;
					public setShowEditSummary(param0: boolean): void;
					public setMedia(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getShowEditSummary(): boolean;
					public getExpressions(): com.arcgismaps.internal.jni.CoreVector;
					public setRelatedFeaturesDefinition(param0: com.arcgismaps.internal.jni.CorePopupRelatedFeaturesDefinition): void;
					public getInstanceId(): java.lang.Long;
					public dispose(): void;
					public setShowAttachments(param0: boolean): void;
					public setAllowEdit(param0: boolean): void;
					public getRelatedFeaturesDefinition(): com.arcgismaps.internal.jni.CorePopupRelatedFeaturesDefinition;
					public static nativeDestroy(param0: number): void;
					public getFields(): com.arcgismaps.internal.jni.CoreVector;
					public getElements(): com.arcgismaps.internal.jni.CoreVector;
					public static fromPopupSource(param0: com.arcgismaps.internal.jni.CoreElement): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getDescription(): string;
					public getAllowDelete(): boolean;
					public getAllowEdit(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupElement extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupElement>;
					public mHandle: number;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CorePopupElementType;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupElement;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCorePopupElementFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupElement;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getIsEvaluated(): boolean;
					public toJSON(): string;
					public close(): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CorePopupElement;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupElementType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupElementType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CorePopupElementType;
					public static TEXTPOPUPELEMENT: com.arcgismaps.internal.jni.CorePopupElementType;
					public static FIELDSPOPUPELEMENT: com.arcgismaps.internal.jni.CorePopupElementType;
					public static MEDIAPOPUPELEMENT: com.arcgismaps.internal.jni.CorePopupElementType;
					public static ATTACHMENTSPOPUPELEMENT: com.arcgismaps.internal.jni.CorePopupElementType;
					public static EXPRESSIONPOPUPELEMENT: com.arcgismaps.internal.jni.CorePopupElementType;
					public static RELATIONSHIPPOPUPELEMENT: com.arcgismaps.internal.jni.CorePopupElementType;
					public static UNSUPPORTEDPOPUPELEMENT: com.arcgismaps.internal.jni.CorePopupElementType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePopupElementType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePopupElementType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePopupElementType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupExpression extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupExpression>;
					public mHandle: number;
					public getTitle(): string;
					public equals(param0: com.arcgismaps.internal.jni.CorePopupExpression): boolean;
					public static createCorePopupExpressionFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupExpression;
					public getInstanceId(): java.lang.Long;
					public setTitle(param0: string): void;
					public finalize(): void;
					public dispose(): void;
					public getReturnType(): com.arcgismaps.internal.jni.CorePopupExpressionReturnType;
					public setName(param0: string): void;
					public getExpression(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public hash(): number;
					public close(): void;
					public setReturnType(param0: com.arcgismaps.internal.jni.CorePopupExpressionReturnType): void;
					public setExpression(param0: string): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupExpressionEvaluation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupExpressionEvaluation>;
					public mHandle: number;
					public getResult(): com.arcgismaps.internal.jni.CoreElement;
					public getPopupExpression(): com.arcgismaps.internal.jni.CorePopupExpression;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public static createCorePopupExpressionEvaluationFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupExpressionEvaluation;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupExpressionReturnType>;
					public static STRING: com.arcgismaps.internal.jni.CorePopupExpressionReturnType;
					public static NUMBER: com.arcgismaps.internal.jni.CorePopupExpressionReturnType;
					public static DICTIONARY: com.arcgismaps.internal.jni.CorePopupExpressionReturnType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePopupExpressionReturnType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePopupExpressionReturnType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePopupExpressionReturnType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupField {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupField>;
					public mHandle: number;
					public setFormat(param0: com.arcgismaps.internal.jni.CorePopupFieldFormat): void;
					public getLabel(): string;
					public getFormat(): com.arcgismaps.internal.jni.CorePopupFieldFormat;
					public setStringFieldOption(param0: com.arcgismaps.internal.jni.CorePopupStringFieldOption): void;
					public finalize(): void;
					public dispose(): void;
					public getStringFieldOption(): com.arcgismaps.internal.jni.CorePopupStringFieldOption;
					public setLabel(param0: string): void;
					public getIsVisible(): boolean;
					public setFieldName(param0: string): void;
					public setTooltip(param0: string): void;
					public static createCorePopupFieldFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupField;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getIsEditable(): boolean;
					public setIsEditable(param0: boolean): void;
					public close(): void;
					public setIsVisible(param0: boolean): void;
					public getTooltip(): string;
					public getFieldName(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupFieldFormat {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupFieldFormat>;
					public mHandle: number;
					public getDateFormat(): com.arcgismaps.internal.jni.CorePopupDateFormat;
					public finalize(): void;
					public getDecimalPlaces(): number;
					public dispose(): void;
					public setDateFormat(param0: com.arcgismaps.internal.jni.CorePopupDateFormat): void;
					public setDecimalPlaces(param0: number): void;
					public setUseThousandsSeparator(param0: boolean): void;
					public static nativeDestroy(param0: number): void;
					public static createCorePopupFieldFormatFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupFieldFormat;
					public constructor();
					public close(): void;
					public getUseThousandsSeparator(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupMedia {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupMedia>;
					public mHandle: number;
					public getTitle(): string;
					public setImageRefreshInterval(param0: number): void;
					public setTitle(param0: string): void;
					public finalize(): void;
					public dispose(): void;
					public getCaption(): string;
					public getImageRefreshInterval(): number;
					public setCaption(param0: string): void;
					public getValue(): com.arcgismaps.internal.jni.CorePopupMediaValue;
					public setType(param0: com.arcgismaps.internal.jni.CorePopupMediaType): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public static createCorePopupMediaFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupMedia;
					public setValue(param0: com.arcgismaps.internal.jni.CorePopupMediaValue): void;
					public getHandle(): number;
					public getType(): com.arcgismaps.internal.jni.CorePopupMediaType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupMediaType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupMediaType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CorePopupMediaType;
					public static IMAGE: com.arcgismaps.internal.jni.CorePopupMediaType;
					public static BARCHART: com.arcgismaps.internal.jni.CorePopupMediaType;
					public static COLUMNCHART: com.arcgismaps.internal.jni.CorePopupMediaType;
					public static LINECHART: com.arcgismaps.internal.jni.CorePopupMediaType;
					public static PIECHART: com.arcgismaps.internal.jni.CorePopupMediaType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePopupMediaType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePopupMediaType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePopupMediaType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupMediaValue {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupMediaValue>;
					public mHandle: number;
					public getFieldNames(): com.arcgismaps.internal.jni.CoreVector;
					public setSourceURL(param0: string): void;
					public finalize(): void;
					public dispose(): void;
					public getLinkURL(): string;
					public getNormalizeFieldName(): string;
					public setLinkURL(param0: string): void;
					public getSourceURL(): string;
					public static createCorePopupMediaValueFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupMediaValue;
					public getTooltipFieldName(): string;
					public setTooltipFieldName(param0: string): void;
					public setNormalizeFieldName(param0: string): void;
					public getLabels(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setFieldNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public close(): void;
					public getData(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupRelatedFeaturesDefinition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupRelatedFeaturesDefinition>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public setShowRelatedFeatures(param0: boolean): void;
					public close(): void;
					public dispose(): void;
					public setSortOrder(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static createCorePopupRelatedFeaturesDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupRelatedFeaturesDefinition;
					public getShowRelatedFeatures(): boolean;
					public getSortOrder(): com.arcgismaps.internal.jni.CoreVector;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupRelatedFeaturesSortOrder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupRelatedFeaturesSortOrder>;
					public mHandle: number;
					public setRelationshipId(param0: number): void;
					public getRelationshipId(): number;
					public static createCorePopupRelatedFeaturesSortOrderFromHandle(param0: number): com.arcgismaps.internal.jni.CorePopupRelatedFeaturesSortOrder;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setOrderByField(param0: com.arcgismaps.internal.jni.CoreOrderBy): void;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getOrderByField(): com.arcgismaps.internal.jni.CoreOrderBy;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupSource>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CorePopupSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
						getIsPopupEnabled(): boolean;
						setIsPopupEnabled(param0: boolean): void;
						setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					});
					public constructor();
					public setIsPopupEnabled(param0: boolean): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePopupStringFieldOption {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePopupStringFieldOption>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CorePopupStringFieldOption;
					public static SINGLELINE: com.arcgismaps.internal.jni.CorePopupStringFieldOption;
					public static MULTILINE: com.arcgismaps.internal.jni.CorePopupStringFieldOption;
					public static RICHTEXT: com.arcgismaps.internal.jni.CorePopupStringFieldOption;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePopupStringFieldOption;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePopupStringFieldOption;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePopupStringFieldOption>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePortal implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePortal>;
					public mHandle: number;
					public constructor(param0: string);
					public static createCorePortalFromHandle(param0: number): com.arcgismaps.internal.jni.CorePortal;
					public finalize(): void;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public setPortalInfoOrError(param0: com.arcgismaps.internal.jni.CorePortalInfo, param1: any): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public onPortalInfoRequest(): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPortalInfo(): com.arcgismaps.internal.jni.CorePortalInfo;
					public setPortalInfoRequestCallback(param0: com.arcgismaps.internal.jni.CoreInfoCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public fetchLicenseInfoAsync(): com.arcgismaps.internal.jni.CoreTask;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePortalAccess {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePortalAccess>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CorePortalAccess;
					public static ORGANIZATION: com.arcgismaps.internal.jni.CorePortalAccess;
					public static PRIVATE: com.arcgismaps.internal.jni.CorePortalAccess;
					public static PUBLIC: com.arcgismaps.internal.jni.CorePortalAccess;
					public static SHARED: com.arcgismaps.internal.jni.CorePortalAccess;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePortalAccess;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePortalAccess;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePortalAccess>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePortalCreatedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePortalCreatedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CorePortalCreatedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						portalCreated(param0: com.arcgismaps.internal.jni.CorePortal): void;
					});
					public constructor();
					public portalCreated(param0: com.arcgismaps.internal.jni.CorePortal): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePortalInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePortalInfo>;
					public mHandle: number;
					public constructor(param0: string);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getLicenseInfo(): com.arcgismaps.internal.jni.CoreLicenseInfo;
					public static createCorePortalInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CorePortalInfo;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePortalItem extends com.arcgismaps.internal.jni.CoreItem implements com.arcgismaps.internal.jni.CoreJSONSerializable, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePortalItem>;
					public setAccess(param0: com.arcgismaps.internal.jni.CorePortalAccess): void;
					public constructor(param0: string);
					public finalize(): void;
					public setFolderId(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortal);
					public getSize(): number;
					public getRatingCount(): number;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CorePortal, param1: string);
					public toJSON(): string;
					public static createCorePortalItemFromHandle(param0: number): com.arcgismaps.internal.jni.CorePortalItem;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortal, param1: com.arcgismaps.internal.jni.CorePortalItemType);
					public onRequestRequired(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public cancelLoad(): void;
					public getAccessAndUseConstraintsHTML(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setAccessAndUseConstraintsHTML(param0: string): void;
					public getType(): com.arcgismaps.internal.jni.CorePortalItemType;
					public getViewCount(): number;
					public setAverageRating(param0: number): void;
					public static portalItemTypeFromString(param0: string): com.arcgismaps.internal.jni.CorePortalItemType;
					public static portalItemTypeToString(param0: com.arcgismaps.internal.jni.CorePortalItemType): string;
					public getCulture(): string;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getCommentCount(): number;
					public load(): void;
					public static portalAccessFromString(param0: string): com.arcgismaps.internal.jni.CorePortalAccess;
					public setOwner(param0: string): void;
					public setRatingCount(param0: number): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CorePortal);
					public setType(param0: com.arcgismaps.internal.jni.CorePortalItemType): void;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getPortal(): com.arcgismaps.internal.jni.CorePortal;
					public onLoadStatusChanged(param0: number): void;
					public onDoneLoading(param0: number): void;
					public getTypeName(): string;
					public getGUID(): string;
					public setCommentCount(param0: number): void;
					public getCommentsEnabled(): boolean;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CorePortalItem;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getServiceURL(): string;
					public getURL(): string;
					public getOwner(): string;
					public getFolderId(): string;
					public static portalAccessToString(param0: com.arcgismaps.internal.jni.CorePortalAccess): string;
					public getAverageRating(): number;
					public getAccess(): com.arcgismaps.internal.jni.CorePortalAccess;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePortalItemType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePortalItemType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CorePortalItemType;
					public static ARCGISPROADDIN: com.arcgismaps.internal.jni.CorePortalItemType;
					public static ARCPADPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static CADDRAWING: com.arcgismaps.internal.jni.CorePortalItemType;
					public static CSV: com.arcgismaps.internal.jni.CorePortalItemType;
					public static CITYENGINEWEBSCENE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static CODEATTACHMENT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static CODESAMPLE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static COLORSET: com.arcgismaps.internal.jni.CorePortalItemType;
					public static DESKTOPADDIN: com.arcgismaps.internal.jni.CorePortalItemType;
					public static DESKTOPAPPLICATION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static DESKTOPAPPLICATIONTEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static DESKTOPSTYLE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static DOCUMENTLINK: com.arcgismaps.internal.jni.CorePortalItemType;
					public static EXPLORERADDIN: com.arcgismaps.internal.jni.CorePortalItemType;
					public static EXPLORERLAYER: com.arcgismaps.internal.jni.CorePortalItemType;
					public static EXPLORERMAP: com.arcgismaps.internal.jni.CorePortalItemType;
					public static FEATURECOLLECTION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static FEATURECOLLECTIONTEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static FEATURESERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static FILEGEODATABASE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static FORM: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GEOCODINGSERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GEODATASERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GEOMETRYSERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GEOPROCESSINGPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GEOPROCESSINGPACKAGEPROVERSION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GEOPROCESSINGSAMPLE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GEOPROCESSINGSERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GLOBEDOCUMENT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GLOBESERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static IMAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static IMAGECOLLECTION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static IMAGESERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static INSIGHTSMODEL: com.arcgismaps.internal.jni.CorePortalItemType;
					public static INSIGHTSPAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static INSIGHTSWORKBOOK: com.arcgismaps.internal.jni.CorePortalItemType;
					public static IWORKKEYNOTE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static IWORKNUMBERS: com.arcgismaps.internal.jni.CorePortalItemType;
					public static IWORKPAGES: com.arcgismaps.internal.jni.CorePortalItemType;
					public static KML: com.arcgismaps.internal.jni.CorePortalItemType;
					public static KMLCOLLECTION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static LAYER: com.arcgismaps.internal.jni.CorePortalItemType;
					public static LAYERPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static LAYOUT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static LOCATORPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MAPDOCUMENT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MAPPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MAPSERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MAPTEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MICROSOFTEXCEL: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MICROSOFTPOWERPOINT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MICROSOFTWORD: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MOBILEAPPLICATION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MOBILEBASEMAPPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MOBILEMAPPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static NATIVEAPPLICATION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static NATIVEAPPLICATIONINSTALLER: com.arcgismaps.internal.jni.CorePortalItemType;
					public static NATIVEAPPLICATIONTEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static NETCDF: com.arcgismaps.internal.jni.CorePortalItemType;
					public static NETWORKANALYSISSERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static OPERATIONVIEW: com.arcgismaps.internal.jni.CorePortalItemType;
					public static OPERATIONSDASHBOARDADDIN: com.arcgismaps.internal.jni.CorePortalItemType;
					public static OPERATIONSDASHBOARDEXTENSION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static PDF: com.arcgismaps.internal.jni.CorePortalItemType;
					public static PROJECTPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static PROJECTTEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static PROMAP: com.arcgismaps.internal.jni.CorePortalItemType;
					public static PUBLISHEDMAP: com.arcgismaps.internal.jni.CorePortalItemType;
					public static RASTERFUNCTIONTEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static RELATIONALDATABASECONNECTION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static REPORTTEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static RULEPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SCENEDOCUMENT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SCENEPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SCENESERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SERVICEDEFINITION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SHAPEFILE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static STATISTICALDATACOLLECTION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SYMBOLSET: com.arcgismaps.internal.jni.CorePortalItemType;
					public static TASKFILE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static TILEPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static VECTORTILEPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static VECTORTILESERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static VISIODOCUMENT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static VR360EXPERIENCE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WFS: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WMS: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WMTS: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WEBMAP: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WEBMAPPINGAPPLICATION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WEBSCENE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WINDOWSMOBILEPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WORKFLOWMANAGERPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WORKFLOWMANAGERSERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WORKFORCEPROJECT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SQLITEGEODATABASE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MAPAREA: com.arcgismaps.internal.jni.CorePortalItemType;
					public static HUBINITIATIVE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static HUBSITEAPPLICATION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static HUBPAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static APPBUILDEREXTENSION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static APPBUILDERWIDGETPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static DASHBOARD: com.arcgismaps.internal.jni.CorePortalItemType;
					public static ARCGISPROCONFIGURATION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static CONTENTCATEGORYSET: com.arcgismaps.internal.jni.CorePortalItemType;
					public static INSIGHTSTHEME: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MOBILESCENEPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static ORIENTEDIMAGERYCATALOG: com.arcgismaps.internal.jni.CorePortalItemType;
					public static ORTHOMAPPINGPROJECT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static ORTHOMAPPINGTEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SOLUTION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static BUILDINGSCENELAYER: com.arcgismaps.internal.jni.CorePortalItemType;
					public static COMPACTTILEPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static DATASTORE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static DEEPLEARNINGPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static EXCALIBURIMAGERYPROJECT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GEOPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static MISSION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SITEAPPLICATION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SITEPAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static BIGDATAANALYTIC: com.arcgismaps.internal.jni.CorePortalItemType;
					public static FEED: com.arcgismaps.internal.jni.CorePortalItemType;
					public static REALTIMEANALYTIC: com.arcgismaps.internal.jni.CorePortalItemType;
					public static PROREPORT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static QUICKCAPTUREPROJECT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static SURVEY123ADDIN: com.arcgismaps.internal.jni.CorePortalItemType;
					public static URBANMODEL: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WEBEXPERIENCE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WEBEXPERIENCETEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static STORYMAP: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WORKFLOW: com.arcgismaps.internal.jni.CorePortalItemType;
					public static INSIGHTSSCRIPT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static KERNELGATEWAYCONNECTION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static KNOWLEDGEGRAPH: com.arcgismaps.internal.jni.CorePortalItemType;
					public static LINKCHART: com.arcgismaps.internal.jni.CorePortalItemType;
					public static STYLE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static ADMINISTRATIVEREPORT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static EXPORTPACKAGE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GEOJSON: com.arcgismaps.internal.jni.CorePortalItemType;
					public static GML: com.arcgismaps.internal.jni.CorePortalItemType;
					public static HUBEVENT: com.arcgismaps.internal.jni.CorePortalItemType;
					public static HUBINITIATIVETEMPLATE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static STORYMAPTHEME: com.arcgismaps.internal.jni.CorePortalItemType;
					public static WEBAPPBUILDERWIDGET: com.arcgismaps.internal.jni.CorePortalItemType;
					public static EARTHCONFIGURATION: com.arcgismaps.internal.jni.CorePortalItemType;
					public static OGCFEATURESERVER: com.arcgismaps.internal.jni.CorePortalItemType;
					public static OGC3DTILESSERVICE: com.arcgismaps.internal.jni.CorePortalItemType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePortalItemType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePortalItemType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePortalItemType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePortalNetworkSecuredInquiry {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiry>;
					public mHandle: number;
					public respond(param0: boolean): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCorePortalNetworkSecuredInquiryFromHandle(param0: number): com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiry;
					public getPortalURL(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePortalNetworkSecuredInquiryCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiryCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiryCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						portalNetworkSecuredInquiry(param0: com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiry): void;
					});
					public constructor();
					public portalNetworkSecuredInquiry(param0: com.arcgismaps.internal.jni.CorePortalNetworkSecuredInquiry): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePregeneratedTokenCredential extends com.arcgismaps.internal.jni.CoreArcGISCredential {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePregeneratedTokenCredential>;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreTokenInfo, param2: string);
					public constructor();
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getTokenInfo(): com.arcgismaps.internal.jni.CoreTokenInfo;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCorePregeneratedTokenCredentialFromHandle(param0: number): com.arcgismaps.internal.jni.CorePregeneratedTokenCredential;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePreplannedMapArea implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePreplannedMapArea>;
					public mHandle: number;
					public getAreaOfInterest(): com.arcgismaps.internal.jni.CoreGeometry;
					public finalize(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem);
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getPackagingStatus(): com.arcgismaps.internal.jni.CorePreplannedPackagingStatus;
					public getUpdateCapabilities(): com.arcgismaps.internal.jni.CoreOfflineMapUpdateCapabilities;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public getPortalItem(): com.arcgismaps.internal.jni.CorePortalItem;
					public onDoneLoading(param0: number): void;
					public getPackageItems(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public onRequestRequired(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public static createCorePreplannedMapAreaFromHandle(param0: number): com.arcgismaps.internal.jni.CorePreplannedMapArea;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePreplannedPackagingStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePreplannedPackagingStatus>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CorePreplannedPackagingStatus;
					public static PROCESSING: com.arcgismaps.internal.jni.CorePreplannedPackagingStatus;
					public static FAILED: com.arcgismaps.internal.jni.CorePreplannedPackagingStatus;
					public static COMPLETE: com.arcgismaps.internal.jni.CorePreplannedPackagingStatus;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePreplannedPackagingStatus>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePreplannedPackagingStatus;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePreplannedPackagingStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePreplannedScheduledUpdatesOption {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption>;
					public static NOUPDATES: com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption;
					public static DOWNLOADALLUPDATES: com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePreplannedUpdateMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePreplannedUpdateMode>;
					public static NOUPDATES: com.arcgismaps.internal.jni.CorePreplannedUpdateMode;
					public static SYNCWITHFEATURESERVICES: com.arcgismaps.internal.jni.CorePreplannedUpdateMode;
					public static DOWNLOADSCHEDULEDUPDATES: com.arcgismaps.internal.jni.CorePreplannedUpdateMode;
					public static DOWNLOADSCHEDULEDUPDATESANDUPLOADNEWFEATURES: com.arcgismaps.internal.jni.CorePreplannedUpdateMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePreplannedUpdateMode>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePreplannedUpdateMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePreplannedUpdateMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePresetColorRampType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePresetColorRampType>;
					public static NONE: com.arcgismaps.internal.jni.CorePresetColorRampType;
					public static ELEVATION: com.arcgismaps.internal.jni.CorePresetColorRampType;
					public static DEMSCREEN: com.arcgismaps.internal.jni.CorePresetColorRampType;
					public static DEMLIGHT: com.arcgismaps.internal.jni.CorePresetColorRampType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePresetColorRampType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePresetColorRampType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePresetColorRampType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreProgressChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreProgressChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreProgressChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						progressChanged(): void;
					});
					public constructor();
					public progressChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreProximityResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreProximityResult>;
					public mHandle: number;
					public getDistance(): number;
					public getPartIndex(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getPointIndex(): number;
					public static npos(): number;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getCoordinate(): com.arcgismaps.internal.jni.CorePoint;
					public static createCoreProximityResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreProximityResult;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CorePulseThread {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CorePulseThread>;
					public static USERDEFINED: com.arcgismaps.internal.jni.CorePulseThread;
					public static USEGEOVIEW: com.arcgismaps.internal.jni.CorePulseThread;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CorePulseThread;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CorePulseThread;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CorePulseThread>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreQueryFeatureFields {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreQueryFeatureFields>;
					public static IDSONLY: com.arcgismaps.internal.jni.CoreQueryFeatureFields;
					public static MINIMUM: com.arcgismaps.internal.jni.CoreQueryFeatureFields;
					public static LOADALL: com.arcgismaps.internal.jni.CoreQueryFeatureFields;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreQueryFeatureFields;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreQueryFeatureFields>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreQueryFeatureFields;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreQueryFormats {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreQueryFormats>;
					public mHandle: number;
					public getSupportsPBF(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getSupportsAMF(): boolean;
					public static createCoreQueryFormatsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreQueryFormats;
					public getSupportsJSON(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreQueryParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreQueryParameters>;
					public mHandle: number;
					public setReturnGeometry(param0: boolean): void;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public getWhereClause(): string;
					public finalize(): void;
					public getOutSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getMaxAllowableOffset(): number;
					public setSpatialRelationship(param0: com.arcgismaps.internal.jni.CoreSpatialRelationship): void;
					public static createCoreQueryParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreQueryParameters;
					public getOrderByFields(): com.arcgismaps.internal.jni.CoreVector;
					public constructor();
					public getOutFields(): com.arcgismaps.internal.jni.CoreVector;
					public close(): void;
					public setOrderByFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setOutFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setObjectIds(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getURLParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public getResultOffset(): number;
					public getSpatialRelationship(): com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public setResultOffset(param0: number): void;
					public dispose(): void;
					public setMaxFeatures(param0: number): void;
					public getObjectIds(): com.arcgismaps.internal.jni.CoreVector;
					public setTimeExtent(param0: com.arcgismaps.internal.jni.CoreTimeExtent): void;
					public getMaxFeatures(): number;
					public getTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public static nativeDestroy(param0: number): void;
					public setMaxAllowableOffset(param0: number): void;
					public setWhereClause(param0: string): void;
					public setOutSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public getReturnGeometry(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRGBColor extends com.arcgismaps.internal.jni.CoreColor {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRGBColor>;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public getAlpha(): number;
					public getBlue(): number;
					public getRGBA(): number;
					public getRed(): number;
					public constructor();
					public getGreen(): number;
					public static createCoreRGBColorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRGBColor;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRGBRenderer extends com.arcgismaps.internal.jni.CoreBaseStretchRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRGBRenderer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreStretchParameters, param1: com.arcgismaps.internal.jni.CoreVector, param2: com.arcgismaps.internal.jni.CoreVector, param3: boolean, param4: com.arcgismaps.internal.jni.CorePansharpenType, param5: com.arcgismaps.internal.jni.CoreRaster, param6: com.arcgismaps.internal.jni.CoreVector);
					public constructor(param0: com.arcgismaps.internal.jni.CoreStretchParameters, param1: com.arcgismaps.internal.jni.CoreVector, param2: com.arcgismaps.internal.jni.CoreVector, param3: boolean);
					public getWeights(): com.arcgismaps.internal.jni.CoreArray;
					public constructor();
					public static createCoreRGBRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRGBRenderer;
					public getBandIndexes(): com.arcgismaps.internal.jni.CoreArray;
					public getPanchromaticRaster(): com.arcgismaps.internal.jni.CoreRaster;
					public getPansharpenType(): com.arcgismaps.internal.jni.CorePansharpenType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRadioButtonsFormInput extends com.arcgismaps.internal.jni.CoreFormInput {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRadioButtonsFormInput>;
					public static createCoreRadioButtonsFormInputFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRadioButtonsFormInput;
					public getNoValueLabel(): string;
					public getNoValueOption(): com.arcgismaps.internal.jni.CoreFormInputNoValueOption;
					public getCodedValues(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRangeDomain extends com.arcgismaps.internal.jni.CoreDomain {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRangeDomain>;
					public static createCoreRangeDomainFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRangeDomain;
					public getMinValue(): com.arcgismaps.internal.jni.CoreElement;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getMaxValue(): com.arcgismaps.internal.jni.CoreElement;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRangeDomainDescription extends com.arcgismaps.internal.jni.CoreDomainDescription {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRangeDomainDescription>;
					public static createCoreRangeDomainDescriptionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRangeDomainDescription;
					public setMaxValue(param0: com.arcgismaps.internal.jni.CoreElement): void;
					public getMinValue(): com.arcgismaps.internal.jni.CoreElement;
					public constructor();
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreFieldType, param2: com.arcgismaps.internal.jni.CoreElement, param3: com.arcgismaps.internal.jni.CoreElement);
					public getMaxValue(): com.arcgismaps.internal.jni.CoreElement;
					public setMinValue(param0: com.arcgismaps.internal.jni.CoreElement): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRaster extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRaster>;
					public mHandle: number;
					public constructor(param0: string);
					public finalize(): void;
					public handleResponse(param0: number, param1: androidNative.Array<number>, param2: any): void;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreRasterType;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public static createCoreRasterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRaster;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRasterFunction);
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPath(): string;
					public getFunction(): com.arcgismaps.internal.jni.CoreRasterFunction;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRaster;
					public static nativeDestroy(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterCell extends com.arcgismaps.internal.jni.CoreGeoElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterCell>;
					public mHandle: number;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public static createCoreRasterCellFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRasterCell;
					public close(): void;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterElevationSource extends com.arcgismaps.internal.jni.CoreElevationSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterElevationSource>;
					public getFilePaths(): com.arcgismaps.internal.jni.CoreVector;
					public getFullExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public cancelLoad(): void;
					public load(): void;
					public static createCoreRasterElevationSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRasterElevationSource;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setFilePaths(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterFunction {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterFunction>;
					public mHandle: number;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreRasterFunction;
					public constructor(param0: string);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getArguments(): com.arcgismaps.internal.jni.CoreRasterFunctionArguments;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreRasterFunctionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRasterFunction;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterFunctionArguments {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterFunctionArguments>;
					public mHandle: number;
					public getArgumentNames(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getRasterNames(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public static createCoreRasterFunctionArgumentsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRasterFunctionArguments;
					public close(): void;
					public dispose(): void;
					public setRaster(param0: string, param1: com.arcgismaps.internal.jni.CoreRaster): void;
					public setArgument(param0: string, param1: string): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterLayer extends com.arcgismaps.internal.jni.CoreImageAdjustmentLayer implements com.arcgismaps.internal.jni.CorePopupSource, com.arcgismaps.internal.jni.CoreTimeAware {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterLayer>;
					public setIsTimeFilteringEnabled(param0: boolean): void;
					public onFullTimeExtentChanged(): void;
					public finalize(): void;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRasterRenderer;
					public getTimeOffset(): com.arcgismaps.internal.jni.CoreTimeValue;
					public getIsVisible(): boolean;
					public load(): void;
					public getTimeInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getSupportsTimeFiltering(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public getFullTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public static createCoreRasterLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRasterLayer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRaster);
					public getCanChangeVisibility(): boolean;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getIsTimeFilteringEnabled(): boolean;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public getRaster(): com.arcgismaps.internal.jni.CoreRaster;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public setTimeOffset(param0: com.arcgismaps.internal.jni.CoreTimeValue): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getName(): string;
					public setIsPopupEnabled(param0: boolean): void;
					public setFullTimeExtentChangedCallback(param0: com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener): void;
					public setRenderer(param0: com.arcgismaps.internal.jni.CoreRasterRenderer): void;
					public setIsVisible(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterRenderer>;
					public mHandle: number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreRasterRendererType;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRasterRenderer;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreRasterRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRasterRenderer;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterRendererType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterRendererType>;
					public static RASTERRENDERER: com.arcgismaps.internal.jni.CoreRasterRendererType;
					public static BLENDRENDERER: com.arcgismaps.internal.jni.CoreRasterRendererType;
					public static COLORMAPRENDERER: com.arcgismaps.internal.jni.CoreRasterRendererType;
					public static HILLSHADERENDERER: com.arcgismaps.internal.jni.CoreRasterRendererType;
					public static RGBRENDERER: com.arcgismaps.internal.jni.CoreRasterRendererType;
					public static STRETCHRENDERER: com.arcgismaps.internal.jni.CoreRasterRendererType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRasterRendererType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRasterRendererType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRasterRendererType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterRequest extends com.arcgismaps.internal.jni.CoreRequest {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterRequest>;
					public getInstanceId(): java.lang.Long;
					public getAPIKey(): string;
					public getLength(): number;
					public static createCoreRasterRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRasterRequest;
					public getOffset(): number;
					public setAPIKey(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterSublayerSource extends com.arcgismaps.internal.jni.CoreSublayerSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterSublayerSource>;
					public constructor(param0: string, param1: string);
					public getDataSourceName(): string;
					public getWorkspaceId(): string;
					public setFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor();
					public getFields(): com.arcgismaps.internal.jni.CoreVector;
					public static createCoreRasterSublayerSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRasterSublayerSource;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRasterType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRasterType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreRasterType;
					public static RASTER: com.arcgismaps.internal.jni.CoreRasterType;
					public static MOSAICDATASETRASTER: com.arcgismaps.internal.jni.CoreRasterType;
					public static GEOPACKAGERASTER: com.arcgismaps.internal.jni.CoreRasterType;
					public static IMAGESERVICERASTER: com.arcgismaps.internal.jni.CoreRasterType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRasterType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRasterType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRasterType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRefreshStatusChangedCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRefreshStatusChangedCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreRefreshStatusChangedCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						refreshStatusChangedCallback(): void;
					});
					public constructor();
					public refreshStatusChangedCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRefreshable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRefreshable>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreRefreshable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getRefreshInterval(): number;
						setRefreshInterval(param0: number): void;
					});
					public constructor();
					public setRefreshInterval(param0: number): void;
					public getRefreshInterval(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRelatedFeatureQueryResult extends com.arcgismaps.internal.jni.CoreFeatureSet {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRelatedFeatureQueryResult>;
					public mHandle: number;
					public static createCoreRelatedFeatureQueryResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRelatedFeatureQueryResult;
					public getRelationshipInfo(): com.arcgismaps.internal.jni.CoreRelationshipInfo;
					public finalize(): void;
					public dispose(): void;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getRelatedTable(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public iterator(): com.arcgismaps.internal.jni.CoreIterator;
					public getIsTransferLimitExceeded(): boolean;
					public close(): void;
					public getFeature(): com.arcgismaps.internal.jni.CoreArcGISFeature;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getFields(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRelatedQueryParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRelatedQueryParameters>;
					public mHandle: number;
					public setReturnGeometry(param0: boolean): void;
					public setRelationshipInfo(param0: com.arcgismaps.internal.jni.CoreRelationshipInfo): void;
					public getResultOffset(): number;
					public getWhereClause(): string;
					public static createCoreRelatedQueryParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRelatedQueryParameters;
					public getRelationshipInfo(): com.arcgismaps.internal.jni.CoreRelationshipInfo;
					public finalize(): void;
					public setResultOffset(param0: number): void;
					public dispose(): void;
					public setMaxFeatures(param0: number): void;
					public getMaxFeatures(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRelationshipInfo);
					public getOrderByFields(): com.arcgismaps.internal.jni.CoreVector;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setWhereClause(param0: string): void;
					public close(): void;
					public setOrderByFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getReturnGeometry(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRelationshipCardinality {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRelationshipCardinality>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreRelationshipCardinality;
					public static MANYTOMANY: com.arcgismaps.internal.jni.CoreRelationshipCardinality;
					public static ONETOMANY: com.arcgismaps.internal.jni.CoreRelationshipCardinality;
					public static ONETOONE: com.arcgismaps.internal.jni.CoreRelationshipCardinality;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRelationshipCardinality;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRelationshipCardinality;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRelationshipCardinality>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRelationshipConstraintViolationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType>;
					public static NONE: com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType;
					public static CARDINALITY: com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType;
					public static ORPHANED: com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRelationshipConstraintViolationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRelationshipInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRelationshipInfo>;
					public mHandle: number;
					public getKeyField(): string;
					public getRelatedTableId(): number;
					public finalize(): void;
					public getId(): number;
					public getRelationshipTableId(): number;
					public dispose(): void;
					public getRole(): com.arcgismaps.internal.jni.CoreRelationshipRole;
					public getIsComposite(): boolean;
					public getKeyFieldInRelationshipTable(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public static createCoreRelationshipInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRelationshipInfo;
					public getCardinality(): com.arcgismaps.internal.jni.CoreRelationshipCardinality;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRelationshipPopupElement extends com.arcgismaps.internal.jni.CorePopupElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRelationshipPopupElement>;
					public getTitle(): string;
					public setDescription(param0: string): void;
					public getDisplayCount(): number;
					public setDisplayCount(param0: number): void;
					public setTitle(param0: string): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getRelationshipId(): number;
					public getOrderByFields(): com.arcgismaps.internal.jni.CoreVector;
					public constructor();
					public toJSON(): string;
					public static createCoreRelationshipPopupElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRelationshipPopupElement;
					public getDescription(): string;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRelationshipRole {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRelationshipRole>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreRelationshipRole;
					public static DESTINATION: com.arcgismaps.internal.jni.CoreRelationshipRole;
					public static ORIGIN: com.arcgismaps.internal.jni.CoreRelationshipRole;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRelationshipRole;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRelationshipRole;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRelationshipRole>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRenderer implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRenderer>;
					public mHandle: number;
					public getSymbolForFeature(param0: com.arcgismaps.internal.jni.CoreFeature): com.arcgismaps.internal.jni.CoreSymbol;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getSymbolForDynamicEntityWithAttributeOverrides(param0: com.arcgismaps.internal.jni.CoreDynamicEntity, param1: boolean): com.arcgismaps.internal.jni.CoreSymbol;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getSymbolForGraphicWithAttributeOverrides(param0: com.arcgismaps.internal.jni.CoreGraphic, param1: boolean): com.arcgismaps.internal.jni.CoreSymbol;
					public setSceneProperties(param0: com.arcgismaps.internal.jni.CoreRendererSceneProperties): void;
					public constructor();
					public toJSON(): string;
					public close(): void;
					public getSymbolForFeatureWithAttributeOverrides(param0: com.arcgismaps.internal.jni.CoreFeature, param1: boolean): com.arcgismaps.internal.jni.CoreSymbol;
					public getRotationType(): com.arcgismaps.internal.jni.CoreRotationType;
					public getSymbolForGraphic(param0: com.arcgismaps.internal.jni.CoreGraphic): com.arcgismaps.internal.jni.CoreSymbol;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreRenderer;
					public getInstanceId(): java.lang.Long;
					public getSceneProperties(): com.arcgismaps.internal.jni.CoreRendererSceneProperties;
					public getHash(): number;
					public getSymbolForDynamicEntityObservationWithAttributeOverrides(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservation, param1: boolean): com.arcgismaps.internal.jni.CoreSymbol;
					public dispose(): void;
					public clone(): com.arcgismaps.internal.jni.CoreRenderer;
					public static createCoreRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRenderer;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRenderer;
					public getObjectType(): com.arcgismaps.internal.jni.CoreRendererType;
					public equals(param0: com.arcgismaps.internal.jni.CoreRenderer): boolean;
					public getSymbolForDynamicEntityObservation(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservation): com.arcgismaps.internal.jni.CoreSymbol;
					public getRotationExpression(): string;
					public static nativeDestroy(param0: number): void;
					public getSymbolForDynamicEntity(param0: com.arcgismaps.internal.jni.CoreDynamicEntity): com.arcgismaps.internal.jni.CoreSymbol;
					public setRotationExpression(param0: string): void;
					public setRotationType(param0: com.arcgismaps.internal.jni.CoreRotationType): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRendererClassificationMethod {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRendererClassificationMethod>;
					public static DEFINEDINTERVAL: com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public static EQUALINTERVAL: com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public static GEOMETRICALINTERVAL: com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public static NATURALBREAKS: com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public static QUANTILE: com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public static STANDARDDEVIATION: com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public static MANUAL: com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRendererClassificationMethod>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRendererNormalizationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRendererNormalizationType>;
					public static BYFIELD: com.arcgismaps.internal.jni.CoreRendererNormalizationType;
					public static BYLOG: com.arcgismaps.internal.jni.CoreRendererNormalizationType;
					public static BYPERCENTOFTOTAL: com.arcgismaps.internal.jni.CoreRendererNormalizationType;
					public static NONE: com.arcgismaps.internal.jni.CoreRendererNormalizationType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRendererNormalizationType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRendererNormalizationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRendererNormalizationType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRendererSceneProperties {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRendererSceneProperties>;
					public mHandle: number;
					public getHeadingExpression(): string;
					public setRollExpression(param0: string): void;
					public finalize(): void;
					public dispose(): void;
					public setExtrusionExpression(param0: string): void;
					public getExtrusionExpression(): string;
					public setPitchExpression(param0: string): void;
					public static createCoreRendererScenePropertiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRendererSceneProperties;
					public setHeadingExpression(param0: string): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreExtrusionMode);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getPitchExpression(): string;
					public close(): void;
					public getRollExpression(): string;
					public constructor(param0: string, param1: string, param2: string);
					public getExtrusionMode(): com.arcgismaps.internal.jni.CoreExtrusionMode;
					public getHandle(): number;
					public setExtrusionMode(param0: com.arcgismaps.internal.jni.CoreExtrusionMode): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRendererType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRendererType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreRendererType;
					public static CLASSBREAKSRENDERER: com.arcgismaps.internal.jni.CoreRendererType;
					public static DICTIONARYRENDERER: com.arcgismaps.internal.jni.CoreRendererType;
					public static SIMPLERENDERER: com.arcgismaps.internal.jni.CoreRendererType;
					public static UNIQUEVALUERENDERER: com.arcgismaps.internal.jni.CoreRendererType;
					public static UNSUPPORTEDRENDERER: com.arcgismaps.internal.jni.CoreRendererType;
					public static HEATMAPRENDERER: com.arcgismaps.internal.jni.CoreRendererType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRendererType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRendererType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRendererType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRenderingRule {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRenderingRule>;
					public mHandle: number;
					public getRenderingRuleInfo(): com.arcgismaps.internal.jni.CoreRenderingRuleInfo;
					public constructor(param0: string);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getRenderingRuleJSON(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRenderingRuleInfo);
					public static createCoreRenderingRuleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRenderingRule;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRenderingRuleInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRenderingRuleInfo>;
					public mHandle: number;
					public constructor(param0: string);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public static createCoreRenderingRuleInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRenderingRuleInfo;
					public close(): void;
					public dispose(): void;
					public getDescription(): string;
					public getHelp(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRequest implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRequest>;
					public mHandle: number;
					public getCredential(): com.arcgismaps.internal.jni.CoreArcGISCredential;
					public getIsDataAlreadyCached(): boolean;
					public finalize(): void;
					public handleResponseWithHTTPStatusCode(param0: androidNative.Array<number>, param1: string, param2: number, param3: any): void;
					public getParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public getSourceType(): com.arcgismaps.internal.jni.CoreRequestSourceType;
					public handleResponseWithResponse(param0: androidNative.Array<number>, param1: string, param2: string, param3: number, param4: any, param5: any): void;
					public getHTTPOperation(): com.arcgismaps.internal.jni.CoreHTTPOperation;
					public setCancelRequestCallback(param0: com.arcgismaps.internal.jni.CoreCancelRequestCallbackListener): void;
					public handleCachedResponse(): void;
					public constructor();
					public close(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreRequestType;
					public setAPIKey(param0: string): void;
					public getURI(): string;
					public getRequestContext(): any;
					public getBody(): com.arcgismaps.internal.jni.CoreByteArray;
					public getCanceled(): boolean;
					public getInstanceId(): java.lang.Long;
					public getEtag(): string;
					public getAPIKey(): string;
					public dispose(): void;
					public getRequestId(): number;
					public getContentType(): string;
					public onCancelRequest(): void;
					public getHeaders(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRequest;
					public getAuthenticationMode(): com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode;
					public static nativeDestroy(param0: number): void;
					public getAttachments(): com.arcgismaps.internal.jni.CoreArray;
					public handleResponse(param0: androidNative.Array<number>, param1: string, param2: string, param3: number, param4: any): void;
					public static createCoreRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRequest;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRequestAttachment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRequestAttachment>;
					public mHandle: number;
					public getData(): com.arcgismaps.internal.jni.CoreByteArray;
					public getFileName(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getParameterName(): string;
					public getContentType(): string;
					public static createCoreRequestAttachmentFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRequestAttachment;
					public getEncodedData(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRequestRequiredCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						requestRequired(param0: com.arcgismaps.internal.jni.CoreRequest): void;
					});
					public constructor();
					public requestRequired(param0: com.arcgismaps.internal.jni.CoreRequest): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRequestSourceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRequestSourceType>;
					public static OTHER: com.arcgismaps.internal.jni.CoreRequestSourceType;
					public static PICTUREMARKERSYMBOL: com.arcgismaps.internal.jni.CoreRequestSourceType;
					public static UNKNOWNLAYER: com.arcgismaps.internal.jni.CoreRequestSourceType;
					public static PICTUREFILLSYMBOL: com.arcgismaps.internal.jni.CoreRequestSourceType;
					public static MODELSYMBOL: com.arcgismaps.internal.jni.CoreRequestSourceType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRequestSourceType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRequestSourceType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRequestSourceType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRequestType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRequestType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreRequestType;
					public static LOADREQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public static TILEREQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public static IMAGEREQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public static JOBREQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public static FILEREQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public static SCENEREQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public static SERVICEREQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public static RASTERREQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public static JSONREQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public static REQUEST: com.arcgismaps.internal.jni.CoreRequestType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRequestType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRequestType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRequestType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRequestable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRequestable>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreRequestable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					});
					public constructor();
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRequiredCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRequiredCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreRequiredCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						required(param0: com.arcgismaps.internal.jni.CoreWebSocketConnection, param1: com.arcgismaps.internal.jni.CoreElementReference): void;
					});
					public constructor();
					public required(param0: com.arcgismaps.internal.jni.CoreWebSocketConnection, param1: com.arcgismaps.internal.jni.CoreElementReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRerouteCompletedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRerouteCompletedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreRerouteCompletedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						rerouteCompleted(param0: com.arcgismaps.internal.jni.CoreTrackingStatus, param1: com.arcgismaps.internal.jni.CoreError): void;
					});
					public constructor();
					public rerouteCompleted(param0: com.arcgismaps.internal.jni.CoreTrackingStatus, param1: com.arcgismaps.internal.jni.CoreError): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRerouteStartedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRerouteStartedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreRerouteStartedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						rerouteStarted(): void;
					});
					public constructor();
					public rerouteStarted(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreReroutingParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreReroutingParameters>;
					public mHandle: number;
					public getVisitFirstStopOnStart(): boolean;
					public getRouteParameters(): com.arcgismaps.internal.jni.CoreRouteParameters;
					public setVisitFirstStopOnStart(param0: boolean): void;
					public finalize(): void;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRouteTask, param1: com.arcgismaps.internal.jni.CoreRouteParameters);
					public setNetworkEdgeGeometries(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable): void;
					public static createCoreReroutingParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreReroutingParameters;
					public getRouteTask(): com.arcgismaps.internal.jni.CoreRouteTask;
					public getStrategy(): com.arcgismaps.internal.jni.CoreReroutingStrategy;
					public setStrategy(param0: com.arcgismaps.internal.jni.CoreReroutingStrategy): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getNetworkEdgeGeometries(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreReroutingStrategy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreReroutingStrategy>;
					public static TONEXTWAYPOINT: com.arcgismaps.internal.jni.CoreReroutingStrategy;
					public static TONEXTSTOP: com.arcgismaps.internal.jni.CoreReroutingStrategy;
					public static RESEQUENCESTOPSONLY: com.arcgismaps.internal.jni.CoreReroutingStrategy;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreReroutingStrategy;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreReroutingStrategy;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreReroutingStrategy>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreResourceProvider {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreResourceProvider>;
					public mHandle: number;
					public onGetResourceString(param0: androidNative.Array<number>, param1: androidNative.Array<number>, param2: number, param3: number): void;
					public setGetResourceStringCallback(param0: com.arcgismaps.internal.jni.CoreGetResourceStringCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreResourceProviderFromHandle(param0: number): com.arcgismaps.internal.jni.CoreResourceProvider;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreResourceable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreResourceable>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreResourceable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						setResourceProvider(param0: com.arcgismaps.internal.jni.CoreResourceProvider): void;
					});
					public constructor();
					public setResourceProvider(param0: com.arcgismaps.internal.jni.CoreResourceProvider): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRestrictionAttribute {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRestrictionAttribute>;
					public mHandle: number;
					public static createCoreRestrictionAttributeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRestrictionAttribute;
					public getParameterValues(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getRestrictionUsageParameterName(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreReturnLayerAttachmentOption {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption>;
					public static NONE: com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption;
					public static ALLLAYERS: com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption;
					public static READONLYLAYERS: com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption;
					public static EDITABLELAYERS: com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreReverseGeocodeParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreReverseGeocodeParameters>;
					public mHandle: number;
					public static createCoreReverseGeocodeParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreReverseGeocodeParameters;
					public finalize(): void;
					public dispose(): void;
					public setFeatureTypes(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getFeatureTypes(): com.arcgismaps.internal.jni.CoreVector;
					public setOutputSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public getOutputLanguageCode(): string;
					public setForStorage(param0: boolean): void;
					public setResultAttributeNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setMaxResults(param0: number): void;
					public getResultAttributeNames(): com.arcgismaps.internal.jni.CoreVector;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getForStorage(): boolean;
					public getMaxDistance(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setMaxDistance(param0: number): void;
					public setOutputLanguageCode(param0: string): void;
					public close(): void;
					public getMaxResults(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRollChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRollChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreRollChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						rollChanged(): void;
					});
					public constructor();
					public rollChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRotationChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRotationChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreRotationChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						rotationChanged(): void;
					});
					public constructor();
					public rotationChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRotationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRotationType>;
					public static ARITHMETIC: com.arcgismaps.internal.jni.CoreRotationType;
					public static GEOGRAPHIC: com.arcgismaps.internal.jni.CoreRotationType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRotationType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRotationType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRotationType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRoute {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRoute>;
					public mHandle: number;
					public static createCoreRouteFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRoute;
					public getStops(): com.arcgismaps.internal.jni.CoreArray;
					public getTravelTime(): number;
					public getViolationTime(): number;
					public getWaitTime(): number;
					public getEndTimeShift(): number;
					public finalize(): void;
					public getStartTimeShift(): number;
					public dispose(): void;
					public getDirectionManeuvers(): com.arcgismaps.internal.jni.CoreArray;
					public getTotalLength(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getEndTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public getRouteName(): string;
					public getTotalTime(): number;
					public getCost(param0: string): number;
					public getRouteGeometry(): com.arcgismaps.internal.jni.CorePolyline;
					public getHandle(): number;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRouteParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRouteParameters>;
					public mHandle: number;
					public getTravelMode(): com.arcgismaps.internal.jni.CoreTravelMode;
					public getAccumulateAttributeNames(): com.arcgismaps.internal.jni.CoreVector;
					public setAccumulateAttributeNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setReturnPointBarriers(param0: boolean): void;
					public getReturnPolylineBarriers(): boolean;
					public finalize(): void;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public constructor();
					public getPreserveFirstStop(): boolean;
					public close(): void;
					public getReturnRoutes(): boolean;
					public setReturnStops(param0: boolean): void;
					public getDirectionsDistanceUnits(): com.arcgismaps.internal.jni.CoreUnitSystem;
					public setPolylineBarriersWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public setReturnDirections(param0: boolean): void;
					public clearStops(): void;
					public setFindBestSequence(param0: boolean): void;
					public setPolygonBarriersWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public clearPolygonBarriers(): void;
					public setPreserveLastStop(param0: boolean): void;
					public setPolygonBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setDirectionsStyle(param0: com.arcgismaps.internal.jni.CoreDirectionsStyle): void;
					public setStops(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getHandle(): number;
					public getReturnPolygonBarriers(): boolean;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public setReturnPolygonBarriers(param0: boolean): void;
					public setReturnPolylineBarriers(param0: boolean): void;
					public getDirectionsLanguage(): string;
					public clearPolylineBarriers(): void;
					public getRouteShapeType(): com.arcgismaps.internal.jni.CoreRouteShapeType;
					public setTravelMode(param0: com.arcgismaps.internal.jni.CoreTravelMode): void;
					public setStartTime(param0: com.arcgismaps.internal.jni.CoreDateTime): void;
					public setSearchWhereClause(param0: string, param1: string): void;
					public getFindBestSequence(): boolean;
					public getReturnPointBarriers(): boolean;
					public setPolylineBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setDirectionsDistanceUnits(param0: com.arcgismaps.internal.jni.CoreUnitSystem): void;
					public getReturnDirections(): boolean;
					public setReturnRoutes(param0: boolean): void;
					public clearPointBarriers(): void;
					public setRouteShapeType(param0: com.arcgismaps.internal.jni.CoreRouteShapeType): void;
					public dispose(): void;
					public setOutputSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public static createCoreRouteParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRouteParameters;
					public getPreserveLastStop(): boolean;
					public setStopsWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public setDirectionsLanguage(param0: string): void;
					public setPointBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getDirectionsStyle(): com.arcgismaps.internal.jni.CoreDirectionsStyle;
					public static nativeDestroy(param0: number): void;
					public setPreserveFirstStop(param0: boolean): void;
					public getSearchWhereClause(param0: string): string;
					public clone(): com.arcgismaps.internal.jni.CoreRouteParameters;
					public getReturnStops(): boolean;
					public setPointBarriersWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRouteResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRouteResult>;
					public mHandle: number;
					public getDirectionsLanguage(): string;
					public static createCoreRouteResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRouteResult;
					public finalize(): void;
					public getRoutes(): com.arcgismaps.internal.jni.CoreArray;
					public dispose(): void;
					public getMessages(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getPolygonBarriers(): com.arcgismaps.internal.jni.CoreArray;
					public getPolylineBarriers(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public getPointBarriers(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRouteShapeType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRouteShapeType>;
					public static NONE: com.arcgismaps.internal.jni.CoreRouteShapeType;
					public static STRAIGHTLINE: com.arcgismaps.internal.jni.CoreRouteShapeType;
					public static TRUESHAPEWITHMEASURES: com.arcgismaps.internal.jni.CoreRouteShapeType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreRouteShapeType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreRouteShapeType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreRouteShapeType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRouteTask implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreLoadable, com.arcgismaps.internal.jni.CoreResourceable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRouteTask>;
					public mHandle: number;
					public constructor(param0: string);
					public constructor(param0: com.arcgismaps.internal.jni.CoreTransportationNetworkDataset);
					public finalize(): void;
					public createParametersAsync(param0: com.arcgismaps.internal.jni.CoreFeatureCollection): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public createDefaultParametersAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public constructor(param0: string, param1: string);
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public static createCoreRouteTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRouteTask;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public static createRouteResultAsync(param0: com.arcgismaps.internal.jni.CorePortalItem): com.arcgismaps.internal.jni.CoreTask;
					public onDoneLoading(param0: number): void;
					public setAPIKey(param0: string): void;
					public createParametersWithPortalItemAsync(param0: com.arcgismaps.internal.jni.CorePortalItem): com.arcgismaps.internal.jni.CoreTask;
					public onRequestRequired(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public dispose(): void;
					public cancelLoad(): void;
					public refreshRouteAsync(param0: com.arcgismaps.internal.jni.CoreRouteResult, param1: number, param2: com.arcgismaps.internal.jni.CoreTravelMode, param3: number, param4: com.arcgismaps.internal.jni.CoreLocation, param5: com.arcgismaps.internal.jni.CoreDateTime): com.arcgismaps.internal.jni.CoreTask;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public static createRouteResultWithFeatureCollectionAsync(param0: com.arcgismaps.internal.jni.CoreFeatureCollection): com.arcgismaps.internal.jni.CoreTask;
					public getRouteTaskInfo(): com.arcgismaps.internal.jni.CoreRouteTaskInfo;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public getTransportationNetworkDataset(): com.arcgismaps.internal.jni.CoreTransportationNetworkDataset;
					public setResourceProvider(param0: com.arcgismaps.internal.jni.CoreResourceProvider): void;
					public solveRouteAsync(param0: com.arcgismaps.internal.jni.CoreRouteParameters): com.arcgismaps.internal.jni.CoreTask;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRouteTaskInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRouteTaskInfo>;
					public mHandle: number;
					public static createCoreRouteTaskInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRouteTaskInfo;
					public getDirectionsLanguage(): string;
					public finalize(): void;
					public getAccumulateAttributeNames(): com.arcgismaps.internal.jni.CoreArray;
					public getRouteShapeType(): com.arcgismaps.internal.jni.CoreRouteShapeType;
					public getTravelModes(): com.arcgismaps.internal.jni.CoreArray;
					public getDirectionsSupport(): com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getNetworkName(): string;
					public getMaxLocatingDistance(): number;
					public getFindBestSequence(): boolean;
					public constructor();
					public getCostAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public getPreserveFirstStop(): boolean;
					public close(): void;
					public getSupportedRestrictionUsageParameterValues(): com.arcgismaps.internal.jni.CoreArray;
					public getDirectionsDistanceUnits(): com.arcgismaps.internal.jni.CoreUnitSystem;
					public getSupportsRerouting(): boolean;
					public dispose(): void;
					public getRestrictionAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public getPreserveLastStop(): boolean;
					public getSupportedLanguages(): com.arcgismaps.internal.jni.CoreArray;
					public getDirectionsStyle(): com.arcgismaps.internal.jni.CoreDirectionsStyle;
					public static nativeDestroy(param0: number): void;
					public getDefaultTravelModeName(): string;
					public getHandle(): number;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRouteTracker extends com.arcgismaps.internal.jni.CoreResourceable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRouteTracker>;
					public mHandle: number;
					public setVoiceGuidanceUnitSystem(param0: com.arcgismaps.internal.jni.CoreUnitSystem): void;
					public cancelRerouting(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRouteResult, param1: number, param2: boolean);
					public trackLocationAsync(param0: com.arcgismaps.internal.jni.CoreLocation): com.arcgismaps.internal.jni.CoreTask;
					public finalize(): void;
					public getIsReroutingEnabled(): boolean;
					public onRerouteStarted(): void;
					public updateRouteResultAsync(param0: com.arcgismaps.internal.jni.CoreRouteResult, param1: number): com.arcgismaps.internal.jni.CoreTask;
					public enableReroutingDeprecatedAsync(param0: com.arcgismaps.internal.jni.CoreRouteTask, param1: com.arcgismaps.internal.jni.CoreRouteParameters, param2: com.arcgismaps.internal.jni.CoreReroutingStrategy, param3: boolean): com.arcgismaps.internal.jni.CoreTask;
					public setTrackingStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreTrackingStatusChangedCallbackListener): void;
					public constructor();
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRouteResult, param1: number);
					public switchToNextDestinationAsync(): com.arcgismaps.internal.jni.CoreTask;
					public generateVoiceGuidance(): com.arcgismaps.internal.jni.CoreVoiceGuidance;
					public disableRerouting(): void;
					public getTrackingStatus(): com.arcgismaps.internal.jni.CoreTrackingStatus;
					public setNewVoiceGuidanceCallback(param0: com.arcgismaps.internal.jni.CoreNewVoiceGuidanceCallbackListener): void;
					public onTrackingStatusChanged(param0: number): void;
					public getVoiceGuidanceUnitSystem(): com.arcgismaps.internal.jni.CoreUnitSystem;
					public dispose(): void;
					public onNewVoiceGuidance(param0: number): void;
					public enableReroutingAsync(param0: com.arcgismaps.internal.jni.CoreReroutingParameters): com.arcgismaps.internal.jni.CoreTask;
					public setRerouteCompletedCallback(param0: com.arcgismaps.internal.jni.CoreRerouteCompletedCallbackListener): void;
					public static createCoreRouteTrackerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRouteTracker;
					public getSkipCoincidentStops(): boolean;
					public onSpeechEngineReady(param0: number): void;
					public setSpeechEngineReadyCallback(param0: com.arcgismaps.internal.jni.CoreSpeechEngineReadyCallbackListener): void;
					public setRerouteStartedCallback(param0: com.arcgismaps.internal.jni.CoreRerouteStartedCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public onRerouteCompleted(param0: number, param1: number): void;
					public setResourceProvider(param0: com.arcgismaps.internal.jni.CoreResourceProvider): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRouteTrackerLocationDataSource extends com.arcgismaps.internal.jni.CoreLocationDataSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRouteTrackerLocationDataSource>;
					public static createCoreRouteTrackerLocationDataSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRouteTrackerLocationDataSource;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreRouteTracker, param1: com.arcgismaps.internal.jni.CoreLocationDataSource);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreRouteTrackerLogger {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreRouteTrackerLogger>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRouteTracker, param1: string);
					public finalize(): void;
					public dispose(): void;
					public getLocationsSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getSessionName(): string;
					public getBaselineDatabasePath(): string;
					public getFeatureBuffer(): com.arcgismaps.internal.jni.CoreArray;
					public getIsFeatureQueryInProgress(): boolean;
					public startGeodatabaseLogging(): void;
					public setSessionName(param0: string): void;
					public getIsRerouteTaskInProgress(): boolean;
					public stopGeodatabaseLogging(): void;
					public static createCoreRouteTrackerLoggerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreRouteTrackerLogger;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setBaselineDatabasePath(param0: string): void;
					public getFeatureCache(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public setLocationsSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSatellitesChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSatellitesChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreSatellitesChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						satellitesChanged(param0: com.arcgismaps.internal.jni.CoreArray): void;
					});
					public constructor();
					public satellitesChanged(param0: com.arcgismaps.internal.jni.CoreArray): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreScaleChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreScaleChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreScaleChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						scaleChanged(): void;
					});
					public constructor();
					public scaleChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreScaleDisplayFilterDefinition extends com.arcgismaps.internal.jni.CoreDisplayFilterDefinition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreScaleDisplayFilterDefinition>;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public static createCoreScaleDisplayFilterDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreScaleDisplayFilterDefinition;
					public getFilters(): com.arcgismaps.internal.jni.CoreVector;
					public setFilters(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreScaleRangeDisplayFilter extends com.arcgismaps.internal.jni.CoreDisplayFilter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreScaleRangeDisplayFilter>;
					public constructor(param0: string, param1: string);
					public getMaxScale(): number;
					public getMinScale(): number;
					public setMaxScale(param0: number): void;
					public constructor(param0: string, param1: string, param2: number, param3: number);
					public getInstanceId(): java.lang.Long;
					public constructor();
					public setMinScale(param0: number): void;
					public static createCoreScaleRangeDisplayFilterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreScaleRangeDisplayFilter;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreScene extends com.arcgismaps.internal.jni.CoreGeoModel {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreScene>;
					public static createCoreSceneFromHandle(param0: number): com.arcgismaps.internal.jni.CoreScene;
					public getBaseSurface(): com.arcgismaps.internal.jni.CoreSurface;
					public constructor(param0: string);
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSceneViewTilingScheme);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public cancelLoad(): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreScene;
					public load(): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreBasemapStyle);
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setBaseSurface(param0: com.arcgismaps.internal.jni.CoreSurface): void;
					public getSceneViewTilingScheme(): com.arcgismaps.internal.jni.CoreSceneViewTilingScheme;
					public constructor(param0: com.arcgismaps.internal.jni.CoreBasemap);
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSceneLayerDataType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSceneLayerDataType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreSceneLayerDataType;
					public static SCENEOBJECT: com.arcgismaps.internal.jni.CoreSceneLayerDataType;
					public static POINT: com.arcgismaps.internal.jni.CoreSceneLayerDataType;
					public static INTEGRATEDMESH: com.arcgismaps.internal.jni.CoreSceneLayerDataType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSceneLayerDataType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSceneLayerDataType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSceneLayerDataType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSceneLayerPolygonFilter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilter>;
					public mHandle: number;
					public setPolygons(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship);
					public static createCoreSceneLayerPolygonFilterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilter;
					public getPolygons(): com.arcgismaps.internal.jni.CoreVector;
					public setSpatialRelationship(param0: com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship): void;
					public getSpatialRelationship(): com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSceneLayerPolygonFilterSpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship>;
					public static DISJOINT: com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship;
					public static CONTAINS: com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSceneLocationVisibility {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSceneLocationVisibility>;
					public static VISIBLE: com.arcgismaps.internal.jni.CoreSceneLocationVisibility;
					public static HIDDENBYBASESURFACE: com.arcgismaps.internal.jni.CoreSceneLocationVisibility;
					public static HIDDENBYEARTH: com.arcgismaps.internal.jni.CoreSceneLocationVisibility;
					public static HIDDENBYELEVATION: com.arcgismaps.internal.jni.CoreSceneLocationVisibility;
					public static NOTONSCREEN: com.arcgismaps.internal.jni.CoreSceneLocationVisibility;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSceneLocationVisibility;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSceneLocationVisibility>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSceneLocationVisibility;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSceneRequest extends com.arcgismaps.internal.jni.CoreRequest {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSceneRequest>;
					public getInstanceId(): java.lang.Long;
					public static createCoreSceneRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSceneRequest;
					public getAPIKey(): string;
					public setAPIKey(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSceneSymbolAnchorPosition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition>;
					public static TOP: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition;
					public static BOTTOM: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition;
					public static CENTER: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition;
					public static ORIGIN: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSceneView extends com.arcgismaps.internal.jni.CoreGeoView {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSceneView>;
					public setEnableCaching(param0: boolean): void;
					public screenToLocationAsync(param0: androidNative.Array<number>): com.arcgismaps.internal.jni.CoreTask;
					public getSunTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public finalize(): void;
					public getCurrentViewpointCamera(): com.arcgismaps.internal.jni.CoreCamera;
					public getCameraController(): com.arcgismaps.internal.jni.CoreCameraController;
					public getScene(): com.arcgismaps.internal.jni.CoreScene;
					public setSunTime(param0: com.arcgismaps.internal.jni.CoreDateTime): void;
					public constructor();
					public setScene(param0: com.arcgismaps.internal.jni.CoreScene): void;
					public getAnalysisOverlays(): com.arcgismaps.internal.jni.CoreVector;
					public locationToScreen(param0: com.arcgismaps.internal.jni.CorePoint): com.arcgismaps.internal.jni.CoreLocationToScreenResult;
					public setViewpointCameraAsync(param0: com.arcgismaps.internal.jni.CoreCamera): com.arcgismaps.internal.jni.CoreTask;
					public getImageOverlays(): com.arcgismaps.internal.jni.CoreVector;
					public interactionUpdateZoomToOrigin(param0: number): void;
					public constructor(param0: number, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CorePulseThread);
					public interactionUpdateRotateAroundOrigin(param0: number, param1: number): void;
					public getAtmosphereEffect(): com.arcgismaps.internal.jni.CoreAtmosphereEffect;
					public interactionUpdatePanOrigin(param0: number, param1: number): void;
					public setViewpointCamera(param0: com.arcgismaps.internal.jni.CoreCamera): void;
					public getFieldOfViewDistortionRatio(): number;
					public interactionSetOrigin(param0: androidNative.Array<number>): void;
					public onUsedMemory(): void;
					public setTotalMemoryCallback(param0: com.arcgismaps.internal.jni.CoreTotalMemoryRequestCallbackCallbackListener): void;
					public setImageOverlays(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public interactionCancelFlick(): void;
					public interactionUpdateHeadingAndPitch(param0: number, param1: number): void;
					public getAmbientLightColor(): com.arcgismaps.internal.jni.CoreColor;
					public setCameraController(param0: com.arcgismaps.internal.jni.CoreCameraController): void;
					public setFieldOfViewFromLensIntrinsics(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.arcgismaps.internal.jni.CoreDeviceOrientation): void;
					public getSpaceEffect(): com.arcgismaps.internal.jni.CoreSpaceEffect;
					public screenToBaseSurface(param0: androidNative.Array<number>): com.arcgismaps.internal.jni.CorePoint;
					public setUsedMemoryCallback(param0: com.arcgismaps.internal.jni.CoreUsedMemoryRequestCallbackCallbackListener): void;
					public setFieldOfViewAndDistortionRatio(param0: number, param1: number): void;
					public static createCoreSceneViewFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSceneView;
					public getEnableCaching(): boolean;
					public interactionActivateFlick(): void;
					public setAtmosphereEffect(param0: com.arcgismaps.internal.jni.CoreAtmosphereEffect): void;
					public setViewpointCameraWithDurationAsync(param0: com.arcgismaps.internal.jni.CoreCamera, param1: number): com.arcgismaps.internal.jni.CoreTask;
					public setUsedMemory(param0: number): void;
					public setTotalMemory(param0: number): void;
					public dispose(): void;
					public setFieldOfView(param0: number): void;
					public setAmbientLightColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getFieldOfView(): number;
					public onTotalMemory(): void;
					public setSpaceEffect(param0: com.arcgismaps.internal.jni.CoreSpaceEffect): void;
					public setAnalysisOverlays(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setSunLighting(param0: com.arcgismaps.internal.jni.CoreLightingMode): void;
					public getSunLighting(): com.arcgismaps.internal.jni.CoreLightingMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSceneViewTilingScheme {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSceneViewTilingScheme>;
					public static GEOGRAPHIC: com.arcgismaps.internal.jni.CoreSceneViewTilingScheme;
					public static WEBMERCATOR: com.arcgismaps.internal.jni.CoreSceneViewTilingScheme;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSceneViewTilingScheme;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSceneViewTilingScheme;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSceneViewTilingScheme>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreScreenCoordinateType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreScreenCoordinateType>;
					public static DIPS: com.arcgismaps.internal.jni.CoreScreenCoordinateType;
					public static PIXELS: com.arcgismaps.internal.jni.CoreScreenCoordinateType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreScreenCoordinateType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreScreenCoordinateType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreScreenCoordinateType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSegment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSegment>;
					public mHandle: number;
					public equals(param0: com.arcgismaps.internal.jni.CoreSegment): boolean;
					public getHash(): number;
					public finalize(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreSegmentType;
					public dispose(): void;
					public getIsClosed(): boolean;
					public getEndPoint(): com.arcgismaps.internal.jni.CorePoint;
					public getIsCurve(): boolean;
					public getStartPoint(): com.arcgismaps.internal.jni.CorePoint;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSegment;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static createCoreSegmentFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSegment;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSegmentType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSegmentType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreSegmentType;
					public static LINESEGMENT: com.arcgismaps.internal.jni.CoreSegmentType;
					public static CUBICBEZIERSEGMENT: com.arcgismaps.internal.jni.CoreSegmentType;
					public static ELLIPTICARCSEGMENT: com.arcgismaps.internal.jni.CoreSegmentType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSegmentType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSegmentType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSegmentType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSelectedElementChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSelectedElementChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreSelectedElementChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						selectedElementChanged(param0: com.arcgismaps.internal.jni.CoreGeometryEditorElement): void;
					});
					public constructor();
					public selectedElementChanged(param0: com.arcgismaps.internal.jni.CoreGeometryEditorElement): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSelectionMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSelectionMode>;
					public static ADD: com.arcgismaps.internal.jni.CoreSelectionMode;
					public static NEW: com.arcgismaps.internal.jni.CoreSelectionMode;
					public static SUBTRACT: com.arcgismaps.internal.jni.CoreSelectionMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSelectionMode>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSelectionMode;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSelectionMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSelectionProperties {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSelectionProperties>;
					public mHandle: number;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreSelectionPropertiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSelectionProperties;
					public constructor(param0: com.arcgismaps.internal.jni.CoreColor);
					public getHandle(): number;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSensorType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSensorType>;
					public static GPS: com.arcgismaps.internal.jni.CoreSensorType;
					public static IBEACON: com.arcgismaps.internal.jni.CoreSensorType;
					public static MAGNETOMETER: com.arcgismaps.internal.jni.CoreSensorType;
					public static ACCELEROMETER: com.arcgismaps.internal.jni.CoreSensorType;
					public static GYROSCOPE: com.arcgismaps.internal.jni.CoreSensorType;
					public static WIFI: com.arcgismaps.internal.jni.CoreSensorType;
					public static APPLEIPS: com.arcgismaps.internal.jni.CoreSensorType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSensorType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSensorType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSensorType>;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaFacility {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaFacility>;
					public mHandle: number;
					public getCurrentBearingTolerance(): number;
					public setNavigationSpeed(param0: number): void;
					public finalize(): void;
					public setNavigationLatency(param0: number): void;
					public getFacilityId(): number;
					public constructor();
					public close(): void;
					public setCurbApproach(param0: com.arcgismaps.internal.jni.CoreCurbApproach): void;
					public getNavigationSpeed(): number;
					public setNetworkLocation(param0: com.arcgismaps.internal.jni.CoreNetworkLocation): void;
					public clone(): com.arcgismaps.internal.jni.CoreServiceAreaFacility;
					public getLocationStatus(): com.arcgismaps.internal.jni.CoreLocationStatus;
					public getImpedanceCutoffs(): com.arcgismaps.internal.jni.CoreVector;
					public getNetworkLocation(): com.arcgismaps.internal.jni.CoreNetworkLocation;
					public getCurrentBearing(): number;
					public setCurrentBearingTolerance(param0: number): void;
					public dispose(): void;
					public getDistanceToNetworkLocation(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint);
					public getCurbApproach(): com.arcgismaps.internal.jni.CoreCurbApproach;
					public setFacilityId(param0: number): void;
					public getGeometry(): com.arcgismaps.internal.jni.CorePoint;
					public setName(param0: string): void;
					public setCurrentBearing(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getNavigationLatency(): number;
					public setAddedCost(param0: string, param1: number): void;
					public static createCoreServiceAreaFacilityFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaFacility;
					public setImpedanceCutoffs(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getAddedCost(param0: string): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaOverlapGeometry {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry>;
					public static OVERLAP: com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry;
					public static DISSOLVE: com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry;
					public static SPLIT: com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry>;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaParameters>;
					public mHandle: number;
					public setReturnPolygons(param0: boolean): void;
					public getTravelMode(): com.arcgismaps.internal.jni.CoreTravelMode;
					public getAccumulateAttributeNames(): com.arcgismaps.internal.jni.CoreVector;
					public setAccumulateAttributeNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setReturnPointBarriers(param0: boolean): void;
					public getReturnPolylineBarriers(): boolean;
					public finalize(): void;
					public setReturnPolylines(param0: boolean): void;
					public setFacilities(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public constructor();
					public close(): void;
					public clearFacilities(): void;
					public setPolylineBarriersWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public clone(): com.arcgismaps.internal.jni.CoreServiceAreaParameters;
					public getGeometryAtCutoff(): com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry;
					public setPolygonBarriersWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public setDefaultImpedanceCutoffs(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public clearPolygonBarriers(): void;
					public setFacilitiesWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public setPolygonBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getHandle(): number;
					public getReturnPolygonBarriers(): boolean;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public setGeometryAtCutoff(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry): void;
					public setReturnPolygonBarriers(param0: boolean): void;
					public setReturnPolylineBarriers(param0: boolean): void;
					public getPolygonBufferDistance(): number;
					public clearPolylineBarriers(): void;
					public setTravelMode(param0: com.arcgismaps.internal.jni.CoreTravelMode): void;
					public static createCoreServiceAreaParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaParameters;
					public setStartTime(param0: com.arcgismaps.internal.jni.CoreDateTime): void;
					public setSearchWhereClause(param0: string, param1: string): void;
					public getDefaultImpedanceCutoffs(): com.arcgismaps.internal.jni.CoreVector;
					public getReturnPointBarriers(): boolean;
					public getReturnPolylines(): boolean;
					public setPolylineBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setPolygonDetail(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail): void;
					public getTravelDirection(): com.arcgismaps.internal.jni.CoreTravelDirection;
					public getGeometryAtOverlap(): com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry;
					public clearPointBarriers(): void;
					public setPolygonBufferDistance(param0: number): void;
					public setTravelDirection(param0: com.arcgismaps.internal.jni.CoreTravelDirection): void;
					public dispose(): void;
					public getReturnPolygons(): boolean;
					public setOutputSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public setPointBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static nativeDestroy(param0: number): void;
					public getSearchWhereClause(param0: string): string;
					public setGeometryAtOverlap(param0: com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry): void;
					public setPointBarriersWithFeatureTable(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable, param1: com.arcgismaps.internal.jni.CoreQueryParameters): void;
					public getPolygonDetail(): com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaPolygon {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaPolygon>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreServiceAreaPolygonFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaPolygon;
					public getFromImpedanceCutoff(): number;
					public getHandle(): number;
					public getGeometry(): com.arcgismaps.internal.jni.CorePolygon;
					public getToImpedanceCutoff(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaPolygonCutoffGeometry {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry>;
					public static RINGS: com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry;
					public static DISKS: com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaPolygonDetail {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail>;
					public static GENERALIZED: com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail;
					public static STANDARD: com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail;
					public static HIGH: com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaPolyline {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaPolyline>;
					public mHandle: number;
					public getFromCumulativeCost(param0: string): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getGeometry(): com.arcgismaps.internal.jni.CorePolyline;
					public finalize(): void;
					public getFromNetworkLocation(): com.arcgismaps.internal.jni.CoreNetworkLocation;
					public close(): void;
					public dispose(): void;
					public getToNetworkLocation(): com.arcgismaps.internal.jni.CoreNetworkLocation;
					public getToCumulativeCost(param0: string): number;
					public static createCoreServiceAreaPolylineFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaPolyline;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaResult>;
					public mHandle: number;
					public static createCoreServiceAreaResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaResult;
					public finalize(): void;
					public dispose(): void;
					public getResultPolygons(param0: number): com.arcgismaps.internal.jni.CoreArray;
					public getMessages(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getPolygonBarriers(): com.arcgismaps.internal.jni.CoreArray;
					public getFacilities(): com.arcgismaps.internal.jni.CoreArray;
					public getPolylineBarriers(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public getPointBarriers(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
					public getResultPolylines(param0: number): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaTask implements com.arcgismaps.internal.jni.CoreAPIKeyResource, com.arcgismaps.internal.jni.CoreLoadable, com.arcgismaps.internal.jni.CoreResourceable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaTask>;
					public mHandle: number;
					public constructor(param0: string);
					public constructor(param0: com.arcgismaps.internal.jni.CoreTransportationNetworkDataset);
					public finalize(): void;
					public load(): void;
					public createDefaultParametersAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public constructor(param0: string, param1: string);
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public solveServiceAreaAsync(param0: com.arcgismaps.internal.jni.CoreServiceAreaParameters): com.arcgismaps.internal.jni.CoreTask;
					public setAPIKey(param0: string): void;
					public getServiceAreaTaskInfo(): com.arcgismaps.internal.jni.CoreServiceAreaTaskInfo;
					public onRequestRequired(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public getTransportationNetworkDataset(): com.arcgismaps.internal.jni.CoreTransportationNetworkDataset;
					public setResourceProvider(param0: com.arcgismaps.internal.jni.CoreResourceProvider): void;
					public static createCoreServiceAreaTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaTask;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceAreaTaskInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceAreaTaskInfo>;
					public mHandle: number;
					public getDefaultImpedanceCutoffs(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public getAccumulateAttributeNames(): com.arcgismaps.internal.jni.CoreArray;
					public getPolygonBufferDistance(): number;
					public getTravelModes(): com.arcgismaps.internal.jni.CoreArray;
					public getOutputSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getNetworkName(): string;
					public getMaxLocatingDistance(): number;
					public constructor();
					public getCostAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public getReturnPolylines(): boolean;
					public close(): void;
					public getTravelDirection(): com.arcgismaps.internal.jni.CoreTravelDirection;
					public getSupportedRestrictionUsageParameterValues(): com.arcgismaps.internal.jni.CoreArray;
					public getGeometryAtOverlap(): com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry;
					public dispose(): void;
					public getGeometryAtCutoff(): com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry;
					public getRestrictionAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public getReturnPolygons(): boolean;
					public static createCoreServiceAreaTaskInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceAreaTaskInfo;
					public static nativeDestroy(param0: number): void;
					public getDefaultTravelModeName(): string;
					public getPolygonDetail(): com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail;
					public getHandle(): number;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceCurveGeometryMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode>;
					public static DENSIFYCURVES: com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode;
					public static TRUECURVECLIENT: com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreServiceCurveGeometryMode;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceDocumentInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceDocumentInfo>;
					public mHandle: number;
					public getTitle(): string;
					public static createCoreServiceDocumentInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceDocumentInfo;
					public getTextAntialiasingMode(): com.arcgismaps.internal.jni.CoreTextAntialiasingMode;
					public getComments(): string;
					public finalize(): void;
					public dispose(): void;
					public getCategory(): string;
					public getSubject(): string;
					public getAntialiasingMode(): com.arcgismaps.internal.jni.CoreAntialiasingMode;
					public getAuthor(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getKeywords(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceFeatureTable extends com.arcgismaps.internal.jni.CoreArcGISFeatureTable implements com.arcgismaps.internal.jni.CoreAPIKeyResource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceFeatureTable>;
					public constructor(param0: string);
					public queryRelatedFeaturesWithFieldOptions(param0: com.arcgismaps.internal.jni.CoreArcGISFeature, param1: com.arcgismaps.internal.jni.CoreRelatedQueryParameters, param2: com.arcgismaps.internal.jni.CoreQueryFeatureFields): com.arcgismaps.internal.jni.CoreTask;
					public getGeodatabaseVersion(): string;
					public undoLocalEdits(): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public static createCoreServiceFeatureTableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceFeatureTable;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem, param1: number);
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setFeatureRequestMode(param0: com.arcgismaps.internal.jni.CoreFeatureRequestMode): void;
					public setAPIKey(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreServiceFeatureTable, param1: com.arcgismaps.internal.jni.CoreRelationshipInfo);
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getURI(): string;
					public clearCache(param0: boolean): void;
					public queryFeaturesWithFieldOptions(param0: com.arcgismaps.internal.jni.CoreQueryParameters, param1: com.arcgismaps.internal.jni.CoreQueryFeatureFields): com.arcgismaps.internal.jni.CoreTask;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getAPIKey(): string;
					public getFeatureRequestMode(): com.arcgismaps.internal.jni.CoreFeatureRequestMode;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getServiceGeodatabase(): com.arcgismaps.internal.jni.CoreServiceGeodatabase;
					public getItem(): com.arcgismaps.internal.jni.CoreItem;
					public populateFromService(param0: com.arcgismaps.internal.jni.CoreQueryParameters, param1: boolean, param2: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public applyEdits(): com.arcgismaps.internal.jni.CoreTask;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setDefinitionExpression(param0: string): void;
					public setUsername(param0: string): void;
					public setBufferFactor(param0: number): void;
					public getBufferFactor(): number;
					public setIsPopupEnabled(param0: boolean): void;
					public setGeodatabaseVersion(param0: string): void;
					public getDefinitionExpression(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
					public loadOrRefreshFeatures(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceGeodatabase implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceGeodatabase>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem, param1: com.arcgismaps.internal.jni.CoreFeatureServiceSessionType);
					public fetchVersionsAsync(): com.arcgismaps.internal.jni.CoreTask;
					public constructor(param0: string);
					public finalize(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem);
					public getTable(param0: number): com.arcgismaps.internal.jni.CoreServiceFeatureTable;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public constructor(param0: string, param1: string);
					public retryLoad(): void;
					public constructor(param0: string, param1: string, param2: com.arcgismaps.internal.jni.CoreFeatureServiceSessionType);
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreFeatureServiceSessionType);
					public getServiceInfo(): com.arcgismaps.internal.jni.CoreArcGISFeatureServiceInfo;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public getDefaultVersionName(): string;
					public getSessionType(): com.arcgismaps.internal.jni.CoreFeatureServiceSessionType;
					public close(): void;
					public getPortalItem(): com.arcgismaps.internal.jni.CorePortalItem;
					public onDoneLoading(param0: number): void;
					public static createCoreServiceGeodatabaseFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceGeodatabase;
					public createVersionAsync(param0: com.arcgismaps.internal.jni.CoreServiceVersionParameters): com.arcgismaps.internal.jni.CoreTask;
					public onRequestRequired(param0: number): void;
					public applyEditsAsync(): com.arcgismaps.internal.jni.CoreTask;
					public switchVersionAsync(param0: string): com.arcgismaps.internal.jni.CoreTask;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public closeAsync(): com.arcgismaps.internal.jni.CoreTask;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem, param1: string);
					public getURL(): string;
					public getConnectedTables(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public hasLocalEdits(): boolean;
					public undoLocalEditsAsync(): com.arcgismaps.internal.jni.CoreTask;
					public static nativeDestroy(param0: number): void;
					public getVersionName(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem, param1: string, param2: com.arcgismaps.internal.jni.CoreFeatureServiceSessionType);
					public setSessionType(param0: com.arcgismaps.internal.jni.CoreFeatureServiceSessionType): void;
					public getSupportsBranchVersioning(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceImageTiledLayer extends com.arcgismaps.internal.jni.CoreImageTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceImageTiledLayer>;
					public finalize(): void;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public static createCoreServiceImageTiledLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceImageTiledLayer;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileInfo, param1: com.arcgismaps.internal.jni.CoreEnvelope);
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onGenerateRequest(param0: number): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public setGenerateRequestCallback(param0: com.arcgismaps.internal.jni.CoreTileCallbackListener): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setRequest(param0: com.arcgismaps.internal.jni.CoreTileKey, param1: string, param2: com.arcgismaps.internal.jni.CoreDictionary): void;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServicePollingDelay {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServicePollingDelay>;
					public static INCREASINGDELAY: com.arcgismaps.internal.jni.CoreServicePollingDelay;
					public static NODELAY: com.arcgismaps.internal.jni.CoreServicePollingDelay;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreServicePollingDelay;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreServicePollingDelay>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreServicePollingDelay;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceRequest extends com.arcgismaps.internal.jni.CoreRequest {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceRequest>;
					public getInstanceId(): java.lang.Long;
					public static createCoreServiceRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceRequest;
					public getAPIKey(): string;
					public setAPIKey(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceTimeInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceTimeInfo>;
					public mHandle: number;
					public static createCoreServiceTimeInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceTimeInfo;
					public finalize(): void;
					public dispose(): void;
					public getHasLiveData(): boolean;
					public getDefaultInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
					public getTimeWindow(): com.arcgismaps.internal.jni.CoreTimeValue;
					public equals(param0: com.arcgismaps.internal.jni.CoreServiceTimeInfo): boolean;
					public getTimeReference(): com.arcgismaps.internal.jni.CoreTimeReference;
					public getDefaultTimeWindow(): number;
					public getTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public getDefaultTimeInterval(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public close(): void;
					public getTimeRelation(): com.arcgismaps.internal.jni.CoreTimeRelation;
					public getDefaultTimeIntervalUnit(): com.arcgismaps.internal.jni.CoreTimeUnit;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreServiceType;
					public static FEATURESERVICE: com.arcgismaps.internal.jni.CoreServiceType;
					public static IMAGESERVICE: com.arcgismaps.internal.jni.CoreServiceType;
					public static MAPSERVICE: com.arcgismaps.internal.jni.CoreServiceType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreServiceType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreServiceType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreServiceType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceVersionInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceVersionInfo>;
					public mHandle: number;
					public getCreationDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public getCommonAncestorDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public getReconcileDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public getVersionId(): com.arcgismaps.internal.jni.CoreGUID;
					public finalize(): void;
					public dispose(): void;
					public getIsOwner(): boolean;
					public getAccess(): com.arcgismaps.internal.jni.CoreVersionAccess;
					public static createCoreServiceVersionInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceVersionInfo;
					public getModifiedDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getEvaluationDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public close(): void;
					public getDescription(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreServiceVersionParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreServiceVersionParameters>;
					public mHandle: number;
					public static createCoreServiceVersionParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreServiceVersionParameters;
					public setDescription(param0: string): void;
					public finalize(): void;
					public dispose(): void;
					public getAccess(): com.arcgismaps.internal.jni.CoreVersionAccess;
					public setName(param0: string): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getDescription(): string;
					public setAccess(param0: com.arcgismaps.internal.jni.CoreVersionAccess): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreShapeTool extends com.arcgismaps.internal.jni.CoreGeometryEditorTool {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreShapeTool>;
					public static create(param0: com.arcgismaps.internal.jni.CoreShapeToolType): com.arcgismaps.internal.jni.CoreShapeTool;
					public setConfiguration(param0: com.arcgismaps.internal.jni.CoreInteractionConfiguration): void;
					public static createCoreShapeToolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreShapeTool;
					public getConfiguration(): com.arcgismaps.internal.jni.CoreInteractionConfiguration;
					public getShapeType(): com.arcgismaps.internal.jni.CoreShapeToolType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreShapeToolType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreShapeToolType>;
					public static ARROW: com.arcgismaps.internal.jni.CoreShapeToolType;
					public static ELLIPSE: com.arcgismaps.internal.jni.CoreShapeToolType;
					public static RECTANGLE: com.arcgismaps.internal.jni.CoreShapeToolType;
					public static TRIANGLE: com.arcgismaps.internal.jni.CoreShapeToolType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreShapeToolType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreShapeToolType;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreShapeToolType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreShapefileFeatureTable extends com.arcgismaps.internal.jni.CoreFeatureTable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreShapefileFeatureTable>;
					public getInfo(): com.arcgismaps.internal.jni.CoreShapefileInfo;
					public getSpatialIndexEnabled(): boolean;
					public constructor(param0: string);
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public static createCoreShapefileFeatureTableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreShapefileFeatureTable;
					public getPath(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setIsPopupEnabled(param0: boolean): void;
					public close(): void;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreShapefileInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreShapefileInfo>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public getCredits(): string;
					public static createCoreShapefileInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreShapefileInfo;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getCopyrightText(): string;
					public getDescription(): string;
					public getThumbnail(): com.arcgismaps.internal.jni.CoreImage;
					public getSummary(): string;
					public getHandle(): number;
					public getTags(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleFillSymbol extends com.arcgismaps.internal.jni.CoreFillSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleFillSymbol>;
					public getStyle(): com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public setStyle(param0: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle): void;
					public toMultilayerSymbol(): com.arcgismaps.internal.jni.CoreMultilayerPolygonSymbol;
					public getInstanceId(): java.lang.Long;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle, param1: com.arcgismaps.internal.jni.CoreColor, param2: com.arcgismaps.internal.jni.CoreLineSymbol);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
					public static createCoreSimpleFillSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSimpleFillSymbol;
					public constructor();
					public equals(param0: com.arcgismaps.internal.jni.CoreSimpleFillSymbol): boolean;
					public toJSON(): string;
					public equals(param0: com.arcgismaps.internal.jni.CoreFillSymbol): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleFillSymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle>;
					public static BACKWARDDIAGONAL: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public static CROSS: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public static DIAGONALCROSS: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public static FORWARDDIAGONAL: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public static HORIZONTAL: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public static NULL: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public static SOLID: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public static VERTICAL: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleLabelExpression extends com.arcgismaps.internal.jni.CoreLabelExpression {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleLabelExpression>;
					public constructor(param0: string);
					public constructor();
					public static createCoreSimpleLabelExpressionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSimpleLabelExpression;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleLineSymbol extends com.arcgismaps.internal.jni.CoreLineSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleLineSymbol>;
					public getStyle(): com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public toMultilayerSymbol(): com.arcgismaps.internal.jni.CoreMultilayerPolylineSymbol;
					public getInstanceId(): java.lang.Long;
					public getMarkerPlacement(): com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement;
					public getMarkerStyle(): com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setStyle(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public equals(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbol): boolean;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
					public setMarkerPlacement(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement): void;
					public static createCoreSimpleLineSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSimpleLineSymbol;
					public constructor();
					public setMarkerStyle(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle): void;
					public toJSON(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle, param1: com.arcgismaps.internal.jni.CoreColor, param2: number);
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle, param1: com.arcgismaps.internal.jni.CoreColor, param2: number, param3: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle, param4: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement);
					public equals(param0: com.arcgismaps.internal.jni.CoreLineSymbol): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleLineSymbolMarkerPlacement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement>;
					public static BEGIN: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement;
					public static END: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement;
					public static BEGINANDEND: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleLineSymbolMarkerStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle>;
					public static NONE: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle;
					public static ARROW: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleLineSymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle>;
					public static DASH: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static DASHDOT: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static DASHDOTDOT: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static DOT: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static NULL: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static SOLID: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static LONGDASH: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static LONGDASHDOT: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static SHORTDASH: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static SHORTDASHDOT: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static SHORTDASHDOTDOT: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static SHORTDOT: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleMarkerSceneSymbol extends com.arcgismaps.internal.jni.CoreMarkerSceneSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol>;
					public static sphereWithColorDiameter(param0: com.arcgismaps.internal.jni.CoreColor, param1: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public static coneWithColorDiameterHeightAnchorPosition(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public getInstanceId(): java.lang.Long;
					public setStyle(param0: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle): void;
					public static sphereWithColorDiameterAnchorPosition(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getStyle(): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle, param1: com.arcgismaps.internal.jni.CoreColor, param2: number, param3: number, param4: number, param5: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition);
					public static cylinderWithColorDiameterHeight(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static cubeWithColorSize(param0: com.arcgismaps.internal.jni.CoreColor, param1: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public static coneWithColorDiameterHeight(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public static cubeWithColorSizeAnchorPosition(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public constructor();
					public static cylinderWithColorDiameterHeightAnchorPosition(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public toJSON(): string;
					public static createCoreSimpleMarkerSceneSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public static tetrahedronWithColorSizeHeight(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public static tetrahedronWithColorSizeHeightAnchorPosition(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public static diamondWithColorSizeHeight(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public static diamondWithColorSizeHeightAnchorPosition(param0: com.arcgismaps.internal.jni.CoreColor, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleMarkerSceneSymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle>;
					public static CONE: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
					public static CUBE: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
					public static CYLINDER: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
					public static DIAMOND: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
					public static SPHERE: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
					public static TETRAHEDRON: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleMarkerSymbol extends com.arcgismaps.internal.jni.CoreMarkerSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleMarkerSymbol>;
					public setSize(param0: number): void;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setOutline(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbol): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreMarkerSymbol): boolean;
					public static createCoreSimpleMarkerSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSymbol;
					public getSize(): number;
					public getOutline(): com.arcgismaps.internal.jni.CoreSimpleLineSymbol;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getStyle(): com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
					public equals(param0: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbol): boolean;
					public constructor();
					public toJSON(): string;
					public toMultilayerSymbol(): com.arcgismaps.internal.jni.CoreMultilayerPointSymbol;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle, param1: com.arcgismaps.internal.jni.CoreColor, param2: number);
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
					public setStyle(param0: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleMarkerSymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle>;
					public static CIRCLE: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
					public static CROSS: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
					public static DIAMOND: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
					public static SQUARE: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
					public static TRIANGLE: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
					public static X: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimpleRenderer extends com.arcgismaps.internal.jni.CoreRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimpleRenderer>;
					public getLabel(): string;
					public setDescription(param0: string): void;
					public getInstanceId(): java.lang.Long;
					public getSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSymbol);
					public setSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public static createCoreSimpleRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSimpleRenderer;
					public setLabel(param0: string): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor();
					public toJSON(): string;
					public getDescription(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimulatedLocationDataSource extends com.arcgismaps.internal.jni.CoreLocationDataSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimulatedLocationDataSource>;
					public getCurrentLocationIndex(): number;
					public setCurrentLocationIndex(param0: number): void;
					public setLocationsWithPolyline(param0: com.arcgismaps.internal.jni.CorePolyline): void;
					public setLocationsWithPolylineAndParameters(param0: com.arcgismaps.internal.jni.CorePolyline, param1: com.arcgismaps.internal.jni.CoreSimulationParameters): void;
					public getInstanceId(): java.lang.Long;
					public constructor();
					public static createCoreSimulatedLocationDataSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSimulatedLocationDataSource;
					public getIterationRate(): number;
					public setIterationRate(param0: number): void;
					public getLocations(): com.arcgismaps.internal.jni.CoreVector;
					public setLocations(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSimulationParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSimulationParameters>;
					public mHandle: number;
					public finalize(): void;
					public setVelocity(param0: number): void;
					public dispose(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: number, param2: number, param3: number);
					public setVerticalAccuracy(param0: number): void;
					public setHorizontalAccuracy(param0: number): void;
					public static createCoreSimulationParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSimulationParameters;
					public getHorizontalAccuracy(): number;
					public getVelocity(): number;
					public setStartTime(param0: com.arcgismaps.internal.jni.CoreDateTime): void;
					public getVerticalAccuracy(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getHandle(): number;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSiteLayerDefinition extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSiteLayerDefinition>;
					public mHandle: number;
					public getLayerId(): string;
					public static createCoreSiteLayerDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSiteLayerDefinition;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public dispose(): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getNameField(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public toJSON(): string;
					public close(): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreSiteLayerDefinition;
					public getSiteIdField(): string;
					public constructor(param0: string, param1: string, param2: string);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSlopeType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSlopeType>;
					public static NONE: com.arcgismaps.internal.jni.CoreSlopeType;
					public static DEGREE: com.arcgismaps.internal.jni.CoreSlopeType;
					public static PERCENTRISE: com.arcgismaps.internal.jni.CoreSlopeType;
					public static SCALED: com.arcgismaps.internal.jni.CoreSlopeType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSlopeType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSlopeType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSlopeType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSnapSettings {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSnapSettings>;
					public mHandle: number;
					public getIsEnabled(): boolean;
					public static createCoreSnapSettingsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSnapSettings;
					public getSourceSettings(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public dispose(): void;
					public setIsEnabled(param0: boolean): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setTolerance(param0: number): void;
					public close(): void;
					public getTolerance(): number;
					public syncSourceSettings(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSnapSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSnapSource>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreSnapSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSnapSourceSettings {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSnapSourceSettings>;
					public mHandle: number;
					public getIsEnabled(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public setIsEnabled(param0: boolean): void;
					public getSource(): com.arcgismaps.internal.jni.CoreElement;
					public static createCoreSnapSourceSettingsFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSnapSourceSettings;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSolidFillSymbolLayer extends com.arcgismaps.internal.jni.CoreFillSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSolidFillSymbolLayer>;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public constructor();
					public static createCoreSolidFillSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSolidFillSymbolLayer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreColor);
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSolidStrokeSymbolLayer extends com.arcgismaps.internal.jni.CoreStrokeSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSolidStrokeSymbolLayer>;
					public getGeometricEffects(): com.arcgismaps.internal.jni.CoreVector;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public constructor();
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreColor, param2: com.arcgismaps.internal.jni.CoreVector, param3: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D);
					public static createCoreSolidStrokeSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSolidStrokeSymbolLayer;
					public setGeometricEffects(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreColor);
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreColor, param2: com.arcgismaps.internal.jni.CoreVector);
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSortOrder {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSortOrder>;
					public static ASCENDING: com.arcgismaps.internal.jni.CoreSortOrder;
					public static DESCENDING: com.arcgismaps.internal.jni.CoreSortOrder;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSortOrder>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSortOrder;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSortOrder;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSourceObjectPosition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSourceObjectPosition>;
					public mHandle: number;
					public getSourceIndex(): number;
					public finalize(): void;
					public dispose(): void;
					public setPosition(param0: number): void;
					public setSourceIndex(param0: number): void;
					public setSourceObjectId(param0: number): void;
					public static nativeDestroy(param0: number): void;
					public static createCoreSourceObjectPositionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSourceObjectPosition;
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public close(): void;
					public getPosition(): number;
					public getSourceObjectId(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSpaceEffect {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSpaceEffect>;
					public static STARS: com.arcgismaps.internal.jni.CoreSpaceEffect;
					public static TRANSPARENT: com.arcgismaps.internal.jni.CoreSpaceEffect;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSpaceEffect>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSpaceEffect;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSpaceEffect;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSpatialReference extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSpatialReference>;
					public mHandle: number;
					public constructor(param0: string);
					public getIsProjected(): boolean;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getIsPannable(): boolean;
					public getUnit(): com.arcgismaps.internal.jni.CoreUnit;
					public getVerticalWKID(): number;
					public static createCoreSpatialReferenceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSpatialReference;
					public constructor();
					public getVerticalUnit(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public toJSON(): string;
					public close(): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreSpatialReference): boolean;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
					public getWKText(): string;
					public getHash(): number;
					public getBaseGeographic(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getIsGeographic(): boolean;
					public dispose(): void;
					public getWKID(): number;
					public static webMercator(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static nativeDestroy(param0: number): void;
					public getHasVertical(): boolean;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getConvergenceAngle(param0: com.arcgismaps.internal.jni.CorePoint): number;
					public static WGS84(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSpatialReferenceChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSpatialReferenceChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreSpatialReferenceChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						spatialReferenceChanged(): void;
					});
					public constructor();
					public spatialReferenceChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSpatialRelationship>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static RELATE: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static EQUALS: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static DISJOINT: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static INTERSECTS: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static TOUCHES: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static CROSSES: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static WITHIN: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static CONTAINS: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static OVERLAPS: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static ENVELOPEINTERSECTS: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static INDEXINTERSECTS: com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSpatialRelationship>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSpatialRelationship;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSpeechEngineReadyCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSpeechEngineReadyCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreSpeechEngineReadyCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						speechEngineReady(param0: com.arcgismaps.internal.jni.CoreElementReference): void;
					});
					public constructor();
					public speechEngineReady(param0: com.arcgismaps.internal.jni.CoreElementReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStandardDeviationStretchParameters extends com.arcgismaps.internal.jni.CoreStretchParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStandardDeviationStretchParameters>;
					public static createCoreStandardDeviationStretchParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStandardDeviationStretchParameters;
					public constructor();
					public getFactor(): number;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStartCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStartCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreStartCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						startCallback(): void;
					});
					public constructor();
					public startCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStartFinishedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStartFinishedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreStartFinishedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						startFinished(param0: com.arcgismaps.internal.jni.CoreError): void;
					});
					public constructor();
					public startFinished(param0: com.arcgismaps.internal.jni.CoreError): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStartTimeUsage {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStartTimeUsage>;
					public static DEPARTURETIME: com.arcgismaps.internal.jni.CoreStartTimeUsage;
					public static ARRIVALTIME: com.arcgismaps.internal.jni.CoreStartTimeUsage;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreStartTimeUsage;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreStartTimeUsage;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreStartTimeUsage>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStatisticDefinition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStatisticDefinition>;
					public mHandle: number;
					public static createCoreStatisticDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStatisticDefinition;
					public setOutputAlias(param0: string): void;
					public getStatisticType(): com.arcgismaps.internal.jni.CoreStatisticType;
					public finalize(): void;
					public dispose(): void;
					public setStatisticType(param0: com.arcgismaps.internal.jni.CoreStatisticType): void;
					public getOutputAlias(): string;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreStatisticType, param2: string);
					public setOnFieldName(param0: string): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getOnFieldName(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStatisticRecord {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStatisticRecord>;
					public mHandle: number;
					public getGroup(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getStatistics(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCoreStatisticRecordFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStatisticRecord;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStatisticType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStatisticType>;
					public static AVERAGE: com.arcgismaps.internal.jni.CoreStatisticType;
					public static COUNT: com.arcgismaps.internal.jni.CoreStatisticType;
					public static MAXIMUM: com.arcgismaps.internal.jni.CoreStatisticType;
					public static MINIMUM: com.arcgismaps.internal.jni.CoreStatisticType;
					public static STANDARDDEVIATION: com.arcgismaps.internal.jni.CoreStatisticType;
					public static SUM: com.arcgismaps.internal.jni.CoreStatisticType;
					public static VARIANCE: com.arcgismaps.internal.jni.CoreStatisticType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreStatisticType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreStatisticType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreStatisticType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStatisticsQueryParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStatisticsQueryParameters>;
					public mHandle: number;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public setStatisticDefinitions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getWhereClause(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public getSpatialRelationship(): com.arcgismaps.internal.jni.CoreSpatialRelationship;
					public finalize(): void;
					public dispose(): void;
					public static createCoreStatisticsQueryParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStatisticsQueryParameters;
					public getGroupByFieldNames(): com.arcgismaps.internal.jni.CoreVector;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public setGroupByFieldNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setTimeExtent(param0: com.arcgismaps.internal.jni.CoreTimeExtent): void;
					public setSpatialRelationship(param0: com.arcgismaps.internal.jni.CoreSpatialRelationship): void;
					public getTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public getOrderByFields(): com.arcgismaps.internal.jni.CoreVector;
					public getStatisticDefinitions(): com.arcgismaps.internal.jni.CoreVector;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setWhereClause(param0: string): void;
					public close(): void;
					public setOrderByFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStatisticsQueryResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStatisticsQueryResult>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public iterator(): com.arcgismaps.internal.jni.CoreIterator;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreStatisticsQueryResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStatisticsQueryResult;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStop {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStop>;
					public mHandle: number;
					public getDepartureCurbApproach(): com.arcgismaps.internal.jni.CoreCurbApproach;
					public setNavigationSpeed(param0: number): void;
					public getViolationTime(): number;
					public finalize(): void;
					public setRouteName(param0: string): void;
					public getStopId(): number;
					public constructor();
					public setStopId(param0: number): void;
					public close(): void;
					public setTimeWindowStart(param0: com.arcgismaps.internal.jni.CoreDateTime): void;
					public getNavigationSpeed(): number;
					public setNetworkLocation(param0: com.arcgismaps.internal.jni.CoreNetworkLocation): void;
					public getArrivalCurbApproach(): com.arcgismaps.internal.jni.CoreCurbApproach;
					public getDepartureTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public setGeometry(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint);
					public setTimeWindowEnd(param0: com.arcgismaps.internal.jni.CoreDateTime): void;
					public getGeometry(): com.arcgismaps.internal.jni.CorePoint;
					public setName(param0: string): void;
					public setCurrentBearing(param0: number): void;
					public getNavigationLatency(): number;
					public setAddedCost(param0: string, param1: number): void;
					public getAddedCost(param0: string): number;
					public getHandle(): number;
					public getCurrentBearingTolerance(): number;
					public getDepartureTimeShift(): number;
					public getArrivalTimeShift(): number;
					public getWaitTime(): number;
					public setNavigationLatency(param0: number): void;
					public getSequence(): number;
					public getTimeWindowStart(): com.arcgismaps.internal.jni.CoreDateTime;
					public clone(): com.arcgismaps.internal.jni.CoreStop;
					public getStopType(): com.arcgismaps.internal.jni.CoreStopType;
					public setCurbApproach(param0: com.arcgismaps.internal.jni.CoreCurbApproach): void;
					public getTimeWindowEnd(): com.arcgismaps.internal.jni.CoreDateTime;
					public getLocationStatus(): com.arcgismaps.internal.jni.CoreLocationStatus;
					public getNetworkLocation(): com.arcgismaps.internal.jni.CoreNetworkLocation;
					public getCurrentBearing(): number;
					public setCurrentBearingTolerance(param0: number): void;
					public dispose(): void;
					public getDistanceToNetworkLocation(): number;
					public static createCoreStopFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStop;
					public getCurbApproach(): com.arcgismaps.internal.jni.CoreCurbApproach;
					public setStopType(param0: com.arcgismaps.internal.jni.CoreStopType): void;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getCumulativeCost(param0: string): number;
					public getRouteName(): string;
					public getArrivalTime(): com.arcgismaps.internal.jni.CoreDateTime;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStopCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStopCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreStopCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						stopCallback(): void;
					});
					public constructor();
					public stopCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStopType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStopType>;
					public static STOP: com.arcgismaps.internal.jni.CoreStopType;
					public static WAYPOINT: com.arcgismaps.internal.jni.CoreStopType;
					public static RESTBREAK: com.arcgismaps.internal.jni.CoreStopType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreStopType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreStopType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreStopType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStretchParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStretchParameters>;
					public mHandle: number;
					public static createCoreStretchParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStretchParameters;
					public getObjectType(): com.arcgismaps.internal.jni.CoreStretchParametersType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStretchParameters;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStretchParametersType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStretchParametersType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreStretchParametersType;
					public static MINMAXSTRETCHPARAMETERS: com.arcgismaps.internal.jni.CoreStretchParametersType;
					public static STANDARDDEVIATIONSTRETCHPARAMETERS: com.arcgismaps.internal.jni.CoreStretchParametersType;
					public static HISTOGRAMEQUALIZATIONSTRETCHPARAMETERS: com.arcgismaps.internal.jni.CoreStretchParametersType;
					public static PERCENTCLIPSTRETCHPARAMETERS: com.arcgismaps.internal.jni.CoreStretchParametersType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreStretchParametersType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreStretchParametersType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreStretchParametersType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStretchRenderer extends com.arcgismaps.internal.jni.CoreBaseStretchRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStretchRenderer>;
					public constructor();
					public static createCoreStretchRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStretchRenderer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreStretchParameters, param1: com.arcgismaps.internal.jni.CoreVector, param2: boolean, param3: com.arcgismaps.internal.jni.CoreColorRamp);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreString {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreString>;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStrokeSymbolLayer extends com.arcgismaps.internal.jni.CoreSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStrokeSymbolLayer>;
					public static createCoreStrokeSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreStrokeSymbolLayer;
					public setLineStyle3D(param0: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D): void;
					public constructor();
					public setWidth(param0: number): void;
					public getWidth(): number;
					public getCapStyle(): com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle;
					public setCapStyle(param0: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle): void;
					public getLineStyle3D(): com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStrokeSymbolLayerCapStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle>;
					public static BUTT: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle;
					public static ROUND: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle;
					public static SQUARE: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreStrokeSymbolLayerLineStyle3D {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D>;
					public static TUBE: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D;
					public static STRIP: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSubLayerContentChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						subLayerContentChanged(): void;
					});
					public constructor();
					public subLayerContentChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSublayerSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSublayerSource>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public static createCoreSublayerSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSublayerSource;
					public constructor();
					public getObjectType(): com.arcgismaps.internal.jni.CoreSublayerSourceType;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSublayerSource;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSublayerSourceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSublayerSourceType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreSublayerSourceType;
					public static MAPSUBLAYERSOURCE: com.arcgismaps.internal.jni.CoreSublayerSourceType;
					public static TABLEQUERYSUBLAYERSOURCE: com.arcgismaps.internal.jni.CoreSublayerSourceType;
					public static TABLEJOINSUBLAYERSOURCE: com.arcgismaps.internal.jni.CoreSublayerSourceType;
					public static TABLESUBLAYERSOURCE: com.arcgismaps.internal.jni.CoreSublayerSourceType;
					public static RASTERSUBLAYERSOURCE: com.arcgismaps.internal.jni.CoreSublayerSourceType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSublayerSourceType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSublayerSourceType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSublayerSourceType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSubtypeFeatureLayer extends com.arcgismaps.internal.jni.CoreFeatureLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSubtypeFeatureLayer>;
					public setIsTimeFilteringEnabled(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISFeatureTable);
					public getTimeOffset(): com.arcgismaps.internal.jni.CoreTimeValue;
					public getIsVisible(): boolean;
					public load(): void;
					public getTimeInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public setSubtypeSublayers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public retryLoad(): void;
					public getSupportsTimeFiltering(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem, param1: number);
					public constructor();
					public getSubtypeSublayers(): com.arcgismaps.internal.jni.CoreVector;
					public getFullTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public static createCoreSubtypeFeatureLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSubtypeFeatureLayer;
					public getIsTimeFilteringEnabled(): boolean;
					public setFloorDefinition(param0: com.arcgismaps.internal.jni.CoreLayerFloorDefinition): void;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getRefreshInterval(): number;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getSublayerWithSubtypeCode(param0: com.arcgismaps.internal.jni.CoreElement): com.arcgismaps.internal.jni.CoreSubtypeSublayer;
					public getFloorDefinition(): com.arcgismaps.internal.jni.CoreLayerFloorDefinition;
					public setTimeOffset(param0: com.arcgismaps.internal.jni.CoreTimeValue): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setRefreshInterval(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureTable);
					public getName(): string;
					public setFullTimeExtentChangedCallback(param0: com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener): void;
					public setIsPopupEnabled(param0: boolean): void;
					public getSublayerWithSubtypeName(param0: string): com.arcgismaps.internal.jni.CoreSubtypeSublayer;
					public setIsVisible(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSubtypeSublayer extends com.arcgismaps.internal.jni.CoreArcGISSublayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSubtypeSublayer>;
					public setRenderer(param0: com.arcgismaps.internal.jni.CoreRenderer): void;
					public getLabelDefinitions(): com.arcgismaps.internal.jni.CoreVector;
					public setOpacity(param0: number): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setMinScale(param0: number): void;
					public getIsVisible(): boolean;
					public load(): void;
					public getRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getMinScale(): number;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public setLabelDefinitions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getFeatureTemplates(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreSubtypeSublayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSubtypeSublayer;
					public getCanChangeVisibility(): boolean;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getOpacity(): number;
					public setMaxScale(param0: number): void;
					public getLabelsEnabled(): boolean;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getMaxScale(): number;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getSubtype(): com.arcgismaps.internal.jni.CoreFeatureSubtype;
					public getName(): string;
					public setIsPopupEnabled(param0: boolean): void;
					public setIsVisible(param0: boolean): void;
					public setLabelsEnabled(param0: boolean): void;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSuggestParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSuggestParameters>;
					public mHandle: number;
					public getSearchArea(): com.arcgismaps.internal.jni.CoreGeometry;
					public getCountryCode(): string;
					public finalize(): void;
					public dispose(): void;
					public setPreferredSearchLocation(param0: com.arcgismaps.internal.jni.CorePoint): void;
					public getCategories(): com.arcgismaps.internal.jni.CoreVector;
					public getPreferredSearchLocation(): com.arcgismaps.internal.jni.CorePoint;
					public setSearchArea(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public setMaxResults(param0: number): void;
					public static createCoreSuggestParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSuggestParameters;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public setCountryCode(param0: string): void;
					public getMaxResults(): number;
					public setCategories(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSuggestResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSuggestResult>;
					public mHandle: number;
					public getLabel(): string;
					public static createCoreSuggestResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSuggestResult;
					public getIsCollection(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSurface extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSurface>;
					public mHandle: number;
					public setBackgroundGrid(param0: com.arcgismaps.internal.jni.CoreBackgroundGrid): void;
					public getIsEnabled(): boolean;
					public getElevationExaggeration(): number;
					public setOpacity(param0: number): void;
					public setElevationSources(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public finalize(): void;
					public setIsEnabled(param0: boolean): void;
					public getNavigationConstraint(): com.arcgismaps.internal.jni.CoreNavigationConstraint;
					public load(): void;
					public getElevationSources(): com.arcgismaps.internal.jni.CoreVector;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public setNavigationConstraint(param0: com.arcgismaps.internal.jni.CoreNavigationConstraint): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public setElevationExaggeration(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getOpacity(): number;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public static createCoreSurfaceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSurface;
					public setName(param0: string): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getBackgroundGrid(): com.arcgismaps.internal.jni.CoreBackgroundGrid;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getElevationAsync(param0: com.arcgismaps.internal.jni.CorePoint): com.arcgismaps.internal.jni.CoreTask;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSurfacePlacement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSurfacePlacement>;
					public static DRAPEDBILLBOARDED: com.arcgismaps.internal.jni.CoreSurfacePlacement;
					public static ABSOLUTE: com.arcgismaps.internal.jni.CoreSurfacePlacement;
					public static RELATIVE: com.arcgismaps.internal.jni.CoreSurfacePlacement;
					public static RELATIVETOSCENE: com.arcgismaps.internal.jni.CoreSurfacePlacement;
					public static DRAPEDFLAT: com.arcgismaps.internal.jni.CoreSurfacePlacement;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSurfacePlacement;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSurfacePlacement;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSurfacePlacement>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSwitchFormInput extends com.arcgismaps.internal.jni.CoreFormInput {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSwitchFormInput>;
					public getOffValue(): com.arcgismaps.internal.jni.CoreCodedValue;
					public getOnValue(): com.arcgismaps.internal.jni.CoreCodedValue;
					public static createCoreSwitchFormInputFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSwitchFormInput;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbol implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbol>;
					public mHandle: number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreSymbolType;
					public createSwatchWithImageSizeAsync(param0: number, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreColor): com.arcgismaps.internal.jni.CoreTask;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getHash(): number;
					public finalize(): void;
					public dispose(): void;
					public createSwatchAsync(param0: com.arcgismaps.internal.jni.CoreColor, param1: number): com.arcgismaps.internal.jni.CoreTask;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreSymbol;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
					public clone(): com.arcgismaps.internal.jni.CoreSymbol;
					public createSwatchWithGeometryAsync(param0: number, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreColor, param4: com.arcgismaps.internal.jni.CoreGeometry): com.arcgismaps.internal.jni.CoreTask;
					public static nativeDestroy(param0: number): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbol;
					public static createCoreSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbol;
					public constructor();
					public toJSON(): string;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolAnchor {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolAnchor>;
					public mHandle: number;
					public getPlacementMode(): com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public constructor(param0: number, param1: number, param2: com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode);
					public getX(): number;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreSymbolAnchorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbolAnchor;
					public getY(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolAnchorPlacementMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode>;
					public static RELATIVE: com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode;
					public static ABSOLUTE: com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolAngleAlignment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolAngleAlignment>;
					public static MAP: com.arcgismaps.internal.jni.CoreSymbolAngleAlignment;
					public static SCREEN: com.arcgismaps.internal.jni.CoreSymbolAngleAlignment;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSymbolAngleAlignment;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSymbolAngleAlignment;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSymbolAngleAlignment>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolLayer>;
					public mHandle: number;
					public setEnabled(param0: boolean): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbolLayer;
					public finalize(): void;
					public setColorLocked(param0: boolean): void;
					public dispose(): void;
					public static createCoreSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbolLayer;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbolLayer): boolean;
					public getColorLocked(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getObjectType(): com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public clone(): com.arcgismaps.internal.jni.CoreSymbolLayer;
					public close(): void;
					public getEnabled(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolLayerType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolLayerType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static SYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static MARKERSYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static VECTORMARKERSYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static STROKESYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static SOLIDSTROKESYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static PICTUREMARKERSYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static FILLSYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static SOLIDFILLSYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static PICTUREFILLSYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static HATCHFILLSYMBOLLAYER: com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSymbolLayerType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSymbolLayerType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolReferenceProperties {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolReferenceProperties>;
					public mHandle: number;
					public getMaxScale(): number;
					public getMinScale(): number;
					public setMaxScale(param0: number): void;
					public static createCoreSymbolReferencePropertiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbolReferenceProperties;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public setMinScale(param0: number): void;
					public close(): void;
					public dispose(): void;
					public constructor(param0: number, param1: number);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolSizeUnits {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolSizeUnits>;
					public static DIPS: com.arcgismaps.internal.jni.CoreSymbolSizeUnits;
					public static METERS: com.arcgismaps.internal.jni.CoreSymbolSizeUnits;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSymbolSizeUnits>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSymbolSizeUnits;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSymbolSizeUnits;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolStyle extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolStyle>;
					public mHandle: number;
					public constructor(param0: string);
					public static createSymbolStyleFromURL(param0: string): com.arcgismaps.internal.jni.CoreSymbolStyle;
					public getObjectType(): com.arcgismaps.internal.jni.CoreSymbolStyleType;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbolStyle;
					public finalize(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem);
					public getSymbolAsync(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CorePortal);
					public getDefaultSearchParametersAsync(): com.arcgismaps.internal.jni.CoreTask;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public searchSymbolsAsync(param0: com.arcgismaps.internal.jni.CoreSymbolStyleSearchParameters): com.arcgismaps.internal.jni.CoreTask;
					public getPortal(): com.arcgismaps.internal.jni.CorePortal;
					public getStyleLocation(): string;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public getPortalItem(): com.arcgismaps.internal.jni.CorePortalItem;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public static createCoreSymbolStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbolStyle;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public static nativeDestroy(param0: number): void;
					public getStyleName(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolStyleSearchParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolStyleSearchParameters>;
					public mHandle: number;
					public getKeys(): com.arcgismaps.internal.jni.CoreVector;
					public getSymbolClasses(): com.arcgismaps.internal.jni.CoreVector;
					public finalize(): void;
					public getSymbolClassesStrictlyMatch(): boolean;
					public setSymbolClassesStrictlyMatch(param0: boolean): void;
					public getCategories(): com.arcgismaps.internal.jni.CoreVector;
					public setKeysStrictlyMatch(param0: boolean): void;
					public setTags(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setSymbolClasses(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getCategoriesStrictlyMatch(): boolean;
					public constructor();
					public close(): void;
					public getKeysStrictlyMatch(): boolean;
					public getNames(): com.arcgismaps.internal.jni.CoreVector;
					public setTagsStrictlyMatch(param0: boolean): void;
					public getTags(): com.arcgismaps.internal.jni.CoreVector;
					public getTagsStrictlyMatch(): boolean;
					public dispose(): void;
					public static createCoreSymbolStyleSearchParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbolStyleSearchParameters;
					public getNamesStrictlyMatch(): boolean;
					public setKeys(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static nativeDestroy(param0: number): void;
					public setNamesStrictlyMatch(param0: boolean): void;
					public setCategories(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setCategoriesStrictlyMatch(param0: boolean): void;
					public getIsEmpty(): boolean;
					public getHandle(): number;
					public setNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolStyleSearchResult extends com.arcgismaps.internal.jni.CoreRequestable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolStyleSearchResult>;
					public mHandle: number;
					public static createCoreSymbolStyleSearchResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSymbolStyleSearchResult;
					public getSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getSymbolAsync(): com.arcgismaps.internal.jni.CoreTask;
					public finalize(): void;
					public dispose(): void;
					public getCategory(): string;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getSymbolClass(): string;
					public getKey(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
					public getTags(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolStyleType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolStyleType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreSymbolStyleType;
					public static DICTIONARYSYMBOLSTYLE: com.arcgismaps.internal.jni.CoreSymbolStyleType;
					public static SYMBOLSTYLE: com.arcgismaps.internal.jni.CoreSymbolStyleType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSymbolStyleType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSymbolStyleType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSymbolStyleType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSymbolType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSymbolType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreSymbolType;
					public static SIMPLEFILLSYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static SIMPLELINESYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static SIMPLEMARKERSYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static PICTUREMARKERSYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static TEXTSYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static SIMPLEMARKERSCENESYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static MODELSCENESYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static DISTANCECOMPOSITESCENESYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static UNSUPPORTEDSYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static COMPOSITESYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static PICTUREFILLSYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static MULTILAYERPOINTSYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static MULTILAYERPOLYLINESYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static MULTILAYERPOLYGONSYMBOL: com.arcgismaps.internal.jni.CoreSymbolType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSymbolType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSymbolType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSymbolType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSyncCapabilities {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSyncCapabilities>;
					public mHandle: number;
					public getSupportsRollbackOnFailure(): boolean;
					public getSupportsSyncModelLayer(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getSupportsSyncModelGeodatabase(): boolean;
					public getSupportsAsync(): boolean;
					public getSupportsAnnotations(): boolean;
					public getSupportsContingentValues(): boolean;
					public static createCoreSyncCapabilitiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSyncCapabilities;
					public getSupportsDimensions(): boolean;
					public getSupportsSyncModelNone(): boolean;
					public getSupportsAttachmentsSyncDirection(): boolean;
					public getSupportsRegisteringExistingData(): boolean;
					public getSupportsUtilityNetworkSystem(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getSupportsUtilityNetworkTopology(): boolean;
					public getSupportsSyncDirectionControl(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSyncDirection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSyncDirection>;
					public static NONE: com.arcgismaps.internal.jni.CoreSyncDirection;
					public static DOWNLOAD: com.arcgismaps.internal.jni.CoreSyncDirection;
					public static UPLOAD: com.arcgismaps.internal.jni.CoreSyncDirection;
					public static BIDIRECTIONAL: com.arcgismaps.internal.jni.CoreSyncDirection;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSyncDirection;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSyncDirection;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSyncDirection>;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSyncGeodatabaseJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSyncGeodatabaseJob>;
					public getGeodatabaseDeltaInfo(): com.arcgismaps.internal.jni.CoreGeodatabaseDeltaInfo;
					public getInstanceId(): java.lang.Long;
					public static createCoreSyncGeodatabaseJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSyncGeodatabaseJob;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public getResult(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSyncGeodatabaseParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSyncGeodatabaseParameters>;
					public mHandle: number;
					public finalize(): void;
					public setRollbackOnFailure(param0: boolean): void;
					public dispose(): void;
					public getLayerOptions(): com.arcgismaps.internal.jni.CoreVector;
					public setLayerOptions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setGeodatabaseSyncDirection(param0: com.arcgismaps.internal.jni.CoreSyncDirection): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getRollbackOnFailure(): boolean;
					public getKeepGeodatabaseDeltas(): boolean;
					public close(): void;
					public getGeodatabaseSyncDirection(): com.arcgismaps.internal.jni.CoreSyncDirection;
					public setKeepGeodatabaseDeltas(param0: boolean): void;
					public static createCoreSyncGeodatabaseParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSyncGeodatabaseParameters;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSyncLayerOption {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSyncLayerOption>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public getLayerId(): number;
					public clone(): com.arcgismaps.internal.jni.CoreSyncLayerOption;
					public static createCoreSyncLayerOptionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSyncLayerOption;
					public setLayerId(param0: number): void;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreSyncDirection);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setSyncDirection(param0: com.arcgismaps.internal.jni.CoreSyncDirection): void;
					public getSyncDirection(): com.arcgismaps.internal.jni.CoreSyncDirection;
					public close(): void;
					public constructor(param0: number);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSyncLayerResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSyncLayerResult>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getTableName(): string;
					public static createCoreSyncLayerResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreSyncLayerResult;
					public getEditResults(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
					public getLayerId(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreSyncModel {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreSyncModel>;
					public static NONE: com.arcgismaps.internal.jni.CoreSyncModel;
					public static GEODATABASE: com.arcgismaps.internal.jni.CoreSyncModel;
					public static LAYER: com.arcgismaps.internal.jni.CoreSyncModel;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreSyncModel>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreSyncModel;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreSyncModel;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTableDescription {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTableDescription>;
					public mHandle: number;
					public setHasZ(param0: boolean): void;
					public getHasZ(): boolean;
					public setHasAttachments(param0: boolean): void;
					public constructor(param0: string);
					public finalize(): void;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreGeometryType);
					public dispose(): void;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public getTableName(): string;
					public setFieldDescriptions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getHasM(): boolean;
					public static createCoreTableDescriptionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTableDescription;
					public getHasAttachments(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setGeometryType(param0: com.arcgismaps.internal.jni.CoreGeometryType): void;
					public close(): void;
					public setHasM(param0: boolean): void;
					public setTableName(param0: string): void;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getFieldDescriptions(): com.arcgismaps.internal.jni.CoreVector;
					public getHandle(): number;
					public setSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTableJoinSublayerSource extends com.arcgismaps.internal.jni.CoreSublayerSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTableJoinSublayerSource>;
					public setFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static createCoreTableJoinSublayerSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTableJoinSublayerSource;
					public constructor();
					public getLeftSublayerSource(): com.arcgismaps.internal.jni.CoreSublayerSource;
					public getJoinType(): com.arcgismaps.internal.jni.CoreJoinType;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreSublayerSource, param2: string, param3: com.arcgismaps.internal.jni.CoreSublayerSource, param4: com.arcgismaps.internal.jni.CoreJoinType);
					public getFields(): com.arcgismaps.internal.jni.CoreVector;
					public getLeftFieldName(): string;
					public getRightSublayerSource(): com.arcgismaps.internal.jni.CoreSublayerSource;
					public getRightFieldName(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTableQuerySublayerSource extends com.arcgismaps.internal.jni.CoreSublayerSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTableQuerySublayerSource>;
					public constructor(param0: string, param1: string, param2: com.arcgismaps.internal.jni.CoreArray);
					public getSQLQuery(): string;
					public getObjectIdFieldNames(): com.arcgismaps.internal.jni.CoreArray;
					public getWorkspaceId(): string;
					public setFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor();
					public setGeometryType(param0: com.arcgismaps.internal.jni.CoreGeometryType): void;
					public getFields(): com.arcgismaps.internal.jni.CoreVector;
					public getGeometryType(): com.arcgismaps.internal.jni.CoreGeometryType;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static createCoreTableQuerySublayerSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTableQuerySublayerSource;
					public setSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTableSublayerSource extends com.arcgismaps.internal.jni.CoreSublayerSource {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTableSublayerSource>;
					public constructor(param0: string, param1: string);
					public getDataSourceName(): string;
					public getWorkspaceId(): string;
					public setFields(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor();
					public setGeodatabaseVersion(param0: string): void;
					public getFields(): com.arcgismaps.internal.jni.CoreVector;
					public getGeodatabaseVersion(): string;
					public static createCoreTableSublayerSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTableSublayerSource;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTargetVisibilityChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTargetVisibilityChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTargetVisibilityChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						targetVisibilityChanged(param0: com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility): void;
					});
					public constructor();
					public targetVisibilityChanged(param0: com.arcgismaps.internal.jni.CoreLineOfSightTargetVisibility): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTask extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTask>;
					public mHandle: number;
					public getInstanceId(): java.lang.Long;
					public waitNative(): com.arcgismaps.internal.jni.CoreTaskStatus;
					public getError(): com.arcgismaps.internal.jni.CoreError;
					public finalize(): void;
					public dispose(): void;
					public onTaskCompleted(): void;
					public static createCoreTaskFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTask;
					public isCanceled(): boolean;
					public cancel(): boolean;
					public isDone(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public get(): com.arcgismaps.internal.jni.CoreElement;
					public setTaskCompletedCallback(param0: com.arcgismaps.internal.jni.CoreCompletedCallbackListener): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTaskStatus {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTaskStatus>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreTaskStatus;
					public static COMPLETED: com.arcgismaps.internal.jni.CoreTaskStatus;
					public static CANCELED: com.arcgismaps.internal.jni.CoreTaskStatus;
					public static NOTCOMPLETE: com.arcgismaps.internal.jni.CoreTaskStatus;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreTaskStatus;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreTaskStatus;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreTaskStatus>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTextAntialiasingMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTextAntialiasingMode>;
					public static NONE: com.arcgismaps.internal.jni.CoreTextAntialiasingMode;
					public static NORMAL: com.arcgismaps.internal.jni.CoreTextAntialiasingMode;
					public static FORCE: com.arcgismaps.internal.jni.CoreTextAntialiasingMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreTextAntialiasingMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreTextAntialiasingMode>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreTextAntialiasingMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTextAreaFormInput extends com.arcgismaps.internal.jni.CoreFormInput {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTextAreaFormInput>;
					public getMinLength(): number;
					public static createCoreTextAreaFormInputFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTextAreaFormInput;
					public getMaxLength(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTextBoxFormInput extends com.arcgismaps.internal.jni.CoreFormInput {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTextBoxFormInput>;
					public static createCoreTextBoxFormInputFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTextBoxFormInput;
					public getMinLength(): number;
					public getMaxLength(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTextPopupElement extends com.arcgismaps.internal.jni.CorePopupElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTextPopupElement>;
					public setText(param0: string): void;
					public constructor(param0: string);
					public getText(): string;
					public constructor();
					public static createCoreTextPopupElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTextPopupElement;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTextSymbol extends com.arcgismaps.internal.jni.CoreMarkerSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTextSymbol>;
					public getFontFamily(): string;
					public getOutlineColor(): com.arcgismaps.internal.jni.CoreColor;
					public getVerticalAlignment(): com.arcgismaps.internal.jni.CoreVerticalAlignment;
					public setFontFamily(param0: string): void;
					public setSize(param0: number): void;
					public getHaloWidth(): number;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public equals(param0: com.arcgismaps.internal.jni.CoreTextSymbol): boolean;
					public getOutlineWidth(): number;
					public equals(param0: com.arcgismaps.internal.jni.CoreMarkerSymbol): boolean;
					public getSize(): number;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public setFontDecoration(param0: com.arcgismaps.internal.jni.CoreFontDecoration): void;
					public setOutlineColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public setText(param0: string): void;
					public constructor();
					public toJSON(): string;
					public setKerningEnabled(param0: boolean): void;
					public static createCoreTextSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTextSymbol;
					public getKerningEnabled(): boolean;
					public setFontStyle(param0: com.arcgismaps.internal.jni.CoreFontStyle): void;
					public getText(): string;
					public getInstanceId(): java.lang.Long;
					public setFontWeight(param0: com.arcgismaps.internal.jni.CoreFontWeight): void;
					public getHorizontalAlignment(): com.arcgismaps.internal.jni.CoreHorizontalAlignment;
					public getHaloColor(): com.arcgismaps.internal.jni.CoreColor;
					public setOutlineWidth(param0: number): void;
					public setColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreSymbol): boolean;
					public getFontWeight(): com.arcgismaps.internal.jni.CoreFontWeight;
					public getFontDecoration(): com.arcgismaps.internal.jni.CoreFontDecoration;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreColor, param2: number, param3: com.arcgismaps.internal.jni.CoreHorizontalAlignment, param4: com.arcgismaps.internal.jni.CoreVerticalAlignment);
					public setHaloWidth(param0: number): void;
					public getBackgroundColor(): com.arcgismaps.internal.jni.CoreColor;
					public getFontStyle(): com.arcgismaps.internal.jni.CoreFontStyle;
					public setVerticalAlignment(param0: com.arcgismaps.internal.jni.CoreVerticalAlignment): void;
					public setHaloColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public setBackgroundColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public setHorizontalAlignment(param0: com.arcgismaps.internal.jni.CoreHorizontalAlignment): void;
					public getColor(): com.arcgismaps.internal.jni.CoreColor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTileCache implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTileCache>;
					public mHandle: number;
					public getFullExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public constructor(param0: string);
					public finalize(): void;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getTileInfo(): com.arcgismaps.internal.jni.CoreTileInfo;
					public equals(param0: com.arcgismaps.internal.jni.CoreTileCache): boolean;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getHash(): number;
					public getAntialiasing(): boolean;
					public dispose(): void;
					public cancelLoad(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public clone(): com.arcgismaps.internal.jni.CoreTileCache;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPath(): string;
					public static nativeDestroy(param0: number): void;
					public getTileData(param0: com.arcgismaps.internal.jni.CoreTileKey): com.arcgismaps.internal.jni.CoreByteArray;
					public static createCoreTileCacheFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTileCache;
					public getThumbnail(): com.arcgismaps.internal.jni.CoreImage;
					public getCacheStorageFormat(): com.arcgismaps.internal.jni.CoreCacheStorageFormat;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTileCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTileCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTileCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						tile(param0: com.arcgismaps.internal.jni.CoreTileKey): void;
					});
					public constructor();
					public tile(param0: com.arcgismaps.internal.jni.CoreTileKey): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTileImageFormat {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTileImageFormat>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static PNG: com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static PNG8: com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static PNG24: com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static PNG32: com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static JPG: com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static MIXED: com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static LERC: com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreTileImageFormat>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreTileImageFormat;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreTileImageFormat;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTileInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTileInfo>;
					public mHandle: number;
					public getCompressionQuality(): number;
					public getFormat(): com.arcgismaps.internal.jni.CoreTileImageFormat;
					public getOrigin(): com.arcgismaps.internal.jni.CorePoint;
					public finalize(): void;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreTileImageFormat, param2: com.arcgismaps.internal.jni.CoreArray, param3: com.arcgismaps.internal.jni.CorePoint, param4: com.arcgismaps.internal.jni.CoreSpatialReference, param5: number, param6: number);
					public dispose(): void;
					public getTileWidth(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getLevelsOfDetail(): com.arcgismaps.internal.jni.CoreArray;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public static createCoreTileInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTileInfo;
					public getTileHeight(): number;
					public getHandle(): number;
					public getDPI(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTileKey {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTileKey>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public getRow(): number;
					public getLevel(): number;
					public equals(param0: com.arcgismaps.internal.jni.CoreTileKey): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public constructor(param0: number, param1: number, param2: number);
					public close(): void;
					public static createCoreTileKeyFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTileKey;
					public getColumn(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTileRequest extends com.arcgismaps.internal.jni.CoreRequest {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTileRequest>;
					public handleResponseNoDataTile(): void;
					public getInstanceId(): java.lang.Long;
					public getIsNoDataTile(): boolean;
					public getAPIKey(): string;
					public setAPIKey(param0: string): void;
					public static createCoreTileRequestFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTileRequest;
					public getTileKey(): com.arcgismaps.internal.jni.CoreTileKey;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimeAware {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimeAware>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTimeAware interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getFullTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
						getTimeInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
						getTimeOffset(): com.arcgismaps.internal.jni.CoreTimeValue;
						getIsTimeFilteringEnabled(): boolean;
						getSupportsTimeFiltering(): boolean;
						setIsTimeFilteringEnabled(param0: boolean): void;
						setTimeOffset(param0: com.arcgismaps.internal.jni.CoreTimeValue): void;
						setFullTimeExtentChangedCallback(param0: com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener): void;
					});
					public constructor();
					public getIsTimeFilteringEnabled(): boolean;
					public setIsTimeFilteringEnabled(param0: boolean): void;
					public setTimeOffset(param0: com.arcgismaps.internal.jni.CoreTimeValue): void;
					public getSupportsTimeFiltering(): boolean;
					public getFullTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public setFullTimeExtentChangedCallback(param0: com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener): void;
					public getTimeOffset(): com.arcgismaps.internal.jni.CoreTimeValue;
					public getTimeInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimeExtent {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimeExtent>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDateTime);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreTimeExtentFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTimeExtent;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: com.arcgismaps.internal.jni.CoreDateTime);
					public getEndTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public getHandle(): number;
					public getStartTime(): com.arcgismaps.internal.jni.CoreDateTime;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimeExtentChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimeExtentChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTimeExtentChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						timeExtentChanged(): void;
					});
					public constructor();
					public timeExtentChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimeOnly {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimeOnly>;
					public mHandle: number;
					public getMinutes(): number;
					public getDateTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public constructor(param0: string);
					public finalize(): void;
					public dispose(): void;
					public getSeconds(): number;
					public getHours(): number;
					public equals(param0: com.arcgismaps.internal.jni.CoreTimeOnly): boolean;
					public toString(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public constructor(param0: number, param1: number, param2: number);
					public close(): void;
					public static createCoreTimeOnlyFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTimeOnly;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimeReference {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimeReference>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public getRespectsDaylightSavings(): boolean;
					public close(): void;
					public dispose(): void;
					public static createCoreTimeReferenceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTimeReference;
					public getTimeZone(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimeRelation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimeRelation>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreTimeRelation;
					public static OVERLAPS: com.arcgismaps.internal.jni.CoreTimeRelation;
					public static AFTERSTARTOVERLAPSEND: com.arcgismaps.internal.jni.CoreTimeRelation;
					public static OVERLAPSSTARTWITHINEND: com.arcgismaps.internal.jni.CoreTimeRelation;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreTimeRelation;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreTimeRelation>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreTimeRelation;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimeUnit {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimeUnit>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static CENTURIES: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static DAYS: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static DECADES: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static HOURS: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static MILLISECONDS: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static MINUTES: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static MONTHS: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static SECONDS: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static WEEKS: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static YEARS: com.arcgismaps.internal.jni.CoreTimeUnit;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreTimeUnit>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreTimeUnit;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreTimeUnit;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimeValue {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimeValue>;
					public mHandle: number;
					public static createCoreTimeValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTimeValue;
					public getDuration(): number;
					public getUnit(): com.arcgismaps.internal.jni.CoreTimeUnit;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public constructor(param0: number, param1: com.arcgismaps.internal.jni.CoreTimeUnit);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimeZoneOffset {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimeZoneOffset>;
					public mHandle: number;
					public getMinutes(): number;
					public constructor(param0: string);
					public finalize(): void;
					public dispose(): void;
					public getHours(): number;
					public toString(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public equals(param0: com.arcgismaps.internal.jni.CoreTimeZoneOffset): boolean;
					public hash(): number;
					public static createCoreTimeZoneOffsetFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTimeZoneOffset;
					public close(): void;
					public constructor(param0: number, param1: number);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTimestampOffset {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTimestampOffset>;
					public mHandle: number;
					public getDateTime(): com.arcgismaps.internal.jni.CoreDateTime;
					public getTimeZoneOffset(): com.arcgismaps.internal.jni.CoreTimeZoneOffset;
					public getTimeOnly(): com.arcgismaps.internal.jni.CoreTimeOnly;
					public constructor(param0: string);
					public finalize(): void;
					public dispose(): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreTimestampOffset): boolean;
					public getDateOnly(): com.arcgismaps.internal.jni.CoreDateOnly;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDateTime, param1: com.arcgismaps.internal.jni.CoreTimeZoneOffset);
					public static createCoreTimestampOffsetFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTimestampOffset;
					public toString(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDateOnly, param1: com.arcgismaps.internal.jni.CoreTimeOnly, param2: com.arcgismaps.internal.jni.CoreTimeZoneOffset);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTitleChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTitleChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTitleChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						titleChanged(param0: string): void;
					});
					public constructor();
					public titleChanged(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTokenCredential extends com.arcgismaps.internal.jni.CoreArcGISCredential {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTokenCredential>;
					public static createNetworkSecuredAsync(param0: string, param1: string, param2: number): com.arcgismaps.internal.jni.CoreTask;
					public static createCoreTokenCredentialFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTokenCredential;
					public getTokenExpirationInterval(): number;
					public getTokenInfoAsync(): com.arcgismaps.internal.jni.CoreTask;
					public static createAsync(param0: string, param1: string, param2: string, param3: number): com.arcgismaps.internal.jni.CoreTask;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public static createWithChallengeAsync(param0: com.arcgismaps.internal.jni.CoreArcGISAuthenticationChallenge, param1: string, param2: string, param3: number): com.arcgismaps.internal.jni.CoreTask;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTokenInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTokenInfo>;
					public mHandle: number;
					public equals(param0: com.arcgismaps.internal.jni.CoreTokenInfo): boolean;
					public isExpired(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getIsSSLRequired(): boolean;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreDateTime, param2: boolean);
					public getAccessToken(): string;
					public static createCoreTokenInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTokenInfo;
					public getExpirationDate(): com.arcgismaps.internal.jni.CoreDateTime;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public hash(): number;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTotalDurationCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTotalDurationCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTotalDurationCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						totalDurationCallback(): void;
					});
					public constructor();
					public totalDurationCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTotalDurationChangedCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTotalDurationChangedCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTotalDurationChangedCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						totalDurationChangedCallback(param0: number): void;
					});
					public constructor();
					public totalDurationChangedCallback(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTotalMemoryRequestCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTotalMemoryRequestCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTotalMemoryRequestCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						totalMemoryRequestCallback(): void;
					});
					public constructor();
					public totalMemoryRequestCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTourStatusChangedCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTourStatusChangedCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTourStatusChangedCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						tourStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreKMLTourStatus): void;
					});
					public constructor();
					public tourStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreKMLTourStatus): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTrackDisplayProperties {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTrackDisplayProperties>;
					public mHandle: number;
					public getShowTrackLine(): boolean;
					public setTrackLineRenderer(param0: com.arcgismaps.internal.jni.CoreRenderer): void;
					public finalize(): void;
					public setMaximumDuration(param0: number): void;
					public setShowTrackLine(param0: boolean): void;
					public dispose(): void;
					public setPreviousObservationRenderer(param0: com.arcgismaps.internal.jni.CoreRenderer): void;
					public getMaximumDuration(): number;
					public getShowPreviousObservations(): boolean;
					public setShowPreviousObservations(param0: boolean): void;
					public static createCoreTrackDisplayPropertiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTrackDisplayProperties;
					public getPreviousObservationRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getMaximumObservations(): number;
					public close(): void;
					public setMaximumObservations(param0: number): void;
					public getHandle(): number;
					public getTrackLineRenderer(): com.arcgismaps.internal.jni.CoreRenderer;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTrackingDistance {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTrackingDistance>;
					public mHandle: number;
					public static createCoreTrackingDistanceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTrackingDistance;
					public getDistance(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getDisplayTextUnits(): com.arcgismaps.internal.jni.CoreLinearUnit;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getDisplayText(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTrackingProgress {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTrackingProgress>;
					public mHandle: number;
					public getRemainingTime(): number;
					public getRemainingDistance(): com.arcgismaps.internal.jni.CoreTrackingDistance;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getRemainingGeometry(): com.arcgismaps.internal.jni.CorePolyline;
					public getTraversedGeometry(): com.arcgismaps.internal.jni.CorePolyline;
					public static createCoreTrackingProgressFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTrackingProgress;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTrackingStatus extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTrackingStatus>;
					public mHandle: number;
					public getInstanceId(): java.lang.Long;
					public getDisplayLocation(): com.arcgismaps.internal.jni.CoreLocation;
					public getManeuverProgress(): com.arcgismaps.internal.jni.CoreTrackingProgress;
					public getRouteProgress(): com.arcgismaps.internal.jni.CoreTrackingProgress;
					public finalize(): void;
					public dispose(): void;
					public getDestinationStatus(): com.arcgismaps.internal.jni.CoreDestinationStatus;
					public getCurrentManeuverIndex(): number;
					public getLocationOnRoute(): com.arcgismaps.internal.jni.CoreLocation;
					public getStopIndexesAtNextDestination(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreTrackingStatusFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTrackingStatus;
					public getRemainingDestinationCount(): number;
					public getIsOnRoute(): boolean;
					public getDestinationProgress(): com.arcgismaps.internal.jni.CoreTrackingProgress;
					public getApproachingFinalDestination(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getIsRouteCalculating(): boolean;
					public close(): void;
					public getRouteResult(): com.arcgismaps.internal.jni.CoreRouteResult;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTrackingStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTrackingStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTrackingStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						trackingStatusChanged(param0: com.arcgismaps.internal.jni.CoreTrackingStatus): void;
					});
					public constructor();
					public trackingStatusChanged(param0: com.arcgismaps.internal.jni.CoreTrackingStatus): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTransactionStatusChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTransactionStatusChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTransactionStatusChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						transactionStatusChanged(param0: boolean): void;
					});
					public constructor();
					public transactionStatusChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTransformationCatalog {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTransformationCatalog>;
					public static getTransformationWithAreaOfInterest(param0: com.arcgismaps.internal.jni.CoreSpatialReference, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreEnvelope): com.arcgismaps.internal.jni.CoreDatumTransformation;
					public static getTransformationWithAreaOfInterestAndIgnoreVertical(param0: com.arcgismaps.internal.jni.CoreSpatialReference, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreEnvelope, param3: boolean): com.arcgismaps.internal.jni.CoreDatumTransformation;
					public static getProjectionEngineDirectory(): string;
					public constructor();
					public static getTransformationsBySuitabilityWithAreaOfInterestAndIgnoreVertical(param0: com.arcgismaps.internal.jni.CoreSpatialReference, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreEnvelope, param3: boolean): com.arcgismaps.internal.jni.CoreArray;
					public static getTransformationsBySuitabilityWithAreaOfInterest(param0: com.arcgismaps.internal.jni.CoreSpatialReference, param1: com.arcgismaps.internal.jni.CoreSpatialReference, param2: com.arcgismaps.internal.jni.CoreEnvelope): com.arcgismaps.internal.jni.CoreArray;
					public static getTransformationsBySuitability(param0: com.arcgismaps.internal.jni.CoreSpatialReference, param1: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreArray;
					public static setProjectionEngineDirectory(param0: string): void;
					public static getTransformation(param0: com.arcgismaps.internal.jni.CoreSpatialReference, param1: com.arcgismaps.internal.jni.CoreSpatialReference): com.arcgismaps.internal.jni.CoreDatumTransformation;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTransformationMatrix {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTransformationMatrix>;
					public mHandle: number;
					public getQuaternionZ(): number;
					public static createWithQuaternionAndTranslation(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): com.arcgismaps.internal.jni.CoreTransformationMatrix;
					public finalize(): void;
					public dispose(): void;
					public subtractTransformation(param0: com.arcgismaps.internal.jni.CoreTransformationMatrix): com.arcgismaps.internal.jni.CoreTransformationMatrix;
					public getQuaternionX(): number;
					public getTranslationY(): number;
					public addTransformation(param0: com.arcgismaps.internal.jni.CoreTransformationMatrix): com.arcgismaps.internal.jni.CoreTransformationMatrix;
					public static createCoreTransformationMatrixFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTransformationMatrix;
					public getTranslationZ(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getTranslationX(): number;
					public static createIdentityMatrix(): com.arcgismaps.internal.jni.CoreTransformationMatrix;
					public getQuaternionW(): number;
					public getQuaternionY(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTransformationMatrixCameraController extends com.arcgismaps.internal.jni.CoreCameraController {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTransformationMatrixCameraController>;
					public finalize(): void;
					public dispose(): void;
					public getOriginCamera(): com.arcgismaps.internal.jni.CoreCamera;
					public getTransformationMatrix(): com.arcgismaps.internal.jni.CoreTransformationMatrix;
					public getTranslationFactor(): number;
					public setTranslationFactorChangedCallback(param0: com.arcgismaps.internal.jni.CoreTranslationFactorChangedCallbackListener): void;
					public constructor();
					public setOriginCameraChangedCallback(param0: com.arcgismaps.internal.jni.CoreOriginCameraChangedCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreCamera);
					public static createCoreTransformationMatrixCameraControllerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTransformationMatrixCameraController;
					public setOriginCamera(param0: com.arcgismaps.internal.jni.CoreCamera): void;
					public onOriginCameraChanged(): void;
					public setClippingDistance(param0: number): void;
					public onTranslationFactorChanged(): void;
					public setTransformationMatrix(param0: com.arcgismaps.internal.jni.CoreTransformationMatrix): void;
					public setTranslationFactor(param0: number): void;
					public getClippingDistance(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTranslationFactorChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTranslationFactorChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreTranslationFactorChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						translationFactorChanged(): void;
					});
					public constructor();
					public translationFactorChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTransportationNetworkDataset extends com.arcgismaps.internal.jni.CoreGeodatabaseDataset {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTransportationNetworkDataset>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreTransportationNetworkDatasetFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTransportationNetworkDataset;
					public getAlias(): string;
					public getType(): com.arcgismaps.internal.jni.CoreGeodatabaseDatasetType;
					public getGeodatabase(): com.arcgismaps.internal.jni.CoreGeodatabase;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTravelDirection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTravelDirection>;
					public static FROMFACILITY: com.arcgismaps.internal.jni.CoreTravelDirection;
					public static TOFACILITY: com.arcgismaps.internal.jni.CoreTravelDirection;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreTravelDirection>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreTravelDirection;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreTravelDirection;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreTravelMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreTravelMode>;
					public mHandle: number;
					public setDescription(param0: string): void;
					public setDistanceAttributeName(param0: string): void;
					public setAttributeParameterValues(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public finalize(): void;
					public getTimeAttributeName(): string;
					public setType(param0: string): void;
					public getAttributeParameterValues(): com.arcgismaps.internal.jni.CoreVector;
					public setTimeAttributeName(param0: string): void;
					public setUseHierarchy(param0: boolean): void;
					public getRestrictionAttributeNames(): com.arcgismaps.internal.jni.CoreVector;
					public constructor();
					public close(): void;
					public getType(): string;
					public getUseHierarchy(): boolean;
					public getDistanceAttributeName(): string;
					public getUTurnPolicy(): com.arcgismaps.internal.jni.CoreUTurnPolicy;
					public setUTurnPolicy(param0: com.arcgismaps.internal.jni.CoreUTurnPolicy): void;
					public dispose(): void;
					public setOutputGeometryPrecision(param0: number): void;
					public setRestrictionAttributeNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setImpedanceAttributeName(param0: string): void;
					public setName(param0: string): void;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getOutputGeometryPrecision(): number;
					public getDescription(): string;
					public static createCoreTravelModeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreTravelMode;
					public getImpedanceAttributeName(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreURLUtils {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreURLUtils>;
					public static convertToHTTPS(param0: string): string;
					public static getServerContext(param0: string): string;
					public constructor();
					public static getServerInfoURL(param0: string): string;
					public static isHTTP(param0: string): boolean;
					public static normalize(param0: string): string;
					public static isHTTPS(param0: string): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUSNGGrid extends com.arcgismaps.internal.jni.CoreGrid {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUSNGGrid>;
					public setLabelUnit(param0: com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit): void;
					public constructor();
					public getLabelUnit(): com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit;
					public static createCoreUSNGGridFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUSNGGrid;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUSNGGridLabelUnit {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit>;
					public static KILOMETERSMETERS: com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit;
					public static METERS: com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUTMConversionMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUTMConversionMode>;
					public static LATITUDEBANDINDICATORS: com.arcgismaps.internal.jni.CoreUTMConversionMode;
					public static NORTHSOUTHINDICATORS: com.arcgismaps.internal.jni.CoreUTMConversionMode;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUTMConversionMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUTMConversionMode>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUTMConversionMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUTMGrid extends com.arcgismaps.internal.jni.CoreGrid {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUTMGrid>;
					public static createCoreUTMGridFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUTMGrid;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUTurnPolicy {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUTurnPolicy>;
					public static NOTALLOWED: com.arcgismaps.internal.jni.CoreUTurnPolicy;
					public static ALLOWEDATDEADENDS: com.arcgismaps.internal.jni.CoreUTurnPolicy;
					public static ALLOWEDATINTERSECTIONS: com.arcgismaps.internal.jni.CoreUTurnPolicy;
					public static ALLOWEDATDEADENDSANDINTERSECTIONS: com.arcgismaps.internal.jni.CoreUTurnPolicy;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUTurnPolicy>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUTurnPolicy;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUTurnPolicy;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUniqueValue implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUniqueValue>;
					public mHandle: number;
					public setDescription(param0: string): void;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreUniqueValue;
					public setLabel(param0: string): void;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCoreUniqueValueFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUniqueValue;
					public getValues(): com.arcgismaps.internal.jni.CoreVector;
					public constructor();
					public toJSON(): string;
					public close(): void;
					public clone(): com.arcgismaps.internal.jni.CoreUniqueValue;
					public setAlternateSymbols(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor(param0: string, param1: string, param2: com.arcgismaps.internal.jni.CoreSymbol, param3: com.arcgismaps.internal.jni.CoreVector, param4: com.arcgismaps.internal.jni.CoreArray);
					public getLabel(): string;
					public equals(param0: com.arcgismaps.internal.jni.CoreUniqueValue): boolean;
					public getInstanceId(): java.lang.Long;
					public getSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public getHash(): number;
					public setSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public dispose(): void;
					public static nativeDestroy(param0: number): void;
					public constructor(param0: string, param1: string, param2: com.arcgismaps.internal.jni.CoreSymbol, param3: com.arcgismaps.internal.jni.CoreVector);
					public setValues(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getDescription(): string;
					public getHandle(): number;
					public getAlternateSymbols(): com.arcgismaps.internal.jni.CoreVector;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUniqueValueRenderer extends com.arcgismaps.internal.jni.CoreRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUniqueValueRenderer>;
					public getFieldNames(): com.arcgismaps.internal.jni.CoreVector;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector, param1: com.arcgismaps.internal.jni.CoreVector, param2: string, param3: com.arcgismaps.internal.jni.CoreSymbol);
					public getUniqueValues(): com.arcgismaps.internal.jni.CoreVector;
					public getDefaultLabel(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public static createCoreUniqueValueRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUniqueValueRenderer;
					public getDefaultSymbol(): com.arcgismaps.internal.jni.CoreSymbol;
					public constructor();
					public setFieldNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setDefaultSymbol(param0: com.arcgismaps.internal.jni.CoreSymbol): void;
					public toJSON(): string;
					public setDefaultLabel(param0: string): void;
					public setUniqueValues(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnit {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnit>;
					public mHandle: number;
					public getPluralDisplayName(): string;
					public getDisplayName(): string;
					public getAbbreviation(): string;
					public finalize(): void;
					public dispose(): void;
					public static fromWKID(param0: number): com.arcgismaps.internal.jni.CoreUnit;
					public getWKID(): number;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUnit;
					public static createCoreUnitFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUnit;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getObjectType(): com.arcgismaps.internal.jni.CoreUnitType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnitSystem {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnitSystem>;
					public static IMPERIAL: com.arcgismaps.internal.jni.CoreUnitSystem;
					public static METRIC: com.arcgismaps.internal.jni.CoreUnitSystem;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUnitSystem;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUnitSystem;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUnitSystem>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnitType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnitType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreUnitType;
					public static LINEARUNIT: com.arcgismaps.internal.jni.CoreUnitType;
					public static ANGULARUNIT: com.arcgismaps.internal.jni.CoreUnitType;
					public static AREAUNIT: com.arcgismaps.internal.jni.CoreUnitType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUnitType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUnitType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUnitType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnknownLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnknownLayer>;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public static createCoreUnknownLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUnknownLayer;
					public getName(): string;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setIsVisible(param0: boolean): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnsupportedFormElement extends com.arcgismaps.internal.jni.CoreFormElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnsupportedFormElement>;
					public static createCoreUnsupportedFormElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUnsupportedFormElement;
					public getInstanceId(): java.lang.Long;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnsupportedFormInput extends com.arcgismaps.internal.jni.CoreFormInput {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnsupportedFormInput>;
					public static createCoreUnsupportedFormInputFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUnsupportedFormInput;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnsupportedLayer extends com.arcgismaps.internal.jni.CoreLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnsupportedLayer>;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public getName(): string;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public setIsVisible(param0: boolean): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public static createCoreUnsupportedLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUnsupportedLayer;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnsupportedPopupElement extends com.arcgismaps.internal.jni.CorePopupElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnsupportedPopupElement>;
					public static createCoreUnsupportedPopupElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUnsupportedPopupElement;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnsupportedRenderer extends com.arcgismaps.internal.jni.CoreRenderer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnsupportedRenderer>;
					public static createCoreUnsupportedRendererFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUnsupportedRenderer;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUnsupportedSymbol extends com.arcgismaps.internal.jni.CoreSymbol {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUnsupportedSymbol>;
					public static createCoreUnsupportedSymbolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUnsupportedSymbol;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUsedMemoryRequestCallbackCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUsedMemoryRequestCallbackCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreUsedMemoryRequestCallbackCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						usedMemoryRequestCallback(): void;
					});
					public constructor();
					public usedMemoryRequestCallback(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUserInterfaceStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUserInterfaceStyle>;
					public static UNSPECIFIED: com.arcgismaps.internal.jni.CoreUserInterfaceStyle;
					public static LIGHT: com.arcgismaps.internal.jni.CoreUserInterfaceStyle;
					public static DARK: com.arcgismaps.internal.jni.CoreUserInterfaceStyle;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUserInterfaceStyle;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUserInterfaceStyle>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUserInterfaceStyle;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityAssetGroup extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityAssetGroup>;
					public mHandle: number;
					public getInstanceId(): java.lang.Long;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getAssetTypes(): com.arcgismaps.internal.jni.CoreArray;
					public getAssetType(param0: string): com.arcgismaps.internal.jni.CoreUtilityAssetType;
					public static createCoreUtilityAssetGroupFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityAssetGroup;
					public getHandle(): number;
					public getCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityAssetType extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityAssetType>;
					public mHandle: number;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public dispose(): void;
					public getAssociationDeletionSemantics(): com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics;
					public getTerminalConfiguration(): com.arcgismaps.internal.jni.CoreUtilityTerminalConfiguration;
					public getContainerViewScale(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getCategories(): com.arcgismaps.internal.jni.CoreArray;
					public getAssociationRole(): com.arcgismaps.internal.jni.CoreUtilityAssociationRole;
					public static createCoreUtilityAssetTypeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityAssetType;
					public getHandle(): number;
					public getCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityAssociation {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityAssociation>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public static createCoreUtilityAssociationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityAssociation;
					public getFromElement(): com.arcgismaps.internal.jni.CoreUtilityElement;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public getIsContainmentVisible(): boolean;
					public getFractionAlongEdge(): number;
					public getGlobalId(): com.arcgismaps.internal.jni.CoreGUID;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getAssociationType(): com.arcgismaps.internal.jni.CoreUtilityAssociationType;
					public getHandle(): number;
					public getToElement(): com.arcgismaps.internal.jni.CoreUtilityElement;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityAssociationDeletionSemantics {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics>;
					public static NONE: com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics;
					public static CASCADE: com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics;
					public static RESTRICTED: com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityAssociationRole {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityAssociationRole>;
					public static NONE: com.arcgismaps.internal.jni.CoreUtilityAssociationRole;
					public static CONTAINER: com.arcgismaps.internal.jni.CoreUtilityAssociationRole;
					public static STRUCTURE: com.arcgismaps.internal.jni.CoreUtilityAssociationRole;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityAssociationRole;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityAssociationRole>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityAssociationRole;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityAssociationType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityAssociationType>;
					public static CONNECTIVITY: com.arcgismaps.internal.jni.CoreUtilityAssociationType;
					public static CONTAINMENT: com.arcgismaps.internal.jni.CoreUtilityAssociationType;
					public static ATTACHMENT: com.arcgismaps.internal.jni.CoreUtilityAssociationType;
					public static JUNCTIONEDGEOBJECTCONNECTIVITYFROMSIDE: com.arcgismaps.internal.jni.CoreUtilityAssociationType;
					public static JUNCTIONEDGEOBJECTCONNECTIVITYMIDSPAN: com.arcgismaps.internal.jni.CoreUtilityAssociationType;
					public static JUNCTIONEDGEOBJECTCONNECTIVITYTOSIDE: com.arcgismaps.internal.jni.CoreUtilityAssociationType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityAssociationType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityAssociationType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityAssociationType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator>;
					public static EQUAL: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static NOTEQUAL: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static GREATERTHAN: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static GREATERTHANEQUAL: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static LESSTHAN: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static LESSTHANEQUAL: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static INCLUDESTHEVALUES: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static DOESNOTINCLUDETHEVALUES: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static INCLUDESANY: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static DOESNOTINCLUDEANY: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityCategory {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityCategory>;
					public mHandle: number;
					public static createCoreUtilityCategoryFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityCategory;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityCategoryComparison extends com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityCategoryComparison>;
					public constructor();
					public getComparisonOperator(): com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityCategory, param1: com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator);
					public getCategory(): com.arcgismaps.internal.jni.CoreUtilityCategory;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator);
					public static createCoreUtilityCategoryComparisonFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityCategoryComparison;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityCategoryComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator>;
					public static EXISTS: com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator;
					public static DOESNOTEXIST: com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityDomainNetwork extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityDomainNetwork>;
					public mHandle: number;
					public getInstanceId(): java.lang.Long;
					public finalize(): void;
					public dispose(): void;
					public getDomainNetworkId(): number;
					public getTiers(): com.arcgismaps.internal.jni.CoreArray;
					public getIsStructureNetwork(): boolean;
					public getTierType(): com.arcgismaps.internal.jni.CoreUtilityTierType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getTierGroup(param0: string): com.arcgismaps.internal.jni.CoreUtilityTierGroup;
					public close(): void;
					public getSubnetworkControllerType(): com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType;
					public static createCoreUtilityDomainNetworkFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityDomainNetwork;
					public getAlias(): string;
					public getNetworkSources(): com.arcgismaps.internal.jni.CoreArray;
					public getTierGroups(): com.arcgismaps.internal.jni.CoreArray;
					public getTier(param0: string): com.arcgismaps.internal.jni.CoreUtilityTier;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityElement>;
					public mHandle: number;
					public getIsValid(): boolean;
					public getAssetType(): com.arcgismaps.internal.jni.CoreUtilityAssetType;
					public getAssetGroup(): com.arcgismaps.internal.jni.CoreUtilityAssetGroup;
					public finalize(): void;
					public dispose(): void;
					public getFractionAlongEdge(): number;
					public getTerminal(): com.arcgismaps.internal.jni.CoreUtilityTerminal;
					public setFractionAlongEdge(param0: number): void;
					public getGlobalId(): com.arcgismaps.internal.jni.CoreGUID;
					public getObjectId(): number;
					public setTerminal(param0: com.arcgismaps.internal.jni.CoreUtilityTerminal): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public static createCoreUtilityElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityElement;
					public getNetworkSource(): com.arcgismaps.internal.jni.CoreUtilityNetworkSource;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityElementTraceResult extends com.arcgismaps.internal.jni.CoreUtilityTraceResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityElementTraceResult>;
					public static createCoreUtilityElementTraceResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityElementTraceResult;
					public getElements(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityFunctionTraceResult extends com.arcgismaps.internal.jni.CoreUtilityTraceResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityFunctionTraceResult>;
					public static createCoreUtilityFunctionTraceResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityFunctionTraceResult;
					public getFunctionOutputs(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityGeometryTraceResult extends com.arcgismaps.internal.jni.CoreUtilityTraceResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityGeometryTraceResult>;
					public static createCoreUtilityGeometryTraceResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityGeometryTraceResult;
					public getMultipoint(): com.arcgismaps.internal.jni.CoreMultipoint;
					public getPolygon(): com.arcgismaps.internal.jni.CorePolygon;
					public getPolyline(): com.arcgismaps.internal.jni.CorePolyline;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityMinimumStartingLocations {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityMinimumStartingLocations>;
					public static ONE: com.arcgismaps.internal.jni.CoreUtilityMinimumStartingLocations;
					public static MANY: com.arcgismaps.internal.jni.CoreUtilityMinimumStartingLocations;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityMinimumStartingLocations;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityMinimumStartingLocations>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityMinimumStartingLocations;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNamedTraceConfiguration {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfiguration>;
					public mHandle: number;
					public getMinimumStartingLocations(): com.arcgismaps.internal.jni.CoreUtilityMinimumStartingLocations;
					public static createCoreUtilityNamedTraceConfigurationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfiguration;
					public finalize(): void;
					public dispose(): void;
					public getCreator(): string;
					public getDefaultTraceConfiguration(): com.arcgismaps.internal.jni.CoreUtilityTraceConfiguration;
					public getTraceType(): com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public getGlobalId(): com.arcgismaps.internal.jni.CoreGUID;
					public getResultTypes(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getDescription(): string;
					public getHandle(): number;
					public getTags(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNamedTraceConfigurationQueryParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfigurationQueryParameters>;
					public mHandle: number;
					public getNames(): com.arcgismaps.internal.jni.CoreVector;
					public setGlobalIds(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getGlobalIds(): com.arcgismaps.internal.jni.CoreVector;
					public getTags(): com.arcgismaps.internal.jni.CoreVector;
					public finalize(): void;
					public dispose(): void;
					public getCreators(): com.arcgismaps.internal.jni.CoreVector;
					public static createCoreUtilityNamedTraceConfigurationQueryParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfigurationQueryParameters;
					public setCreators(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setTags(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getHandle(): number;
					public setNames(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNearestNeighbor {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor>;
					public mHandle: number;
					public static createWithAssetTypesAndCategories(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute, param1: number, param2: com.arcgismaps.internal.jni.CoreVector, param3: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor;
					public getCount(): number;
					public static createWithAssetTypes(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute, param1: number, param2: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor;
					public finalize(): void;
					public dispose(): void;
					public getAssetTypes(): com.arcgismaps.internal.jni.CoreArray;
					public getCostNetworkAttribute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public static createWithCategories(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute, param1: number, param2: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor;
					public getCategories(): com.arcgismaps.internal.jni.CoreArray;
					public static createCoreUtilityNearestNeighborFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNearestNeighborResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult>;
					public static NOTAPPLICABLE: com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult;
					public static ALLREQUESTEDNEIGHBORSFOUND: com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult;
					public static FEWERNEIGHBORSFOUND: com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetwork implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetwork>;
					public mHandle: number;
					public createElementWithArcGISFeatureAndTerminal(param0: com.arcgismaps.internal.jni.CoreArcGISFeature, param1: com.arcgismaps.internal.jni.CoreUtilityTerminal): com.arcgismaps.internal.jni.CoreUtilityElement;
					public getDefinition(): com.arcgismaps.internal.jni.CoreUtilityNetworkDefinition;
					public trace(param0: com.arcgismaps.internal.jni.CoreUtilityTraceParameters): com.arcgismaps.internal.jni.CoreTask;
					public constructor(param0: string);
					public getDirtyAreaTable(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public finalize(): void;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public queryNamedTraceConfigurations(param0: com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfigurationQueryParameters): com.arcgismaps.internal.jni.CoreTask;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public getAssociationsWithAssociationType(param0: com.arcgismaps.internal.jni.CoreUtilityElement, param1: com.arcgismaps.internal.jni.CoreUtilityAssociationType): com.arcgismaps.internal.jni.CoreTask;
					public getStateAsync(): com.arcgismaps.internal.jni.CoreTask;
					public onRequestRequired(param0: number): void;
					public getAssociationsWithEnvelopeAndAssociationType(param0: com.arcgismaps.internal.jni.CoreEnvelope, param1: com.arcgismaps.internal.jni.CoreUtilityAssociationType): com.arcgismaps.internal.jni.CoreTask;
					public static createCoreUtilityNetworkFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetwork;
					public createElementWithArcGISFeature(param0: com.arcgismaps.internal.jni.CoreArcGISFeature): com.arcgismaps.internal.jni.CoreUtilityElement;
					public createElementWithAssetTypeAndTerminal(param0: com.arcgismaps.internal.jni.CoreUtilityAssetType, param1: com.arcgismaps.internal.jni.CoreGUID, param2: com.arcgismaps.internal.jni.CoreUtilityTerminal): com.arcgismaps.internal.jni.CoreUtilityElement;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreMap);
					public getURI(): string;
					public getInstanceId(): java.lang.Long;
					public getFeaturesForElements(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public dispose(): void;
					public cancelLoad(): void;
					public getAssociations(param0: com.arcgismaps.internal.jni.CoreUtilityElement): com.arcgismaps.internal.jni.CoreTask;
					public validateNetworkTopologyWithExecutionType(param0: com.arcgismaps.internal.jni.CoreEnvelope, param1: com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType): com.arcgismaps.internal.jni.CoreUtilityNetworkValidationJob;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getServiceGeodatabase(): com.arcgismaps.internal.jni.CoreServiceGeodatabase;
					public validateNetworkTopology(param0: com.arcgismaps.internal.jni.CoreEnvelope): com.arcgismaps.internal.jni.CoreUtilityNetworkValidationJob;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getAssociationsWithEnvelope(param0: com.arcgismaps.internal.jni.CoreEnvelope): com.arcgismaps.internal.jni.CoreTask;
					public static nativeDestroy(param0: number): void;
					public getName(): string;
					public getGeodatabase(): com.arcgismaps.internal.jni.CoreGeodatabase;
					public getHandle(): number;
					public createElementWithAssetType(param0: com.arcgismaps.internal.jni.CoreUtilityAssetType, param1: com.arcgismaps.internal.jni.CoreGUID): com.arcgismaps.internal.jni.CoreUtilityElement;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkAttribute extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute>;
					public mHandle: number;
					public static createCoreUtilityNetworkAttributeFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public getInstanceId(): java.lang.Long;
					public getIsSystemDefined(): boolean;
					public getDataType(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType;
					public getIsSubstitution(): boolean;
					public finalize(): void;
					public dispose(): void;
					public getDomain(): com.arcgismaps.internal.jni.CoreDomain;
					public getIsApportionable(): boolean;
					public getNetworkAttributeToSubstitute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkAttributeComparison extends com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeComparison>;
					public static createCoreUtilityNetworkAttributeComparisonFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeComparison;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute, param1: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator, param2: com.arcgismaps.internal.jni.CoreElement);
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute, param1: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator, param2: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute);
					public getComparisonOperator(): com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public getValue(): com.arcgismaps.internal.jni.CoreElement;
					public getNetworkAttribute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public getOtherNetworkAttribute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkAttributeDataType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType>;
					public static INTEGER: com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType;
					public static FLOAT: com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType;
					public static DOUBLE: com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType;
					public static BOOLEAN: com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkCapabilities {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkCapabilities>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static createCoreUtilityNetworkCapabilitiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkCapabilities;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getSupportsTrace(): boolean;
					public getSupportsNetworkState(): boolean;
					public getSupportsValidateNetworkTopology(): boolean;
					public getSupportsQueryAssociations(): boolean;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkDefinition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkDefinition>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public getDomainNetworks(): com.arcgismaps.internal.jni.CoreArray;
					public getNetworkSource(param0: string): com.arcgismaps.internal.jni.CoreUtilityNetworkSource;
					public getSchemaVersion(): number;
					public getNetworkAttribute(param0: string): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public static createCoreUtilityNetworkDefinitionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkDefinition;
					public getNetworkSources(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getRulesAsync(param0: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public getTerminalConfigurations(): com.arcgismaps.internal.jni.CoreArray;
					public getDomainNetwork(param0: string): com.arcgismaps.internal.jni.CoreUtilityDomainNetwork;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getNetworkAttributes(): com.arcgismaps.internal.jni.CoreArray;
					public getCapabilities(): com.arcgismaps.internal.jni.CoreUtilityNetworkCapabilities;
					public close(): void;
					public getCategories(): com.arcgismaps.internal.jni.CoreArray;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkSource extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkSource>;
					public mHandle: number;
					public getAssetGroups(): com.arcgismaps.internal.jni.CoreArray;
					public getSourceId(): number;
					public getInstanceId(): java.lang.Long;
					public getFeatureTable(): com.arcgismaps.internal.jni.CoreArcGISFeatureTable;
					public finalize(): void;
					public static createCoreUtilityNetworkSourceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkSource;
					public getSourceUsageType(): com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public dispose(): void;
					public getSourceType(): com.arcgismaps.internal.jni.CoreUtilityNetworkSourceType;
					public getAssetGroup(param0: string): com.arcgismaps.internal.jni.CoreUtilityAssetGroup;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkSourceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkSourceType>;
					public static JUNCTION: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceType;
					public static EDGE: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityNetworkSourceType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkSourceType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityNetworkSourceType;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType>;
					public static DEVICE: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static JUNCTION: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static LINE: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static ASSEMBLY: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static SUBNETLINE: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static STRUCTUREJUNCTION: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static STRUCTURELINE: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static STRUCTUREBOUNDARY: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static JUNCTIONOBJECT: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static EDGEOBJECT: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static STRUCTUREJUNCTIONOBJECT: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static STRUCTUREEDGEOBJECT: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkState {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkState>;
					public mHandle: number;
					public getIsNetworkTopologyEnabled(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getHasDirtyAreas(): boolean;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreUtilityNetworkStateFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkState;
					public getHandle(): number;
					public getHasErrors(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkSyncMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode>;
					public static NONE: com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode;
					public static SYNCSYSTEMTABLES: com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode;
					public static SYNCSYSTEMANDTOPOLOGYTABLES: com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityNetworkValidationJob extends com.arcgismaps.internal.jni.CoreJob {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityNetworkValidationJob>;
					public getInstanceId(): java.lang.Long;
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public toJSON(): string;
					public getResult(): com.arcgismaps.internal.jni.CoreUtilityValidationResult;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public static createCoreUtilityNetworkValidationJobFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityNetworkValidationJob;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityPropagator {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityPropagator>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute, param1: com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType, param2: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator, param3: com.arcgismaps.internal.jni.CoreElement);
					public finalize(): void;
					public dispose(): void;
					public getValue(): com.arcgismaps.internal.jni.CoreElement;
					public static createCoreUtilityPropagatorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityPropagator;
					public getNetworkAttribute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public getSubstitutionNetworkAttribute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public getPropagatorFunctionType(): com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute, param1: com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType, param2: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator, param3: com.arcgismaps.internal.jni.CoreElement, param4: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute);
					public getComparisonOperator(): com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityPropagatorFunctionType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType>;
					public static BITWISEAND: com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType;
					public static MAX: com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType;
					public static MIN: com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityRule {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityRule>;
					public mHandle: number;
					public getRuleType(): com.arcgismaps.internal.jni.CoreUtilityRuleType;
					public getRuleId(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getFromElement(): com.arcgismaps.internal.jni.CoreUtilityRuleElement;
					public finalize(): void;
					public getViaElement(): com.arcgismaps.internal.jni.CoreUtilityRuleElement;
					public close(): void;
					public dispose(): void;
					public static createCoreUtilityRuleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityRule;
					public getToElement(): com.arcgismaps.internal.jni.CoreUtilityRuleElement;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityRuleElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityRuleElement>;
					public mHandle: number;
					public getAssetType(): com.arcgismaps.internal.jni.CoreUtilityAssetType;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getAssetGroup(): com.arcgismaps.internal.jni.CoreUtilityAssetGroup;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreUtilityRuleElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityRuleElement;
					public getNetworkSource(): com.arcgismaps.internal.jni.CoreUtilityNetworkSource;
					public getTerminal(): com.arcgismaps.internal.jni.CoreUtilityTerminal;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityRuleType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityRuleType>;
					public static JUNCTIONJUNCTIONCONNECTIVITY: com.arcgismaps.internal.jni.CoreUtilityRuleType;
					public static CONTAINMENT: com.arcgismaps.internal.jni.CoreUtilityRuleType;
					public static ATTACHMENT: com.arcgismaps.internal.jni.CoreUtilityRuleType;
					public static JUNCTIONEDGECONNECTIVITY: com.arcgismaps.internal.jni.CoreUtilityRuleType;
					public static EDGEJUNCTIONEDGECONNECTIVITY: com.arcgismaps.internal.jni.CoreUtilityRuleType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityRuleType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityRuleType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityRuleType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilitySubnetworkControllerType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType>;
					public static NONE: com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType;
					public static SOURCE: com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType;
					public static SINK: com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTerminal extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTerminal>;
					public mHandle: number;
					public static createCoreUtilityTerminalFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTerminal;
					public getInstanceId(): java.lang.Long;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getIsUpstreamTerminal(): boolean;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getTerminalId(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTerminalConfiguration {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTerminalConfiguration>;
					public mHandle: number;
					public finalize(): void;
					public dispose(): void;
					public static createCoreUtilityTerminalConfigurationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTerminalConfiguration;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getDefaultConfigurationPath(): com.arcgismaps.internal.jni.CoreUtilityTerminalConfigurationPath;
					public getName(): string;
					public close(): void;
					public getDirectionality(): com.arcgismaps.internal.jni.CoreUtilityTerminalDirectionality;
					public getTerminalConfigurationId(): number;
					public getTerminals(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
					public getConfigurationPaths(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTerminalConfigurationPath {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTerminalConfigurationPath>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreUtilityTerminalConfigurationPathFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTerminalConfigurationPath;
					public getDescription(): string;
					public getHandle(): number;
					public getTerminalPaths(): com.arcgismaps.internal.jni.CoreArray;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTerminalDirectionality {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTerminalDirectionality>;
					public static UNIDIRECTIONAL: com.arcgismaps.internal.jni.CoreUtilityTerminalDirectionality;
					public static BIDIRECTIONAL: com.arcgismaps.internal.jni.CoreUtilityTerminalDirectionality;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityTerminalDirectionality>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityTerminalDirectionality;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityTerminalDirectionality;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTerminalPath {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTerminalPath>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getToTerminal(): com.arcgismaps.internal.jni.CoreUtilityTerminal;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreUtilityTerminalPathFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTerminalPath;
					public getFromTerminal(): com.arcgismaps.internal.jni.CoreUtilityTerminal;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTier extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTier>;
					public mHandle: number;
					public getInstanceId(): java.lang.Long;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreUtilityTierFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTier;
					public getDefaultTraceConfiguration(): com.arcgismaps.internal.jni.CoreUtilityTraceConfiguration;
					public getRank(): number;
					public getTopologyType(): com.arcgismaps.internal.jni.CoreUtilityTierTopologyType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTierGroup extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTierGroup>;
					public mHandle: number;
					public static createCoreUtilityTierGroupFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTierGroup;
					public getInstanceId(): java.lang.Long;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getTiers(): com.arcgismaps.internal.jni.CoreArray;
					public getTier(param0: string): com.arcgismaps.internal.jni.CoreUtilityTier;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTierTopologyType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTierTopologyType>;
					public static RADIAL: com.arcgismaps.internal.jni.CoreUtilityTierTopologyType;
					public static MESH: com.arcgismaps.internal.jni.CoreUtilityTierTopologyType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityTierTopologyType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityTierTopologyType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityTierTopologyType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTierType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTierType>;
					public static HIERARCHICAL: com.arcgismaps.internal.jni.CoreUtilityTierType;
					public static PARTITIONED: com.arcgismaps.internal.jni.CoreUtilityTierType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityTierType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityTierType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityTierType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceAndCondition extends com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceAndCondition>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression, param1: com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression);
					public static createCoreUtilityTraceAndConditionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceAndCondition;
					public constructor();
					public getRightExpression(): com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression;
					public getLeftExpression(): com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceCondition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceCondition>;
					public mHandle: number;
					public static createCoreUtilityTraceConditionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceCondition;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceCondition;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
					public getObjectType(): com.arcgismaps.internal.jni.CoreUtilityTraceConditionType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceConditionType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceConditionType>;
					public static UTILITYNETWORKATTRIBUTECOMPARISON: com.arcgismaps.internal.jni.CoreUtilityTraceConditionType;
					public static UTILITYCATEGORYCOMPARISON: com.arcgismaps.internal.jni.CoreUtilityTraceConditionType;
					public static UTILITYTRACEANDCONDITION: com.arcgismaps.internal.jni.CoreUtilityTraceConditionType;
					public static UTILITYTRACEORCONDITION: com.arcgismaps.internal.jni.CoreUtilityTraceConditionType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceConditionType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityTraceConditionType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityTraceConditionType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceConditionalExpression extends com.arcgismaps.internal.jni.CoreUtilityTraceCondition {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression>;
					public constructor();
					public static createCoreUtilityTraceConditionalExpressionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceConfiguration {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceConfiguration>;
					public mHandle: number;
					public getIncludeStructures(): boolean;
					public getIncludeContent(): boolean;
					public getIncludeIsolatedFeatures(): boolean;
					public setIgnoreBarriersAtStartingPoints(param0: boolean): void;
					public finalize(): void;
					public setIncludeIsolatedFeatures(param0: boolean): void;
					public setOutputCondition(param0: com.arcgismaps.internal.jni.CoreUtilityTraceCondition): void;
					public getSourceTier(): com.arcgismaps.internal.jni.CoreUtilityTier;
					public setFunctions(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public setValidateLocatability(param0: boolean): void;
					public getFunctions(): com.arcgismaps.internal.jni.CoreVector;
					public getIncludeContainers(): boolean;
					public setShortestPathNetworkAttribute(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute): void;
					public getIgnoreBarriersAtStartingPoints(): boolean;
					public getTraversability(): com.arcgismaps.internal.jni.CoreUtilityTraversability;
					public setTraversability(param0: com.arcgismaps.internal.jni.CoreUtilityTraversability): void;
					public constructor();
					public setFilter(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFilter): void;
					public setValidateConsistency(param0: boolean): void;
					public close(): void;
					public setIncludeStructures(param0: boolean): void;
					public getOutputCondition(): com.arcgismaps.internal.jni.CoreUtilityTraceCondition;
					public setDomainNetwork(param0: com.arcgismaps.internal.jni.CoreUtilityDomainNetwork): void;
					public setTargetTier(param0: com.arcgismaps.internal.jni.CoreUtilityTier): void;
					public static createCoreUtilityTraceConfigurationFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceConfiguration;
					public setIncludeContainers(param0: boolean): void;
					public setIncludeUpToFirstSpatialContainer(param0: boolean): void;
					public setPropagators(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getIncludeBarriers(): boolean;
					public getOutputAssetTypes(): com.arcgismaps.internal.jni.CoreVector;
					public getDomainNetwork(): com.arcgismaps.internal.jni.CoreUtilityDomainNetwork;
					public dispose(): void;
					public setSourceTier(param0: com.arcgismaps.internal.jni.CoreUtilityTier): void;
					public setAllowIndeterminateFlow(param0: boolean): void;
					public getPropagators(): com.arcgismaps.internal.jni.CoreVector;
					public setIncludeBarriers(param0: boolean): void;
					public getIncludeUpToFirstSpatialContainer(): boolean;
					public setIncludeContent(param0: boolean): void;
					public setOutputAssetTypes(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getShortestPathNetworkAttribute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public getValidateLocatability(): boolean;
					public getAllowIndeterminateFlow(): boolean;
					public static nativeDestroy(param0: number): void;
					public getTargetTier(): com.arcgismaps.internal.jni.CoreUtilityTier;
					public getFilter(): com.arcgismaps.internal.jni.CoreUtilityTraceFilter;
					public getHandle(): number;
					public getValidateConsistency(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceFilter {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceFilter>;
					public mHandle: number;
					public getBarriers(): com.arcgismaps.internal.jni.CoreUtilityTraceCondition;
					public setBarriers(param0: com.arcgismaps.internal.jni.CoreUtilityTraceCondition): void;
					public finalize(): void;
					public dispose(): void;
					public getFunctionBarriers(): com.arcgismaps.internal.jni.CoreVector;
					public getNearestNeighbor(): com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor;
					public setScope(param0: com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setBitsetNetworkAttribute(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute): void;
					public close(): void;
					public getBitsetNetworkAttribute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public getScope(): com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope;
					public setNearestNeighbor(param0: com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor): void;
					public static createCoreUtilityTraceFilterFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceFilter;
					public getHandle(): number;
					public setFunctionBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceFunction {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceFunction>;
					public mHandle: number;
					public setCondition(param0: com.arcgismaps.internal.jni.CoreUtilityTraceCondition): void;
					public static createCoreUtilityTraceFunctionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceFunction;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType, param1: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute);
					public finalize(): void;
					public dispose(): void;
					public getCondition(): com.arcgismaps.internal.jni.CoreUtilityTraceCondition;
					public getNetworkAttribute(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType, param1: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute, param2: com.arcgismaps.internal.jni.CoreUtilityTraceCondition);
					public getFunctionType(): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceFunctionBarrier {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceFunctionBarrier>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunction, param1: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator, param2: com.arcgismaps.internal.jni.CoreElement);
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getTraceFunction(): com.arcgismaps.internal.jni.CoreUtilityTraceFunction;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreUtilityTraceFunctionBarrierFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionBarrier;
					public getComparisonOperator(): com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
					public getValue(): com.arcgismaps.internal.jni.CoreElement;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceFunctionOutput {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceFunctionOutput>;
					public mHandle: number;
					public getResult(): com.arcgismaps.internal.jni.CoreElement;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getFunction(): com.arcgismaps.internal.jni.CoreUtilityTraceFunction;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreUtilityTraceFunctionOutputFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionOutput;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceFunctionType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType>;
					public static ADD: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
					public static AVERAGE: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
					public static COUNT: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
					public static MAX: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
					public static MIN: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
					public static SUBTRACT: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType>;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceOrCondition extends com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceOrCondition>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression, param1: com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression);
					public static createCoreUtilityTraceOrConditionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceOrCondition;
					public constructor();
					public getRightExpression(): com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression;
					public getLeftExpression(): com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceParameters {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceParameters>;
					public mHandle: number;
					public getTraceConfiguration(): com.arcgismaps.internal.jni.CoreUtilityTraceConfiguration;
					public getFilterBarriers(): com.arcgismaps.internal.jni.CoreVector;
					public static createCoreUtilityTraceParametersFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceParameters;
					public finalize(): void;
					public dispose(): void;
					public getBarriers(): com.arcgismaps.internal.jni.CoreVector;
					public getTraceType(): com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public setBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfiguration, param1: com.arcgismaps.internal.jni.CoreArray);
					public getResultTypes(): com.arcgismaps.internal.jni.CoreVector;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public setFilterBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceType, param1: com.arcgismaps.internal.jni.CoreVector);
					public setTraceConfiguration(param0: com.arcgismaps.internal.jni.CoreUtilityTraceConfiguration): void;
					public close(): void;
					public setResultTypes(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getStartingLocations(): com.arcgismaps.internal.jni.CoreVector;
					public setStartingLocations(param0: com.arcgismaps.internal.jni.CoreVector): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceResult>;
					public mHandle: number;
					public static createCoreUtilityTraceResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceResult;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public getWarnings(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public dispose(): void;
					public static createFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceResult;
					public getObjectType(): com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType;
					public getHandle(): number;
					public getNearestNeighborResult(): com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceResultObjectType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType>;
					public static UTILITYELEMENTTRACERESULT: com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType;
					public static UTILITYFUNCTIONTRACERESULT: com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType;
					public static UTILITYGEOMETRYTRACERESULT: com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType>;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceResultType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceResultType>;
					public static ELEMENTS: com.arcgismaps.internal.jni.CoreUtilityTraceResultType;
					public static FUNCTIONOUTPUTS: com.arcgismaps.internal.jni.CoreUtilityTraceResultType;
					public static GEOMETRY: com.arcgismaps.internal.jni.CoreUtilityTraceResultType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceResultType;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityTraceResultType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityTraceResultType>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraceType>;
					public static CONNECTED: com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public static SUBNETWORK: com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public static UPSTREAM: com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public static DOWNSTREAM: com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public static ISOLATION: com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public static LOOPS: com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public static SHORTESTPATH: com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityTraceType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityTraceType>;
					public getValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraversability {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraversability>;
					public mHandle: number;
					public getBarriers(): com.arcgismaps.internal.jni.CoreUtilityTraceCondition;
					public setBarriers(param0: com.arcgismaps.internal.jni.CoreUtilityTraceCondition): void;
					public finalize(): void;
					public dispose(): void;
					public getFunctionBarriers(): com.arcgismaps.internal.jni.CoreVector;
					public setScope(param0: com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getScope(): com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope;
					public static createCoreUtilityTraversabilityFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraversability;
					public getHandle(): number;
					public setFunctionBarriers(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityTraversabilityScope {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope>;
					public static JUNCTIONSANDEDGES: com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope;
					public static JUNCTIONS: com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope;
					public static EDGES: com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreUtilityValidationResult {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreUtilityValidationResult>;
					public mHandle: number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getHasDirtyAreas(): boolean;
					public finalize(): void;
					public static createCoreUtilityValidationResultFromHandle(param0: number): com.arcgismaps.internal.jni.CoreUtilityValidationResult;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
					public getHasErrors(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreValueChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreValueChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreValueChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						valueChanged(param0: com.arcgismaps.internal.jni.CoreElement): void;
					});
					public constructor();
					public valueChanged(param0: com.arcgismaps.internal.jni.CoreElement): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVector {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVector>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreElementType);
					public static createCoreVectorFromHandle(param0: number): com.arcgismaps.internal.jni.CoreVector;
					public isEmpty(): boolean;
					public onElementAdded(param0: number, param1: number): void;
					public insert(param0: number, param1: com.arcgismaps.internal.jni.CoreElement): void;
					public finalize(): void;
					public first(): com.arcgismaps.internal.jni.CoreElement;
					public last(): com.arcgismaps.internal.jni.CoreElement;
					public getSize(): number;
					public constructor();
					public static npos(): number;
					public close(): void;
					public addArray(param0: com.arcgismaps.internal.jni.CoreVector): number;
					public add(param0: com.arcgismaps.internal.jni.CoreElement): number;
					public move(param0: number, param1: number): void;
					public indexOf(param0: com.arcgismaps.internal.jni.CoreElement): number;
					public setElementAddedCallback(param0: com.arcgismaps.internal.jni.CoreElementAddedCallbackListener): void;
					public dispose(): void;
					public contains(param0: com.arcgismaps.internal.jni.CoreElement): boolean;
					public onElementRemoved(param0: number, param1: number): void;
					public static nativeDestroy(param0: number): void;
					public removeAll(): void;
					public at(param0: number): com.arcgismaps.internal.jni.CoreElement;
					public remove(param0: number): void;
					public setElementRemovedCallback(param0: com.arcgismaps.internal.jni.CoreElementRemovedCallbackListener): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreVector): boolean;
					public getValueType(): com.arcgismaps.internal.jni.CoreElementType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVectorMarkerSymbolElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVectorMarkerSymbolElement>;
					public mHandle: number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreMultilayerSymbol);
					public getSymbol(): com.arcgismaps.internal.jni.CoreMultilayerSymbol;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public static createCoreVectorMarkerSymbolElementFromHandle(param0: number): com.arcgismaps.internal.jni.CoreVectorMarkerSymbolElement;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public setSymbol(param0: com.arcgismaps.internal.jni.CoreMultilayerSymbol): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVectorMarkerSymbolLayer extends com.arcgismaps.internal.jni.CoreMarkerSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVectorMarkerSymbolLayer>;
					public getVectorMarkerSymbolElements(): com.arcgismaps.internal.jni.CoreVector;
					public static createCoreVectorMarkerSymbolLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreVectorMarkerSymbolLayer;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public setVectorMarkerSymbolElements(param0: com.arcgismaps.internal.jni.CoreVector): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVectorTileCache implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVectorTileCache>;
					public mHandle: number;
					public constructor(param0: string);
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getSourceInfo(): com.arcgismaps.internal.jni.CoreVectorTileSourceInfo;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPath(): string;
					public retryLoad(): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public static createCoreVectorTileCacheFromHandle(param0: number): com.arcgismaps.internal.jni.CoreVectorTileCache;
					public onDoneLoading(param0: number): void;
					public getThumbnail(): com.arcgismaps.internal.jni.CoreImage;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVectorTileSourceInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVectorTileSourceInfo>;
					public mHandle: number;
					public getURI(): string;
					public getFullExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getVersion(): string;
					public getOrigin(): com.arcgismaps.internal.jni.CorePoint;
					public static createCoreVectorTileSourceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreVectorTileSourceInfo;
					public finalize(): void;
					public getDefaultStyle(): com.arcgismaps.internal.jni.CoreVectorTileStyle;
					public dispose(): void;
					public getExportTilesAllowed(): boolean;
					public getInitialExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getMaxScale(): number;
					public getMinScale(): number;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getLevelsOfDetail(): com.arcgismaps.internal.jni.CoreArray;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getDefaultStyleURI(): string;
					public getMaxExportTilesCount(): number;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVectorTileStyle {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVectorTileStyle>;
					public mHandle: number;
					public getVersion(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreVectorTileStyleFromHandle(param0: number): com.arcgismaps.internal.jni.CoreVectorTileStyle;
					public getSourceURI(): string;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVersionAccess {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVersionAccess>;
					public static PUBLIC: com.arcgismaps.internal.jni.CoreVersionAccess;
					public static PROTECTED: com.arcgismaps.internal.jni.CoreVersionAccess;
					public static PRIVATE: com.arcgismaps.internal.jni.CoreVersionAccess;
					public getValue(): number;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreVersionAccess;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreVersionAccess;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreVersionAccess>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVertexTool extends com.arcgismaps.internal.jni.CoreGeometryEditorTool {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVertexTool>;
					public constructor();
					public setConfiguration(param0: com.arcgismaps.internal.jni.CoreInteractionConfiguration): void;
					public static createCoreVertexToolFromHandle(param0: number): com.arcgismaps.internal.jni.CoreVertexTool;
					public getConfiguration(): com.arcgismaps.internal.jni.CoreInteractionConfiguration;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVerticalAlignment {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVerticalAlignment>;
					public static BASELINE: com.arcgismaps.internal.jni.CoreVerticalAlignment;
					public static BOTTOM: com.arcgismaps.internal.jni.CoreVerticalAlignment;
					public static MIDDLE: com.arcgismaps.internal.jni.CoreVerticalAlignment;
					public static TOP: com.arcgismaps.internal.jni.CoreVerticalAlignment;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreVerticalAlignment;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreVerticalAlignment>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreVerticalAlignment;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreViewLabelProperties {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreViewLabelProperties>;
					public mHandle: number;
					public constructor(param0: boolean, param1: boolean);
					public getIsAnimationEnabled(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getIsLabelingEnabled(): boolean;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public setIsAnimationEnabled(param0: boolean): void;
					public static createCoreViewLabelPropertiesFromHandle(param0: number): com.arcgismaps.internal.jni.CoreViewLabelProperties;
					public setIsLabelingEnabled(param0: boolean): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreViewpoint extends com.arcgismaps.internal.jni.CoreJSONSerializable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreViewpoint>;
					public mHandle: number;
					public getTargetGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreCamera);
					public getUnknownJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public constructor(param0: number, param1: number, param2: number, param3: com.arcgismaps.internal.jni.CoreCamera);
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry);
					public getTargetScale(): number;
					public getUnsupportedJSON(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number, param2: com.arcgismaps.internal.jni.CoreCamera);
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: com.arcgismaps.internal.jni.CoreCamera);
					public constructor(param0: number, param1: number, param2: number);
					public toJSON(): string;
					public close(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: number);
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number);
					public equals(param0: com.arcgismaps.internal.jni.CoreViewpoint): boolean;
					public getHash(): number;
					public dispose(): void;
					public getCamera(): com.arcgismaps.internal.jni.CoreCamera;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeometry, param1: number);
					public getRotation(): number;
					public static nativeDestroy(param0: number): void;
					public static fromJSON(param0: string): com.arcgismaps.internal.jni.CoreViewpoint;
					public static createCoreViewpointFromHandle(param0: number): com.arcgismaps.internal.jni.CoreViewpoint;
					public constructor(param0: com.arcgismaps.internal.jni.CorePoint, param1: number, param2: com.arcgismaps.internal.jni.CoreCamera);
					public getViewpointType(): com.arcgismaps.internal.jni.CoreViewpointType;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreViewpointChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreViewpointChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreViewpointChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						viewpointChanged(): void;
					});
					public constructor();
					public viewpointChanged(): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreViewpointType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreViewpointType>;
					public static UNKNOWN: com.arcgismaps.internal.jni.CoreViewpointType;
					public static CENTERANDSCALE: com.arcgismaps.internal.jni.CoreViewpointType;
					public static BOUNDINGGEOMETRY: com.arcgismaps.internal.jni.CoreViewpointType;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreViewpointType>;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreViewpointType;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreViewpointType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreViewshed extends com.arcgismaps.internal.jni.CoreAnalysis {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreViewshed>;
					public static getFrustumOutlineColor(): com.arcgismaps.internal.jni.CoreColor;
					public getInstanceId(): java.lang.Long;
					public setMinDistance(param0: number): void;
					public setHorizontalAngle(param0: number): void;
					public getMinDistance(): number;
					public getMaxDistance(): number;
					public static getVisibleColor(): com.arcgismaps.internal.jni.CoreColor;
					public getHorizontalAngle(): number;
					public constructor();
					public getFrustumOutlineVisible(): boolean;
					public static setVisibleColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public static createCoreViewshedFromHandle(param0: number): com.arcgismaps.internal.jni.CoreViewshed;
					public setMaxDistance(param0: number): void;
					public setFrustumOutlineVisible(param0: boolean): void;
					public setVerticalAngle(param0: number): void;
					public static setFrustumOutlineColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
					public getVerticalAngle(): number;
					public static getObstructedColor(): com.arcgismaps.internal.jni.CoreColor;
					public static setObstructedColor(param0: com.arcgismaps.internal.jni.CoreColor): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVisibilityChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVisibilityChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreVisibilityChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						visibilityChanged(param0: boolean): void;
					});
					public constructor();
					public visibilityChanged(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVoiceGuidance {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVoiceGuidance>;
					public mHandle: number;
					public getType(): com.arcgismaps.internal.jni.CoreVoiceGuidanceType;
					public getText(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public static createCoreVoiceGuidanceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreVoiceGuidance;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreVoiceGuidanceType {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreVoiceGuidanceType>;
					public static APPROACHINGMANEUVER: com.arcgismaps.internal.jni.CoreVoiceGuidanceType;
					public static ATMANEUVER: com.arcgismaps.internal.jni.CoreVoiceGuidanceType;
					public static APPROACHINGDESTINATION: com.arcgismaps.internal.jni.CoreVoiceGuidanceType;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreVoiceGuidanceType>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreVoiceGuidanceType;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreVoiceGuidanceType;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWFSFeatureTable extends com.arcgismaps.internal.jni.CoreFeatureTable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWFSFeatureTable>;
					public static createCoreWFSFeatureTableFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWFSFeatureTable;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWFSLayerInfo);
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public constructor(param0: string, param1: string);
					public retryLoad(): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getLayerInfo(): com.arcgismaps.internal.jni.CoreWFSLayerInfo;
					public setAxisOrder(param0: com.arcgismaps.internal.jni.CoreOGCAxisOrder): void;
					public setFeatureRequestMode(param0: com.arcgismaps.internal.jni.CoreFeatureRequestMode): void;
					public setPopupDefinition(param0: com.arcgismaps.internal.jni.CorePopupDefinition): void;
					public getInstanceId(): java.lang.Long;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public getFeatureRequestMode(): com.arcgismaps.internal.jni.CoreFeatureRequestMode;
					public getAxisOrder(): com.arcgismaps.internal.jni.CoreOGCAxisOrder;
					public setFilterAxisOrder(param0: com.arcgismaps.internal.jni.CoreOGCAxisOrder): void;
					public cancelLoad(): void;
					public getPopupDefinition(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getURL(): string;
					public setPreferredSpatialReference(param0: com.arcgismaps.internal.jni.CoreSpatialReference): void;
					public populateFromService(param0: com.arcgismaps.internal.jni.CoreQueryParameters, param1: boolean, param2: com.arcgismaps.internal.jni.CoreVector): com.arcgismaps.internal.jni.CoreTask;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPreferredSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public setIsPopupEnabled(param0: boolean): void;
					public getFilterAxisOrder(): com.arcgismaps.internal.jni.CoreOGCAxisOrder;
					public populateFromServiceWithXML(param0: string, param1: boolean): com.arcgismaps.internal.jni.CoreTask;
					public getIsPopupEnabled(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWFSLayerInfo extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWFSLayerInfo>;
					public mHandle: number;
					public getTitle(): string;
					public getInstanceId(): java.lang.Long;
					public getSpatialReferences(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public dispose(): void;
					public static createCoreWFSLayerInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWFSLayerInfo;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getDescription(): string;
					public getKeywords(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWFSService extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWFSService>;
					public mHandle: number;
					public constructor(param0: string);
					public setCustomParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getServiceInfo(): com.arcgismaps.internal.jni.CoreWFSServiceInfo;
					public getCustomParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public static createCoreWFSServiceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWFSService;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWFSServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWFSServiceInfo>;
					public mHandle: number;
					public getTitle(): string;
					public static createCoreWFSServiceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWFSServiceInfo;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getDescription(): string;
					public getKeywords(): com.arcgismaps.internal.jni.CoreArray;
					public getLayerInfos(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMSFeature extends com.arcgismaps.internal.jni.CoreGeoElement {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMSFeature>;
					public mHandle: number;
					public getAttributeValue(param0: string): com.arcgismaps.internal.jni.CoreElement;
					public static createCoreWMSFeatureFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMSFeature;
					public setGeometry(param0: com.arcgismaps.internal.jni.CoreGeometry): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getAttributes(): com.arcgismaps.internal.jni.CoreDictionary;
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getGeometry(): com.arcgismaps.internal.jni.CoreGeometry;
					public computeCalloutLocation(param0: com.arcgismaps.internal.jni.CorePoint, param1: com.arcgismaps.internal.jni.CoreMapView): com.arcgismaps.internal.jni.CorePoint;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMSLayer extends com.arcgismaps.internal.jni.CoreImageAdjustmentLayer implements com.arcgismaps.internal.jni.CoreRefreshable, com.arcgismaps.internal.jni.CoreTimeAware {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMSLayer>;
					public setIsTimeFilteringEnabled(param0: boolean): void;
					public setCustomParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public onFullTimeExtentChanged(): void;
					public finalize(): void;
					public getTimeOffset(): com.arcgismaps.internal.jni.CoreTimeValue;
					public getIsVisible(): boolean;
					public load(): void;
					public getLayerNames(): com.arcgismaps.internal.jni.CoreVector;
					public getTimeInterval(): com.arcgismaps.internal.jni.CoreTimeValue;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getVersion(): com.arcgismaps.internal.jni.CoreWMSVersion;
					public retryLoad(): void;
					public getSupportsTimeFiltering(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public getCustomParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor();
					public getFullTimeExtent(): com.arcgismaps.internal.jni.CoreTimeExtent;
					public getSublayers(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreVector);
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getIsTimeFilteringEnabled(): boolean;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVector);
					public dispose(): void;
					public getRefreshInterval(): number;
					public cancelLoad(): void;
					public getPreferredImageFormat(): com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
					public getLayerInfos(): com.arcgismaps.internal.jni.CoreVector;
					public static createCoreWMSLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMSLayer;
					public getURL(): string;
					public setTimeOffset(param0: com.arcgismaps.internal.jni.CoreTimeValue): void;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public setPreferredImageFormat(param0: com.arcgismaps.internal.jni.CoreMapServiceImageFormat): void;
					public setRefreshInterval(param0: number): void;
					public getName(): string;
					public setFullTimeExtentChangedCallback(param0: com.arcgismaps.internal.jni.CoreFullTimeExtentChangedCallbackListener): void;
					public setIsVisible(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItem);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMSLayerInfo extends com.arcgismaps.internal.jni.CoreInstanceId {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMSLayerInfo>;
					public mHandle: number;
					public getTitle(): string;
					public getInstanceId(): java.lang.Long;
					public getSpatialReferences(): com.arcgismaps.internal.jni.CoreArray;
					public getSublayerInfos(): com.arcgismaps.internal.jni.CoreVector;
					public finalize(): void;
					public dispose(): void;
					public getFixedImageWidth(): number;
					public static createCoreWMSLayerInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMSLayerInfo;
					public getQueryable(): boolean;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public getStyles(): com.arcgismaps.internal.jni.CoreArray;
					public getOpaque(): boolean;
					public getFixedImageHeight(): number;
					public close(): void;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getDescription(): string;
					public getKeywords(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMSService extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMSService>;
					public mHandle: number;
					public constructor(param0: string);
					public setCustomParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public getServiceInfo(): com.arcgismaps.internal.jni.CoreWMSServiceInfo;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getVersion(): com.arcgismaps.internal.jni.CoreWMSVersion;
					public static createCoreWMSServiceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMSService;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getCustomParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMSServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMSServiceInfo>;
					public mHandle: number;
					public getTitle(): string;
					public static createCoreWMSServiceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMSServiceInfo;
					public finalize(): void;
					public dispose(): void;
					public getLayerInfos(): com.arcgismaps.internal.jni.CoreVector;
					public getImageFormats(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public close(): void;
					public getDescription(): string;
					public getKeywords(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMSSublayer implements com.arcgismaps.internal.jni.CoreInstanceId, com.arcgismaps.internal.jni.CoreLayerContent {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMSSublayer>;
					public mHandle: number;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public getSublayerInfo(): com.arcgismaps.internal.jni.CoreWMSLayerInfo;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public clone(): com.arcgismaps.internal.jni.CoreWMSSublayer;
					public getCurrentStyle(): string;
					public finalize(): void;
					public dispose(): void;
					public equals(param0: com.arcgismaps.internal.jni.CoreWMSSublayer): boolean;
					public static createCoreWMSSublayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMSSublayer;
					public getIsVisible(): boolean;
					public onSubLayerContentChanged(): void;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getName(): string;
					public setCurrentStyle(param0: string): void;
					public close(): void;
					public setIsVisible(param0: boolean): void;
					public getCanChangeVisibility(): boolean;
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMSVersion {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMSVersion>;
					public static V110: com.arcgismaps.internal.jni.CoreWMSVersion;
					public static V111: com.arcgismaps.internal.jni.CoreWMSVersion;
					public static V130: com.arcgismaps.internal.jni.CoreWMSVersion;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreWMSVersion;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreWMSVersion;
					public getValue(): number;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreWMSVersion>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMTSLayer extends com.arcgismaps.internal.jni.CoreImageTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMTSLayer>;
					public getLayerId(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSLayerInfo, param1: com.arcgismaps.internal.jni.CoreTileImageFormat);
					public setCustomParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public getIsVisible(): boolean;
					public load(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSLayerInfo, param1: com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet);
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLayerInfo(): com.arcgismaps.internal.jni.CoreWMTSLayerInfo;
					public getTileMatrixSetId(): string;
					public constructor(param0: string, param1: string);
					public retryLoad(): void;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public getCustomParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileInfo, param1: com.arcgismaps.internal.jni.CoreEnvelope);
					public getTileMatrixSet(): com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet;
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSLayerInfo);
					public getCanChangeVisibility(): boolean;
					public constructor(param0: string, param1: string, param2: string);
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSLayerInfo, param1: com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet, param2: com.arcgismaps.internal.jni.CoreTileImageFormat);
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public static createCoreWMTSLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMTSLayer;
					public getURL(): string;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getPreferredImageFormat(): com.arcgismaps.internal.jni.CoreTileImageFormat;
					public getName(): string;
					public constructor(param0: string, param1: string, param2: string, param3: com.arcgismaps.internal.jni.CoreTileImageFormat);
					public setIsVisible(param0: boolean): void;
					public constructor(param0: string, param1: string, param2: com.arcgismaps.internal.jni.CoreTileImageFormat);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMTSLayerInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMTSLayerInfo>;
					public mHandle: number;
					public getTitle(): string;
					public getId(): string;
					public getTileMatrixSets(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public dispose(): void;
					public getImageFormats(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getStyles(): com.arcgismaps.internal.jni.CoreArray;
					public close(): void;
					public static createCoreWMTSLayerInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMTSLayerInfo;
					public getDescription(): string;
					public getKeywords(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMTSService extends com.arcgismaps.internal.jni.CoreLoadable {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMTSService>;
					public mHandle: number;
					public constructor(param0: string);
					public setCustomParameters(param0: com.arcgismaps.internal.jni.CoreDictionary): void;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public finalize(): void;
					public dispose(): void;
					public static createCoreWMTSServiceFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMTSService;
					public cancelLoad(): void;
					public load(): void;
					public setRequestRequiredCallback(param0: com.arcgismaps.internal.jni.CoreRequestRequiredCallbackListener): void;
					public getURL(): string;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public retryLoad(): void;
					public getCustomParameters(): com.arcgismaps.internal.jni.CoreDictionary;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public onLoadStatusChanged(param0: number): void;
					public close(): void;
					public onDoneLoading(param0: number): void;
					public getServiceInfo(): com.arcgismaps.internal.jni.CoreWMTSServiceInfo;
					public onRequestRequired(param0: number): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMTSServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMTSServiceInfo>;
					public mHandle: number;
					public getTitle(): string;
					public getVersion(): string;
					public getTileMatrixSets(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public dispose(): void;
					public static createCoreWMTSServiceInfoFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMTSServiceInfo;
					public getLayerInfos(): com.arcgismaps.internal.jni.CoreArray;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public getDescription(): string;
					public getKeywords(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMTSTileMatrix {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMTSTileMatrix>;
					public mHandle: number;
					public getId(): string;
					public getScaleDenominator(): number;
					public static nativeDestroy(param0: number): void;
					public static createCoreWMTSTileMatrixFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMTSTileMatrix;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWMTSTileMatrixSet {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet>;
					public mHandle: number;
					public getTitle(): string;
					public getId(): string;
					public getTileMatrices(): com.arcgismaps.internal.jni.CoreArray;
					public finalize(): void;
					public dispose(): void;
					public getWellKnownScaleSetId(): string;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public close(): void;
					public static createCoreWMTSTileMatrixSetFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet;
					public getExtent(): com.arcgismaps.internal.jni.CoreEnvelope;
					public getSpatialReference(): com.arcgismaps.internal.jni.CoreSpatialReference;
					public getDescription(): string;
					public getKeywords(): com.arcgismaps.internal.jni.CoreArray;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWarningChangedCallbackListener {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWarningChangedCallbackListener>;
					/**
					 * Constructs a new instance of the com.arcgismaps.internal.jni.CoreWarningChangedCallbackListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						warningChanged(param0: com.arcgismaps.internal.jni.CoreError): void;
					});
					public constructor();
					public warningChanged(param0: com.arcgismaps.internal.jni.CoreError): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWebSocketConnection {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWebSocketConnection>;
					public mHandle: number;
					public getURI(): string;
					public pushData(param0: androidNative.Array<number>): void;
					public finalize(): void;
					public dispose(): void;
					public static createCoreWebSocketConnectionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWebSocketConnection;
					public reportConnectionFailure(param0: number, param1: any): void;
					public setConnectCompleted(param0: number, param1: any): void;
					public setCancelConnectCallback(param0: com.arcgismaps.internal.jni.CoreCancelCallbackListener): void;
					public setDisconnectCompleted(param0: any): void;
					public onDisconnect(): void;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public pushString(param0: string): void;
					public close(): void;
					public setDisconnectCallback(param0: com.arcgismaps.internal.jni.CoreDisconnectCallbackListener): void;
					public onCancelConnect(): void;
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWebTiledLayer extends com.arcgismaps.internal.jni.CoreServiceImageTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWebTiledLayer>;
					public constructor(param0: string);
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreVector, param2: com.arcgismaps.internal.jni.CoreTileInfo, param3: com.arcgismaps.internal.jni.CoreEnvelope);
					public getIsVisible(): boolean;
					public load(): void;
					public setLoadStatusChangedCallback(param0: com.arcgismaps.internal.jni.CoreLoadStatusChangedCallbackListener): void;
					public retryLoad(): void;
					public getSubDomains(): com.arcgismaps.internal.jni.CoreArray;
					public isVisibleAtScale(param0: number): boolean;
					public setSubLayerContentChangedCallback(param0: com.arcgismaps.internal.jni.CoreSubLayerContentChangedCallbackListener): void;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileInfo, param1: com.arcgismaps.internal.jni.CoreEnvelope);
					public getLoadStatus(): com.arcgismaps.internal.jni.CoreLoadStatus;
					public getCanChangeVisibility(): boolean;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreVector);
					public getSubLayerContents(): com.arcgismaps.internal.jni.CoreArrayObservable;
					public getInstanceId(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public fetchLegendInfos(): com.arcgismaps.internal.jni.CoreTask;
					public setDoneLoadingCallback(param0: com.arcgismaps.internal.jni.CoreDoneLoadingCallbackListener): void;
					public cancelLoad(): void;
					public static createCoreWebTiledLayerFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWebTiledLayer;
					public getShowInLegend(): boolean;
					public getLoadError(): com.arcgismaps.internal.jni.CoreError;
					public getName(): string;
					public setIsVisible(param0: boolean): void;
					public getTemplateURI(): string;
					public constructor(param0: string, param1: com.arcgismaps.internal.jni.CoreTileInfo, param2: com.arcgismaps.internal.jni.CoreEnvelope);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWebmapLabelExpression extends com.arcgismaps.internal.jni.CoreLabelExpression {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWebmapLabelExpression>;
					public constructor(param0: string);
					public constructor();
					public static createCoreWebmapLabelExpressionFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWebmapLabelExpression;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWifiReading {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWifiReading>;
					public mHandle: number;
					public static createCoreWifiReadingFromHandle(param0: number): com.arcgismaps.internal.jni.CoreWifiReading;
					public static nativeDestroy(param0: number): void;
					public constructor();
					public finalize(): void;
					public close(): void;
					public dispose(): void;
					public getBSSID(): number;
					public getRSSI(): number;
					public constructor(param0: number, param1: number);
					public getHandle(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module jni {
				export class CoreWrapAroundMode {
					public static class: java.lang.Class<com.arcgismaps.internal.jni.CoreWrapAroundMode>;
					public static ENABLEDWHENSUPPORTED: com.arcgismaps.internal.jni.CoreWrapAroundMode;
					public static DISABLED: com.arcgismaps.internal.jni.CoreWrapAroundMode;
					public static values(): androidNative.Array<com.arcgismaps.internal.jni.CoreWrapAroundMode>;
					public static valueOf(param0: string): com.arcgismaps.internal.jni.CoreWrapAroundMode;
					public getValue(): number;
					public static fromValue(param0: number): com.arcgismaps.internal.jni.CoreWrapAroundMode;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module location {
				export module indoors {
					export class LocationProvider {
						public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.LocationProvider>;
						public constructor();
						public getLocationChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.location.Location>;
						public "stop-IoAF18A"(param0: any): any;
						public "start-IoAF18A"(param0: any): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module location {
				export module indoors {
					export class MotionSensorProvider {
						public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.MotionSensorProvider>;
						public "startSensorUpdates-IoAF18A"(param0: com.arcgismaps.internal.jni.CoreSensorType): any;
						public getSensorDataReceived(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.internal.location.indoors.MotionSensorProvider.SensorData>;
						public constructor(param0: globalAndroid.content.Context);
						public stopSensorUpdates(param0: com.arcgismaps.internal.jni.CoreSensorType): any;
						public onAccuracyChanged(param0: globalAndroid.hardware.Sensor, param1: number): void;
						public onSensorChanged(param0: globalAndroid.hardware.SensorEvent): void;
					}
					export module MotionSensorProvider {
						export class SensorData {
							public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.MotionSensorProvider.SensorData>;
							public getType(): number;
							public getY(): number;
							public hashCode(): number;
							public component5(): number;
							public getScanFinishedTimestamp(): java.time.Instant;
							public copy(param0: number, param1: java.time.Instant, param2: number, param3: number, param4: number): com.arcgismaps.internal.location.indoors.MotionSensorProvider.SensorData;
							public toString(): string;
							public constructor(param0: number, param1: java.time.Instant, param2: number, param3: number, param4: number);
							public component1(): number;
							public getZ(): number;
							public component2(): java.time.Instant;
							public component4(): number;
							public component3(): number;
							public equals(param0: any): boolean;
							public getX(): number;
						}
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.MotionSensorProvider.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module location {
				export module indoors {
					export class RadioProvider {
						public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.RadioProvider>;
						public onBatchScanResults(param0: java.util.List<globalAndroid.bluetooth.le.ScanResult>): void;
						public onScanFailed(param0: number): void;
						public constructor();
						public onScanResult(param0: number, param1: globalAndroid.bluetooth.le.ScanResult): void;
						public "stop-d1pmJ48"(): any;
						public "start-d1pmJ48"(): any;
						public getIBeaconDataReceived(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.internal.location.indoors.RadioProvider.IBeaconData>;
					}
					export module RadioProvider {
						export class IBeacon {
							public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.RadioProvider.IBeacon>;
							public constructor();
							public hashCode(): number;
							public component2(): number;
							public constructor(param0: number, param1: number, param2: string, param3: number);
							public copy(param0: number, param1: number, param2: string, param3: number): com.arcgismaps.internal.location.indoors.RadioProvider.IBeacon;
							public getMajor(): number;
							public toString(): string;
							public component3(): string;
							public component1(): number;
							public component4(): number;
							public getMinor(): number;
							public getUuid(): string;
							public equals(param0: any): boolean;
							public getTxPower(): number;
						}
						export module IBeacon {
							export class Companion {
								public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.RadioProvider.IBeacon.Companion>;
								public fromScanRecord(param0: androidNative.Array<number>): com.arcgismaps.internal.location.indoors.RadioProvider.IBeacon;
							}
						}
						export class IBeaconData {
							public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.RadioProvider.IBeaconData>;
							public component2(): string;
							public component1(): java.time.Instant;
							public hashCode(): number;
							public constructor(param0: java.time.Instant, param1: string, param2: number);
							public getName(): string;
							public component3(): number;
							public copy(param0: java.time.Instant, param1: string, param2: number): com.arcgismaps.internal.location.indoors.RadioProvider.IBeaconData;
							public getScanFinishedTimestamp(): java.time.Instant;
							public toString(): string;
							public equals(param0: any): boolean;
							public getRssi(): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module location {
				export module indoors {
					export class WifiProvider {
						public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.WifiProvider>;
						public onReceive(param0: globalAndroid.content.Context, param1: globalAndroid.content.Intent): void;
						public constructor(param0: globalAndroid.content.Context);
						public "start-d1pmJ48"(): any;
						public stop(): void;
						public getWifiDataReceived(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.internal.location.indoors.WifiProvider.WifiData>;
					}
					export module WifiProvider {
						export class BssidLongConverter {
							public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.WifiProvider.BssidLongConverter>;
							public static INSTANCE: com.arcgismaps.internal.location.indoors.WifiProvider.BssidLongConverter;
							public bssidToLong(param0: string): number;
						}
						export class WifiData {
							public static class: java.lang.Class<com.arcgismaps.internal.location.indoors.WifiProvider.WifiData>;
							public copy(param0: java.time.Instant, param1: java.util.List<com.arcgismaps.location.WifiReading>): com.arcgismaps.internal.location.indoors.WifiProvider.WifiData;
							public component1(): java.time.Instant;
							public hashCode(): number;
							public getWifiReadings(): java.util.List<com.arcgismaps.location.WifiReading>;
							public getScanFinishedTimestamp(): java.time.Instant;
							public toString(): string;
							public component2(): java.util.List<com.arcgismaps.location.WifiReading>;
							public equals(param0: any): boolean;
							public constructor(param0: java.time.Instant, param1: java.util.List<com.arcgismaps.location.WifiReading>);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module realtime {
				export class WebSocketConnection {
					public static class: java.lang.Class<com.arcgismaps.internal.realtime.WebSocketConnection>;
					public setConnectCompleted$arcgis_maps_any_release(param0: number, param1: java.lang.Throwable): void;
					public setDisconnectCompleted$arcgis_maps_any_release(param0: java.lang.Throwable): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWebSocketConnection);
					public pushData$arcgis_maps_any_release(param0: androidNative.Array<number>): void;
					public reportConnectionFailure$arcgis_maps_any_release(param0: number, param1: java.lang.Throwable): void;
					public pushString$arcgis_maps_any_release(param0: string): void;
				}
				export module WebSocketConnection {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWebSocketConnection,com.arcgismaps.internal.realtime.WebSocketConnection> {
						public static class: java.lang.Class<com.arcgismaps.internal.realtime.WebSocketConnection.Factory>;
						public static INSTANCE: com.arcgismaps.internal.realtime.WebSocketConnection.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module wrapping {
				export abstract class ArcGISFactory<E, T>  extends java.lang.Object {
					public static class: java.lang.Class<com.arcgismaps.internal.wrapping.ArcGISFactory<any,any>>;
					public constructor();
					public convertToPublic(param0: E): T;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module wrapping {
				export class WeakRefWrapperCache<C, W>  extends java.lang.Object {
					public static class: java.lang.Class<com.arcgismaps.internal.wrapping.WeakRefWrapperCache<any,any>>;
					public addWrapper(param0: W, param1: C): void;
					public getWrapper(param0: C): W;
					public constructor(param0: any);
					public getSize(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module wrapping {
				export class WrapperCachingFactory<E, T>  extends com.arcgismaps.internal.wrapping.ArcGISFactory<any,any> {
					public static class: java.lang.Class<com.arcgismaps.internal.wrapping.WrapperCachingFactory<any,any>>;
					public constructor();
					public cache$arcgis_maps_any_release(param0: any, param1: any): void;
					public constructor(param0: any);
					public convertToPublic(param0: any): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module internal {
			export module wrapping {
				export class WrappingFactory<E, T>  extends com.arcgismaps.internal.wrapping.ArcGISFactory<any,any> {
					public static class: java.lang.Class<com.arcgismaps.internal.wrapping.WrappingFactory<any,any>>;
					public constructor(param0: any);
					public constructor();
					public convertToPublic(param0: any): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module io {
			export class JsonNull {
				public static class: java.lang.Class<com.arcgismaps.io.JsonNull>;
				public static INSTANCE: com.arcgismaps.io.JsonNull;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module io {
			export class JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.io.JsonSerializable>;
				/**
				 * Constructs a new instance of the com.arcgismaps.io.JsonSerializable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					toJson(): string;
				});
				public constructor();
				public toJson(): string;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module io {
			export class JsonSerializableImpl extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.io.JsonSerializableImpl>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreJSONSerializable);
				public toJson(): string;
				public getCoreJsonSerializable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreJSONSerializable;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module io {
			export module JsonSerializableKt {

				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.io.JsonSerializableKt.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module io {
			export class RemoteResource {
				public static class: java.lang.Class<com.arcgismaps.io.RemoteResource>;
				/**
				 * Constructs a new instance of the com.arcgismaps.io.RemoteResource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getCredential(): com.arcgismaps.httpcore.authentication.NetworkCredential;
					setCredential(param0: com.arcgismaps.httpcore.authentication.NetworkCredential): void;
				});
				public constructor();
				public getCredential(): com.arcgismaps.httpcore.authentication.NetworkCredential;
				public setCredential(param0: com.arcgismaps.httpcore.authentication.NetworkCredential): void;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module io {
			export class RemoteResourceChild {
				public static class: java.lang.Class<com.arcgismaps.io.RemoteResourceChild>;
				/**
				 * Constructs a new instance of the com.arcgismaps.io.RemoteResourceChild interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getParentRemoteResource(): com.arcgismaps.io.RemoteResource;
				});
				public constructor();
				public getParentRemoteResource(): com.arcgismaps.io.RemoteResource;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class CustomLocationDataSource extends com.arcgismaps.location.LocationDataSource {
				public static class: java.lang.Class<com.arcgismaps.location.CustomLocationDataSource>;
				public constructor(param0: any);
				public "onStart-IoAF18A"(param0: any): any;
				public onStop(param0: any): any;
				public getCurrentProvider(): com.arcgismaps.location.CustomLocationDataSource.LocationProvider;
			}
			export module CustomLocationDataSource {
				export class LocationProvider {
					public static class: java.lang.Class<com.arcgismaps.location.CustomLocationDataSource.LocationProvider>;
					/**
					 * Constructs a new instance of the com.arcgismaps.location.CustomLocationDataSource$LocationProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getLocations(): kotlinx.coroutines.flow.Flow<com.arcgismaps.location.Location>;
						getHeadings(): kotlinx.coroutines.flow.Flow<java.lang.Double>;
					});
					public constructor();
					public getHeadings(): kotlinx.coroutines.flow.Flow<java.lang.Double>;
					public getLocations(): kotlinx.coroutines.flow.Flow<com.arcgismaps.location.Location>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class IndoorPositioningDefinition extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.location.IndoorPositioningDefinition>;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getCoreIndoorPositioningDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreIndoorPositioningDefinition;
				public constructor(param0: com.arcgismaps.internal.jni.CoreIndoorPositioningDefinition);
				public "load-IoAF18A"(param0: any): any;
			}
			export module IndoorPositioningDefinition {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreIndoorPositioningDefinition,com.arcgismaps.location.IndoorPositioningDefinition> {
					public static class: java.lang.Class<com.arcgismaps.location.IndoorPositioningDefinition.Factory>;
					public static INSTANCE: com.arcgismaps.location.IndoorPositioningDefinition.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class IndoorsLocationDataSource extends com.arcgismaps.location.LocationDataSource {
				public static class: java.lang.Class<com.arcgismaps.location.IndoorsLocationDataSource>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreIndoorsLocationDataSource, param1: boolean);
				public getPositioningTable(): com.arcgismaps.data.FeatureTable;
				public getWarning(): kotlinx.coroutines.flow.StateFlow<java.lang.Throwable>;
				public getPathwaysTable(): com.arcgismaps.data.ArcGISFeatureTable;
				public getConfiguration(): com.arcgismaps.location.IndoorsLocationDataSourceConfiguration;
				public "onStart-IoAF18A"(param0: any): any;
				public "getPositioningId-sLYn7dI"(): string;
				public setConfiguration(param0: com.arcgismaps.location.IndoorsLocationDataSourceConfiguration): void;
				public getCoreIndoorsLocationDataSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreIndoorsLocationDataSource;
				public getLevelsTable(): com.arcgismaps.data.ArcGISFeatureTable;
				public onStop(param0: any): any;
				public constructor(param0: com.arcgismaps.location.IndoorPositioningDefinition);
			}
			export module IndoorsLocationDataSource {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreIndoorsLocationDataSource,com.arcgismaps.location.IndoorsLocationDataSource> {
					public static class: java.lang.Class<com.arcgismaps.location.IndoorsLocationDataSource.Factory>;
					public static INSTANCE: com.arcgismaps.location.IndoorsLocationDataSource.Factory;
				}
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.location.IndoorsLocationDataSource.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class IndoorsLocationDataSourceConfiguration {
				public static class: java.lang.Class<com.arcgismaps.location.IndoorsLocationDataSourceConfiguration>;
				public isGnssEnabled(): boolean;
				public isStationarySmoothingEnabled$arcgis_maps_any_release(): boolean;
				public setPathSnappingDistance(param0: number): void;
				public setStationarySmoothingEnabled$arcgis_maps_any_release(param0: boolean): void;
				public setMotionSmoothingEnabled(param0: boolean): void;
				public getPathSnappingDistance(): number;
				public setPathSnappingEnabled(param0: boolean): void;
				public constructor();
				public constructor(param0: com.arcgismaps.internal.jni.CoreIndoorsLocationDataSourceConfiguration);
				public setGnssEnabled(param0: boolean): void;
				public getCoreIndoorsLocationDataSourceConfiguration$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreIndoorsLocationDataSourceConfiguration;
				public isPathSnappingEnabled(): boolean;
				public isIpsAreaSnappingEnabled(): boolean;
				public setIpsAreaSnappingEnabled(param0: boolean): void;
				public isMotionSmoothingEnabled(): boolean;
			}
			export module IndoorsLocationDataSourceConfiguration {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreIndoorsLocationDataSourceConfiguration,com.arcgismaps.location.IndoorsLocationDataSourceConfiguration> {
					public static class: java.lang.Class<com.arcgismaps.location.IndoorsLocationDataSourceConfiguration.Factory>;
					public static INSTANCE: com.arcgismaps.location.IndoorsLocationDataSourceConfiguration.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class Location {
				public static class: java.lang.Class<com.arcgismaps.location.Location>;
				public _timestamp: java.time.Instant;
				public getCourse(): number;
				public set_timestamp(param0: java.time.Instant): void;
				public getLastKnown(): boolean;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.location.LocationType;
				public get_timestamp(): java.time.Instant;
				public getTimestamp(): java.time.Instant;
				public getHorizontalAccuracy(): number;
				public getPosition(): com.arcgismaps.geometry.Point;
				public getCoreLocation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocation;
				public getSpeed(): number;
				public getVerticalAccuracy(): number;
				public getAdditionalSourceProperties(): java.util.Map<string,any>;
			}
			export module Location {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.location.Location.Companion>;
					public create(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: java.time.Instant, param7: java.util.Map<string,any>): com.arcgismaps.location.Location;
				}
				export class Factory extends com.arcgismaps.location.LocationFactory {
					public static class: java.lang.Class<com.arcgismaps.location.Location.Factory>;
					public static INSTANCE: com.arcgismaps.location.Location.Factory;
				}
				export class SourceProperties {
					public static class: java.lang.Class<com.arcgismaps.location.Location.SourceProperties>;
					public static INSTANCE: com.arcgismaps.location.Location.SourceProperties;
				}
				export module SourceProperties {
					export class Keys {
						public static class: java.lang.Class<com.arcgismaps.location.Location.SourceProperties.Keys>;
						public static INSTANCE: com.arcgismaps.location.Location.SourceProperties.Keys;
						public getSATELLITE_COUNT(): string;
						public getFLOOR_LEVEL_ID(): string;
						public getFLOOR(): string;
						public getPOSITION_SOURCE(): string;
						public getTRANSMITTER_COUNT(): string;
					}
					export class Values {
						public static class: java.lang.Class<com.arcgismaps.location.Location.SourceProperties.Values>;
						public static INSTANCE: com.arcgismaps.location.Location.SourceProperties.Values;
						public getPOSITION_SOURCE_WIFI(): string;
						public getPOSITION_SOURCE_GNSS(): string;
						public getPOSITION_SOURCE_BLUETOOTH(): string;
						public getPOSITION_SOURCE_CELL(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class LocationDataSource {
				public static class: java.lang.Class<com.arcgismaps.location.LocationDataSource>;
				public getCoreLocationDataSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationDataSource;
				public getHeadingChanged(): kotlinx.coroutines.flow.SharedFlow<java.lang.Double>;
				public "onStart-IoAF18A"(param0: any): any;
				public updateLocation$arcgis_maps_any_release(param0: com.arcgismaps.location.Location): void;
				public "start-IoAF18A"(param0: any): any;
				public updateHeading$arcgis_maps_any_release(param0: number): void;
				public "stop-IoAF18A"(param0: any): any;
				public getLocationChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.location.Location>;
				public getUserDefinedFailure$arcgis_maps_any_release(): any;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.location.LocationDataSourceType;
				public getError(): kotlinx.coroutines.flow.StateFlow<java.lang.Throwable>;
				public onStop(param0: any): any;
				public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.location.LocationDataSourceStatus>;
			}
			export module LocationDataSource {
				export class Factory extends com.arcgismaps.location.LocationDataSourceFactory {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSource.Factory>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSource.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class LocationDataSourceFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreLocationDataSource,com.arcgismaps.location.LocationDataSource> {
				public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLocationDataSource): com.arcgismaps.location.LocationDataSource;
				public constructor();
			}
			export module LocationDataSourceFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class LocationDataSourceStatus {
				public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceStatus>;
				public getCoreLocationDataSourceStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationDataSourceStatus;
			}
			export module LocationDataSourceStatus {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceStatus.Factory>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceStatus.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLocationDataSourceStatus): com.arcgismaps.location.LocationDataSourceStatus;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceStatus.Factory.WhenMappings>;
					}
				}
				export class FailedToStart extends com.arcgismaps.location.LocationDataSourceStatus {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceStatus.FailedToStart>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceStatus.FailedToStart;
				}
				export class Started extends com.arcgismaps.location.LocationDataSourceStatus {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceStatus.Started>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceStatus.Started;
				}
				export class Starting extends com.arcgismaps.location.LocationDataSourceStatus {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceStatus.Starting>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceStatus.Starting;
				}
				export class Stopped extends com.arcgismaps.location.LocationDataSourceStatus {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceStatus.Stopped>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceStatus.Stopped;
				}
				export class Stopping extends com.arcgismaps.location.LocationDataSourceStatus {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceStatus.Stopping>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceStatus.Stopping;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class LocationDataSourceType {
				public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceType>;
				public getCoreLocationDataSourceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationDataSourceType;
			}
			export module LocationDataSourceType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceType.Factory>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLocationDataSourceType): com.arcgismaps.location.LocationDataSourceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceType.Factory.WhenMappings>;
					}
				}
				export class IndoorsLocationDataSource extends com.arcgismaps.location.LocationDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceType.IndoorsLocationDataSource>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceType.IndoorsLocationDataSource;
				}
				export class LocationDataSource extends com.arcgismaps.location.LocationDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceType.LocationDataSource>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceType.LocationDataSource;
				}
				export class NmeaLocationDataSource extends com.arcgismaps.location.LocationDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceType.NmeaLocationDataSource>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceType.NmeaLocationDataSource;
				}
				export class RouteTrackerLocationDataSource extends com.arcgismaps.location.LocationDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceType.RouteTrackerLocationDataSource>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceType.RouteTrackerLocationDataSource;
				}
				export class SimulatedLocationDataSource extends com.arcgismaps.location.LocationDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceType.SimulatedLocationDataSource>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceType.SimulatedLocationDataSource;
				}
				export class Unknown extends com.arcgismaps.location.LocationDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDataSourceType.Unknown>;
					public static INSTANCE: com.arcgismaps.location.LocationDataSourceType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class LocationDisplayAutoPanMode {
				public static class: java.lang.Class<com.arcgismaps.location.LocationDisplayAutoPanMode>;
				public getCoreLocationDisplayAutoPanMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode;
			}
			export module LocationDisplayAutoPanMode {
				export class CompassNavigation extends com.arcgismaps.location.LocationDisplayAutoPanMode {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDisplayAutoPanMode.CompassNavigation>;
					public static INSTANCE: com.arcgismaps.location.LocationDisplayAutoPanMode.CompassNavigation;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDisplayAutoPanMode.Factory>;
					public static INSTANCE: com.arcgismaps.location.LocationDisplayAutoPanMode.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLocationDisplayAutoPanMode): com.arcgismaps.location.LocationDisplayAutoPanMode;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.location.LocationDisplayAutoPanMode.Factory.WhenMappings>;
					}
				}
				export class Navigation extends com.arcgismaps.location.LocationDisplayAutoPanMode {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDisplayAutoPanMode.Navigation>;
					public static INSTANCE: com.arcgismaps.location.LocationDisplayAutoPanMode.Navigation;
				}
				export class Off extends com.arcgismaps.location.LocationDisplayAutoPanMode {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDisplayAutoPanMode.Off>;
					public static INSTANCE: com.arcgismaps.location.LocationDisplayAutoPanMode.Off;
				}
				export class Recenter extends com.arcgismaps.location.LocationDisplayAutoPanMode {
					public static class: java.lang.Class<com.arcgismaps.location.LocationDisplayAutoPanMode.Recenter>;
					public static INSTANCE: com.arcgismaps.location.LocationDisplayAutoPanMode.Recenter;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class LocationFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLocation,com.arcgismaps.location.Location> {
				public static class: java.lang.Class<com.arcgismaps.location.LocationFactory>;
				public convertToPublic(param0: any): any;
				public constructor(param0: any);
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLocation): com.arcgismaps.location.Location;
				public constructor();
			}
			export module LocationFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.location.LocationFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class LocationImpl extends com.arcgismaps.location.Location {
				public static class: java.lang.Class<com.arcgismaps.location.LocationImpl>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLocation);
				public constructor(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: java.time.Instant, param7: java.util.Map<string,any>);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class LocationType {
				public static class: java.lang.Class<com.arcgismaps.location.LocationType>;
				public getCoreLocationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationType;
			}
			export module LocationType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.location.LocationType.Factory>;
					public static INSTANCE: com.arcgismaps.location.LocationType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLocationType): com.arcgismaps.location.LocationType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.location.LocationType.Factory.WhenMappings>;
					}
				}
				export class Location extends com.arcgismaps.location.LocationType {
					public static class: java.lang.Class<com.arcgismaps.location.LocationType.Location>;
					public static INSTANCE: com.arcgismaps.location.LocationType.Location;
				}
				export class NmeaLocation extends com.arcgismaps.location.LocationType {
					public static class: java.lang.Class<com.arcgismaps.location.LocationType.NmeaLocation>;
					public static INSTANCE: com.arcgismaps.location.LocationType.NmeaLocation;
				}
				export class Unknown extends com.arcgismaps.location.LocationType {
					public static class: java.lang.Class<com.arcgismaps.location.LocationType.Unknown>;
					public static INSTANCE: com.arcgismaps.location.LocationType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class NmeaAccuracyType {
				public static class: java.lang.Class<com.arcgismaps.location.NmeaAccuracyType>;
				public getCoreNmeaAccuracyType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNMEAAccuracyType;
			}
			export module NmeaAccuracyType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaAccuracyType.Factory>;
					public static INSTANCE: com.arcgismaps.location.NmeaAccuracyType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreNMEAAccuracyType): com.arcgismaps.location.NmeaAccuracyType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.location.NmeaAccuracyType.Factory.WhenMappings>;
					}
				}
				export class Gga extends com.arcgismaps.location.NmeaAccuracyType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaAccuracyType.Gga>;
					public static INSTANCE: com.arcgismaps.location.NmeaAccuracyType.Gga;
				}
				export class Gsa extends com.arcgismaps.location.NmeaAccuracyType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaAccuracyType.Gsa>;
					public static INSTANCE: com.arcgismaps.location.NmeaAccuracyType.Gsa;
				}
				export class Gst extends com.arcgismaps.location.NmeaAccuracyType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaAccuracyType.Gst>;
					public static INSTANCE: com.arcgismaps.location.NmeaAccuracyType.Gst;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class NmeaFixType {
				public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType>;
				public getCoreNmeaFixType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNMEAFixType;
			}
			export module NmeaFixType {
				export class Dgps extends com.arcgismaps.location.NmeaFixType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Dgps>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Dgps;
				}
				export class Estimated extends com.arcgismaps.location.NmeaFixType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Estimated>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Estimated;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Factory>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreNMEAFixType): com.arcgismaps.location.NmeaFixType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Factory.WhenMappings>;
					}
				}
				export class Frtk extends com.arcgismaps.location.NmeaFixType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Frtk>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Frtk;
				}
				export class Invalid extends com.arcgismaps.location.NmeaFixType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Invalid>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Invalid;
				}
				export class Manual extends com.arcgismaps.location.NmeaFixType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Manual>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Manual;
				}
				export class Pps extends com.arcgismaps.location.NmeaFixType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Pps>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Pps;
				}
				export class Rtk extends com.arcgismaps.location.NmeaFixType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Rtk>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Rtk;
				}
				export class Simulation extends com.arcgismaps.location.NmeaFixType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Simulation>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Simulation;
				}
				export class Standard extends com.arcgismaps.location.NmeaFixType {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaFixType.Standard>;
					public static INSTANCE: com.arcgismaps.location.NmeaFixType.Standard;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class NmeaGnssSystem {
				public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem>;
				public getCoreNmeagnssSystem$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNMEAGNSSSystem;
			}
			export module NmeaGnssSystem {
				export class Bds extends com.arcgismaps.location.NmeaGnssSystem {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem.Bds>;
					public static INSTANCE: com.arcgismaps.location.NmeaGnssSystem.Bds;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem.Factory>;
					public static INSTANCE: com.arcgismaps.location.NmeaGnssSystem.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreNMEAGNSSSystem): com.arcgismaps.location.NmeaGnssSystem;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem.Factory.WhenMappings>;
					}
				}
				export class Galileo extends com.arcgismaps.location.NmeaGnssSystem {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem.Galileo>;
					public static INSTANCE: com.arcgismaps.location.NmeaGnssSystem.Galileo;
				}
				export class Glonass extends com.arcgismaps.location.NmeaGnssSystem {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem.Glonass>;
					public static INSTANCE: com.arcgismaps.location.NmeaGnssSystem.Glonass;
				}
				export class Gps extends com.arcgismaps.location.NmeaGnssSystem {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem.Gps>;
					public static INSTANCE: com.arcgismaps.location.NmeaGnssSystem.Gps;
				}
				export class NavIc extends com.arcgismaps.location.NmeaGnssSystem {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem.NavIc>;
					public static INSTANCE: com.arcgismaps.location.NmeaGnssSystem.NavIc;
				}
				export class Qzss extends com.arcgismaps.location.NmeaGnssSystem {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem.Qzss>;
					public static INSTANCE: com.arcgismaps.location.NmeaGnssSystem.Qzss;
				}
				export class Unknown extends com.arcgismaps.location.NmeaGnssSystem {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaGnssSystem.Unknown>;
					public static INSTANCE: com.arcgismaps.location.NmeaGnssSystem.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class NmeaLocation extends com.arcgismaps.location.Location {
				public static class: java.lang.Class<com.arcgismaps.location.NmeaLocation>;
				public getPdop(): number;
				public getVdop(): number;
				public getSatellites(): java.util.List<com.arcgismaps.location.NmeaSatelliteInfo>;
				public getDgpsAge(): number;
				public getGeoidalSeparation(): number;
				public getAccuracyType(): com.arcgismaps.location.NmeaAccuracyType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreNMEALocation);
				public getCoreNmeaLocation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNMEALocation;
				public getHdop(): number;
				public getHeightAboveGeoid(): number;
				public getReferenceStationId(): number;
				public getFixType(): com.arcgismaps.location.NmeaFixType;
				public getReceivedPosition(): com.arcgismaps.geometry.Point;
			}
			export module NmeaLocation {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreNMEALocation,com.arcgismaps.location.NmeaLocation> {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaLocation.Factory>;
					public static INSTANCE: com.arcgismaps.location.NmeaLocation.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class NmeaLocationDataSource extends com.arcgismaps.location.LocationDataSource {
				public static class: java.lang.Class<com.arcgismaps.location.NmeaLocationDataSource>;
				public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getLocationChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.location.Location>;
				public pushData(param0: androidNative.Array<number>): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreNMEALocationDataSource, param1: boolean);
				public getCoreNmeaLocationDataSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNMEALocationDataSource;
				public getSatellitesChanged(): kotlinx.coroutines.flow.SharedFlow<java.util.List<com.arcgismaps.location.NmeaSatelliteInfo>>;
				public "onStart-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.geometry.SpatialReference, param1: com.arcgismaps.geometry.SpatialReference, param2: com.arcgismaps.geometry.DatumTransformation);
				public onStop(param0: any): any;
				public getReceiverSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getLocationChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.location.NmeaLocation>;
				public getOutputDatumTransformation(): com.arcgismaps.geometry.DatumTransformation;
			}
			export module NmeaLocationDataSource {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreNMEALocationDataSource,com.arcgismaps.location.NmeaLocationDataSource> {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaLocationDataSource.Factory>;
					public static INSTANCE: com.arcgismaps.location.NmeaLocationDataSource.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class NmeaSatelliteInfo {
				public static class: java.lang.Class<com.arcgismaps.location.NmeaSatelliteInfo>;
				public getSnr(): number;
				public getInUse(): boolean;
				public getId(): number;
				public getSystem(): com.arcgismaps.location.NmeaGnssSystem;
				public getElevation(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreNMEASatelliteInfo);
				public getAzimuth(): number;
				public getCoreNmeaSatelliteInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNMEASatelliteInfo;
			}
			export module NmeaSatelliteInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreNMEASatelliteInfo,com.arcgismaps.location.NmeaSatelliteInfo> {
					public static class: java.lang.Class<com.arcgismaps.location.NmeaSatelliteInfo.Factory>;
					public static INSTANCE: com.arcgismaps.location.NmeaSatelliteInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class RouteTrackerLocationDataSource extends com.arcgismaps.location.LocationDataSource {
				public static class: java.lang.Class<com.arcgismaps.location.RouteTrackerLocationDataSource>;
				public constructor(param0: com.arcgismaps.navigation.RouteTracker, param1: com.arcgismaps.location.LocationDataSource);
				public "onStart-IoAF18A"(param0: any): any;
				public onStop(param0: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRouteTrackerLocationDataSource, param1: boolean);
				public getCoreRouteTrackerLocationDataSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRouteTrackerLocationDataSource;
			}
			export module RouteTrackerLocationDataSource {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreRouteTrackerLocationDataSource,com.arcgismaps.location.RouteTrackerLocationDataSource> {
					public static class: java.lang.Class<com.arcgismaps.location.RouteTrackerLocationDataSource.Factory>;
					public static INSTANCE: com.arcgismaps.location.RouteTrackerLocationDataSource.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export abstract class SensorType {
				public static class: java.lang.Class<com.arcgismaps.location.SensorType>;
				public getCoreSensorType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSensorType;
			}
			export module SensorType {
				export class Accelerometer extends com.arcgismaps.location.SensorType {
					public static class: java.lang.Class<com.arcgismaps.location.SensorType.Accelerometer>;
					public static INSTANCE: com.arcgismaps.location.SensorType.Accelerometer;
				}
				export class AppleIps extends com.arcgismaps.location.SensorType {
					public static class: java.lang.Class<com.arcgismaps.location.SensorType.AppleIps>;
					public static INSTANCE: com.arcgismaps.location.SensorType.AppleIps;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.location.SensorType.Factory>;
					public static INSTANCE: com.arcgismaps.location.SensorType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSensorType): com.arcgismaps.location.SensorType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.location.SensorType.Factory.WhenMappings>;
					}
				}
				export class Gps extends com.arcgismaps.location.SensorType {
					public static class: java.lang.Class<com.arcgismaps.location.SensorType.Gps>;
					public static INSTANCE: com.arcgismaps.location.SensorType.Gps;
				}
				export class Gyroscope extends com.arcgismaps.location.SensorType {
					public static class: java.lang.Class<com.arcgismaps.location.SensorType.Gyroscope>;
					public static INSTANCE: com.arcgismaps.location.SensorType.Gyroscope;
				}
				export class IBeacon extends com.arcgismaps.location.SensorType {
					public static class: java.lang.Class<com.arcgismaps.location.SensorType.IBeacon>;
					public static INSTANCE: com.arcgismaps.location.SensorType.IBeacon;
				}
				export class Magnetometer extends com.arcgismaps.location.SensorType {
					public static class: java.lang.Class<com.arcgismaps.location.SensorType.Magnetometer>;
					public static INSTANCE: com.arcgismaps.location.SensorType.Magnetometer;
				}
				export class Wifi extends com.arcgismaps.location.SensorType {
					public static class: java.lang.Class<com.arcgismaps.location.SensorType.Wifi>;
					public static INSTANCE: com.arcgismaps.location.SensorType.Wifi;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class SimulatedLocationDataSource extends com.arcgismaps.location.LocationDataSource {
				public static class: java.lang.Class<com.arcgismaps.location.SimulatedLocationDataSource>;
				public setCurrentLocationIndex(param0: number): void;
				public getCoreSimulatedLocationDataSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimulatedLocationDataSource;
				public getCurrentLocationIndex(): number;
				public constructor(param0: java.lang.Iterable<any>);
				public constructor(param0: com.arcgismaps.geometry.Polyline, param1: com.arcgismaps.location.SimulationParameters);
				public setLocationsWithPolyline(param0: com.arcgismaps.geometry.Polyline, param1: com.arcgismaps.location.SimulationParameters): void;
				public "onStart-IoAF18A"(param0: any): any;
				public getLocations(): java.util.List<com.arcgismaps.location.Location>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreSimulatedLocationDataSource, param1: boolean);
				public constructor();
				public setIterationRate(param0: number): void;
				public setLocationsWithPolyline(param0: com.arcgismaps.geometry.Polyline): void;
				public onStop(param0: any): any;
				public getIterationRate(): number;
			}
			export module SimulatedLocationDataSource {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreSimulatedLocationDataSource,com.arcgismaps.location.SimulatedLocationDataSource> {
					public static class: java.lang.Class<com.arcgismaps.location.SimulatedLocationDataSource.Factory>;
					public static INSTANCE: com.arcgismaps.location.SimulatedLocationDataSource.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class SimulationParameters {
				public static class: java.lang.Class<com.arcgismaps.location.SimulationParameters>;
				public getStartTime(): java.time.Instant;
				public getCoreSimulationParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimulationParameters;
				public getVelocity(): number;
				public setVerticalAccuracy(param0: number): void;
				public getHorizontalAccuracy(): number;
				public setVelocity(param0: number): void;
				public setStartTime(param0: java.time.Instant): void;
				public setHorizontalAccuracy(param0: number): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreSimulationParameters);
				public getVerticalAccuracy(): number;
				public constructor(param0: java.time.Instant, param1: number, param2: number, param3: number);
			}
			export module SimulationParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSimulationParameters,com.arcgismaps.location.SimulationParameters> {
					public static class: java.lang.Class<com.arcgismaps.location.SimulationParameters.Factory>;
					public static INSTANCE: com.arcgismaps.location.SimulationParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class SystemLocationDataSource extends com.arcgismaps.location.LocationDataSource {
				public static class: java.lang.Class<com.arcgismaps.location.SystemLocationDataSource>;
				public static ACCURACY_LOCATION_FACTOR: number;
				public static WKID_WGS_84: number;
				public static WKID_WGS_84_VERTICAL: number;
				public static NETWORK_LOCATION_TYPE: string;
				public static SATELLITES: string;
				public static HEADING_NORTH: number;
				public static LOCATION_MANAGER_NULL_MESSAGE: string;
				public constructor(param0: globalAndroid.location.Criteria, param1: string, param2: number, param3: number);
				public "requestLocationUpdates-BWLJW6A"(param0: globalAndroid.location.Criteria, param1: string, param2: number, param3: number): any;
				public "onStart-IoAF18A"(param0: any): any;
				public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.location.Criteria, param2: string, param3: number, param4: number);
				public onStop(param0: any): any;
			}
			export module SystemLocationDataSource {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.location.SystemLocationDataSource.Companion>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module location {
			export class WifiReading {
				public static class: java.lang.Class<com.arcgismaps.location.WifiReading>;
				public constructor(param0: number, param1: number);
				public getBssid$arcgis_maps_any_release(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreWifiReading);
				public getCoreWifiReading$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWifiReading;
				public getRssi$arcgis_maps_any_release(): number;
			}
			export module WifiReading {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWifiReading,com.arcgismaps.location.WifiReading> {
					public static class: java.lang.Class<com.arcgismaps.location.WifiReading.Factory>;
					public static INSTANCE: com.arcgismaps.location.WifiReading.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class ArcGISAuthenticationMode {
				public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISAuthenticationMode>;
				public getCoreArcGISAuthenticationMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode;
			}
			export module ArcGISAuthenticationMode {
				export class Allowed extends com.arcgismaps.mapping.ArcGISAuthenticationMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISAuthenticationMode.Allowed>;
					public static INSTANCE: com.arcgismaps.mapping.ArcGISAuthenticationMode.Allowed;
				}
				export class ConditionallyAllowed extends com.arcgismaps.mapping.ArcGISAuthenticationMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISAuthenticationMode.ConditionallyAllowed>;
					public static INSTANCE: com.arcgismaps.mapping.ArcGISAuthenticationMode.ConditionallyAllowed;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISAuthenticationMode.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ArcGISAuthenticationMode.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcGISAuthenticationMode): com.arcgismaps.mapping.ArcGISAuthenticationMode;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISAuthenticationMode.Factory.WhenMappings>;
					}
				}
				export class Forbidden extends com.arcgismaps.mapping.ArcGISAuthenticationMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISAuthenticationMode.Forbidden>;
					public static INSTANCE: com.arcgismaps.mapping.ArcGISAuthenticationMode.Forbidden;
				}
				export class Required extends com.arcgismaps.mapping.ArcGISAuthenticationMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISAuthenticationMode.Required>;
					public static INSTANCE: com.arcgismaps.mapping.ArcGISAuthenticationMode.Required;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class ArcGISMap extends com.arcgismaps.mapping.GeoModel implements com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISMap>;
				public setReferenceScale(param0: number): void;
				public "setBackgroundColor-siLklbo"(param0: com.arcgismaps.Color): void;
				public cancelLoad(): void;
				public getIndoorPositioningDefinition(): com.arcgismaps.location.IndoorPositioningDefinition;
				public getMaxScale(): java.lang.Double;
				public clone(): com.arcgismaps.mapping.ArcGISMap;
				public constructor(param0: com.arcgismaps.geometry.SpatialReference);
				public getUtilityNetworks(): java.util.List<com.arcgismaps.utilitynetworks.UtilityNetwork>;
				public constructor(param0: string);
				public getUri(): string;
				public setMinScale(param0: java.lang.Double): void;
				public getSourceType$arcgis_maps_any_release(): com.arcgismaps.mapping.MapSourceType;
				public constructor(param0: com.arcgismaps.mapping.Item);
				public "getBackgroundColor-ZC_MnaQ"(): com.arcgismaps.Color;
				public getCoreMap$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMap;
				public getReferenceScale(): number;
				public "save-gIAlu-s"(param0: boolean, param1: any): any;
				public getUnknownJson(): java.util.Map<string,any>;
				public getMinScale(): java.lang.Double;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public getUnsupportedJson(): java.util.Map<string,any>;
				public toJson(): string;
				public setMaxExtent(param0: com.arcgismaps.geometry.Envelope): void;
				public "load-IoAF18A"(param0: any): any;
				public setMaxScale(param0: java.lang.Double): void;
				public "retryLoad-IoAF18A"(param0: any): any;
				public "getNamedTraceConfigurationsFromUtilityNetwork-gIAlu-s"(param0: com.arcgismaps.utilitynetworks.UtilityNetwork, param1: any): any;
				public getOfflineSettings(): com.arcgismaps.mapping.OfflineSettings;
				public constructor(param0: com.arcgismaps.mapping.Basemap);
				public constructor(param0: com.arcgismaps.mapping.BasemapStyle);
				public getMaxExtent(): com.arcgismaps.geometry.Envelope;
				public "saveAs-eH_QyT8"(param0: com.arcgismaps.portal.Portal, param1: com.arcgismaps.portal.PortalFolder, param2: string, param3: string, param4: java.lang.Iterable<string>, param5: globalAndroid.graphics.drawable.BitmapDrawable, param6: boolean, param7: any): any;
				public canSaveWithoutForce$arcgis_maps_any_release(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMap, param1: boolean);
				public clone(): com.arcgismaps.mapping.GeoModel;
			}
			export module ArcGISMap {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISMap.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.mapping.ArcGISMap;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreMap,com.arcgismaps.mapping.ArcGISMap> {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISMap.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ArcGISMap.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class ArcGISScene extends com.arcgismaps.mapping.GeoModel {
				public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISScene>;
				public getUnknownJson(): java.util.Map<string,any>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreScene, param1: boolean);
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getCoreScene$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreScene;
				public clone(): com.arcgismaps.mapping.ArcGISScene;
				public setBaseSurface(param0: com.arcgismaps.mapping.Surface): void;
				public getUnsupportedJson(): java.util.Map<string,any>;
				public "load-IoAF18A"(param0: any): any;
				public getSceneViewTilingScheme(): com.arcgismaps.mapping.view.SceneViewTilingScheme;
				public constructor(param0: string);
				public constructor();
				public getBaseSurface(): com.arcgismaps.mapping.Surface;
				public constructor(param0: com.arcgismaps.mapping.view.SceneViewTilingScheme);
				public "retryLoad-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.mapping.Item);
				public constructor(param0: com.arcgismaps.mapping.Basemap);
				public constructor(param0: com.arcgismaps.mapping.BasemapStyle);
				public clone(): com.arcgismaps.mapping.GeoModel;
			}
			export module ArcGISScene {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISScene.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.mapping.ArcGISScene;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreScene,com.arcgismaps.mapping.ArcGISScene> {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISScene.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ArcGISScene.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class ArcGISTiledElevationSource extends com.arcgismaps.mapping.ElevationSource {
				public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISTiledElevationSource>;
				public getUri(): string;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getCoreArcGISTiledElevationSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISTiledElevationSource;
				public constructor(param0: com.arcgismaps.mapping.Item);
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getItem(): com.arcgismaps.mapping.Item;
				public getTileCache(): com.arcgismaps.mapping.layers.TileCache;
				public constructor(param0: com.arcgismaps.mapping.layers.TileCache);
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISTiledElevationSource, param1: boolean);
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
			}
			export module ArcGISTiledElevationSource {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreArcGISTiledElevationSource,com.arcgismaps.mapping.ArcGISTiledElevationSource> {
					public static class: java.lang.Class<com.arcgismaps.mapping.ArcGISTiledElevationSource.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ArcGISTiledElevationSource.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class Basemap implements com.arcgismaps.ApiKeyResource, com.arcgismaps.io.JsonSerializable, com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.mapping.Basemap>;
				public "getApiKey-6IiKQno"(): string;
				public setName(param0: string): void;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public constructor(param0: com.arcgismaps.mapping.layers.Layer);
				public getBaseLayers(): java.util.List<com.arcgismaps.mapping.layers.Layer>;
				public getItem(): com.arcgismaps.mapping.Item;
				public getName(): string;
				public getReferenceLayers(): java.util.List<com.arcgismaps.mapping.layers.Layer>;
				public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public toJson(): string;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
				public getCoreBasemap$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBasemap;
				public getUri(): string;
				public "retryLoad-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.mapping.BasemapStyle, param1: com.arcgismaps.mapping.BasemapStyleParameters);
				public clone(): com.arcgismaps.mapping.Basemap;
				public constructor(param0: com.arcgismaps.internal.jni.CoreBasemap, param1: boolean);
				public constructor(param0: com.arcgismaps.mapping.Item);
				public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public "setApiKey-lGpodAQ"(param0: string): void;
				public constructor(param0: java.lang.Iterable<any>, param1: java.lang.Iterable<any>);
			}
			export module Basemap {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.Basemap.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.mapping.Basemap;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreBasemap,com.arcgismaps.mapping.Basemap> {
					public static class: java.lang.Class<com.arcgismaps.mapping.Basemap.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.Basemap.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class BasemapSerializer extends kotlinx.serialization.KSerializer<com.arcgismaps.mapping.Basemap> {
				public static class: java.lang.Class<com.arcgismaps.mapping.BasemapSerializer>;
				public static INSTANCE: com.arcgismaps.mapping.BasemapSerializer;
				public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.mapping.Basemap;
				public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.mapping.Basemap): void;
				public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class BasemapStyle {
				public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle>;
				public getCoreBasemapStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBasemapStyle;
			}
			export module BasemapStyle {
				export class ArcGISChartedTerritory extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISChartedTerritory>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISChartedTerritory;
				}
				export class ArcGISChartedTerritoryBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISChartedTerritoryBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISChartedTerritoryBase;
				}
				export class ArcGISColoredPencil extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISColoredPencil>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISColoredPencil;
				}
				export class ArcGISCommunity extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISCommunity>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISCommunity;
				}
				export class ArcGISDarkGray extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISDarkGray>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISDarkGray;
				}
				export class ArcGISDarkGrayBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISDarkGrayBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISDarkGrayBase;
				}
				export class ArcGISDarkGrayLabels extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISDarkGrayLabels>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISDarkGrayLabels;
				}
				export class ArcGISHillshadeDark extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHillshadeDark>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHillshadeDark;
				}
				export class ArcGISHillshadeLight extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHillshadeLight>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHillshadeLight;
				}
				export class ArcGISHumanGeography extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeography>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeography;
				}
				export class ArcGISHumanGeographyBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyBase;
				}
				export class ArcGISHumanGeographyDark extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDark>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDark;
				}
				export class ArcGISHumanGeographyDarkBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDarkBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDarkBase;
				}
				export class ArcGISHumanGeographyDarkDetail extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDarkDetail>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDarkDetail;
				}
				export class ArcGISHumanGeographyDarkLabels extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDarkLabels>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDarkLabels;
				}
				export class ArcGISHumanGeographyDetail extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDetail>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyDetail;
				}
				export class ArcGISHumanGeographyLabels extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyLabels>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISHumanGeographyLabels;
				}
				export class ArcGISImagery extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISImagery>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISImagery;
				}
				export class ArcGISImageryLabels extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISImageryLabels>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISImageryLabels;
				}
				export class ArcGISImageryStandard extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISImageryStandard>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISImageryStandard;
				}
				export class ArcGISLightGray extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISLightGray>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISLightGray;
				}
				export class ArcGISLightGrayBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISLightGrayBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISLightGrayBase;
				}
				export class ArcGISLightGrayLabels extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISLightGrayLabels>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISLightGrayLabels;
				}
				export class ArcGISMidcentury extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISMidcentury>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISMidcentury;
				}
				export class ArcGISModernAntique extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISModernAntique>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISModernAntique;
				}
				export class ArcGISModernAntiqueBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISModernAntiqueBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISModernAntiqueBase;
				}
				export class ArcGISNavigation extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISNavigation>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISNavigation;
				}
				export class ArcGISNavigationNight extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISNavigationNight>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISNavigationNight;
				}
				export class ArcGISNewspaper extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISNewspaper>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISNewspaper;
				}
				export class ArcGISNova extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISNova>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISNova;
				}
				export class ArcGISOceans extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISOceans>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISOceans;
				}
				export class ArcGISOceansBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISOceansBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISOceansBase;
				}
				export class ArcGISOceansLabels extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISOceansLabels>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISOceansLabels;
				}
				export class ArcGISStreets extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISStreets>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISStreets;
				}
				export class ArcGISStreetsNight extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISStreetsNight>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISStreetsNight;
				}
				export class ArcGISStreetsRelief extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISStreetsRelief>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISStreetsRelief;
				}
				export class ArcGISStreetsReliefBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISStreetsReliefBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISStreetsReliefBase;
				}
				export class ArcGISTerrain extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISTerrain>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISTerrain;
				}
				export class ArcGISTerrainBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISTerrainBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISTerrainBase;
				}
				export class ArcGISTerrainDetail extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISTerrainDetail>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISTerrainDetail;
				}
				export class ArcGISTopographic extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISTopographic>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISTopographic;
				}
				export class ArcGISTopographicBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.ArcGISTopographicBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.ArcGISTopographicBase;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreBasemapStyle): com.arcgismaps.mapping.BasemapStyle;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.Factory.WhenMappings>;
					}
				}
				export class OsmBlueprint extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmBlueprint>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmBlueprint;
				}
				export class OsmDarkGray extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmDarkGray>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmDarkGray;
				}
				export class OsmDarkGrayBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmDarkGrayBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmDarkGrayBase;
				}
				export class OsmDarkGrayLabels extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmDarkGrayLabels>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmDarkGrayLabels;
				}
				export class OsmHybrid extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmHybrid>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmHybrid;
				}
				export class OsmHybridDetail extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmHybridDetail>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmHybridDetail;
				}
				export class OsmLightGray extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmLightGray>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmLightGray;
				}
				export class OsmLightGrayBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmLightGrayBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmLightGrayBase;
				}
				export class OsmLightGrayLabels extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmLightGrayLabels>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmLightGrayLabels;
				}
				export class OsmNavigation extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmNavigation>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmNavigation;
				}
				export class OsmNavigationDark extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmNavigationDark>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmNavigationDark;
				}
				export class OsmStandard extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmStandard>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmStandard;
				}
				export class OsmStandardRelief extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmStandardRelief>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmStandardRelief;
				}
				export class OsmStandardReliefBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmStandardReliefBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmStandardReliefBase;
				}
				export class OsmStreets extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmStreets>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmStreets;
				}
				export class OsmStreetsRelief extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmStreetsRelief>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmStreetsRelief;
				}
				export class OsmStreetsReliefBase extends com.arcgismaps.mapping.BasemapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyle.OsmStreetsReliefBase>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyle.OsmStreetsReliefBase;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class BasemapStyleLanguageStrategy {
				public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleLanguageStrategy>;
				public getCoreBasemapStyleLanguageStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy;
			}
			export module BasemapStyleLanguageStrategy {
				export class ApplicationLocale extends com.arcgismaps.mapping.BasemapStyleLanguageStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleLanguageStrategy.ApplicationLocale>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyleLanguageStrategy.ApplicationLocale;
					public equals(param0: any): boolean;
					public toString(): string;
					public hashCode(): number;
				}
				export class Default extends com.arcgismaps.mapping.BasemapStyleLanguageStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Default>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Default;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreBasemapStyleLanguageStrategy): com.arcgismaps.mapping.BasemapStyleLanguageStrategy;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Factory.WhenMappings>;
					}
				}
				export class Global extends com.arcgismaps.mapping.BasemapStyleLanguageStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Global>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Global;
				}
				export class Local extends com.arcgismaps.mapping.BasemapStyleLanguageStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Local>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Local;
				}
				export class Specific extends com.arcgismaps.mapping.BasemapStyleLanguageStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Specific>;
					public equals(param0: any): boolean;
					public toString(): string;
					public constructor(param0: java.util.Locale);
					public component1(): java.util.Locale;
					public hashCode(): number;
					public copy(param0: java.util.Locale): com.arcgismaps.mapping.BasemapStyleLanguageStrategy.Specific;
					public getLocale(): java.util.Locale;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class BasemapStyleParameters {
				public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleParameters>;
				public getCoreBasemapStyleParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBasemapStyleParameters;
				public getSpecificLanguage$arcgis_maps_any_release(): string;
				public getLanguageStrategy(): com.arcgismaps.mapping.BasemapStyleLanguageStrategy;
				public setSpecificLanguage$arcgis_maps_any_release(param0: string): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreBasemapStyleParameters);
				public setLanguageStrategy(param0: com.arcgismaps.mapping.BasemapStyleLanguageStrategy): void;
				public constructor();
			}
			export module BasemapStyleParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreBasemapStyleParameters,com.arcgismaps.mapping.BasemapStyleParameters> {
					public static class: java.lang.Class<com.arcgismaps.mapping.BasemapStyleParameters.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.BasemapStyleParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class BasemapTransformingSerializer extends kotlinx.serialization.json.JsonTransformingSerializer<com.arcgismaps.mapping.Basemap> {
				public static class: java.lang.Class<com.arcgismaps.mapping.BasemapTransformingSerializer>;
				public static INSTANCE: com.arcgismaps.mapping.BasemapTransformingSerializer;
				public transformDeserialize(param0: kotlinx.serialization.json.JsonElement): kotlinx.serialization.json.JsonElement;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class Bookmark {
				public static class: java.lang.Class<com.arcgismaps.mapping.Bookmark>;
				public setName(param0: string): void;
				public setViewpoint(param0: com.arcgismaps.mapping.Viewpoint): void;
				public constructor(param0: string, param1: com.arcgismaps.mapping.Viewpoint);
				public clone(): com.arcgismaps.mapping.Bookmark;
				public getViewpoint(): com.arcgismaps.mapping.Viewpoint;
				public getCoreBookmark$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBookmark;
				public constructor(param0: com.arcgismaps.internal.jni.CoreBookmark);
				public getName(): string;
			}
			export module Bookmark {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreBookmark,com.arcgismaps.mapping.Bookmark> {
					public static class: java.lang.Class<com.arcgismaps.mapping.Bookmark.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.Bookmark.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class ClientRequestSender {
				public static class: java.lang.Class<com.arcgismaps.mapping.ClientRequestSender>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreClientRequestSender);
				public getCoreClientRequestSender$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClientRequestSender;
			}
			export module ClientRequestSender {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.ClientRequestSender.Companion>;
					public "sendRequest-BWLJW6A"(param0: string, param1: com.arcgismaps.httpcore.BaseRequest, param2: com.arcgismaps.mapping.ArcGISAuthenticationMode, param3: any): any;
					public "sendFileRequest-BWLJW6A"(param0: string, param1: string, param2: com.arcgismaps.httpcore.BaseRequest, param3: any): any;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreClientRequestSender,com.arcgismaps.mapping.ClientRequestSender> {
					public static class: java.lang.Class<com.arcgismaps.mapping.ClientRequestSender.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ClientRequestSender.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class ClientResponse {
				public static class: java.lang.Class<com.arcgismaps.mapping.ClientResponse>;
				public getResponse$arcgis_maps_any_release(): any;
				public getCoreClientResponse$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClientResponse;
				public constructor(param0: com.arcgismaps.internal.jni.CoreClientResponse);
				public getData$arcgis_maps_any_release(): androidNative.Array<number>;
			}
			export module ClientResponse {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreClientResponse,com.arcgismaps.mapping.ClientResponse> {
					public static class: java.lang.Class<com.arcgismaps.mapping.ClientResponse.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ClientResponse.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class ElevationSource extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSource>;
				public setName(param0: string): void;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.ElevationSourceType;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getCoreElevationSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreElevationSource;
				public isEnabled(): boolean;
				public getName(): string;
				public "load-IoAF18A"(param0: any): any;
				public setEnabled(param0: boolean): void;
			}
			export module ElevationSource {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSource.Companion>;
					public fromTerrain3dService(): com.arcgismaps.mapping.ArcGISTiledElevationSource;
				}
				export class Factory extends com.arcgismaps.mapping.ElevationSourceFactory {
					public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSource.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ElevationSource.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class ElevationSourceFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreElevationSource,com.arcgismaps.mapping.ElevationSource> {
				public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSourceFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreElevationSource): com.arcgismaps.mapping.ElevationSource;
				public constructor();
			}
			export module ElevationSourceFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSourceFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class ElevationSourceType {
				public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSourceType>;
				public getCoreElevationSourceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreElevationSourceType;
			}
			export module ElevationSourceType {
				export class ArcGISTiledElevationSource extends com.arcgismaps.mapping.ElevationSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSourceType.ArcGISTiledElevationSource>;
					public static INSTANCE: com.arcgismaps.mapping.ElevationSourceType.ArcGISTiledElevationSource;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSourceType.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ElevationSourceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreElevationSourceType): com.arcgismaps.mapping.ElevationSourceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSourceType.Factory.WhenMappings>;
					}
				}
				export class RasterElevationSource extends com.arcgismaps.mapping.ElevationSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSourceType.RasterElevationSource>;
					public static INSTANCE: com.arcgismaps.mapping.ElevationSourceType.RasterElevationSource;
				}
				export class Unknown extends com.arcgismaps.mapping.ElevationSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ElevationSourceType.Unknown>;
					public static INSTANCE: com.arcgismaps.mapping.ElevationSourceType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class Expiration {
				public static class: java.lang.Class<com.arcgismaps.mapping.Expiration>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreExpiration);
				public getCoreExpiration$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExpiration;
				public isExpired(): boolean;
				public getType(): com.arcgismaps.mapping.ExpirationType;
				public getDateTime(): java.time.Instant;
				public getMessage(): string;
			}
			export module Expiration {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreExpiration,com.arcgismaps.mapping.Expiration> {
					public static class: java.lang.Class<com.arcgismaps.mapping.Expiration.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.Expiration.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class ExpirationType {
				public static class: java.lang.Class<com.arcgismaps.mapping.ExpirationType>;
				public getCoreExpirationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExpirationType;
			}
			export module ExpirationType {
				export class AllowExpiredAccess extends com.arcgismaps.mapping.ExpirationType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ExpirationType.AllowExpiredAccess>;
					public static INSTANCE: com.arcgismaps.mapping.ExpirationType.AllowExpiredAccess;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.ExpirationType.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ExpirationType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreExpirationType): com.arcgismaps.mapping.ExpirationType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.ExpirationType.Factory.WhenMappings>;
					}
				}
				export class PreventExpiredAccess extends com.arcgismaps.mapping.ExpirationType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ExpirationType.PreventExpiredAccess>;
					public static INSTANCE: com.arcgismaps.mapping.ExpirationType.PreventExpiredAccess;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class GeoElement {
				public static class: java.lang.Class<com.arcgismaps.mapping.GeoElement>;
				/**
				 * Constructs a new instance of the com.arcgismaps.mapping.GeoElement interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getAttributes(): java.util.Map<string,any>;
					getGeometry(): com.arcgismaps.geometry.Geometry;
				});
				public constructor();
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public getAttributes(): java.util.Map<string,any>;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class GeoElementImpl extends com.arcgismaps.mapping.GeoElement {
				public static class: java.lang.Class<com.arcgismaps.mapping.GeoElementImpl>;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public invalidateAttributes(): void;
				public invalidateGeometryAndAttributes(): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeoElement);
				public getCoreGeoElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoElement;
				public getAttributes(): java.util.Map<string,any>;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module GeoElementKt {

				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.mapping.GeoElementKt.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class GeoModel extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.mapping.GeoModel>;
				public cancelLoad(): void;
				public get_item$arcgis_maps_any_release(): com.arcgismaps.mapping.Item;
				public setFloorDefinition(param0: com.arcgismaps.mapping.floor.GeoModelFloorDefinition): void;
				public getTables(): java.util.List<com.arcgismaps.data.FeatureTable>;
				public getInitialViewpoint(): com.arcgismaps.mapping.Viewpoint;
				public getFloorManager(): com.arcgismaps.mapping.floor.FloorManager;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.GeoModelType;
				public set_item$arcgis_maps_any_release(param0: com.arcgismaps.mapping.Item): void;
				public getBasemap(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.Basemap>;
				public getGeotriggersInfo(): com.arcgismaps.geotriggers.GeotriggersInfo;
				public getLoadSettings(): com.arcgismaps.mapping.LoadSettings;
				public set_spatialReference$arcgis_maps_any_release(param0: com.arcgismaps.geometry.SpatialReference): void;
				public getCoreGeoModel$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoModel;
				public get_spatialReference$arcgis_maps_any_release(): com.arcgismaps.geometry.SpatialReference;
				public setLoadSettings(param0: com.arcgismaps.mapping.LoadSettings): void;
				public setInitialViewpoint(param0: com.arcgismaps.mapping.Viewpoint): void;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public getFloorDefinition(): com.arcgismaps.mapping.floor.GeoModelFloorDefinition;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public setItem(param0: com.arcgismaps.mapping.Item): void;
				public getItem(): com.arcgismaps.mapping.Item;
				public getTransportationNetworks(): java.util.List<com.arcgismaps.data.TransportationNetworkDataset>;
				public getBookmarks(): java.util.List<com.arcgismaps.mapping.Bookmark>;
				public "load-IoAF18A"(param0: any): any;
				public getVersion(): string;
				public "retryLoad-IoAF18A"(param0: any): any;
				public setBasemap(param0: com.arcgismaps.mapping.Basemap): void;
				public getOperationalLayers(): java.util.List<com.arcgismaps.mapping.layers.Layer>;
				public clone(): com.arcgismaps.mapping.GeoModel;
			}
			export module GeoModel {
				export class Factory extends com.arcgismaps.mapping.GeoModelFactory {
					public static class: java.lang.Class<com.arcgismaps.mapping.GeoModel.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.GeoModel.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class GeoModelFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeoModel,com.arcgismaps.mapping.GeoModel> {
				public static class: java.lang.Class<com.arcgismaps.mapping.GeoModelFactory>;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeoModel): com.arcgismaps.mapping.GeoModel;
				public convertToPublic(param0: any): any;
				public constructor();
			}
			export module GeoModelFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.mapping.GeoModelFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class GeoModelType {
				public static class: java.lang.Class<com.arcgismaps.mapping.GeoModelType>;
				public getCoreGeoModelType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoModelType;
			}
			export module GeoModelType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.GeoModelType.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.GeoModelType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeoModelType): com.arcgismaps.mapping.GeoModelType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.GeoModelType.Factory.WhenMappings>;
					}
				}
				export class Map extends com.arcgismaps.mapping.GeoModelType {
					public static class: java.lang.Class<com.arcgismaps.mapping.GeoModelType.Map>;
					public static INSTANCE: com.arcgismaps.mapping.GeoModelType.Map;
				}
				export class Scene extends com.arcgismaps.mapping.GeoModelType {
					public static class: java.lang.Class<com.arcgismaps.mapping.GeoModelType.Scene>;
					public static INSTANCE: com.arcgismaps.mapping.GeoModelType.Scene;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class HttpOperation {
				public static class: java.lang.Class<com.arcgismaps.mapping.HttpOperation>;
				public getCoreHttpOperation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreHTTPOperation;
			}
			export module HttpOperation {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.HttpOperation.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.HttpOperation.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreHTTPOperation): com.arcgismaps.mapping.HttpOperation;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.HttpOperation.Factory.WhenMappings>;
					}
				}
				export class Get extends com.arcgismaps.mapping.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.mapping.HttpOperation.Get>;
					public static INSTANCE: com.arcgismaps.mapping.HttpOperation.Get;
				}
				export class MultipartPost extends com.arcgismaps.mapping.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.mapping.HttpOperation.MultipartPost>;
					public static INSTANCE: com.arcgismaps.mapping.HttpOperation.MultipartPost;
				}
				export class Post extends com.arcgismaps.mapping.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.mapping.HttpOperation.Post>;
					public static INSTANCE: com.arcgismaps.mapping.HttpOperation.Post;
				}
				export class RawPost extends com.arcgismaps.mapping.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.mapping.HttpOperation.RawPost>;
					public static INSTANCE: com.arcgismaps.mapping.HttpOperation.RawPost;
				}
				export class Unknown extends com.arcgismaps.mapping.HttpOperation {
					public static class: java.lang.Class<com.arcgismaps.mapping.HttpOperation.Unknown>;
					public static INSTANCE: com.arcgismaps.mapping.HttpOperation.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class Item {
				public static class: java.lang.Class<com.arcgismaps.mapping.Item>;
				public getSpatialReferenceName(): string;
				public setTermsOfUse(param0: string): void;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.ItemType;
				public getSnippet(): string;
				public "updateItemProperties-IoAF18A"(param0: any): any;
				public getDescription(): string;
				public getExtent(): com.arcgismaps.geometry.Envelope;
				public setTitle(param0: string): void;
				public setExtent(param0: com.arcgismaps.geometry.Envelope): void;
				public getAccessInformation(): string;
				public getCreated(): java.time.Instant;
				public getTermsOfUse(): string;
				public getTypeKeywords(): java.util.List<string>;
				public setAccessInformation(param0: string): void;
				public setThumbnail(param0: globalAndroid.graphics.drawable.BitmapDrawable): void;
				public setItemId(param0: string): void;
				public setName(param0: string): void;
				public getThumbnail(): com.arcgismaps.portal.LoadableImage;
				public getModified(): java.time.Instant;
				public "fetchData-IoAF18A"(param0: any): any;
				public getCoreItem$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreItem;
				public getName(): string;
				public getItemId(): string;
				public getTitle(): string;
				public getTags(): java.util.List<string>;
				public setDescription(param0: string): void;
				public setSnippet(param0: string): void;
			}
			export module Item {
				export class Factory extends com.arcgismaps.mapping.ItemFactory {
					public static class: java.lang.Class<com.arcgismaps.mapping.Item.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.Item.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class ItemFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreItem,com.arcgismaps.mapping.Item> {
				public static class: java.lang.Class<com.arcgismaps.mapping.ItemFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreItem): com.arcgismaps.mapping.Item;
				public constructor();
			}
			export module ItemFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.mapping.ItemFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class ItemType {
				public static class: java.lang.Class<com.arcgismaps.mapping.ItemType>;
				public getCoreItemType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreItemType;
			}
			export module ItemType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.ItemType.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ItemType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreItemType): com.arcgismaps.mapping.ItemType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.ItemType.Factory.WhenMappings>;
					}
				}
				export class LocalItem extends com.arcgismaps.mapping.ItemType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ItemType.LocalItem>;
					public static INSTANCE: com.arcgismaps.mapping.ItemType.LocalItem;
				}
				export class PortalItem extends com.arcgismaps.mapping.ItemType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ItemType.PortalItem>;
					public static INSTANCE: com.arcgismaps.mapping.ItemType.PortalItem;
				}
				export class Unknown extends com.arcgismaps.mapping.ItemType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ItemType.Unknown>;
					public static INSTANCE: com.arcgismaps.mapping.ItemType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class LoadSettings {
				public static class: java.lang.Class<com.arcgismaps.mapping.LoadSettings>;
				public getFeatureTilingMode(): com.arcgismaps.mapping.layers.FeatureTilingMode;
				public getCoreLoadSettings$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLoadSettings;
				public getPreferredPolygonFeatureRenderingMode(): com.arcgismaps.mapping.layers.FeatureRenderingMode;
				public setFeatureServiceSessionType(param0: com.arcgismaps.arcgisservices.FeatureServiceSessionType): void;
				public setUseAdvancedSymbology(param0: boolean): void;
				public setPreferredPointFeatureRenderingMode(param0: com.arcgismaps.mapping.layers.FeatureRenderingMode): void;
				public constructor();
				public getPreferredPointFeatureRenderingMode(): com.arcgismaps.mapping.layers.FeatureRenderingMode;
				public getPreferredPolylineFeatureRenderingMode(): com.arcgismaps.mapping.layers.FeatureRenderingMode;
				public getFeatureServiceSessionType(): com.arcgismaps.arcgisservices.FeatureServiceSessionType;
				public setPreferredPolylineFeatureRenderingMode(param0: com.arcgismaps.mapping.layers.FeatureRenderingMode): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLoadSettings);
				public setPreferredPolygonFeatureRenderingMode(param0: com.arcgismaps.mapping.layers.FeatureRenderingMode): void;
				public getUseAdvancedSymbology(): boolean;
				public setFeatureTilingMode(param0: com.arcgismaps.mapping.layers.FeatureTilingMode): void;
				public getFeatureRequestMode(): com.arcgismaps.data.FeatureRequestMode;
				public setFeatureRequestMode(param0: com.arcgismaps.data.FeatureRequestMode): void;
			}
			export module LoadSettings {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLoadSettings,com.arcgismaps.mapping.LoadSettings> {
					public static class: java.lang.Class<com.arcgismaps.mapping.LoadSettings.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.LoadSettings.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class LocalItem extends com.arcgismaps.mapping.Item {
				public static class: java.lang.Class<com.arcgismaps.mapping.LocalItem>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLocalItem, param1: boolean);
				public setType(param0: com.arcgismaps.mapping.LocalItemType): void;
				public setPath(param0: string): void;
				public "updateItemProperties-IoAF18A"(param0: any): any;
				public getOriginalPortalItemId(): string;
				public getPortalUrl(): string;
				public getType(): com.arcgismaps.mapping.LocalItemType;
				public getCoreLocalItem$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocalItem;
				public getPath(): string;
				public setOriginalPortalItemId(param0: string): void;
			}
			export module LocalItem {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreLocalItem,com.arcgismaps.mapping.LocalItem> {
					public static class: java.lang.Class<com.arcgismaps.mapping.LocalItem.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.LocalItem.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class LocalItemType {
				public static class: java.lang.Class<com.arcgismaps.mapping.LocalItemType>;
				public getCoreLocalItemType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocalItemType;
			}
			export module LocalItemType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.LocalItemType.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.LocalItemType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLocalItemType): com.arcgismaps.mapping.LocalItemType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.LocalItemType.Factory.WhenMappings>;
					}
				}
				export class MobileMap extends com.arcgismaps.mapping.LocalItemType {
					public static class: java.lang.Class<com.arcgismaps.mapping.LocalItemType.MobileMap>;
					public static INSTANCE: com.arcgismaps.mapping.LocalItemType.MobileMap;
				}
				export class MobileMapPackage extends com.arcgismaps.mapping.LocalItemType {
					public static class: java.lang.Class<com.arcgismaps.mapping.LocalItemType.MobileMapPackage>;
					public static INSTANCE: com.arcgismaps.mapping.LocalItemType.MobileMapPackage;
				}
				export class MobileScene extends com.arcgismaps.mapping.LocalItemType {
					public static class: java.lang.Class<com.arcgismaps.mapping.LocalItemType.MobileScene>;
					public static INSTANCE: com.arcgismaps.mapping.LocalItemType.MobileScene;
				}
				export class MobileScenePackage extends com.arcgismaps.mapping.LocalItemType {
					public static class: java.lang.Class<com.arcgismaps.mapping.LocalItemType.MobileScenePackage>;
					public static INSTANCE: com.arcgismaps.mapping.LocalItemType.MobileScenePackage;
				}
				export class Unknown extends com.arcgismaps.mapping.LocalItemType {
					public static class: java.lang.Class<com.arcgismaps.mapping.LocalItemType.Unknown>;
					public static INSTANCE: com.arcgismaps.mapping.LocalItemType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class MapSourceType {
				public static class: java.lang.Class<com.arcgismaps.mapping.MapSourceType>;
				public getCoreMapSourceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMapSourceType;
			}
			export module MapSourceType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.MapSourceType.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.MapSourceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMapSourceType): com.arcgismaps.mapping.MapSourceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.MapSourceType.Factory.WhenMappings>;
					}
				}
				export class MobileMapPackage extends com.arcgismaps.mapping.MapSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.MapSourceType.MobileMapPackage>;
					public static INSTANCE: com.arcgismaps.mapping.MapSourceType.MobileMapPackage;
				}
				export class Webmap extends com.arcgismaps.mapping.MapSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.MapSourceType.Webmap>;
					public static INSTANCE: com.arcgismaps.mapping.MapSourceType.Webmap;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class MobileMapPackage extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.mapping.MobileMapPackage>;
				public close(): void;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getItem(): com.arcgismaps.mapping.Item;
				public getPath(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMobileMapPackage);
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
				public getVersion(): string;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLocatorTask(): com.arcgismaps.tasks.geocode.LocatorTask;
				public getExpiration(): com.arcgismaps.mapping.Expiration;
				public getMaps(): java.util.List<com.arcgismaps.mapping.ArcGISMap>;
				public getCoreMobileMapPackage$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMobileMapPackage;
			}
			export module MobileMapPackage {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.MobileMapPackage.Companion>;
					public "unpack-0E7RQCE"(param0: string, param1: string, param2: any): any;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMobileMapPackage,com.arcgismaps.mapping.MobileMapPackage> {
					public static class: java.lang.Class<com.arcgismaps.mapping.MobileMapPackage.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.MobileMapPackage.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class MobileScenePackage extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.mapping.MobileScenePackage>;
				public getCoreMobileScenePackage$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMobileScenePackage;
				public close(): void;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getItem(): com.arcgismaps.mapping.Item;
				public getScenes(): java.util.List<com.arcgismaps.mapping.ArcGISScene>;
				public getPath(): string;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
				public constructor(param0: com.arcgismaps.internal.jni.CoreMobileScenePackage);
				public getVersion(): string;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLocatorTask(): com.arcgismaps.tasks.geocode.LocatorTask;
				public getExpiration(): com.arcgismaps.mapping.Expiration;
			}
			export module MobileScenePackage {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.MobileScenePackage.Companion>;
					public "unpack-0E7RQCE"(param0: string, param1: string, param2: any): any;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMobileScenePackage,com.arcgismaps.mapping.MobileScenePackage> {
					public static class: java.lang.Class<com.arcgismaps.mapping.MobileScenePackage.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.MobileScenePackage.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class NavigationConstraint {
				public static class: java.lang.Class<com.arcgismaps.mapping.NavigationConstraint>;
				public getCoreNavigationConstraint$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNavigationConstraint;
			}
			export module NavigationConstraint {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.NavigationConstraint.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.NavigationConstraint.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreNavigationConstraint): com.arcgismaps.mapping.NavigationConstraint;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.NavigationConstraint.Factory.WhenMappings>;
					}
				}
				export class None extends com.arcgismaps.mapping.NavigationConstraint {
					public static class: java.lang.Class<com.arcgismaps.mapping.NavigationConstraint.None>;
					public static INSTANCE: com.arcgismaps.mapping.NavigationConstraint.None;
				}
				export class StayAbove extends com.arcgismaps.mapping.NavigationConstraint {
					public static class: java.lang.Class<com.arcgismaps.mapping.NavigationConstraint.StayAbove>;
					public static INSTANCE: com.arcgismaps.mapping.NavigationConstraint.StayAbove;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class OfflineSettings {
				public static class: java.lang.Class<com.arcgismaps.mapping.OfflineSettings>;
				public getAttachmentSyncDirection(): com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection;
				public getReturnSchemaOnlyForEditableLayers(): boolean;
				public getOnlineTables(): java.util.List<com.arcgismaps.data.ServiceFeatureTable>;
				public getCoreOfflineSettings$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineSettings;
				public getReturnLayerAttachmentOption(): com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption;
				public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineSettings);
				public getOnlineLayers(): java.util.List<com.arcgismaps.mapping.layers.Layer>;
				public getReferenceBasemapFilename(): string;
			}
			export module OfflineSettings {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineSettings,com.arcgismaps.mapping.OfflineSettings> {
					public static class: java.lang.Class<com.arcgismaps.mapping.OfflineSettings.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.OfflineSettings.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class PortalItem extends com.arcgismaps.mapping.Item implements com.arcgismaps.io.JsonSerializable, com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.mapping.PortalItem>;
				public "unshare-IoAF18A"(param0: any): any;
				public "updateItemProperties-IoAF18A"(param0: any): any;
				public cancelLoad(): void;
				public getOwner(): string;
				public tryUpdateAccessProperty$arcgis_maps_any_release(param0: any): any;
				public getAverageRating(): number;
				public "addRating-gIAlu-s"(param0: number, param1: any): any;
				public "unshareGroups-gIAlu-s"(param0: java.lang.Iterable<com.arcgismaps.portal.PortalGroup>, param1: any): any;
				public getPortal(): com.arcgismaps.portal.Portal;
				public getCorePortalItem$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePortalItem;
				public getCommentCount(): number;
				public constructor(param0: string);
				public "fetchComments-IoAF18A"(param0: any): any;
				public getTypeName(): string;
				public getCulture(): string;
				public getRatingCount(): number;
				public setOwner(param0: string): void;
				public getSize(): number;
				public getType(): com.arcgismaps.portal.PortalItemType;
				public getThumbnailFileName$arcgis_maps_any_release(): string;
				public setType(param0: com.arcgismaps.portal.PortalItemType): void;
				public getServiceUrl(): string;
				public "updateContent-gIAlu-s"(param0: com.arcgismaps.portal.PortalItemContentParameters, param1: any): any;
				public constructor(param0: com.arcgismaps.portal.Portal, param1: com.arcgismaps.portal.PortalItemType);
				public getUnknownJson(): java.util.Map<string,any>;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public setFolderId(param0: string): void;
				public "shareWithGroups-gIAlu-s"(param0: java.lang.Iterable<com.arcgismaps.portal.PortalGroup>, param1: any): any;
				public getUrl(): string;
				public getViewCount(): number;
				public getUnsupportedJson(): java.util.Map<string,any>;
				public "fetchRelatedItems-0E7RQCE"(param0: com.arcgismaps.portal.PortalItemRelationship, param1: com.arcgismaps.portal.PortalItemRelationshipDirection, param2: any): any;
				public toJson(): string;
				public "load-IoAF18A"(param0: any): any;
				public "shareWith-0E7RQCE"(param0: boolean, param1: boolean, param2: any): any;
				public "retryLoad-IoAF18A"(param0: any): any;
				public "fetchGroups-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CorePortalItem, param1: boolean);
				public getCommentsEnabled(): boolean;
				public "addComment-gIAlu-s"(param0: string, param1: any): any;
				public "fetchPortalItemInfo-IoAF18A$arcgis_maps_any_release"(param0: any): any;
				public getAccess(): com.arcgismaps.portal.PortalAccess;
				public "fetchRelatedItems-0E7RQCE"(param0: java.lang.Iterable<any>, param1: com.arcgismaps.portal.PortalItemRelationshipDirection, param2: any): any;
				public constructor(param0: com.arcgismaps.portal.Portal, param1: string);
				public getFolderId(): string;
			}
			export module PortalItem {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.PortalItem.Companion>;
					public fromJsonOrNull(param0: string, param1: com.arcgismaps.portal.Portal): com.arcgismaps.mapping.PortalItem;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.mapping.PortalItem>;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CorePortalItem,com.arcgismaps.mapping.PortalItem> {
					public static class: java.lang.Class<com.arcgismaps.mapping.PortalItem.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.PortalItem.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class PortalItemListSerializer extends com.arcgismaps.internal.io.ListOrSingletonSerializer<com.arcgismaps.mapping.PortalItem> {
				public static class: java.lang.Class<com.arcgismaps.mapping.PortalItemListSerializer>;
				public static INSTANCE: com.arcgismaps.mapping.PortalItemListSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class PortalItemSerializer extends kotlinx.serialization.json.JsonTransformingSerializer<com.arcgismaps.mapping.PortalItem> {
				public static class: java.lang.Class<com.arcgismaps.mapping.PortalItemSerializer>;
				public static INSTANCE: com.arcgismaps.mapping.PortalItemSerializer;
				public transformDeserialize(param0: kotlinx.serialization.json.JsonElement): kotlinx.serialization.json.JsonElement;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class PortalItemStringSerializer extends com.arcgismaps.internal.io.LockableStringSerializer<com.arcgismaps.mapping.PortalItem,com.arcgismaps.portal.Portal> {
				public static class: java.lang.Class<com.arcgismaps.mapping.PortalItemStringSerializer>;
				public static INSTANCE: com.arcgismaps.mapping.PortalItemStringSerializer;
				public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.mapping.PortalItem): void;
				public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.mapping.PortalItem;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class QueryFormats {
				public static class: java.lang.Class<com.arcgismaps.mapping.QueryFormats>;
				public getSupportsAmf(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreQueryFormats);
				public getCoreQueryFormats$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreQueryFormats;
				public getSupportsJson(): boolean;
				public getSupportsPbf(): boolean;
			}
			export module QueryFormats {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreQueryFormats,com.arcgismaps.mapping.QueryFormats> {
					public static class: java.lang.Class<com.arcgismaps.mapping.QueryFormats.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.QueryFormats.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class RasterElevationSource extends com.arcgismaps.mapping.ElevationSource {
				public static class: java.lang.Class<com.arcgismaps.mapping.RasterElevationSource>;
				public getFullExtent(): com.arcgismaps.geometry.Envelope;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getCoreRasterElevationSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRasterElevationSource;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRasterElevationSource, param1: boolean);
				public getFilePaths(): java.util.List<string>;
				public constructor(param0: java.lang.Iterable<string>);
				public "load-IoAF18A"(param0: any): any;
			}
			export module RasterElevationSource {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreRasterElevationSource,com.arcgismaps.mapping.RasterElevationSource> {
					public static class: java.lang.Class<com.arcgismaps.mapping.RasterElevationSource.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.RasterElevationSource.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class RelatedItemsData {
				public static class: java.lang.Class<com.arcgismaps.mapping.RelatedItemsData>;
				public component1(): java.util.List<com.arcgismaps.mapping.PortalItem>;
				public copy(param0: java.util.List<com.arcgismaps.mapping.PortalItem>): com.arcgismaps.mapping.RelatedItemsData;
				public hashCode(): number;
				public constructor(param0: java.util.List<com.arcgismaps.mapping.PortalItem>);
				public getRelatedItems(): java.util.List<com.arcgismaps.mapping.PortalItem>;
				public equals(param0: any): boolean;
				public toString(): string;
			}
				
			export module RelatedItemsData {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.mapping.RelatedItemsData> {
						public static class: java.lang.Class<com.arcgismaps.mapping.RelatedItemsData.serializer>;
						public static INSTANCE: com.arcgismaps.mapping.RelatedItemsData.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.mapping.RelatedItemsData;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.mapping.RelatedItemsData): void;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.RelatedItemsData.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.mapping.RelatedItemsData>;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module mapping {
			export class RequestAttachment {
				public static class: java.lang.Class<com.arcgismaps.mapping.RequestAttachment>;
				public getContentType$arcgis_maps_any_release(): string;
				public getCoreRequestAttachment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRequestAttachment;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRequestAttachment);
				public getFileName$arcgis_maps_any_release(): string;
				public getParameterName$arcgis_maps_any_release(): string;
				public getEncodedData(): string;
				public getData$arcgis_maps_any_release(): androidNative.Array<number>;
			}
			export module RequestAttachment {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRequestAttachment,com.arcgismaps.mapping.RequestAttachment> {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestAttachment.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.RequestAttachment.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class RequestSourceType {
				public static class: java.lang.Class<com.arcgismaps.mapping.RequestSourceType>;
				public getCoreRequestSourceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRequestSourceType;
			}
			export module RequestSourceType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestSourceType.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.RequestSourceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRequestSourceType): com.arcgismaps.mapping.RequestSourceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.RequestSourceType.Factory.WhenMappings>;
					}
				}
				export class ModelSymbol extends com.arcgismaps.mapping.RequestSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestSourceType.ModelSymbol>;
					public static INSTANCE: com.arcgismaps.mapping.RequestSourceType.ModelSymbol;
				}
				export class Other extends com.arcgismaps.mapping.RequestSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestSourceType.Other>;
					public static INSTANCE: com.arcgismaps.mapping.RequestSourceType.Other;
				}
				export class PictureFillSymbol extends com.arcgismaps.mapping.RequestSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestSourceType.PictureFillSymbol>;
					public static INSTANCE: com.arcgismaps.mapping.RequestSourceType.PictureFillSymbol;
				}
				export class PictureMarkerSymbol extends com.arcgismaps.mapping.RequestSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestSourceType.PictureMarkerSymbol>;
					public static INSTANCE: com.arcgismaps.mapping.RequestSourceType.PictureMarkerSymbol;
				}
				export class UnknownLayer extends com.arcgismaps.mapping.RequestSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestSourceType.UnknownLayer>;
					public static INSTANCE: com.arcgismaps.mapping.RequestSourceType.UnknownLayer;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class RequestType {
				public static class: java.lang.Class<com.arcgismaps.mapping.RequestType>;
				public getCoreRequestType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRequestType;
			}
			export module RequestType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRequestType): com.arcgismaps.mapping.RequestType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.Factory.WhenMappings>;
					}
				}
				export class FileRequest extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.FileRequest>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.FileRequest;
				}
				export class ImageRequest extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.ImageRequest>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.ImageRequest;
				}
				export class JobRequest extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.JobRequest>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.JobRequest;
				}
				export class JsonRequest extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.JsonRequest>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.JsonRequest;
				}
				export class LoadRequest extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.LoadRequest>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.LoadRequest;
				}
				export class RasterRequest extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.RasterRequest>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.RasterRequest;
				}
				export class Request extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.Request>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.Request;
				}
				export class SceneRequest extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.SceneRequest>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.SceneRequest;
				}
				export class ServiceRequest extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.ServiceRequest>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.ServiceRequest;
				}
				export class TileRequest extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.TileRequest>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.TileRequest;
				}
				export class Unknown extends com.arcgismaps.mapping.RequestType {
					public static class: java.lang.Class<com.arcgismaps.mapping.RequestType.Unknown>;
					public static INSTANCE: com.arcgismaps.mapping.RequestType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class Surface extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.mapping.Surface>;
				public setName(param0: string): void;
				public getNavigationConstraint(): com.arcgismaps.mapping.NavigationConstraint;
				public "getElevation-gIAlu-s"(param0: com.arcgismaps.geometry.Point, param1: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public setBackgroundGrid(param0: com.arcgismaps.mapping.view.BackgroundGrid): void;
				public getElevationSources(): java.util.List<com.arcgismaps.mapping.ElevationSource>;
				public getName(): string;
				public setOpacity(param0: number): void;
				public setNavigationConstraint(param0: com.arcgismaps.mapping.NavigationConstraint): void;
				public "load-IoAF18A"(param0: any): any;
				public setEnabled(param0: boolean): void;
				public getCoreSurface$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSurface;
				public constructor();
				public constructor(param0: com.arcgismaps.internal.jni.CoreSurface);
				public setElevationExaggeration(param0: number): void;
				public "retryLoad-IoAF18A"(param0: any): any;
				public isEnabled(): boolean;
				public getBackgroundGrid(): com.arcgismaps.mapping.view.BackgroundGrid;
				public getElevationExaggeration(): number;
				public getOpacity(): number;
			}
			export module Surface {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSurface,com.arcgismaps.mapping.Surface> {
					public static class: java.lang.Class<com.arcgismaps.mapping.Surface.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.Surface.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class TimeExtent {
				public static class: java.lang.Class<com.arcgismaps.mapping.TimeExtent>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTimeExtent);
				public getStartTime(): java.time.Instant;
				public getCoreTimeExtent$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTimeExtent;
				public constructor(param0: java.time.Instant, param1: java.time.Instant);
				public getEndTime(): java.time.Instant;
				public constructor(param0: java.time.Instant);
			}
			export module TimeExtent {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTimeExtent,com.arcgismaps.mapping.TimeExtent> {
					public static class: java.lang.Class<com.arcgismaps.mapping.TimeExtent.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.TimeExtent.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class TimeValue {
				public static class: java.lang.Class<com.arcgismaps.mapping.TimeValue>;
				public getCoreTimeValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTimeValue;
				public getDuration(): number;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTimeValue);
				public constructor(param0: number, param1: com.arcgismaps.arcgisservices.TimeUnit);
				public getUnit(): com.arcgismaps.arcgisservices.TimeUnit;
			}
			export module TimeValue {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTimeValue,com.arcgismaps.mapping.TimeValue> {
					public static class: java.lang.Class<com.arcgismaps.mapping.TimeValue.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.TimeValue.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class UrlUtils {
				public static class: java.lang.Class<com.arcgismaps.mapping.UrlUtils>;
				public static INSTANCE: com.arcgismaps.mapping.UrlUtils;
				public isHttps(param0: string): boolean;
				public getServerContext(param0: string): string;
				public getServerInfoUrl(param0: string): string;
				public normalize(param0: string): string;
				public convertToHttps(param0: string): string;
				public isHttp(param0: string): boolean;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export class Viewpoint extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.mapping.Viewpoint>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreViewpoint);
				public getTargetGeometry(): com.arcgismaps.geometry.Geometry;
				public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public constructor(param0: number, param1: number, param2: number, param3: com.arcgismaps.mapping.view.Camera);
				public constructor(param0: com.arcgismaps.geometry.Point, param1: number, param2: java.lang.Double, param3: com.arcgismaps.mapping.view.Camera);
				public toJson(): string;
				public getViewpointType(): com.arcgismaps.mapping.ViewpointType;
				public constructor(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.mapping.view.Camera);
				public constructor(param0: com.arcgismaps.geometry.Point, param1: number, param2: com.arcgismaps.mapping.view.Camera);
				public getCamera(): com.arcgismaps.mapping.view.Camera;
				public getRotation(): number;
				public hashCode(): number;
				public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				public equals(param0: any): boolean;
				public constructor(param0: com.arcgismaps.geometry.Geometry, param1: java.lang.Double, param2: com.arcgismaps.mapping.view.Camera);
				public getCoreViewpoint$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreViewpoint;
				public getTargetScale(): number;
			}
			export module Viewpoint {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.mapping.Viewpoint.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.mapping.Viewpoint;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreViewpoint,com.arcgismaps.mapping.Viewpoint> {
					public static class: java.lang.Class<com.arcgismaps.mapping.Viewpoint.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.Viewpoint.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export abstract class ViewpointType {
				public static class: java.lang.Class<com.arcgismaps.mapping.ViewpointType>;
				public getCoreViewpointType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreViewpointType;
			}
			export module ViewpointType {
				export class BoundingGeometry extends com.arcgismaps.mapping.ViewpointType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ViewpointType.BoundingGeometry>;
					public static INSTANCE: com.arcgismaps.mapping.ViewpointType.BoundingGeometry;
				}
				export class CenterAndScale extends com.arcgismaps.mapping.ViewpointType {
					public static class: java.lang.Class<com.arcgismaps.mapping.ViewpointType.CenterAndScale>;
					public static INSTANCE: com.arcgismaps.mapping.ViewpointType.CenterAndScale;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.mapping.ViewpointType.Factory>;
					public static INSTANCE: com.arcgismaps.mapping.ViewpointType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreViewpointType): com.arcgismaps.mapping.ViewpointType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.ViewpointType.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class ComboBoxFormInput extends com.arcgismaps.mapping.featureforms.FormInput {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.ComboBoxFormInput>;
					public getCodedValues(): java.util.List<com.arcgismaps.data.CodedValue>;
					public getNoValueLabel(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreComboBoxFormInput);
					public getNoValueOption(): com.arcgismaps.mapping.featureforms.FormInputNoValueOption;
					public getCoreComboBoxFormInput$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreComboBoxFormInput;
				}
				export module ComboBoxFormInput {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreComboBoxFormInput,com.arcgismaps.mapping.featureforms.ComboBoxFormInput> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.ComboBoxFormInput.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.ComboBoxFormInput.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class DateTimePickerFormInput extends com.arcgismaps.mapping.featureforms.FormInput {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.DateTimePickerFormInput>;
					public getIncludeTime(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDateTimePickerFormInput);
					public getMin(): java.time.Instant;
					public getCoreDateTimePickerFormInput$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDateTimePickerFormInput;
					public getMax(): java.time.Instant;
				}
				export module DateTimePickerFormInput {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDateTimePickerFormInput,com.arcgismaps.mapping.featureforms.DateTimePickerFormInput> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.DateTimePickerFormInput.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.DateTimePickerFormInput.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class FeatureForm {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FeatureForm>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureForm);
					public getDefinition(): com.arcgismaps.mapping.featureforms.FeatureFormDefinition;
					public getElements(): java.util.List<com.arcgismaps.mapping.featureforms.FormElement>;
					public "evaluateExpressions-IoAF18A"(param0: any): any;
					public getFeature(): com.arcgismaps.data.ArcGISFeature;
					public constructor(param0: com.arcgismaps.data.ArcGISFeature, param1: com.arcgismaps.mapping.featureforms.FeatureFormDefinition);
					public getPreserveFieldValuesWhenHidden(): boolean;
					public getDescription(): string;
					public getTitle(): kotlinx.coroutines.flow.StateFlow<string>;
					public discardEdits(): void;
					public getCoreFeatureForm$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureForm;
					public getValidationErrors(): kotlinx.coroutines.flow.StateFlow<java.util.Map<string,java.util.List<java.lang.Throwable>>>;
				}
				export module FeatureForm {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureForm,com.arcgismaps.mapping.featureforms.FeatureForm> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FeatureForm.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FeatureForm.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class FeatureFormDefinition {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FeatureFormDefinition>;
					public getTitle(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureFormDefinition);
					public getDescription(): string;
					public getCoreFeatureFormDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureFormDefinition;
				}
				export module FeatureFormDefinition {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFeatureFormDefinition,com.arcgismaps.mapping.featureforms.FeatureFormDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FeatureFormDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FeatureFormDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class FieldFormElement extends com.arcgismaps.mapping.featureforms.FormElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FieldFormElement>;
					public attributeInvalidator: any;
					public setAttributeInvalidator$arcgis_maps_any_release(param0: any): void;
					public isEditable(): kotlinx.coroutines.flow.StateFlow<java.lang.Boolean>;
					public getValue(): kotlinx.coroutines.flow.StateFlow<any>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFieldFormElement, param1: boolean);
					public getFormattedValue(): string;
					public isRequired(): kotlinx.coroutines.flow.StateFlow<java.lang.Boolean>;
					public getValidationErrors(): kotlinx.coroutines.flow.StateFlow<java.util.List<java.lang.Throwable>>;
					public getFieldType(): com.arcgismaps.data.FieldType;
					public getHint(): string;
					public getAttributeInvalidator$arcgis_maps_any_release(): any;
					public getCoreFieldFormElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFieldFormElement;
					public getDomain(): com.arcgismaps.data.Domain;
					public updateValue(param0: any): void;
					public getFieldName(): string;
					public getInput(): com.arcgismaps.mapping.featureforms.FormInput;
				}
				export module FieldFormElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFieldFormElement,com.arcgismaps.mapping.featureforms.FieldFormElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FieldFormElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FieldFormElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export abstract class FormElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElement>;
					public getLabel(): string;
					public getUnsupportedJson(): java.util.Map<string,any>;
					public isVisible(): kotlinx.coroutines.flow.StateFlow<java.lang.Boolean>;
					public equals(param0: any): boolean;
					public getUnknownJson(): java.util.Map<string,any>;
					public getDescription(): string;
					public hashCode(): number;
					public getCoreFormElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFormElement;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.featureforms.FormElementType;
				}
				export module FormElement {
					export class Factory extends com.arcgismaps.mapping.featureforms.FormElementFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class FormElementFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreFormElement,com.arcgismaps.mapping.featureforms.FormElement> {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElementFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFormElement): com.arcgismaps.mapping.featureforms.FormElement;
					public convertToPublic(param0: any): any;
				}
				export module FormElementFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElementFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export abstract class FormElementType {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElementType>;
					public getCoreFormElementType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFormElementType;
				}
				export module FormElementType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElementType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormElementType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFormElementType): com.arcgismaps.mapping.featureforms.FormElementType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElementType.Factory.WhenMappings>;
						}
					}
					export class FieldFormElement extends com.arcgismaps.mapping.featureforms.FormElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElementType.FieldFormElement>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormElementType.FieldFormElement;
					}
					export class GroupFormElement extends com.arcgismaps.mapping.featureforms.FormElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElementType.GroupFormElement>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormElementType.GroupFormElement;
					}
					export class UnsupportedFormElement extends com.arcgismaps.mapping.featureforms.FormElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormElementType.UnsupportedFormElement>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormElementType.UnsupportedFormElement;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class FormExpressionEvaluationError {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormExpressionEvaluationError>;
					public getCoreFormExpressionEvaluationError$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFormExpressionEvaluationError;
					public getExpressionName(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFormExpressionEvaluationError);
					public getError(): java.lang.Throwable;
				}
				export module FormExpressionEvaluationError {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFormExpressionEvaluationError,com.arcgismaps.mapping.featureforms.FormExpressionEvaluationError> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormExpressionEvaluationError.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormExpressionEvaluationError.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export abstract class FormGroupState {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormGroupState>;
					public getCoreFormGroupState$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFormGroupState;
				}
				export module FormGroupState {
					export class Collapsed extends com.arcgismaps.mapping.featureforms.FormGroupState {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormGroupState.Collapsed>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormGroupState.Collapsed;
					}
					export class Expanded extends com.arcgismaps.mapping.featureforms.FormGroupState {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormGroupState.Expanded>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormGroupState.Expanded;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormGroupState.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormGroupState.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFormGroupState): com.arcgismaps.mapping.featureforms.FormGroupState;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormGroupState.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export abstract class FormInput {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInput>;
					public getCoreFormInput$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFormInput;
					public getUnsupportedJson(): java.util.Map<string,any>;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.featureforms.FormInputType;
					public getUnknownJson(): java.util.Map<string,any>;
				}
				export module FormInput {
					export class Factory extends com.arcgismaps.mapping.featureforms.FormInputFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInput.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInput.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class FormInputFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreFormInput,com.arcgismaps.mapping.featureforms.FormInput> {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFormInput): com.arcgismaps.mapping.featureforms.FormInput;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module FormInputFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export abstract class FormInputNoValueOption {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputNoValueOption>;
					public getCoreFormInputNoValueOption$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFormInputNoValueOption;
				}
				export module FormInputNoValueOption {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputNoValueOption.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputNoValueOption.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFormInputNoValueOption): com.arcgismaps.mapping.featureforms.FormInputNoValueOption;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputNoValueOption.Factory.WhenMappings>;
						}
					}
					export class Hide extends com.arcgismaps.mapping.featureforms.FormInputNoValueOption {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputNoValueOption.Hide>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputNoValueOption.Hide;
					}
					export class Show extends com.arcgismaps.mapping.featureforms.FormInputNoValueOption {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputNoValueOption.Show>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputNoValueOption.Show;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export abstract class FormInputType {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType>;
					public getCoreFormInputType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFormInputType;
				}
				export module FormInputType {
					export class ComboBoxFormInput extends com.arcgismaps.mapping.featureforms.FormInputType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType.ComboBoxFormInput>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputType.ComboBoxFormInput;
					}
					export class DateTimePickerFormInput extends com.arcgismaps.mapping.featureforms.FormInputType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType.DateTimePickerFormInput>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputType.DateTimePickerFormInput;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFormInputType): com.arcgismaps.mapping.featureforms.FormInputType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType.Factory.WhenMappings>;
						}
					}
					export class RadioButtonsFormInput extends com.arcgismaps.mapping.featureforms.FormInputType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType.RadioButtonsFormInput>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputType.RadioButtonsFormInput;
					}
					export class SwitchFormInput extends com.arcgismaps.mapping.featureforms.FormInputType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType.SwitchFormInput>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputType.SwitchFormInput;
					}
					export class TextAreaFormInput extends com.arcgismaps.mapping.featureforms.FormInputType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType.TextAreaFormInput>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputType.TextAreaFormInput;
					}
					export class TextBoxFormInput extends com.arcgismaps.mapping.featureforms.FormInputType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType.TextBoxFormInput>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputType.TextBoxFormInput;
					}
					export class UnsupportedFormInput extends com.arcgismaps.mapping.featureforms.FormInputType {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.FormInputType.UnsupportedFormInput>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.FormInputType.UnsupportedFormInput;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class GroupFormElement extends com.arcgismaps.mapping.featureforms.FormElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.GroupFormElement>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGroupFormElement, param1: boolean);
					public getInitialState(): com.arcgismaps.mapping.featureforms.FormGroupState;
					public getCoreGroupFormElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGroupFormElement;
					public getElements(): java.util.List<com.arcgismaps.mapping.featureforms.FormElement>;
				}
				export module GroupFormElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGroupFormElement,com.arcgismaps.mapping.featureforms.GroupFormElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.GroupFormElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.GroupFormElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class RadioButtonsFormInput extends com.arcgismaps.mapping.featureforms.FormInput {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.RadioButtonsFormInput>;
					public getCodedValues(): java.util.List<com.arcgismaps.data.CodedValue>;
					public getCoreRadioButtonsFormInput$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRadioButtonsFormInput;
					public getNoValueLabel(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRadioButtonsFormInput);
					public getNoValueOption(): com.arcgismaps.mapping.featureforms.FormInputNoValueOption;
				}
				export module RadioButtonsFormInput {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRadioButtonsFormInput,com.arcgismaps.mapping.featureforms.RadioButtonsFormInput> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.RadioButtonsFormInput.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.RadioButtonsFormInput.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class SwitchFormInput extends com.arcgismaps.mapping.featureforms.FormInput {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.SwitchFormInput>;
					public getOnValue(): com.arcgismaps.data.CodedValue;
					public getOffValue(): com.arcgismaps.data.CodedValue;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSwitchFormInput);
					public getCoreSwitchFormInput$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSwitchFormInput;
				}
				export module SwitchFormInput {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSwitchFormInput,com.arcgismaps.mapping.featureforms.SwitchFormInput> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.SwitchFormInput.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.SwitchFormInput.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class TextAreaFormInput extends com.arcgismaps.mapping.featureforms.FormInput {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.TextAreaFormInput>;
					public getCoreTextAreaFormInput$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTextAreaFormInput;
					public getMinLength(): number;
					public getMaxLength(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTextAreaFormInput);
				}
				export module TextAreaFormInput {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTextAreaFormInput,com.arcgismaps.mapping.featureforms.TextAreaFormInput> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.TextAreaFormInput.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.TextAreaFormInput.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class TextBoxFormInput extends com.arcgismaps.mapping.featureforms.FormInput {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.TextBoxFormInput>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTextBoxFormInput);
					public getMinLength(): number;
					public getCoreTextBoxFormInput$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTextBoxFormInput;
					public getMaxLength(): number;
				}
				export module TextBoxFormInput {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTextBoxFormInput,com.arcgismaps.mapping.featureforms.TextBoxFormInput> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.TextBoxFormInput.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.TextBoxFormInput.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class UnsupportedFormElement extends com.arcgismaps.mapping.featureforms.FormElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.UnsupportedFormElement>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUnsupportedFormElement, param1: boolean);
					public getCoreUnsupportedFormElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnsupportedFormElement;
				}
				export module UnsupportedFormElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUnsupportedFormElement,com.arcgismaps.mapping.featureforms.UnsupportedFormElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.UnsupportedFormElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.UnsupportedFormElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module featureforms {
				export class UnsupportedFormInput extends com.arcgismaps.mapping.featureforms.FormInput {
					public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.UnsupportedFormInput>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUnsupportedFormInput);
					public getCoreUnsupportedFormInput$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnsupportedFormInput;
				}
				export module UnsupportedFormInput {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUnsupportedFormInput,com.arcgismaps.mapping.featureforms.UnsupportedFormInput> {
						public static class: java.lang.Class<com.arcgismaps.mapping.featureforms.UnsupportedFormInput.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.featureforms.UnsupportedFormInput.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class FacilityLayerDefinition extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.FacilityLayerDefinition>;
					public getNameField(): string;
					public getCoreFacilityLayerDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFacilityLayerDefinition;
					public toJson(): string;
					public getLayerId(): string;
					public constructor(param0: string, param1: string, param2: string, param3: string);
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getFacilityIdField(): string;
					public getSiteIdField(): string;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFacilityLayerDefinition);
				}
				export module FacilityLayerDefinition {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.FacilityLayerDefinition.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.floor.FacilityLayerDefinition;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFacilityLayerDefinition,com.arcgismaps.mapping.floor.FacilityLayerDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.FacilityLayerDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.floor.FacilityLayerDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class FloorAware {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorAware>;
					/**
					 * Constructs a new instance of the com.arcgismaps.mapping.floor.FloorAware interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getFloorDefinition(): com.arcgismaps.mapping.floor.LayerFloorDefinition;
						setFloorDefinition(param0: com.arcgismaps.mapping.floor.LayerFloorDefinition): void;
					});
					public constructor();
					public getFloorDefinition(): com.arcgismaps.mapping.floor.LayerFloorDefinition;
					public setFloorDefinition(param0: com.arcgismaps.mapping.floor.LayerFloorDefinition): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class FloorAwareImpl extends com.arcgismaps.mapping.floor.FloorAware {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorAwareImpl>;
					public getFloorDefinition(): com.arcgismaps.mapping.floor.LayerFloorDefinition;
					public setFloorDefinition(param0: com.arcgismaps.mapping.floor.LayerFloorDefinition): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFloorAware);
					public getCoreFloorAware$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFloorAware;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class FloorFacility {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorFacility>;
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public getId(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFloorFacility, param1: boolean);
					public getName(): string;
					public getSite(): com.arcgismaps.mapping.floor.FloorSite;
					public getLevels(): java.util.List<com.arcgismaps.mapping.floor.FloorLevel>;
					public getCoreFloorFacility$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFloorFacility;
				}
				export module FloorFacility {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFloorFacility,com.arcgismaps.mapping.floor.FloorFacility> {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorFacility.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.floor.FloorFacility.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class FloorLevel {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorLevel>;
					public getCoreFloorLevel$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFloorLevel;
					public getVerticalOrder(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFloorLevel, param1: boolean);
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public getId(): string;
					public setVisible(param0: boolean): void;
					public getLongName(): string;
					public isVisible(): boolean;
					public getLevelNumber(): number;
					public getShortName(): string;
					public getFacility(): com.arcgismaps.mapping.floor.FloorFacility;
				}
				export module FloorLevel {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFloorLevel,com.arcgismaps.mapping.floor.FloorLevel> {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorLevel.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.floor.FloorLevel.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class FloorManager extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorManager>;
					public getCoreFloorManager$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFloorManager;
					public getSites(): java.util.List<com.arcgismaps.mapping.floor.FloorSite>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getFacilities(): java.util.List<com.arcgismaps.mapping.floor.FloorFacility>;
					public getSiteLayer(): com.arcgismaps.mapping.layers.Layer;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getLevelLayer(): com.arcgismaps.mapping.layers.Layer;
					public cancelLoad(): void;
					public getFacilityLayer(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
					public getLevels(): java.util.List<com.arcgismaps.mapping.floor.FloorLevel>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFloorManager, param1: boolean);
				}
				export module FloorManager {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFloorManager,com.arcgismaps.mapping.floor.FloorManager> {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorManager.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.floor.FloorManager.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class FloorSite {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorSite>;
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public getId(): string;
					public getFacilities(): java.util.List<com.arcgismaps.mapping.floor.FloorFacility>;
					public getName(): string;
					public getCoreFloorSite$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFloorSite;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFloorSite, param1: boolean);
				}
				export module FloorSite {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFloorSite,com.arcgismaps.mapping.floor.FloorSite> {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.FloorSite.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.floor.FloorSite.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class GeoModelFloorDefinition extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.GeoModelFloorDefinition>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoModelFloorDefinition);
					public toJson(): string;
					public getFacilityLayerDefinition(): com.arcgismaps.mapping.floor.FacilityLayerDefinition;
					public constructor(param0: com.arcgismaps.mapping.floor.FacilityLayerDefinition, param1: com.arcgismaps.mapping.floor.LevelLayerDefinition, param2: com.arcgismaps.mapping.floor.SiteLayerDefinition);
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getCoreGeoModelFloorDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoModelFloorDefinition;
					public getLevelLayerDefinition(): com.arcgismaps.mapping.floor.LevelLayerDefinition;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getSiteLayerDefinition(): com.arcgismaps.mapping.floor.SiteLayerDefinition;
				}
				export module GeoModelFloorDefinition {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.GeoModelFloorDefinition.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.floor.GeoModelFloorDefinition;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoModelFloorDefinition,com.arcgismaps.mapping.floor.GeoModelFloorDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.GeoModelFloorDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.floor.GeoModelFloorDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class LayerFloorDefinition extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.LayerFloorDefinition>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLayerFloorDefinition);
					public toJson(): string;
					public getFloorField(): string;
					public constructor(param0: string);
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getCoreLayerFloorDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLayerFloorDefinition;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				}
				export module LayerFloorDefinition {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.LayerFloorDefinition.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.floor.LayerFloorDefinition;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLayerFloorDefinition,com.arcgismaps.mapping.floor.LayerFloorDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.LayerFloorDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.floor.LayerFloorDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class LevelLayerDefinition extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.LevelLayerDefinition>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLevelLayerDefinition);
					public toJson(): string;
					public getLayerId(): string;
					public getLongNameField(): string;
					public getShortNameField(): string;
					public getLevelIdField(): string;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getVerticalOrderField(): string;
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getFacilityIdField(): string;
					public getLevelNumberField(): string;
					public constructor(param0: string, param1: string, param2: string, param3: string, param4: string, param5: string, param6: string);
					public getCoreLevelLayerDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLevelLayerDefinition;
				}
				export module LevelLayerDefinition {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.LevelLayerDefinition.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.floor.LevelLayerDefinition;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLevelLayerDefinition,com.arcgismaps.mapping.floor.LevelLayerDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.LevelLayerDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.floor.LevelLayerDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module floor {
				export class SiteLayerDefinition extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.floor.SiteLayerDefinition>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSiteLayerDefinition);
					public getNameField(): string;
					public toJson(): string;
					public getLayerId(): string;
					public getCoreSiteLayerDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSiteLayerDefinition;
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getSiteIdField(): string;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public constructor(param0: string, param1: string, param2: string);
				}
				export module SiteLayerDefinition {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.SiteLayerDefinition.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.floor.SiteLayerDefinition;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSiteLayerDefinition,com.arcgismaps.mapping.floor.SiteLayerDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.floor.SiteLayerDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.floor.SiteLayerDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlAltitudeMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlAltitudeMode>;
					public getCoreKmlAltitudeMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLAltitudeMode;
				}
				export module KmlAltitudeMode {
					export class Absolute extends com.arcgismaps.mapping.kml.KmlAltitudeMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlAltitudeMode.Absolute>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlAltitudeMode.Absolute;
					}
					export class ClampToGround extends com.arcgismaps.mapping.kml.KmlAltitudeMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlAltitudeMode.ClampToGround>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlAltitudeMode.ClampToGround;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlAltitudeMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlAltitudeMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLAltitudeMode): com.arcgismaps.mapping.kml.KmlAltitudeMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlAltitudeMode.Factory.WhenMappings>;
						}
					}
					export class RelativeToGround extends com.arcgismaps.mapping.kml.KmlAltitudeMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlAltitudeMode.RelativeToGround>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlAltitudeMode.RelativeToGround;
					}
					export class Unknown extends com.arcgismaps.mapping.kml.KmlAltitudeMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlAltitudeMode.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlAltitudeMode.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlAudioPlayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlAudioPlayer>;
					public getCurrentPosition$arcgis_maps_any_release(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLAudioPlayer);
					public constructor(param0: string);
					public setCurrentPosition$arcgis_maps_any_release(param0: number): void;
					public getSource$arcgis_maps_any_release(): string;
					public setTotalDuration$arcgis_maps_any_release(param0: number): void;
					public getCoreKmlAudioPlayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLAudioPlayer;
					public getTotalDuration$arcgis_maps_any_release(): number;
				}
				export module KmlAudioPlayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLAudioPlayer,com.arcgismaps.mapping.kml.KmlAudioPlayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlAudioPlayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlAudioPlayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlColorMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlColorMode>;
					public getCoreKmlColorMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLColorMode;
				}
				export module KmlColorMode {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlColorMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlColorMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLColorMode): com.arcgismaps.mapping.kml.KmlColorMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlColorMode.Factory.WhenMappings>;
						}
					}
					export class Normal extends com.arcgismaps.mapping.kml.KmlColorMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlColorMode.Normal>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlColorMode.Normal;
					}
					export class Random extends com.arcgismaps.mapping.kml.KmlColorMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlColorMode.Random>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlColorMode.Random;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlColorStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlColorStyle>;
					public getMode(): com.arcgismaps.mapping.kml.KmlColorMode;
					public setMode(param0: com.arcgismaps.mapping.kml.KmlColorMode): void;
					public getCoreKmlColorStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLColorStyle;
					public "getColor-I-ELunk"(): number;
					public "setColor-iGKdAYA"(param0: number): void;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.kml.KmlStyleType;
				}
				export module KmlColorStyle {
					export class Factory extends com.arcgismaps.mapping.kml.KmlColorStyleFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlColorStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlColorStyle.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlColorStyleFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreKMLColorStyle,com.arcgismaps.mapping.kml.KmlColorStyle> {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlColorStyleFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLColorStyle): com.arcgismaps.mapping.kml.KmlColorStyle;
					public convertToPublic(param0: any): any;
				}
				export module KmlColorStyleFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlColorStyleFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlContainer extends com.arcgismaps.mapping.kml.KmlNode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlContainer>;
					public setOpen(param0: boolean): void;
					public isOpen(): boolean;
					public isPartiallyVisible(): boolean;
					public getChildNodes(): java.util.List<com.arcgismaps.mapping.kml.KmlNode>;
					public getCoreKmlContainer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLContainer;
					public getListItemType(): com.arcgismaps.mapping.kml.KmlListItemType;
					public setListItemType(param0: com.arcgismaps.mapping.kml.KmlListItemType): void;
				}
				export module KmlContainer {
					export class Factory extends com.arcgismaps.mapping.kml.KmlContainerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlContainer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlContainer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlContainerFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreKMLContainer,com.arcgismaps.mapping.kml.KmlContainer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlContainerFactory>;
					public constructor();
					public convertToPublic(param0: any): any;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLContainer): com.arcgismaps.mapping.kml.KmlContainer;
				}
				export module KmlContainerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlContainerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlDataset extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlDataset>;
					public getCoreKmlDataset$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLDataset;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLDataset, param1: boolean);
					public getKmlNodeRefreshStatusChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.kml.KmlDatasetKmlNodeRefreshStatusChanged>;
					public cancelLoad(): void;
					public getUri(): string;
					public getRootNodes(): java.util.List<com.arcgismaps.mapping.kml.KmlNode>;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getKmlNetworkLinkMessageReceived$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.kml.KmlDatasetKmlNetworkLinkMessageReceived>;
					public "load-IoAF18A"(param0: any): any;
					public getKmlNodeBalloonVisibilityChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.kml.KmlDatasetKmlNodeBalloonVisibilityChanged>;
					public constructor(param0: com.arcgismaps.mapping.kml.KmlNode);
				}
				export module KmlDataset {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLDataset,com.arcgismaps.mapping.kml.KmlDataset> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlDataset.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlDataset.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlDatasetKmlNetworkLinkMessageReceived {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlDatasetKmlNetworkLinkMessageReceived>;
					public equals(param0: any): boolean;
					public toString(): string;
					public component1(): com.arcgismaps.mapping.kml.KmlNetworkLink;
					public component2(): string;
					public getNetworkLink(): com.arcgismaps.mapping.kml.KmlNetworkLink;
					public getMessage(): string;
					public copy(param0: com.arcgismaps.mapping.kml.KmlNetworkLink, param1: string): com.arcgismaps.mapping.kml.KmlDatasetKmlNetworkLinkMessageReceived;
					public constructor(param0: com.arcgismaps.mapping.kml.KmlNetworkLink, param1: string);
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlDatasetKmlNodeBalloonVisibilityChanged {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlDatasetKmlNodeBalloonVisibilityChanged>;
					public equals(param0: any): boolean;
					public toString(): string;
					public getBalloonVisibility(): boolean;
					public getEventTarget(): com.arcgismaps.mapping.kml.KmlNode;
					public component1(): com.arcgismaps.mapping.kml.KmlNode;
					public copy(param0: com.arcgismaps.mapping.kml.KmlNode, param1: boolean): com.arcgismaps.mapping.kml.KmlDatasetKmlNodeBalloonVisibilityChanged;
					public hashCode(): number;
					public component2(): boolean;
					public constructor(param0: com.arcgismaps.mapping.kml.KmlNode, param1: boolean);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlDatasetKmlNodeRefreshStatusChanged {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlDatasetKmlNodeRefreshStatusChanged>;
					public equals(param0: any): boolean;
					public copy(param0: com.arcgismaps.mapping.kml.KmlNode, param1: com.arcgismaps.mapping.kml.KmlRefreshStatus): com.arcgismaps.mapping.kml.KmlDatasetKmlNodeRefreshStatusChanged;
					public toString(): string;
					public constructor(param0: com.arcgismaps.mapping.kml.KmlNode, param1: com.arcgismaps.mapping.kml.KmlRefreshStatus);
					public component2(): com.arcgismaps.mapping.kml.KmlRefreshStatus;
					public getKmlNode(): com.arcgismaps.mapping.kml.KmlNode;
					public component1(): com.arcgismaps.mapping.kml.KmlNode;
					public hashCode(): number;
					public getRefreshStatus(): com.arcgismaps.mapping.kml.KmlRefreshStatus;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlDocument extends com.arcgismaps.mapping.kml.KmlContainer {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlDocument>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLDocument, param1: boolean);
					public constructor();
					public getCoreKmlDocument$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLDocument;
				}
				export module KmlDocument {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLDocument,com.arcgismaps.mapping.kml.KmlDocument> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlDocument.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlDocument.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlFolder extends com.arcgismaps.mapping.kml.KmlContainer {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlFolder>;
					public getCoreKmlFolder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLFolder;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLFolder, param1: boolean);
				}
				export module KmlFolder {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLFolder,com.arcgismaps.mapping.kml.KmlFolder> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlFolder.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlFolder.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlGeometry {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometry>;
					public isTessellated(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLGeometry);
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public constructor(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.mapping.kml.KmlAltitudeMode, param2: boolean, param3: boolean);
					public isExtruded(): boolean;
					public getCoreKmlGeometry$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLGeometry;
					public getType(): com.arcgismaps.mapping.kml.KmlGeometryType;
					public getAltitudeMode(): com.arcgismaps.mapping.kml.KmlAltitudeMode;
				}
				export module KmlGeometry {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLGeometry,com.arcgismaps.mapping.kml.KmlGeometry> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometry.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGeometry.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlGeometryType {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometryType>;
					public getCoreKmlGeometryType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLGeometryType;
				}
				export module KmlGeometryType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometryType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGeometryType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLGeometryType): com.arcgismaps.mapping.kml.KmlGeometryType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometryType.Factory.WhenMappings>;
						}
					}
					export class Model extends com.arcgismaps.mapping.kml.KmlGeometryType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometryType.Model>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGeometryType.Model;
					}
					export class Point extends com.arcgismaps.mapping.kml.KmlGeometryType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometryType.Point>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGeometryType.Point;
					}
					export class Polygon extends com.arcgismaps.mapping.kml.KmlGeometryType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometryType.Polygon>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGeometryType.Polygon;
					}
					export class Polyline extends com.arcgismaps.mapping.kml.KmlGeometryType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometryType.Polyline>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGeometryType.Polyline;
					}
					export class Unknown extends com.arcgismaps.mapping.kml.KmlGeometryType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGeometryType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGeometryType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlGraphicType {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType>;
					public getCoreKmlGraphicType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLGraphicType;
				}
				export module KmlGraphicType {
					export class ExtrudedPoint extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.ExtrudedPoint>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.ExtrudedPoint;
					}
					export class ExtrudedPolygon extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.ExtrudedPolygon>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.ExtrudedPolygon;
					}
					export class ExtrudedPolyline extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.ExtrudedPolyline>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.ExtrudedPolyline;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLGraphicType): com.arcgismaps.mapping.kml.KmlGraphicType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.Factory.WhenMappings>;
						}
					}
					export class Model extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.Model>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.Model;
					}
					export class MultiGeometry extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.MultiGeometry>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.MultiGeometry;
					}
					export class None extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.None>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.None;
					}
					export class Point extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.Point>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.Point;
					}
					export class Polygon extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.Polygon>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.Polygon;
					}
					export class Polyline extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.Polyline>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.Polyline;
					}
					export class Unknown extends com.arcgismaps.mapping.kml.KmlGraphicType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGraphicType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGraphicType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlGroundOverlay extends com.arcgismaps.mapping.kml.KmlNode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGroundOverlay>;
					public getCoreKmlGroundOverlay$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLGroundOverlay;
					public setDrawOrder(param0: number): void;
					public setAltitudeMode(param0: com.arcgismaps.mapping.kml.KmlAltitudeMode): void;
					public getDrawOrder(): number;
					public constructor(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.mapping.kml.KmlIcon);
					public getAltitude(): number;
					public "getColor-ZC_MnaQ"(): com.arcgismaps.Color;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLGroundOverlay, param1: boolean);
					public setIcon(param0: com.arcgismaps.mapping.kml.KmlIcon): void;
					public setAltitude(param0: number): void;
					public setRotation(param0: number): void;
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public getRotation(): number;
					public "setColor-siLklbo"(param0: com.arcgismaps.Color): void;
					public getIcon(): com.arcgismaps.mapping.kml.KmlIcon;
					public setGeometry(param0: com.arcgismaps.geometry.Geometry): void;
					public getAltitudeMode(): com.arcgismaps.mapping.kml.KmlAltitudeMode;
				}
				export module KmlGroundOverlay {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLGroundOverlay,com.arcgismaps.mapping.kml.KmlGroundOverlay> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlGroundOverlay.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlGroundOverlay.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlIcon {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlIcon>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLIcon);
					public setRefreshInterval(param0: number): void;
					public constructor(param0: string);
					public getCoreKmlIcon$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLIcon;
					public getViewRefreshMode(): com.arcgismaps.mapping.kml.KmlViewRefreshMode;
					public getRefreshInterval(): number;
					public setRefreshMode(param0: com.arcgismaps.mapping.kml.KmlRefreshMode): void;
					public getRefreshMode(): com.arcgismaps.mapping.kml.KmlRefreshMode;
					public getUri(): string;
					public getViewRefreshTime(): number;
					public setViewRefreshMode(param0: com.arcgismaps.mapping.kml.KmlViewRefreshMode): void;
					public setViewRefreshTime(param0: number): void;
				}
				export module KmlIcon {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLIcon,com.arcgismaps.mapping.kml.KmlIcon> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlIcon.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlIcon.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlIconStyle extends com.arcgismaps.mapping.kml.KmlColorStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlIconStyle>;
					public setHotSpot(param0: com.arcgismaps.mapping.kml.KmlImageCoordinate): void;
					public setScale(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLIconStyle);
					public getIcon(): com.arcgismaps.mapping.kml.KmlIcon;
					public constructor(param0: com.arcgismaps.mapping.kml.KmlIcon, param1: number);
					public getHeading(): number;
					public setIcon(param0: com.arcgismaps.mapping.kml.KmlIcon): void;
					public getScale(): number;
					public getCoreKmlIconStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLIconStyle;
					public getHotSpot(): com.arcgismaps.mapping.kml.KmlImageCoordinate;
					public setHeading(param0: number): void;
				}
				export module KmlIconStyle {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLIconStyle,com.arcgismaps.mapping.kml.KmlIconStyle> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlIconStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlIconStyle.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlImageCoordinate {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlImageCoordinate>;
					public constructor(param0: number, param1: number, param2: com.arcgismaps.mapping.kml.KmlUnitsType, param3: com.arcgismaps.mapping.kml.KmlUnitsType);
					public getYUnits(): com.arcgismaps.mapping.kml.KmlUnitsType;
					public getX(): number;
					public getY(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLImageCoordinate);
					public getCoreKmlImageCoordinate$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLImageCoordinate;
					public getXUnits(): com.arcgismaps.mapping.kml.KmlUnitsType;
				}
				export module KmlImageCoordinate {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLImageCoordinate,com.arcgismaps.mapping.kml.KmlImageCoordinate> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlImageCoordinate.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlImageCoordinate.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlLabelStyle extends com.arcgismaps.mapping.kml.KmlColorStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlLabelStyle>;
					public setScale(param0: number): void;
					public getCoreKmlLabelStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLLabelStyle;
					public getScale(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLLabelStyle);
				}
				export module KmlLabelStyle {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLLabelStyle,com.arcgismaps.mapping.kml.KmlLabelStyle> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlLabelStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlLabelStyle.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlLineStyle extends com.arcgismaps.mapping.kml.KmlColorStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlLineStyle>;
					public getCoreKmlLineStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLLineStyle;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLLineStyle);
					public setWidth(param0: number): void;
					public getWidth(): number;
				}
				export module KmlLineStyle {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLLineStyle,com.arcgismaps.mapping.kml.KmlLineStyle> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlLineStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlLineStyle.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlListItemType {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlListItemType>;
					public getCoreKmlListItemType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLListItemType;
				}
				export module KmlListItemType {
					export class Check extends com.arcgismaps.mapping.kml.KmlListItemType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlListItemType.Check>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlListItemType.Check;
					}
					export class CheckHideChildren extends com.arcgismaps.mapping.kml.KmlListItemType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlListItemType.CheckHideChildren>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlListItemType.CheckHideChildren;
					}
					export class CheckOffOnly extends com.arcgismaps.mapping.kml.KmlListItemType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlListItemType.CheckOffOnly>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlListItemType.CheckOffOnly;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlListItemType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlListItemType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLListItemType): com.arcgismaps.mapping.kml.KmlListItemType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlListItemType.Factory.WhenMappings>;
						}
					}
					export class RadioFolder extends com.arcgismaps.mapping.kml.KmlListItemType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlListItemType.RadioFolder>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlListItemType.RadioFolder;
					}
					export class Unknown extends com.arcgismaps.mapping.kml.KmlListItemType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlListItemType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlListItemType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlNetworkLink extends com.arcgismaps.mapping.kml.KmlNode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNetworkLink>;
					public constructor(param0: string);
					public setUri(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLNetworkLink, param1: boolean);
					public getViewRefreshMode(): com.arcgismaps.mapping.kml.KmlViewRefreshMode;
					public getRefreshInterval(): number;
					public setListItemType(param0: com.arcgismaps.mapping.kml.KmlListItemType): void;
					public getRefreshMode(): com.arcgismaps.mapping.kml.KmlRefreshMode;
					public getUri(): string;
					public setViewRefreshMode(param0: com.arcgismaps.mapping.kml.KmlViewRefreshMode): void;
					public setHasRefreshVisibility(param0: boolean): void;
					public getCoreKmlNetworkLink$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLNetworkLink;
					public refresh(): void;
					public setOpen(param0: boolean): void;
					public setRefreshInterval(param0: number): void;
					public getCanFlyToNode(): boolean;
					public isOpen(): boolean;
					public isPartiallyVisible(): boolean;
					public getChildNodes(): java.util.List<com.arcgismaps.mapping.kml.KmlNode>;
					public setRefreshMode(param0: com.arcgismaps.mapping.kml.KmlRefreshMode): void;
					public getListItemType(): com.arcgismaps.mapping.kml.KmlListItemType;
					public getViewRefreshTime(): number;
					public getHasRefreshVisibility(): boolean;
					public setViewRefreshTime(param0: number): void;
					public setCanFlyToNode(param0: boolean): void;
				}
				export module KmlNetworkLink {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLNetworkLink,com.arcgismaps.mapping.kml.KmlNetworkLink> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNetworkLink.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNetworkLink.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlNode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNode>;
					public getTimeExtent(): com.arcgismaps.mapping.TimeExtent;
					public setDescription(param0: string): void;
					public getId(): string;
					public setViewpoint(param0: com.arcgismaps.mapping.kml.KmlViewpoint): void;
					public getUxIcon(): globalAndroid.graphics.drawable.BitmapDrawable;
					public setStyle(param0: com.arcgismaps.mapping.kml.KmlStyle): void;
					public getViewpoint(): com.arcgismaps.mapping.kml.KmlViewpoint;
					public setSnippet(param0: string): void;
					public getAddress(): string;
					public getSnippetMaxLines(): number;
					public setVisible(param0: boolean): void;
					public getSnippet(): string;
					public "getUxIconColor-ZC_MnaQ"(): com.arcgismaps.Color;
					public getParentNode(): com.arcgismaps.mapping.kml.KmlNode;
					public setHighlighted(param0: boolean): void;
					public getHighlightStyle(): com.arcgismaps.mapping.kml.KmlStyle;
					public setSnippetMaxLines(param0: number): void;
					public getRefreshStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.kml.KmlRefreshStatus>;
					public setAddress(param0: string): void;
					public getStyle(): com.arcgismaps.mapping.kml.KmlStyle;
					public getIconUpdate$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<any>;
					public "getBalloonBackgroundColor-ZC_MnaQ"(): com.arcgismaps.Color;
					public setName(param0: string): void;
					public getBalloonContent(): string;
					public setHighlightStyle(param0: com.arcgismaps.mapping.kml.KmlStyle): void;
					public "saveAs-gIAlu-s"(param0: string, param1: any): any;
					public isVisible(): boolean;
					public getName(): string;
					public getUxIconId(): number;
					public getCoreKmlNode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLNode;
					public setTimeExtent(param0: com.arcgismaps.mapping.TimeExtent): void;
					public getExtent(): com.arcgismaps.geometry.Envelope;
					public setId(param0: string): void;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.kml.KmlNodeType;
					public getDescription(): string;
					public isHighlighted(): boolean;
				}
				export module KmlNode {
					export class Factory extends com.arcgismaps.mapping.kml.KmlNodeFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNode.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlNodeFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreKMLNode,com.arcgismaps.mapping.kml.KmlNode> {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeFactory>;
					public constructor();
					public convertToPublic(param0: any): any;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLNode): com.arcgismaps.mapping.kml.KmlNode;
				}
				export module KmlNodeFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlNodeType {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType>;
					public getCoreKmlNodeType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLNodeType;
				}
				export module KmlNodeType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLNodeType): com.arcgismaps.mapping.kml.KmlNodeType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.Factory.WhenMappings>;
						}
					}
					export class KmlDocument extends com.arcgismaps.mapping.kml.KmlNodeType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.KmlDocument>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.KmlDocument;
					}
					export class KmlFolder extends com.arcgismaps.mapping.kml.KmlNodeType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.KmlFolder>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.KmlFolder;
					}
					export class KmlGroundOverlay extends com.arcgismaps.mapping.kml.KmlNodeType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.KmlGroundOverlay>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.KmlGroundOverlay;
					}
					export class KmlNetworkLink extends com.arcgismaps.mapping.kml.KmlNodeType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.KmlNetworkLink>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.KmlNetworkLink;
					}
					export class KmlPhotoOverlay extends com.arcgismaps.mapping.kml.KmlNodeType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.KmlPhotoOverlay>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.KmlPhotoOverlay;
					}
					export class KmlPlacemark extends com.arcgismaps.mapping.kml.KmlNodeType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.KmlPlacemark>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.KmlPlacemark;
					}
					export class KmlScreenOverlay extends com.arcgismaps.mapping.kml.KmlNodeType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.KmlScreenOverlay>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.KmlScreenOverlay;
					}
					export class KmlTour extends com.arcgismaps.mapping.kml.KmlNodeType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.KmlTour>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.KmlTour;
					}
					export class Unknown extends com.arcgismaps.mapping.kml.KmlNodeType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlNodeType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlNodeType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlPhotoOverlay extends com.arcgismaps.mapping.kml.KmlNode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlPhotoOverlay>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLPhotoOverlay, param1: boolean);
					public getCoreKmlPhotoOverlay$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLPhotoOverlay;
				}
				export module KmlPhotoOverlay {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLPhotoOverlay,com.arcgismaps.mapping.kml.KmlPhotoOverlay> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlPhotoOverlay.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlPhotoOverlay.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlPlacemark extends com.arcgismaps.mapping.kml.KmlNode implements com.arcgismaps.mapping.GeoElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlPlacemark>;
					public getGraphicType(): com.arcgismaps.mapping.kml.KmlGraphicType;
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLPlacemark, param1: boolean);
					public getKmlGeometries(): java.util.List<com.arcgismaps.mapping.kml.KmlGeometry>;
					public setGeometry(param0: com.arcgismaps.geometry.Geometry): void;
					public getCoreKmlPlacemark$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLPlacemark;
					public getAttributes(): java.util.Map<string,any>;
					public constructor(param0: com.arcgismaps.mapping.kml.KmlGeometry);
				}
				export module KmlPlacemark {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLPlacemark,com.arcgismaps.mapping.kml.KmlPlacemark> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlPlacemark.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlPlacemark.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlPolygonStyle extends com.arcgismaps.mapping.kml.KmlColorStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlPolygonStyle>;
					public isFilled(): boolean;
					public isOutlined(): boolean;
					public setOutlined(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLPolygonStyle);
					public setFilled(param0: boolean): void;
					public getCoreKmlPolygonStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLPolygonStyle;
				}
				export module KmlPolygonStyle {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLPolygonStyle,com.arcgismaps.mapping.kml.KmlPolygonStyle> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlPolygonStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlPolygonStyle.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlRefreshMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshMode>;
					public getCoreKmlRefreshMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLRefreshMode;
				}
				export module KmlRefreshMode {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlRefreshMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLRefreshMode): com.arcgismaps.mapping.kml.KmlRefreshMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshMode.Factory.WhenMappings>;
						}
					}
					export class OnChange extends com.arcgismaps.mapping.kml.KmlRefreshMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshMode.OnChange>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlRefreshMode.OnChange;
					}
					export class OnExpire extends com.arcgismaps.mapping.kml.KmlRefreshMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshMode.OnExpire>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlRefreshMode.OnExpire;
					}
					export class OnInterval extends com.arcgismaps.mapping.kml.KmlRefreshMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshMode.OnInterval>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlRefreshMode.OnInterval;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlRefreshStatus {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshStatus>;
					public getCoreKmlRefreshStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLRefreshStatus;
				}
				export module KmlRefreshStatus {
					export class Completed extends com.arcgismaps.mapping.kml.KmlRefreshStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshStatus.Completed>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlRefreshStatus.Completed;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshStatus.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlRefreshStatus.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLRefreshStatus, param1: java.lang.Throwable): com.arcgismaps.mapping.kml.KmlRefreshStatus;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshStatus.Factory.WhenMappings>;
						}
					}
					export class Failed extends com.arcgismaps.mapping.kml.KmlRefreshStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshStatus.Failed>;
						public copy(param0: java.lang.Throwable): com.arcgismaps.mapping.kml.KmlRefreshStatus.Failed;
						public constructor(param0: java.lang.Throwable);
						public component1(): java.lang.Throwable;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public toString(): string;
						public getError(): java.lang.Throwable;
					}
					export class InProgress extends com.arcgismaps.mapping.kml.KmlRefreshStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshStatus.InProgress>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlRefreshStatus.InProgress;
					}
					export class None extends com.arcgismaps.mapping.kml.KmlRefreshStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlRefreshStatus.None>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlRefreshStatus.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlScreenOverlay extends com.arcgismaps.mapping.kml.KmlNode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlScreenOverlay>;
					public setScreenCoordinate(param0: com.arcgismaps.mapping.kml.KmlImageCoordinate): void;
					public setDrawOrder(param0: number): void;
					public getDrawOrder(): number;
					public getScreenCoordinate(): com.arcgismaps.mapping.kml.KmlImageCoordinate;
					public "getColor-I-ELunk"(): number;
					public setIcon(param0: com.arcgismaps.mapping.kml.KmlIcon): void;
					public getCoreKmlScreenOverlay$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLScreenOverlay;
					public setSize(param0: com.arcgismaps.mapping.kml.KmlImageCoordinate): void;
					public "setColor-iGKdAYA"(param0: number): void;
					public setRotation(param0: number): void;
					public getRotation(): number;
					public constructor(param0: com.arcgismaps.mapping.kml.KmlIcon);
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLScreenOverlay, param1: boolean);
					public setOverlayCoordinate(param0: com.arcgismaps.mapping.kml.KmlImageCoordinate): void;
					public getIcon(): com.arcgismaps.mapping.kml.KmlIcon;
					public getOverlayCoordinate(): com.arcgismaps.mapping.kml.KmlImageCoordinate;
					public getRotationCoordinate(): com.arcgismaps.mapping.kml.KmlImageCoordinate;
					public setRotationCoordinate(param0: com.arcgismaps.mapping.kml.KmlImageCoordinate): void;
					public getSize(): com.arcgismaps.mapping.kml.KmlImageCoordinate;
				}
				export module KmlScreenOverlay {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLScreenOverlay,com.arcgismaps.mapping.kml.KmlScreenOverlay> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlScreenOverlay.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlScreenOverlay.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyle>;
					public setLabelStyle(param0: com.arcgismaps.mapping.kml.KmlLabelStyle): void;
					public getCoreKmlStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLStyle;
					public setLineStyle(param0: com.arcgismaps.mapping.kml.KmlLineStyle): void;
					public getPolygonStyle(): com.arcgismaps.mapping.kml.KmlPolygonStyle;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLStyle);
					public setIconStyle(param0: com.arcgismaps.mapping.kml.KmlIconStyle): void;
					public getLabelStyle(): com.arcgismaps.mapping.kml.KmlLabelStyle;
					public constructor();
					public setPolygonStyle(param0: com.arcgismaps.mapping.kml.KmlPolygonStyle): void;
					public getIconStyle(): com.arcgismaps.mapping.kml.KmlIconStyle;
					public getLineStyle(): com.arcgismaps.mapping.kml.KmlLineStyle;
				}
				export module KmlStyle {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLStyle,com.arcgismaps.mapping.kml.KmlStyle> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlStyle.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlStyleType {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyleType>;
					public getCoreKmlStyleType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLStyleType;
				}
				export module KmlStyleType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyleType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlStyleType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLStyleType): com.arcgismaps.mapping.kml.KmlStyleType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyleType.Factory.WhenMappings>;
						}
					}
					export class KmlIconStyle extends com.arcgismaps.mapping.kml.KmlStyleType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyleType.KmlIconStyle>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlStyleType.KmlIconStyle;
					}
					export class KmlLabelStyle extends com.arcgismaps.mapping.kml.KmlStyleType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyleType.KmlLabelStyle>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlStyleType.KmlLabelStyle;
					}
					export class KmlLineStyle extends com.arcgismaps.mapping.kml.KmlStyleType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyleType.KmlLineStyle>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlStyleType.KmlLineStyle;
					}
					export class KmlPolygonStyle extends com.arcgismaps.mapping.kml.KmlStyleType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyleType.KmlPolygonStyle>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlStyleType.KmlPolygonStyle;
					}
					export class Unknown extends com.arcgismaps.mapping.kml.KmlStyleType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlStyleType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlStyleType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlTour extends com.arcgismaps.mapping.kml.KmlNode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTour>;
					public getCoreKmlTour$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLTour;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLTour, param1: boolean);
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.kml.KmlTourStatus>;
				}
				export module KmlTour {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLTour,com.arcgismaps.mapping.kml.KmlTour> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTour.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlTour.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlTourController {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourController>;
					public getCoreKmlTourController$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLTourController;
					public reset(): void;
					public registerAudioPlayer$arcgis_maps_any_release(param0: com.arcgismaps.mapping.kml.KmlAudioPlayer): void;
					public getTotalDuration(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public getJob$arcgis_maps_any_release(): kotlinx.coroutines.Job;
					public setJob$arcgis_maps_any_release(param0: kotlinx.coroutines.Job): void;
					public getCurrentPosition(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLTourController);
					public getTour(): com.arcgismaps.mapping.kml.KmlTour;
					public constructor();
					public pause(): void;
					public setTour(param0: com.arcgismaps.mapping.kml.KmlTour): void;
					public play(): void;
				}
				export module KmlTourController {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLTourController,com.arcgismaps.mapping.kml.KmlTourController> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourController.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlTourController.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlTourStatus {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourStatus>;
					public getCoreKmlTourStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLTourStatus;
				}
				export module KmlTourStatus {
					export class Completed extends com.arcgismaps.mapping.kml.KmlTourStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourStatus.Completed>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlTourStatus.Completed;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourStatus.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlTourStatus.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLTourStatus): com.arcgismaps.mapping.kml.KmlTourStatus;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourStatus.Factory.WhenMappings>;
						}
					}
					export class Initialized extends com.arcgismaps.mapping.kml.KmlTourStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourStatus.Initialized>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlTourStatus.Initialized;
					}
					export class Initializing extends com.arcgismaps.mapping.kml.KmlTourStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourStatus.Initializing>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlTourStatus.Initializing;
					}
					export class NotInitialized extends com.arcgismaps.mapping.kml.KmlTourStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourStatus.NotInitialized>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlTourStatus.NotInitialized;
					}
					export class Paused extends com.arcgismaps.mapping.kml.KmlTourStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourStatus.Paused>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlTourStatus.Paused;
					}
					export class Playing extends com.arcgismaps.mapping.kml.KmlTourStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlTourStatus.Playing>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlTourStatus.Playing;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlUnitsType {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlUnitsType>;
					public getCoreKmlUnitsType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLUnitsType;
				}
				export module KmlUnitsType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlUnitsType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlUnitsType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLUnitsType): com.arcgismaps.mapping.kml.KmlUnitsType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlUnitsType.Factory.WhenMappings>;
						}
					}
					export class Fraction extends com.arcgismaps.mapping.kml.KmlUnitsType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlUnitsType.Fraction>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlUnitsType.Fraction;
					}
					export class InsetPixels extends com.arcgismaps.mapping.kml.KmlUnitsType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlUnitsType.InsetPixels>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlUnitsType.InsetPixels;
					}
					export class Pixels extends com.arcgismaps.mapping.kml.KmlUnitsType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlUnitsType.Pixels>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlUnitsType.Pixels;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlViewRefreshMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewRefreshMode>;
					public getCoreKmlViewRefreshMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLViewRefreshMode;
				}
				export module KmlViewRefreshMode {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewRefreshMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlViewRefreshMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLViewRefreshMode): com.arcgismaps.mapping.kml.KmlViewRefreshMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewRefreshMode.Factory.WhenMappings>;
						}
					}
					export class Never extends com.arcgismaps.mapping.kml.KmlViewRefreshMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewRefreshMode.Never>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlViewRefreshMode.Never;
					}
					export class OnRegion extends com.arcgismaps.mapping.kml.KmlViewRefreshMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewRefreshMode.OnRegion>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlViewRefreshMode.OnRegion;
					}
					export class OnRequest extends com.arcgismaps.mapping.kml.KmlViewRefreshMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewRefreshMode.OnRequest>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlViewRefreshMode.OnRequest;
					}
					export class OnStop extends com.arcgismaps.mapping.kml.KmlViewRefreshMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewRefreshMode.OnStop>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlViewRefreshMode.OnStop;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export class KmlViewpoint {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewpoint>;
					public getPitch(): number;
					public getType(): com.arcgismaps.mapping.kml.KmlViewpointType;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLViewpoint);
					public getHeading(): number;
					public getRange(): number;
					public getCoreKmlViewpoint$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLViewpoint;
					public getLocation(): com.arcgismaps.geometry.Point;
					public getRoll(): number;
					public getAltitudeMode(): com.arcgismaps.mapping.kml.KmlAltitudeMode;
				}
				export module KmlViewpoint {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewpoint.Companion>;
						public createWithCameraViewpoint(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number, param4: com.arcgismaps.mapping.kml.KmlAltitudeMode): com.arcgismaps.mapping.kml.KmlViewpoint;
						public createWithLookAtViewpoint(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number, param4: com.arcgismaps.mapping.kml.KmlAltitudeMode): com.arcgismaps.mapping.kml.KmlViewpoint;
						public createWithViewpoint(param0: com.arcgismaps.mapping.Viewpoint): com.arcgismaps.mapping.kml.KmlViewpoint;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreKMLViewpoint,com.arcgismaps.mapping.kml.KmlViewpoint> {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewpoint.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlViewpoint.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module kml {
				export abstract class KmlViewpointType {
					public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewpointType>;
					public getCoreKmlViewpointType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLViewpointType;
				}
				export module KmlViewpointType {
					export class Camera extends com.arcgismaps.mapping.kml.KmlViewpointType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewpointType.Camera>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlViewpointType.Camera;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewpointType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlViewpointType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreKMLViewpointType): com.arcgismaps.mapping.kml.KmlViewpointType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewpointType.Factory.WhenMappings>;
						}
					}
					export class LookAt extends com.arcgismaps.mapping.kml.KmlViewpointType {
						public static class: java.lang.Class<com.arcgismaps.mapping.kml.KmlViewpointType.LookAt>;
						public static INSTANCE: com.arcgismaps.mapping.kml.KmlViewpointType.LookAt;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export class ArcadeLabelExpression extends com.arcgismaps.mapping.labeling.LabelExpression {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.ArcadeLabelExpression>;
					public constructor(param0: string);
					public getCoreArcadeLabelExpression$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcadeLabelExpression;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcadeLabelExpression);
					public constructor(param0: com.arcgismaps.arcade.ArcadeExpression);
					public clone(): com.arcgismaps.mapping.labeling.LabelExpression;
					public clone(): com.arcgismaps.mapping.labeling.ArcadeLabelExpression;
				}
				export module ArcadeLabelExpression {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcadeLabelExpression,com.arcgismaps.mapping.labeling.ArcadeLabelExpression> {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.ArcadeLabelExpression.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.ArcadeLabelExpression.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export class LabelAngle extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelAngle>;
					public toJson(): string;
					public getCoreLabelAngle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelAngle;
					public setAngleExpression(param0: com.arcgismaps.arcade.ArcadeExpression): void;
					public getAngleExpression(): com.arcgismaps.arcade.ArcadeExpression;
					public clone(): com.arcgismaps.mapping.labeling.LabelAngle;
					public constructor(param0: com.arcgismaps.arcade.ArcadeExpression, param1: com.arcgismaps.mapping.labeling.LabelAngleRotationType);
					public constructor(param0: com.arcgismaps.internal.jni.CoreLabelAngle);
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getRotationType(): com.arcgismaps.mapping.labeling.LabelAngleRotationType;
					public setRotationType(param0: com.arcgismaps.mapping.labeling.LabelAngleRotationType): void;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				}
				export module LabelAngle {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelAngle.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.labeling.LabelAngle;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLabelAngle,com.arcgismaps.mapping.labeling.LabelAngle> {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelAngle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelAngle.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelAngleRotationType {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelAngleRotationType>;
					public getCoreLabelAngleRotationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelAngleRotationType;
				}
				export module LabelAngleRotationType {
					export class Arithmetic extends com.arcgismaps.mapping.labeling.LabelAngleRotationType {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelAngleRotationType.Arithmetic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelAngleRotationType.Arithmetic;
					}
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelAngleRotationType {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelAngleRotationType.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelAngleRotationType.Automatic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelAngleRotationType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelAngleRotationType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelAngleRotationType): com.arcgismaps.mapping.labeling.LabelAngleRotationType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelAngleRotationType.Factory.WhenMappings>;
						}
					}
					export class Geographic extends com.arcgismaps.mapping.labeling.LabelAngleRotationType {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelAngleRotationType.Geographic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelAngleRotationType.Geographic;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelBarrierWeight {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelBarrierWeight>;
					public getCoreLabelBarrierWeight$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelBarrierWeight;
				}
				export module LabelBarrierWeight {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelBarrierWeight.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelBarrierWeight.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelBarrierWeight): com.arcgismaps.mapping.labeling.LabelBarrierWeight;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelBarrierWeight.Factory.WhenMappings>;
						}
					}
					export class High extends com.arcgismaps.mapping.labeling.LabelBarrierWeight {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelBarrierWeight.High>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelBarrierWeight.High;
					}
					export class Low extends com.arcgismaps.mapping.labeling.LabelBarrierWeight {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelBarrierWeight.Low>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelBarrierWeight.Low;
					}
					export class Medium extends com.arcgismaps.mapping.labeling.LabelBarrierWeight {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelBarrierWeight.Medium>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelBarrierWeight.Medium;
					}
					export class None extends com.arcgismaps.mapping.labeling.LabelBarrierWeight {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelBarrierWeight.None>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelBarrierWeight.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelDeconflictionStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy>;
					public getCoreLabelDeconflictionStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy;
				}
				export module LabelDeconflictionStrategy {
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.Automatic;
					}
					export class Dynamic extends com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.Dynamic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.Dynamic;
					}
					export class DynamicNeverRemove extends com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.DynamicNeverRemove>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.DynamicNeverRemove;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelDeconflictionStrategy): com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.None>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.None;
					}
					export class Static extends com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.Static>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy.Static;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export class LabelDefinition extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDefinition>;
					public setUseCodedValues(param0: boolean): void;
					public getStackBreakPosition(): com.arcgismaps.mapping.labeling.LabelStackBreakPosition;
					public setAngle(param0: com.arcgismaps.mapping.labeling.LabelAngle): void;
					public getWhereClause(): string;
					public getLabelOverlapStrategy(): com.arcgismaps.mapping.labeling.LabelOverlapStrategy;
					public setLabelOverlapStrategy(param0: com.arcgismaps.mapping.labeling.LabelOverlapStrategy): void;
					public getLineOrientation(): com.arcgismaps.mapping.labeling.LabelLineOrientation;
					public getStackSeparators(): java.util.List<com.arcgismaps.mapping.labeling.LabelStackSeparator>;
					public getOffsetDistance(): number;
					public getTextSymbol(): com.arcgismaps.mapping.symbology.TextSymbol;
					public getExpression(): com.arcgismaps.mapping.labeling.LabelExpression;
					public setLineOrientation(param0: com.arcgismaps.mapping.labeling.LabelLineOrientation): void;
					public getPlacement(): com.arcgismaps.arcgisservices.LabelingPlacement;
					public getStackAlignment(): com.arcgismaps.mapping.labeling.LabelStackAlignment;
					public setMultipartStrategy(param0: com.arcgismaps.mapping.labeling.LabelMultipartStrategy): void;
					public setTextLayout(param0: com.arcgismaps.mapping.labeling.LabelTextLayout): void;
					public getFeatureBoundaryOverlapStrategy(): com.arcgismaps.mapping.labeling.LabelOverlapStrategy;
					public getPriority(): number;
					public toJson(): string;
					public setExpression(param0: com.arcgismaps.mapping.labeling.LabelExpression): void;
					public setFeatureInteriorOverlapStrategy(param0: com.arcgismaps.mapping.labeling.LabelOverlapStrategy): void;
					public getMinScale(): java.lang.Double;
					public setGeometryStrategy(param0: com.arcgismaps.mapping.labeling.LabelGeometryStrategy): void;
					public getUseCodedValues(): boolean;
					public getTextLayout(): com.arcgismaps.mapping.labeling.LabelTextLayout;
					public getAngle(): com.arcgismaps.mapping.labeling.LabelAngle;
					public constructor(param0: com.arcgismaps.mapping.labeling.LabelExpression, param1: com.arcgismaps.mapping.symbology.TextSymbol);
					public setFeatureBoundaryOverlapStrategy(param0: com.arcgismaps.mapping.labeling.LabelOverlapStrategy): void;
					public setName(param0: string): void;
					public setRepeatDistance(param0: number): void;
					public setRemoveDuplicatesDistance(param0: number): void;
					public getStackRowLength(): number;
					public setPlacement(param0: com.arcgismaps.arcgisservices.LabelingPlacement): void;
					public setStackRowLength(param0: number): void;
					public setWhereClause(param0: string): void;
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public setLineConnection(param0: com.arcgismaps.mapping.labeling.LabelLineConnection): void;
					public setStackAlignment(param0: com.arcgismaps.mapping.labeling.LabelStackAlignment): void;
					public setTextOrientation(param0: com.arcgismaps.mapping.labeling.LabelTextOrientation): void;
					public getRepeatStrategy(): com.arcgismaps.mapping.labeling.LabelRepeatStrategy;
					public setOffsetDistance(param0: number): void;
					public setRepeatStrategy(param0: com.arcgismaps.mapping.labeling.LabelRepeatStrategy): void;
					public setDeconflictionStrategy(param0: com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy): void;
					public setStackBreakPosition(param0: com.arcgismaps.mapping.labeling.LabelStackBreakPosition): void;
					public getTextOrientation(): com.arcgismaps.mapping.labeling.LabelTextOrientation;
					public getFeatureInteriorOverlapStrategy(): com.arcgismaps.mapping.labeling.LabelOverlapStrategy;
					public getLineConnection(): com.arcgismaps.mapping.labeling.LabelLineConnection;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public setOverrunStrategy(param0: com.arcgismaps.mapping.labeling.LabelOverrunStrategy): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLabelDefinition);
					public getMultipartStrategy(): com.arcgismaps.mapping.labeling.LabelMultipartStrategy;
					public getCoreLabelDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelDefinition;
					public setStackStrategy(param0: com.arcgismaps.mapping.labeling.LabelStackStrategy): void;
					public getGeometryStrategy(): com.arcgismaps.mapping.labeling.LabelGeometryStrategy;
					public getOverrunStrategy(): com.arcgismaps.mapping.labeling.LabelOverrunStrategy;
					public setMinScale(param0: java.lang.Double): void;
					public getStackStrategy(): com.arcgismaps.mapping.labeling.LabelStackStrategy;
					public getRemoveDuplicatesStrategy(): com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy;
					public getMaxScale(): java.lang.Double;
					public getRemoveDuplicatesDistance(): number;
					public setMaxScale(param0: java.lang.Double): void;
					public setRemoveDuplicatesStrategy(param0: com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy): void;
					public getRepeatDistance(): number;
					public getName(): string;
					public setTextSymbol(param0: com.arcgismaps.mapping.symbology.TextSymbol): void;
					public setPriority(param0: number): void;
					public getDeconflictionStrategy(): com.arcgismaps.mapping.labeling.LabelDeconflictionStrategy;
				}
				export module LabelDefinition {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDefinition.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.labeling.LabelDefinition;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLabelDefinition,com.arcgismaps.mapping.labeling.LabelDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelExpression {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpression>;
					public getExpression(): string;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.labeling.LabelExpressionType;
					public getCoreLabelExpression$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelExpression;
					public clone(): com.arcgismaps.mapping.labeling.LabelExpression;
					public setExpression(param0: string): void;
				}
				export module LabelExpression {
					export class Factory extends com.arcgismaps.mapping.labeling.LabelExpressionFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpression.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelExpression.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export class LabelExpressionFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreLabelExpression,com.arcgismaps.mapping.labeling.LabelExpression> {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpressionFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelExpression): com.arcgismaps.mapping.labeling.LabelExpression;
					public convertToPublic(param0: any): any;
				}
				export module LabelExpressionFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpressionFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelExpressionType {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpressionType>;
					public getCoreLabelExpressionType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelExpressionType;
				}
				export module LabelExpressionType {
					export class ArcadeLabelExpression extends com.arcgismaps.mapping.labeling.LabelExpressionType {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpressionType.ArcadeLabelExpression>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelExpressionType.ArcadeLabelExpression;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpressionType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelExpressionType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelExpressionType): com.arcgismaps.mapping.labeling.LabelExpressionType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpressionType.Factory.WhenMappings>;
						}
					}
					export class SimpleLabelExpression extends com.arcgismaps.mapping.labeling.LabelExpressionType {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpressionType.SimpleLabelExpression>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelExpressionType.SimpleLabelExpression;
					}
					export class WebmapLabelExpression extends com.arcgismaps.mapping.labeling.LabelExpressionType {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelExpressionType.WebmapLabelExpression>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelExpressionType.WebmapLabelExpression;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelGeometryStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelGeometryStrategy>;
					public getCoreLabelGeometryStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelGeometryStrategy;
				}
				export module LabelGeometryStrategy {
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelGeometryStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelGeometryStrategy.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelGeometryStrategy.Automatic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelGeometryStrategy.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelGeometryStrategy.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelGeometryStrategy): com.arcgismaps.mapping.labeling.LabelGeometryStrategy;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelGeometryStrategy.Factory.WhenMappings>;
						}
					}
					export class UseClippedGeometry extends com.arcgismaps.mapping.labeling.LabelGeometryStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelGeometryStrategy.UseClippedGeometry>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelGeometryStrategy.UseClippedGeometry;
					}
					export class UseGeometry extends com.arcgismaps.mapping.labeling.LabelGeometryStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelGeometryStrategy.UseGeometry>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelGeometryStrategy.UseGeometry;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelLineConnection {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineConnection>;
					public getCoreLabelLineConnection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelLineConnection;
				}
				export module LabelLineConnection {
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelLineConnection {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineConnection.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelLineConnection.Automatic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineConnection.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelLineConnection.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelLineConnection): com.arcgismaps.mapping.labeling.LabelLineConnection;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineConnection.Factory.WhenMappings>;
						}
					}
					export class MinimizeLabels extends com.arcgismaps.mapping.labeling.LabelLineConnection {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineConnection.MinimizeLabels>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelLineConnection.MinimizeLabels;
					}
					export class None extends com.arcgismaps.mapping.labeling.LabelLineConnection {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineConnection.None>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelLineConnection.None;
					}
					export class UnambiguousLabels extends com.arcgismaps.mapping.labeling.LabelLineConnection {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineConnection.UnambiguousLabels>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelLineConnection.UnambiguousLabels;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelLineOrientation {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineOrientation>;
					public getCoreLabelLineOrientation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelLineOrientation;
				}
				export module LabelLineOrientation {
					export class Direction extends com.arcgismaps.mapping.labeling.LabelLineOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineOrientation.Direction>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelLineOrientation.Direction;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineOrientation.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelLineOrientation.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelLineOrientation): com.arcgismaps.mapping.labeling.LabelLineOrientation;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineOrientation.Factory.WhenMappings>;
						}
					}
					export class Screen extends com.arcgismaps.mapping.labeling.LabelLineOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineOrientation.Screen>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelLineOrientation.Screen;
					}
					export class Unconstrained extends com.arcgismaps.mapping.labeling.LabelLineOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelLineOrientation.Unconstrained>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelLineOrientation.Unconstrained;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelMultipartStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelMultipartStrategy>;
					public getCoreLabelMultipartStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelMultipartStrategy;
				}
				export module LabelMultipartStrategy {
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelMultipartStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelMultipartStrategy.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelMultipartStrategy.Automatic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelMultipartStrategy.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelMultipartStrategy.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelMultipartStrategy): com.arcgismaps.mapping.labeling.LabelMultipartStrategy;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelMultipartStrategy.Factory.WhenMappings>;
						}
					}
					export class LabelLargest extends com.arcgismaps.mapping.labeling.LabelMultipartStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelMultipartStrategy.LabelLargest>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelMultipartStrategy.LabelLargest;
					}
					export class LabelPerFeature extends com.arcgismaps.mapping.labeling.LabelMultipartStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelMultipartStrategy.LabelPerFeature>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelMultipartStrategy.LabelPerFeature;
					}
					export class LabelPerPart extends com.arcgismaps.mapping.labeling.LabelMultipartStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelMultipartStrategy.LabelPerPart>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelMultipartStrategy.LabelPerPart;
					}
					export class LabelPerSegment extends com.arcgismaps.mapping.labeling.LabelMultipartStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelMultipartStrategy.LabelPerSegment>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelMultipartStrategy.LabelPerSegment;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelOverlapStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverlapStrategy>;
					public getCoreLabelOverlapStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelOverlapStrategy;
				}
				export module LabelOverlapStrategy {
					export class Allow extends com.arcgismaps.mapping.labeling.LabelOverlapStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Allow>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Allow;
					}
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelOverlapStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Automatic;
					}
					export class Avoid extends com.arcgismaps.mapping.labeling.LabelOverlapStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Avoid>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Avoid;
					}
					export class Exclude extends com.arcgismaps.mapping.labeling.LabelOverlapStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Exclude>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Exclude;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelOverlapStrategy): com.arcgismaps.mapping.labeling.LabelOverlapStrategy;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverlapStrategy.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelOverrunStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverrunStrategy>;
					public getCoreLabelOverrunStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelOverrunStrategy;
				}
				export module LabelOverrunStrategy {
					export class Allow extends com.arcgismaps.mapping.labeling.LabelOverrunStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverrunStrategy.Allow>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelOverrunStrategy.Allow;
					}
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelOverrunStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverrunStrategy.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelOverrunStrategy.Automatic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverrunStrategy.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelOverrunStrategy.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelOverrunStrategy): com.arcgismaps.mapping.labeling.LabelOverrunStrategy;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverrunStrategy.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.mapping.labeling.LabelOverrunStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelOverrunStrategy.None>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelOverrunStrategy.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelRemoveDuplicatesStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy>;
					public getCoreLabelRemoveDuplicatesStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy;
				}
				export module LabelRemoveDuplicatesStrategy {
					export class All extends com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.All>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.All;
					}
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.Automatic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelRemoveDuplicatesStrategy): com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.Factory.WhenMappings>;
						}
					}
					export class FeatureType extends com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.FeatureType>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.FeatureType;
					}
					export class LabelClass extends com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.LabelClass>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.LabelClass;
					}
					export class None extends com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.None>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRemoveDuplicatesStrategy.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelRepeatStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRepeatStrategy>;
					public getCoreLabelRepeatStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelRepeatStrategy;
				}
				export module LabelRepeatStrategy {
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelRepeatStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRepeatStrategy.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRepeatStrategy.Automatic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRepeatStrategy.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRepeatStrategy.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelRepeatStrategy): com.arcgismaps.mapping.labeling.LabelRepeatStrategy;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRepeatStrategy.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.mapping.labeling.LabelRepeatStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRepeatStrategy.None>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRepeatStrategy.None;
					}
					export class Repeat extends com.arcgismaps.mapping.labeling.LabelRepeatStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelRepeatStrategy.Repeat>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelRepeatStrategy.Repeat;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelStackAlignment {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackAlignment>;
					public getCoreLabelStackAlignment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelStackAlignment;
				}
				export module LabelStackAlignment {
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelStackAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackAlignment.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackAlignment.Automatic;
					}
					export class Dynamic extends com.arcgismaps.mapping.labeling.LabelStackAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackAlignment.Dynamic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackAlignment.Dynamic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackAlignment.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackAlignment.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelStackAlignment): com.arcgismaps.mapping.labeling.LabelStackAlignment;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackAlignment.Factory.WhenMappings>;
						}
					}
					export class TextSymbol extends com.arcgismaps.mapping.labeling.LabelStackAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackAlignment.TextSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackAlignment.TextSymbol;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelStackBreakPosition {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackBreakPosition>;
					public getCoreLabelStackBreakPosition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelStackBreakPosition;
				}
				export module LabelStackBreakPosition {
					export class After extends com.arcgismaps.mapping.labeling.LabelStackBreakPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackBreakPosition.After>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackBreakPosition.After;
					}
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelStackBreakPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackBreakPosition.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackBreakPosition.Automatic;
					}
					export class Before extends com.arcgismaps.mapping.labeling.LabelStackBreakPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackBreakPosition.Before>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackBreakPosition.Before;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackBreakPosition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackBreakPosition.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelStackBreakPosition): com.arcgismaps.mapping.labeling.LabelStackBreakPosition;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackBreakPosition.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export class LabelStackSeparator extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackSeparator>;
					public getForced(): boolean;
					public toJson(): string;
					public getSeparator(): string;
					public getCoreLabelStackSeparator$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelStackSeparator;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public setBreakPosition(param0: com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLabelStackSeparator);
					public setSeparator(param0: string): void;
					public getBreakPosition(): com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition;
					public setVisible(param0: boolean): void;
					public getVisible(): boolean;
					public constructor();
					public setForced(param0: boolean): void;
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				}
				export module LabelStackSeparator {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackSeparator.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.labeling.LabelStackSeparator;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLabelStackSeparator,com.arcgismaps.mapping.labeling.LabelStackSeparator> {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackSeparator.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackSeparator.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelStackSeparatorBreakPosition {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition>;
					public getCoreLabelStackSeparatorBreakPosition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition;
				}
				export module LabelStackSeparatorBreakPosition {
					export class After extends com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition.After>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition.After;
					}
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition.Automatic;
					}
					export class Before extends com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition.Before>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition.Before;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelStackSeparatorBreakPosition): com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackSeparatorBreakPosition.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelStackStrategy {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackStrategy>;
					public getCoreLabelStackStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelStackStrategy;
				}
				export module LabelStackStrategy {
					export class Allow extends com.arcgismaps.mapping.labeling.LabelStackStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackStrategy.Allow>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackStrategy.Allow;
					}
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelStackStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackStrategy.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackStrategy.Automatic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackStrategy.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackStrategy.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelStackStrategy): com.arcgismaps.mapping.labeling.LabelStackStrategy;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackStrategy.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.mapping.labeling.LabelStackStrategy {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelStackStrategy.None>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelStackStrategy.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelTextLayout {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextLayout>;
					public getCoreLabelTextLayout$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelTextLayout;
				}
				export module LabelTextLayout {
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelTextLayout {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextLayout.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextLayout.Automatic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextLayout.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextLayout.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelTextLayout): com.arcgismaps.mapping.labeling.LabelTextLayout;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextLayout.Factory.WhenMappings>;
						}
					}
					export class FollowFeature extends com.arcgismaps.mapping.labeling.LabelTextLayout {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextLayout.FollowFeature>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextLayout.FollowFeature;
					}
					export class Horizontal extends com.arcgismaps.mapping.labeling.LabelTextLayout {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextLayout.Horizontal>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextLayout.Horizontal;
					}
					export class Perpendicular extends com.arcgismaps.mapping.labeling.LabelTextLayout {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextLayout.Perpendicular>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextLayout.Perpendicular;
					}
					export class Straight extends com.arcgismaps.mapping.labeling.LabelTextLayout {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextLayout.Straight>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextLayout.Straight;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export abstract class LabelTextOrientation {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextOrientation>;
					public getCoreLabelTextOrientation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelTextOrientation;
				}
				export module LabelTextOrientation {
					export class Automatic extends com.arcgismaps.mapping.labeling.LabelTextOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextOrientation.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextOrientation.Automatic;
					}
					export class Direction extends com.arcgismaps.mapping.labeling.LabelTextOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextOrientation.Direction>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextOrientation.Direction;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextOrientation.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextOrientation.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLabelTextOrientation): com.arcgismaps.mapping.labeling.LabelTextOrientation;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextOrientation.Factory.WhenMappings>;
						}
					}
					export class Screen extends com.arcgismaps.mapping.labeling.LabelTextOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelTextOrientation.Screen>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelTextOrientation.Screen;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export class LabelingInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelingInfo>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLabelingInfo);
					public getMinScale(): java.lang.Double;
					public getLabelExpression(): string;
					public getWhere(): string;
					public getUseCodedValues(): boolean;
					public getCoreLabelingInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLabelingInfo;
					public getSymbol(): com.arcgismaps.mapping.symbology.TextSymbol;
					public getLabelPlacement(): com.arcgismaps.arcgisservices.LabelingPlacement;
					public getMaxScale(): java.lang.Double;
				}
				export module LabelingInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLabelingInfo,com.arcgismaps.mapping.labeling.LabelingInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.LabelingInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.LabelingInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export class SimpleLabelExpression extends com.arcgismaps.mapping.labeling.LabelExpression {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.SimpleLabelExpression>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleLabelExpression);
					public constructor(param0: string);
					public getCoreSimpleLabelExpression$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleLabelExpression;
					public clone(): com.arcgismaps.mapping.labeling.SimpleLabelExpression;
					public clone(): com.arcgismaps.mapping.labeling.LabelExpression;
				}
				export module SimpleLabelExpression {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSimpleLabelExpression,com.arcgismaps.mapping.labeling.SimpleLabelExpression> {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.SimpleLabelExpression.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.SimpleLabelExpression.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module labeling {
				export class WebmapLabelExpression extends com.arcgismaps.mapping.labeling.LabelExpression {
					public static class: java.lang.Class<com.arcgismaps.mapping.labeling.WebmapLabelExpression>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWebmapLabelExpression);
					public constructor(param0: string);
					public clone(): com.arcgismaps.mapping.labeling.LabelExpression;
					public getCoreWebmapLabelExpression$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWebmapLabelExpression;
					public clone(): com.arcgismaps.mapping.labeling.WebmapLabelExpression;
				}
				export module WebmapLabelExpression {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWebmapLabelExpression,com.arcgismaps.mapping.labeling.WebmapLabelExpression> {
						public static class: java.lang.Class<com.arcgismaps.mapping.labeling.WebmapLabelExpression.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.labeling.WebmapLabelExpression.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class AnnotationLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.AnnotationLayer>;
					public constructor(param0: com.arcgismaps.data.ArcGISFeatureTable);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public getBarrierWeight(): com.arcgismaps.mapping.labeling.LabelBarrierWeight;
					public getUri(): string;
					public clone(): com.arcgismaps.mapping.layers.AnnotationLayer;
					public selectFeature(param0: com.arcgismaps.data.Feature): void;
					public isVisibleAtScale(param0: number): boolean;
					public setBarrierWeight(param0: com.arcgismaps.mapping.labeling.LabelBarrierWeight): void;
					public setVisible(param0: boolean): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public "selectFeatures-0E7RQCE"(param0: com.arcgismaps.data.QueryParameters, param1: com.arcgismaps.mapping.layers.SelectionMode, param2: any): any;
					public setFeaturesVisible(param0: java.lang.Iterable<any>, param1: boolean): void;
					public getCanChangeVisibility(): boolean;
					public getFeatureTable(): com.arcgismaps.data.ArcGISFeatureTable;
					public constructor(param0: com.arcgismaps.internal.jni.CoreAnnotationLayer, param1: boolean);
					public "getSelectedFeatures-IoAF18A"(param0: any): any;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public unselectFeature(param0: com.arcgismaps.data.Feature): void;
					public setFeatureVisible(param0: com.arcgismaps.data.Feature, param1: boolean): void;
					public resetFeaturesVisible(): void;
					public clearSelection(): void;
					public getLayerId(): number;
					public selectFeatures(param0: java.lang.Iterable<any>): void;
					public getShowInLegend(): boolean;
					public setDefinitionExpression(param0: string): void;
					public isVisible(): boolean;
					public getName(): string;
					public unselectFeatures(param0: java.lang.Iterable<any>): void;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getCoreAnnotationLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAnnotationLayer;
					public constructor(param0: com.arcgismaps.mapping.Item, param1: number);
					public getReferenceScale(): number;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getDefinitionExpression(): string;
					public "load-IoAF18A"(param0: any): any;
				}
				export module AnnotationLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreAnnotationLayer,com.arcgismaps.mapping.layers.AnnotationLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.AnnotationLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.AnnotationLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class AnnotationSublayer extends com.arcgismaps.mapping.layers.LayerContent {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.AnnotationSublayer>;
					public getMinScale(): java.lang.Double;
					public getCoreAnnotationSublayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAnnotationSublayer;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public getScaleSymbols(): boolean;
					public getMaxScale(): java.lang.Double;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public getSublayerId(): number;
					public isVisible(): boolean;
					public getName(): string;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public getDefinitionExpression(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreAnnotationSublayer, param1: boolean);
					public getOpacity(): number;
				}
				export module AnnotationSublayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreAnnotationSublayer,com.arcgismaps.mapping.layers.AnnotationSublayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.AnnotationSublayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.AnnotationSublayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ArcGISMapImageLayer extends com.arcgismaps.mapping.layers.ImageAdjustmentLayer implements com.arcgismaps.mapping.layers.Refreshable, com.arcgismaps.arcgisservices.TimeAware {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISMapImageLayer>;
					public getTables(): java.util.List<com.arcgismaps.data.ServiceFeatureTable>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getImageFormat(): com.arcgismaps.mapping.layers.MapServiceImageFormat;
					public constructor(param0: string);
					public getGeodatabaseVersion(): string;
					public getTimeInterval(): com.arcgismaps.mapping.TimeValue;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public setTimeFilteringEnabled(param0: boolean): void;
					public getSupportsTimeFiltering(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public resetSublayers(): void;
					public setVisible(param0: boolean): void;
					public getUrl(): string;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public setRefreshInterval(param0: java.lang.Long): void;
					public "loadTablesAndLayers-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public clone(): com.arcgismaps.mapping.layers.ArcGISMapImageLayer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISMapImageLayer, param1: boolean);
					public setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
					public getRefreshInterval(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public getTimeOffset(): com.arcgismaps.mapping.TimeValue;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public isTimeFilteringEnabled(): boolean;
					public getMapImageSublayers(): java.util.List<com.arcgismaps.mapping.layers.ArcGISMapImageSublayer>;
					public cancelLoad(): void;
					public getCoreArcGISMapImageLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISMapImageLayer;
					public getShowInLegend(): boolean;
					public constructor(param0: com.arcgismaps.mapping.Item);
					public isVisible(): boolean;
					public getName(): string;
					public setGeodatabaseVersion(param0: string): void;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
					public setImageFormat(param0: com.arcgismaps.mapping.layers.MapServiceImageFormat): void;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getMapServiceInfo(): com.arcgismaps.arcgisservices.ArcGISMapServiceInfo;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ArcGISMapImageLayer {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISMapImageLayer.Companion>;
						public fromJsonOrNull$arcgis_maps_any_release(param0: string): com.arcgismaps.mapping.layers.ArcGISMapImageLayer;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreArcGISMapImageLayer,com.arcgismaps.mapping.layers.ArcGISMapImageLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISMapImageLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISMapImageLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ArcGISMapImageSublayer extends com.arcgismaps.mapping.layers.ArcGISSublayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISMapImageSublayer>;
					public isPopupEnabled(): boolean;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setOpacity(param0: number): void;
					public getSource(): com.arcgismaps.mapping.layers.SublayerSource;
					public getRenderer(): com.arcgismaps.mapping.symbology.Renderer;
					public getScaleSymbols(): boolean;
					public setPopupEnabled(param0: boolean): void;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISMapImageSublayer, param1: boolean);
					public setScaleSymbols(param0: boolean): void;
					public clone(): com.arcgismaps.mapping.layers.ArcGISSublayer;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getTable(): com.arcgismaps.data.ServiceFeatureTable;
					public getCanChangeVisibility(): boolean;
					public getOpacity(): number;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public getMinScale(): java.lang.Double;
					public setMinScale(param0: java.lang.Double): void;
					public getLabelsEnabled(): boolean;
					public setShowInLegend(param0: boolean): void;
					public getDefaultVisibility(): boolean;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public getCoreArcGISMapImageSublayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISMapImageSublayer;
					public setRenderer(param0: com.arcgismaps.mapping.symbology.Renderer): void;
					public getMaxScale(): java.lang.Double;
					public getLabelDefinitions(): java.util.List<com.arcgismaps.mapping.labeling.LabelDefinition>;
					public setMaxScale(param0: java.lang.Double): void;
					public setName(param0: string): void;
					public getShowInLegend(): boolean;
					public setDefinitionExpression(param0: string): void;
					public isVisible(): boolean;
					public getName(): string;
					public clone(): com.arcgismaps.mapping.layers.ArcGISMapImageSublayer;
					public constructor(param0: number, param1: com.arcgismaps.mapping.layers.SublayerSource);
					public "retryLoad-IoAF18A"(param0: any): any;
					public getDefinitionExpression(): string;
					public setLabelsEnabled(param0: boolean): void;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ArcGISMapImageSublayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreArcGISMapImageSublayer,com.arcgismaps.mapping.layers.ArcGISMapImageSublayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISMapImageSublayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISMapImageSublayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ArcGISSceneLayer extends com.arcgismaps.mapping.layers.Layer implements com.arcgismaps.ApiKeyResource, com.arcgismaps.mapping.floor.FloorAware {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSceneLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public getPolygonFilter(): com.arcgismaps.mapping.layers.SceneLayerPolygonFilter;
					public getAltitudeOffset(): number;
					public "setApiKey-lGpodAQ"(param0: string): void;
					public getUri(): string;
					public selectFeature(param0: com.arcgismaps.data.Feature): void;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public setFeaturesVisible(param0: java.lang.Iterable<any>, param1: boolean): void;
					public getCanChangeVisibility(): boolean;
					public getAltitudeUnit$arcgis_maps_any_release(): com.arcgismaps.geometry.LinearUnit;
					public "getSelectedFeatures-IoAF18A"(param0: any): any;
					public getLabelsEnabled(): boolean;
					public setShowInLegend(param0: boolean): void;
					public getFloorDefinition(): com.arcgismaps.mapping.floor.LayerFloorDefinition;
					public setFloorDefinition(param0: com.arcgismaps.mapping.floor.LayerFloorDefinition): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public "getApiKey-6IiKQno"(): string;
					public cancelLoad(): void;
					public setAltitudeUnit$arcgis_maps_any_release(param0: com.arcgismaps.geometry.LinearUnit): void;
					public unselectFeature(param0: com.arcgismaps.data.Feature): void;
					public setFeatureVisible(param0: com.arcgismaps.data.Feature, param1: boolean): void;
					public resetFeaturesVisible(): void;
					public getCoreArcGISSceneLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISSceneLayer;
					public getDataType(): com.arcgismaps.mapping.view.SceneLayerDataType;
					public clearSelection(): void;
					public setPolygonFilter(param0: com.arcgismaps.mapping.layers.SceneLayerPolygonFilter): void;
					public selectFeatures(param0: java.lang.Iterable<any>): void;
					public getShowInLegend(): boolean;
					public getSurfacePlacement(): com.arcgismaps.mapping.view.SurfacePlacement;
					public constructor(param0: com.arcgismaps.mapping.Item);
					public getFeatureTable(): com.arcgismaps.data.FeatureTable;
					public isVisible(): boolean;
					public getName(): string;
					public unselectFeatures(param0: java.lang.Iterable<any>): void;
					public "retryLoad-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISSceneLayer, param1: boolean);
					public setAltitudeOffset(param0: number): void;
					public clone(): com.arcgismaps.mapping.layers.ArcGISSceneLayer;
					public setSurfacePlacement(param0: com.arcgismaps.mapping.view.SurfacePlacement): void;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public setLabelsEnabled(param0: boolean): void;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ArcGISSceneLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreArcGISSceneLayer,com.arcgismaps.mapping.layers.ArcGISSceneLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSceneLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISSceneLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class ArcGISSublayer implements com.arcgismaps.mapping.layers.LayerContent, com.arcgismaps.Loadable, com.arcgismaps.mapping.popup.PopupSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayer>;
					public isPopupEnabled(): boolean;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getRenderer(): com.arcgismaps.mapping.symbology.Renderer;
					public getScaleSymbols(): boolean;
					public setPopupEnabled(param0: boolean): void;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.ArcGISSublayer;
					public getCanChangeVisibility(): boolean;
					public getOpacity(): number;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public getMinScale(): java.lang.Double;
					public getSublayers(): java.util.List<com.arcgismaps.mapping.layers.ArcGISSublayer>;
					public setShowInLegend(param0: boolean): void;
					public getLabelsEnabled(): boolean;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public getId(): number;
					public getMapServiceSublayerInfo(): com.arcgismaps.arcgisservices.ArcGISMapServiceSublayerInfo;
					public cancelLoad(): void;
					public getMaxScale(): java.lang.Double;
					public getShowInLegend(): boolean;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.layers.ArcGISSublayerType;
					public "load-IoAF18A"(param0: any): any;
					public getDefinitionExpression(): string;
					public getCoreArcGISSublayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISSublayer;
				}
				export module ArcGISSublayer {
					export class Factory extends com.arcgismaps.mapping.layers.ArcGISSublayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISSublayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ArcGISSublayerFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreArcGISSublayer,com.arcgismaps.mapping.layers.ArcGISSublayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayerFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcGISSublayer): com.arcgismaps.mapping.layers.ArcGISSublayer;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module ArcGISSublayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class ArcGISSublayerType {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayerType>;
					public getCoreArcGISSublayerType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISSublayerType;
				}
				export module ArcGISSublayerType {
					export class ArcGISMapImageSublayer extends com.arcgismaps.mapping.layers.ArcGISSublayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayerType.ArcGISMapImageSublayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISSublayerType.ArcGISMapImageSublayer;
					}
					export class ArcGISTiledSublayer extends com.arcgismaps.mapping.layers.ArcGISSublayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayerType.ArcGISTiledSublayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISSublayerType.ArcGISTiledSublayer;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayerType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISSublayerType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreArcGISSublayerType): com.arcgismaps.mapping.layers.ArcGISSublayerType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayerType.Factory.WhenMappings>;
						}
					}
					export class SubtypeSublayer extends com.arcgismaps.mapping.layers.ArcGISSublayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayerType.SubtypeSublayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISSublayerType.SubtypeSublayer;
					}
					export class Unknown extends com.arcgismaps.mapping.layers.ArcGISSublayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISSublayerType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISSublayerType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ArcGISTiledLayer extends com.arcgismaps.mapping.layers.ImageTiledLayer implements com.arcgismaps.ApiKeyResource, com.arcgismaps.mapping.layers.Refreshable {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISTiledLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public getCoreArcGISTiledLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISTiledLayer;
					public getTileCache(): com.arcgismaps.mapping.layers.TileCache;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public "setApiKey-lGpodAQ"(param0: string): void;
					public getUri(): string;
					public clone(): com.arcgismaps.mapping.layers.ArcGISTiledLayer;
					public clone(): com.arcgismaps.mapping.layers.ImageTiledLayer;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public getTiledSublayers(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public setRefreshInterval(param0: java.lang.Long): void;
					public getCanChangeVisibility(): boolean;
					public getRefreshInterval(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public "getApiKey-6IiKQno"(): string;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public constructor(param0: com.arcgismaps.mapping.Item);
					public isVisible(): boolean;
					public getName(): string;
					public constructor(param0: com.arcgismaps.mapping.layers.TileCache);
					public "retryLoad-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISTiledLayer, param1: boolean);
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getMapServiceInfo(): com.arcgismaps.arcgisservices.ArcGISMapServiceInfo;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ArcGISTiledLayer {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISTiledLayer.Companion>;
						public fromJsonOrNull$arcgis_maps_any_release(param0: string): com.arcgismaps.mapping.layers.ArcGISTiledLayer;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreArcGISTiledLayer,com.arcgismaps.mapping.layers.ArcGISTiledLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISTiledLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISTiledLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ArcGISTiledSublayer extends com.arcgismaps.mapping.layers.ArcGISSublayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISTiledSublayer>;
					public getCoreArcGISTiledSublayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISTiledSublayer;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public isPopupEnabled(): boolean;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public clone(): com.arcgismaps.mapping.layers.ArcGISTiledSublayer;
					public setShowInLegend(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISTiledSublayer, param1: boolean);
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public setPopupEnabled(param0: boolean): void;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public clone(): com.arcgismaps.mapping.layers.ArcGISSublayer;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ArcGISTiledSublayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreArcGISTiledSublayer,com.arcgismaps.mapping.layers.ArcGISTiledSublayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISTiledSublayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISTiledSublayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ArcGISVectorTiledLayer extends com.arcgismaps.mapping.layers.Layer implements com.arcgismaps.ApiKeyResource {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISVectorTiledLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public "setApiKey-lGpodAQ"(param0: string): void;
					public getUri(): string;
					public getItemResourceCache(): com.arcgismaps.tasks.exportvectortiles.ItemResourceCache;
					public constructor(param0: com.arcgismaps.mapping.layers.vectortiles.VectorTileCache, param1: com.arcgismaps.tasks.exportvectortiles.ItemResourceCache);
					public clone(): com.arcgismaps.mapping.layers.ArcGISVectorTiledLayer;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public getCoreArcGISVectorTiledLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISVectorTiledLayer;
					public getSourceInfo(): com.arcgismaps.mapping.layers.vectortiles.VectorTileSourceInfo;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public "getApiKey-6IiKQno"(): string;
					public getStyle(): com.arcgismaps.mapping.layers.vectortiles.VectorTileStyle;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public getVectorTileCache(): com.arcgismaps.mapping.layers.vectortiles.VectorTileCache;
					public constructor(param0: com.arcgismaps.mapping.Item);
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISVectorTiledLayer, param1: boolean);
				}
				export module ArcGISVectorTiledLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreArcGISVectorTiledLayer,com.arcgismaps.mapping.layers.ArcGISVectorTiledLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ArcGISVectorTiledLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ArcGISVectorTiledLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class BingMapsLayer extends com.arcgismaps.mapping.layers.ServiceImageTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.BingMapsLayer>;
					public setKey(param0: string): void;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getKeyPortalCreated$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.portal.Portal>;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public getLocale(): java.util.Locale;
					public getKey(): string;
					public clone(): com.arcgismaps.mapping.layers.ImageTiledLayer;
					public isVisibleAtScale(param0: number): boolean;
					public getCoreBingMapsLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBingMapsLayer;
					public constructor(param0: com.arcgismaps.portal.Portal, param1: com.arcgismaps.mapping.layers.BingMapsLayerStyle);
					public setVisible(param0: boolean): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreBingMapsLayer, param1: boolean);
					public getCanChangeVisibility(): boolean;
					public constructor(param0: string, param1: com.arcgismaps.mapping.layers.BingMapsLayerStyle);
					public getPortal(): com.arcgismaps.portal.Portal;
					public clone(): com.arcgismaps.mapping.layers.BingMapsLayer;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public setLocale(param0: java.util.Locale): void;
					public cancelLoad(): void;
					public getStyle(): com.arcgismaps.mapping.layers.BingMapsLayerStyle;
					public getShowInLegend(): boolean;
					public clone(): com.arcgismaps.mapping.layers.ServiceImageTiledLayer;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
				}
				export module BingMapsLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreBingMapsLayer,com.arcgismaps.mapping.layers.BingMapsLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.BingMapsLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.BingMapsLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class BingMapsLayerStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.BingMapsLayerStyle>;
					public getCoreBingMapsLayerStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBingMapsLayerStyle;
				}
				export module BingMapsLayerStyle {
					export class Aerial extends com.arcgismaps.mapping.layers.BingMapsLayerStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.BingMapsLayerStyle.Aerial>;
						public static INSTANCE: com.arcgismaps.mapping.layers.BingMapsLayerStyle.Aerial;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.BingMapsLayerStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.BingMapsLayerStyle.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreBingMapsLayerStyle): com.arcgismaps.mapping.layers.BingMapsLayerStyle;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.BingMapsLayerStyle.Factory.WhenMappings>;
						}
					}
					export class Hybrid extends com.arcgismaps.mapping.layers.BingMapsLayerStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.BingMapsLayerStyle.Hybrid>;
						public static INSTANCE: com.arcgismaps.mapping.layers.BingMapsLayerStyle.Hybrid;
					}
					export class Road extends com.arcgismaps.mapping.layers.BingMapsLayerStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.BingMapsLayerStyle.Road>;
						public static INSTANCE: com.arcgismaps.mapping.layers.BingMapsLayerStyle.Road;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class CustomTiledLayer extends com.arcgismaps.mapping.layers.ImageTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.CustomTiledLayer>;
					public constructor(param0: com.arcgismaps.mapping.layers.TileInfo, param1: com.arcgismaps.geometry.Envelope, param2: any);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImageTiledLayer, param1: boolean);
				}
				export module CustomTiledLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreImageTiledLayer,com.arcgismaps.mapping.layers.CustomTiledLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.CustomTiledLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.CustomTiledLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class CustomWebTiledLayer extends com.arcgismaps.mapping.layers.WebTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.CustomWebTiledLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWebTiledLayer, param1: boolean);
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
					public constructor(param0: string, param1: java.util.List<string>, param2: com.arcgismaps.mapping.layers.TileInfo, param3: com.arcgismaps.geometry.Envelope);
				}
				export module CustomWebTiledLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreWebTiledLayer,com.arcgismaps.mapping.layers.CustomWebTiledLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.CustomWebTiledLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.CustomWebTiledLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class DimensionLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.DimensionLayer>;
					public constructor(param0: com.arcgismaps.data.ArcGISFeatureTable);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public clone(): com.arcgismaps.mapping.layers.DimensionLayer;
					public getBarrierWeight(): com.arcgismaps.mapping.labeling.LabelBarrierWeight;
					public getUri(): string;
					public selectFeature(param0: com.arcgismaps.data.Feature): void;
					public isVisibleAtScale(param0: number): boolean;
					public setBarrierWeight(param0: com.arcgismaps.mapping.labeling.LabelBarrierWeight): void;
					public setVisible(param0: boolean): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public "selectFeatures-0E7RQCE"(param0: com.arcgismaps.data.QueryParameters, param1: com.arcgismaps.mapping.layers.SelectionMode, param2: any): any;
					public setFeaturesVisible(param0: java.lang.Iterable<any>, param1: boolean): void;
					public getCanChangeVisibility(): boolean;
					public getFeatureTable(): com.arcgismaps.data.ArcGISFeatureTable;
					public "getSelectedFeatures-IoAF18A"(param0: any): any;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public unselectFeature(param0: com.arcgismaps.data.Feature): void;
					public setFeatureVisible(param0: com.arcgismaps.data.Feature, param1: boolean): void;
					public resetFeaturesVisible(): void;
					public clearSelection(): void;
					public getLayerId(): number;
					public selectFeatures(param0: java.lang.Iterable<any>): void;
					public getShowInLegend(): boolean;
					public setDefinitionExpression(param0: string): void;
					public isVisible(): boolean;
					public getName(): string;
					public unselectFeatures(param0: java.lang.Iterable<any>): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDimensionLayer, param1: boolean);
					public "retryLoad-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.mapping.Item, param1: number);
					public getCoreDimensionLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDimensionLayer;
					public getReferenceScale(): number;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getDefinitionExpression(): string;
					public "load-IoAF18A"(param0: any): any;
				}
				export module DimensionLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreDimensionLayer,com.arcgismaps.mapping.layers.DimensionLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DimensionLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DimensionLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class DisplayFilter {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilter>;
					public getCoreDisplayFilter$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDisplayFilter;
					public getName(): string;
					public getWhereClause(): string;
					public setWhereClause(param0: string): void;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.layers.DisplayFilterType;
					public getFilterId(): string;
					public setName(param0: string): void;
				}
				export module DisplayFilter {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilter.Companion>;
						public createWithNameAndWhereClause(param0: string, param1: string): com.arcgismaps.mapping.layers.DisplayFilter;
					}
					export class Factory extends com.arcgismaps.mapping.layers.DisplayFilterFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilter.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilter.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class DisplayFilterDefinition {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinition>;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.layers.DisplayFilterDefinitionType;
					public getCoreDisplayFilterDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDisplayFilterDefinition;
				}
				export module DisplayFilterDefinition {
					export class Factory extends com.arcgismaps.mapping.layers.DisplayFilterDefinitionFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilterDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class DisplayFilterDefinitionFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreDisplayFilterDefinition,com.arcgismaps.mapping.layers.DisplayFilterDefinition> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinitionFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDisplayFilterDefinition): com.arcgismaps.mapping.layers.DisplayFilterDefinition;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module DisplayFilterDefinitionFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinitionFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class DisplayFilterDefinitionType {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinitionType>;
					public getCoreDisplayFilterDefinitionType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType;
				}
				export module DisplayFilterDefinitionType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinitionType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilterDefinitionType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDisplayFilterDefinitionType): com.arcgismaps.mapping.layers.DisplayFilterDefinitionType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinitionType.Factory.WhenMappings>;
						}
					}
					export class ManualDisplayFilterDefinition extends com.arcgismaps.mapping.layers.DisplayFilterDefinitionType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinitionType.ManualDisplayFilterDefinition>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilterDefinitionType.ManualDisplayFilterDefinition;
					}
					export class ScaleDisplayFilterDefinition extends com.arcgismaps.mapping.layers.DisplayFilterDefinitionType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinitionType.ScaleDisplayFilterDefinition>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilterDefinitionType.ScaleDisplayFilterDefinition;
					}
					export class Unknown extends com.arcgismaps.mapping.layers.DisplayFilterDefinitionType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterDefinitionType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilterDefinitionType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class DisplayFilterFactory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreDisplayFilter,com.arcgismaps.mapping.layers.DisplayFilter> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDisplayFilter): com.arcgismaps.mapping.layers.DisplayFilter;
					public constructor();
					public constructor(param0: any);
					public convertToPublic(param0: any): any;
				}
				export module DisplayFilterFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class DisplayFilterImpl extends com.arcgismaps.mapping.layers.DisplayFilter {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterImpl>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDisplayFilter, param1: boolean);
					public constructor(param0: string, param1: string);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class DisplayFilterType {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterType>;
					public getCoreDisplayFilterType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDisplayFilterType;
				}
				export module DisplayFilterType {
					export class DisplayFilter extends com.arcgismaps.mapping.layers.DisplayFilterType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterType.DisplayFilter>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilterType.DisplayFilter;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilterType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDisplayFilterType): com.arcgismaps.mapping.layers.DisplayFilterType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterType.Factory.WhenMappings>;
						}
					}
					export class ScaleRangeDisplayFilter extends com.arcgismaps.mapping.layers.DisplayFilterType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterType.ScaleRangeDisplayFilter>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilterType.ScaleRangeDisplayFilter;
					}
					export class Unknown extends com.arcgismaps.mapping.layers.DisplayFilterType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DisplayFilterType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DisplayFilterType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class DynamicEntityLayer extends com.arcgismaps.mapping.layers.Layer implements com.arcgismaps.mapping.popup.PopupSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.DynamicEntityLayer>;
					public isPopupEnabled(): boolean;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public unselectDynamicEntityObservations(param0: java.lang.Iterable<com.arcgismaps.realtime.DynamicEntityObservation>): void;
					public getRenderer(): com.arcgismaps.mapping.symbology.Renderer;
					public setPopupEnabled(param0: boolean): void;
					public getSelectedDynamicEntityObservations(): java.util.List<com.arcgismaps.realtime.DynamicEntityObservation>;
					public unselectDynamicEntities(param0: java.lang.Iterable<com.arcgismaps.realtime.DynamicEntity>): void;
					public getCoreDynamicEntityLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntityLayer;
					public isVisibleAtScale(param0: number): boolean;
					public getDataSource(): com.arcgismaps.realtime.DynamicEntityDataSource;
					public setVisible(param0: boolean): void;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public getSelectedDynamicEntities(): java.util.List<com.arcgismaps.realtime.DynamicEntity>;
					public selectDynamicEntityObservation(param0: com.arcgismaps.realtime.DynamicEntityObservation): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDynamicEntityLayer, param1: boolean);
					public getCanChangeVisibility(): boolean;
					public unselectDynamicEntity(param0: com.arcgismaps.realtime.DynamicEntity): void;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public selectDynamicEntities(param0: java.lang.Iterable<com.arcgismaps.realtime.DynamicEntity>): void;
					public getLabelsEnabled(): boolean;
					public unselectDynamicEntityObservation(param0: com.arcgismaps.realtime.DynamicEntityObservation): void;
					public setShowInLegend(param0: boolean): void;
					public getTrackDisplayProperties(): com.arcgismaps.mapping.layers.TrackDisplayProperties;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public clone(): com.arcgismaps.mapping.layers.DynamicEntityLayer;
					public cancelLoad(): void;
					public selectDynamicEntityObservations(param0: java.lang.Iterable<com.arcgismaps.realtime.DynamicEntityObservation>): void;
					public setRenderer(param0: com.arcgismaps.mapping.symbology.Renderer): void;
					public clearSelection(): void;
					public getLabelDefinitions(): java.util.List<com.arcgismaps.mapping.labeling.LabelDefinition>;
					public selectDynamicEntity(param0: com.arcgismaps.realtime.DynamicEntity): void;
					public getShowInLegend(): boolean;
					public isVisible(): boolean;
					public getSceneProperties(): com.arcgismaps.mapping.view.LayerSceneProperties;
					public getName(): string;
					public setSceneProperties(param0: com.arcgismaps.mapping.view.LayerSceneProperties): void;
					public "retryLoad-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public setLabelsEnabled(param0: boolean): void;
					public "load-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.realtime.DynamicEntityDataSource);
				}
				export module DynamicEntityLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreDynamicEntityLayer,com.arcgismaps.mapping.layers.DynamicEntityLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.DynamicEntityLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.DynamicEntityLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class EncLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.EncLayer>;
					public getCoreEncLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreENCLayer;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: com.arcgismaps.hydrography.EncCell);
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreENCLayer, param1: boolean);
					public clearSelection(): void;
					public clone(): com.arcgismaps.mapping.layers.EncLayer;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public selectFeature(param0: com.arcgismaps.hydrography.EncFeature): void;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCell(): com.arcgismaps.hydrography.EncCell;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
				}
				export module EncLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreENCLayer,com.arcgismaps.mapping.layers.EncLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.EncLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.EncLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class FeatureCollectionLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureCollectionLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public getLayers(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.FeatureLayer>>;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureCollectionLayer, param1: boolean);
					public getShowInLegend(): boolean;
					public clone(): com.arcgismaps.mapping.layers.FeatureCollectionLayer;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public getFeatureCollection(): com.arcgismaps.data.FeatureCollection;
					public isVisible(): boolean;
					public getName(): string;
					public getCoreFeatureCollectionLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureCollectionLayer;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.data.FeatureCollection);
				}
				export module FeatureCollectionLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFeatureCollectionLayer,com.arcgismaps.mapping.layers.FeatureCollectionLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureCollectionLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureCollectionLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class FeatureLayer extends com.arcgismaps.mapping.layers.Layer implements com.arcgismaps.mapping.floor.FloorAware, com.arcgismaps.mapping.popup.PopupSource, com.arcgismaps.mapping.layers.Refreshable, com.arcgismaps.mapping.view.geometryeditor.SnapSource, com.arcgismaps.arcgisservices.TimeAware {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureLayer>;
					public isPopupEnabled(): boolean;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getTimeInterval(): com.arcgismaps.mapping.TimeValue;
					public getRenderer(): com.arcgismaps.mapping.symbology.Renderer;
					public getSupportsTimeFiltering(): boolean;
					public setDisplayFilterDefinition(param0: com.arcgismaps.mapping.layers.DisplayFilterDefinition): void;
					public selectFeature(param0: com.arcgismaps.data.Feature): void;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public "selectFeatures-0E7RQCE"(param0: com.arcgismaps.data.QueryParameters, param1: com.arcgismaps.mapping.layers.SelectionMode, param2: any): any;
					public getCanChangeVisibility(): boolean;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public clone(): com.arcgismaps.mapping.layers.FeatureLayer;
					public getRefreshInterval(): java.lang.Long;
					public getTilingMode(): com.arcgismaps.mapping.layers.FeatureTilingMode;
					public "getSelectedFeatures-IoAF18A"(param0: any): any;
					public getLabelsEnabled(): boolean;
					public resetRenderer(): void;
					public getTimeOffset(): com.arcgismaps.mapping.TimeValue;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public isTimeFilteringEnabled(): boolean;
					public cancelLoad(): void;
					public unselectFeature(param0: com.arcgismaps.data.Feature): void;
					public resetFeaturesVisible(): void;
					public setRenderer(param0: com.arcgismaps.mapping.symbology.Renderer): void;
					public getLabelDefinitions(): java.util.List<com.arcgismaps.mapping.labeling.LabelDefinition>;
					public selectFeatures(param0: java.lang.Iterable<any>): void;
					public getRenderingMode(): com.arcgismaps.mapping.layers.FeatureRenderingMode;
					public getUnsupportedJson(): java.util.Map<string,any>;
					public getShowInLegend(): boolean;
					public getFeatureReduction(): com.arcgismaps.mapping.reduction.FeatureReduction;
					public setRenderingMode(param0: com.arcgismaps.mapping.layers.FeatureRenderingMode): void;
					public isVisible(): boolean;
					public getSceneProperties(): com.arcgismaps.mapping.view.LayerSceneProperties;
					public setSceneProperties(param0: com.arcgismaps.mapping.view.LayerSceneProperties): void;
					public unselectFeatures(param0: java.lang.Iterable<any>): void;
					public getDisplayFilterDefinition(): com.arcgismaps.mapping.layers.DisplayFilterDefinition;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
					public setLabelsEnabled(param0: boolean): void;
					public setFeatureReduction(param0: com.arcgismaps.mapping.reduction.FeatureReduction): void;
					public getUnknownJson(): java.util.Map<string,any>;
					public getScaleSymbols(): boolean;
					public setPopupEnabled(param0: boolean): void;
					public setTimeFilteringEnabled(param0: boolean): void;
					public get_featureTable(): com.arcgismaps.data.FeatureTable;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public setScaleSymbols(param0: boolean): void;
					public setRefreshInterval(param0: java.lang.Long): void;
					public setFeaturesVisible(param0: java.lang.Iterable<any>, param1: boolean): void;
					public setTilingMode(param0: com.arcgismaps.mapping.layers.FeatureTilingMode): void;
					public setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
					public setShowInLegend(param0: boolean): void;
					public getFloorDefinition(): com.arcgismaps.mapping.floor.LayerFloorDefinition;
					public setFloorDefinition(param0: com.arcgismaps.mapping.floor.LayerFloorDefinition): void;
					public setFeatureVisible(param0: com.arcgismaps.data.Feature, param1: boolean): void;
					public set_featureTable(param0: com.arcgismaps.data.FeatureTable): void;
					public clearSelection(): void;
					public getFeatureFormDefinition(): com.arcgismaps.mapping.featureforms.FeatureFormDefinition;
					public setDefinitionExpression(param0: string): void;
					public getFeatureTable(): com.arcgismaps.data.FeatureTable;
					public getName(): string;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getDefinitionExpression(): string;
					public "load-IoAF18A"(param0: any): any;
					public getCoreFeatureLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureLayer;
				}
				export module FeatureLayer {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureLayer.Companion>;
						public createWithItem(param0: com.arcgismaps.mapping.Item): com.arcgismaps.mapping.layers.FeatureLayer;
						public createWithFeatureTable(param0: com.arcgismaps.data.FeatureTable): com.arcgismaps.mapping.layers.FeatureLayer;
						public createWithItemAndLayerId(param0: com.arcgismaps.mapping.Item, param1: number): com.arcgismaps.mapping.layers.FeatureLayer;
					}
					export class Factory extends com.arcgismaps.mapping.layers.FeatureLayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class FeatureLayerFactory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreFeatureLayer,com.arcgismaps.mapping.layers.FeatureLayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureLayerFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureLayer): com.arcgismaps.mapping.layers.FeatureLayer;
					public constructor(param0: any);
					public convertToPublic(param0: any): any;
				}
				export module FeatureLayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureLayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class FeatureLayerImpl extends com.arcgismaps.mapping.layers.FeatureLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureLayerImpl>;
					public isPopupEnabled(): boolean;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getTimeInterval(): com.arcgismaps.mapping.TimeValue;
					public setPopupEnabled(param0: boolean): void;
					public setTimeFilteringEnabled(param0: boolean): void;
					public isVisibleAtScale(param0: number): boolean;
					public getSupportsTimeFiltering(): boolean;
					public setVisible(param0: boolean): void;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public setRefreshInterval(param0: java.lang.Long): void;
					public getCanChangeVisibility(): boolean;
					public setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public getRefreshInterval(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public getFloorDefinition(): com.arcgismaps.mapping.floor.LayerFloorDefinition;
					public setFloorDefinition(param0: com.arcgismaps.mapping.floor.LayerFloorDefinition): void;
					public constructor(param0: com.arcgismaps.data.FeatureTable);
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public getTimeOffset(): com.arcgismaps.mapping.TimeValue;
					public isTimeFilteringEnabled(): boolean;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public constructor(param0: com.arcgismaps.mapping.Item);
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
					public constructor(param0: com.arcgismaps.mapping.Item, param1: number);
					public "load-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFeatureLayer, param1: boolean);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class FeatureRenderingMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureRenderingMode>;
					public getCoreFeatureRenderingMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureRenderingMode;
				}
				export module FeatureRenderingMode {
					export class Automatic extends com.arcgismaps.mapping.layers.FeatureRenderingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureRenderingMode.Automatic>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureRenderingMode.Automatic;
					}
					export class Dynamic extends com.arcgismaps.mapping.layers.FeatureRenderingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureRenderingMode.Dynamic>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureRenderingMode.Dynamic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureRenderingMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureRenderingMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureRenderingMode): com.arcgismaps.mapping.layers.FeatureRenderingMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureRenderingMode.Factory.WhenMappings>;
						}
					}
					export class Static extends com.arcgismaps.mapping.layers.FeatureRenderingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureRenderingMode.Static>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureRenderingMode.Static;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class FeatureTilingMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureTilingMode>;
					public getCoreFeatureTilingMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureTilingMode;
				}
				export module FeatureTilingMode {
					export class Disabled extends com.arcgismaps.mapping.layers.FeatureTilingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureTilingMode.Disabled>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureTilingMode.Disabled;
					}
					export class EnabledWhenSupported extends com.arcgismaps.mapping.layers.FeatureTilingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureTilingMode.EnabledWhenSupported>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureTilingMode.EnabledWhenSupported;
					}
					export class EnabledWithFullResolutionWhenSupported extends com.arcgismaps.mapping.layers.FeatureTilingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureTilingMode.EnabledWithFullResolutionWhenSupported>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureTilingMode.EnabledWithFullResolutionWhenSupported;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureTilingMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.FeatureTilingMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureTilingMode): com.arcgismaps.mapping.layers.FeatureTilingMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.FeatureTilingMode.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class GroupLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.GroupLayer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGroupLayer, param1: boolean);
					public setVisibilityMode(param0: com.arcgismaps.mapping.layers.GroupVisibilityMode): void;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public clone(): com.arcgismaps.mapping.layers.GroupLayer;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public getVisibilityMode(): com.arcgismaps.mapping.layers.GroupVisibilityMode;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public getCoreGroupLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGroupLayer;
					public isVisible(): boolean;
					public getName(): string;
					public constructor(param0: java.lang.Iterable<any>);
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getShowChildrenInLegend(): boolean;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
					public getLayers(): java.util.List<com.arcgismaps.mapping.layers.Layer>;
					public setShowChildrenInLegend(param0: boolean): void;
				}
				export module GroupLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGroupLayer,com.arcgismaps.mapping.layers.GroupLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.GroupLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.GroupLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class GroupVisibilityMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.GroupVisibilityMode>;
					public getCoreGroupVisibilityMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGroupVisibilityMode;
				}
				export module GroupVisibilityMode {
					export class Exclusive extends com.arcgismaps.mapping.layers.GroupVisibilityMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.GroupVisibilityMode.Exclusive>;
						public static INSTANCE: com.arcgismaps.mapping.layers.GroupVisibilityMode.Exclusive;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.GroupVisibilityMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.GroupVisibilityMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGroupVisibilityMode): com.arcgismaps.mapping.layers.GroupVisibilityMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.GroupVisibilityMode.Factory.WhenMappings>;
						}
					}
					export class Independent extends com.arcgismaps.mapping.layers.GroupVisibilityMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.GroupVisibilityMode.Independent>;
						public static INSTANCE: com.arcgismaps.mapping.layers.GroupVisibilityMode.Independent;
					}
					export class Inherited extends com.arcgismaps.mapping.layers.GroupVisibilityMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.GroupVisibilityMode.Inherited>;
						public static INSTANCE: com.arcgismaps.mapping.layers.GroupVisibilityMode.Inherited;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class ImageAdjustmentLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ImageAdjustmentLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public getContrast(): number;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public getCoreImageAdjustmentLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreImageAdjustmentLayer;
					public getGamma(): number;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public setContrast(param0: number): void;
					public setGamma(param0: number): void;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setBrightness(param0: number): void;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
					public getBrightness(): number;
				}
				export module ImageAdjustmentLayer {
					export class Factory extends com.arcgismaps.mapping.layers.ImageAdjustmentLayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ImageAdjustmentLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ImageAdjustmentLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ImageAdjustmentLayerFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreImageAdjustmentLayer,com.arcgismaps.mapping.layers.ImageAdjustmentLayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ImageAdjustmentLayerFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreImageAdjustmentLayer): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public convertToPublic(param0: any): any;
				}
				export module ImageAdjustmentLayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ImageAdjustmentLayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class ImageTiledLayer extends com.arcgismaps.mapping.layers.ImageAdjustmentLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ImageTiledLayer>;
					public get_tileInfo$arcgis_maps_any_release(): com.arcgismaps.mapping.layers.TileInfo;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setNoDataTileBehavior(param0: com.arcgismaps.mapping.layers.NoDataTileBehavior): void;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public clone(): com.arcgismaps.mapping.layers.ImageTiledLayer;
					public isVisibleAtScale(param0: number): boolean;
					public setAttribution(param0: string): void;
					public setVisible(param0: boolean): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public set_tileInfo$arcgis_maps_any_release(param0: com.arcgismaps.mapping.layers.TileInfo): void;
					public getTileRequest$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.arcgisservices.TileKey>;
					public setShowInLegend(param0: boolean): void;
					public getAttribution(): string;
					public setTile$arcgis_maps_any_release(param0: com.arcgismaps.arcgisservices.TileKey, param1: any): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public getCancelTileRequest$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.arcgisservices.TileKey>;
					public getCoreImageTiledLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreImageTiledLayer;
					public getNoDataTileBehavior(): com.arcgismaps.mapping.layers.NoDataTileBehavior;
					public setTile$arcgis_maps_any_release(param0: com.arcgismaps.arcgisservices.TileKey, param1: androidNative.Array<number>): void;
					public getShowInLegend(): boolean;
					public isVisible(): boolean;
					public getName(): string;
					public setNoDataTile$arcgis_maps_any_release(param0: com.arcgismaps.arcgisservices.TileKey): void;
					public "retryLoad-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
					public getTileInfo(): com.arcgismaps.mapping.layers.TileInfo;
				}
				export module ImageTiledLayer {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ImageTiledLayer.Companion>;
						public getDefaultTileInfo(): com.arcgismaps.mapping.layers.TileInfo;
						public getDefaultFullExtent(): com.arcgismaps.geometry.Envelope;
					}
					export class Factory extends com.arcgismaps.mapping.layers.ImageTiledLayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ImageTiledLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ImageTiledLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ImageTiledLayerFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreImageTiledLayer,com.arcgismaps.mapping.layers.ImageTiledLayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ImageTiledLayerFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreImageTiledLayer): com.arcgismaps.mapping.layers.ImageTiledLayer;
					public convertToPublic(param0: any): any;
				}
				export module ImageTiledLayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ImageTiledLayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class IntegratedMeshLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.IntegratedMeshLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public setShowInLegend(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreIntegratedMeshLayer, param1: boolean);
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public getAltitudeOffset(): number;
					public setAltitudeUnit$arcgis_maps_any_release(param0: com.arcgismaps.geometry.LinearUnit): void;
					public getUri(): string;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public constructor(param0: com.arcgismaps.mapping.Item);
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public setAltitudeOffset(param0: number): void;
					public clone(): com.arcgismaps.mapping.layers.IntegratedMeshLayer;
					public getCoreIntegratedMeshLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreIntegratedMeshLayer;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public getAltitudeUnit$arcgis_maps_any_release(): com.arcgismaps.geometry.LinearUnit;
					public "load-IoAF18A"(param0: any): any;
				}
				export module IntegratedMeshLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreIntegratedMeshLayer,com.arcgismaps.mapping.layers.IntegratedMeshLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.IntegratedMeshLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.IntegratedMeshLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class JoinType {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.JoinType>;
					public getCoreJoinType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreJoinType;
				}
				export module JoinType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.JoinType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.JoinType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreJoinType): com.arcgismaps.mapping.layers.JoinType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.JoinType.Factory.WhenMappings>;
						}
					}
					export class InnerJoin extends com.arcgismaps.mapping.layers.JoinType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.JoinType.InnerJoin>;
						public static INSTANCE: com.arcgismaps.mapping.layers.JoinType.InnerJoin;
					}
					export class LeftOuterJoin extends com.arcgismaps.mapping.layers.JoinType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.JoinType.LeftOuterJoin>;
						public static INSTANCE: com.arcgismaps.mapping.layers.JoinType.LeftOuterJoin;
					}
					export class Unknown extends com.arcgismaps.mapping.layers.JoinType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.JoinType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.layers.JoinType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class KmlLayer extends com.arcgismaps.mapping.layers.Layer implements com.arcgismaps.arcgisservices.TimeAware {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.KmlLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public clone(): com.arcgismaps.mapping.layers.KmlLayer;
					public getTimeInterval(): com.arcgismaps.mapping.TimeValue;
					public setTimeFilteringEnabled(param0: boolean): void;
					public getSupportsTimeFiltering(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public getDataset(): com.arcgismaps.mapping.kml.KmlDataset;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
					public setShowInLegend(param0: boolean): void;
					public getTimeOffset(): com.arcgismaps.mapping.TimeValue;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public isTimeFilteringEnabled(): boolean;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public constructor(param0: com.arcgismaps.mapping.kml.KmlDataset);
					public constructor(param0: com.arcgismaps.mapping.Item);
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
					public getCoreKmlLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreKMLLayer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreKMLLayer, param1: boolean);
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
				}
				export module KmlLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreKMLLayer,com.arcgismaps.mapping.layers.KmlLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.KmlLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.KmlLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class Layer implements com.arcgismaps.mapping.layers.LayerContent, com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.Layer>;
					public setDescription(param0: string): void;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getId(): string;
					public set_item$arcgis_maps_any_release(param0: com.arcgismaps.mapping.Item): void;
					public setOpacity(param0: number): void;
					public getCoreLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLayer;
					public set_fullExtent$arcgis_maps_any_release(param0: com.arcgismaps.geometry.Envelope): void;
					public getFullExtent(): com.arcgismaps.geometry.Envelope;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public hashCode(): number;
					public getOpacity(): number;
					public get_fullExtent$arcgis_maps_any_release(): com.arcgismaps.geometry.Envelope;
					public getMinScale(): java.lang.Double;
					public setMinScale(param0: java.lang.Double): void;
					public setShowInLegend(param0: boolean): void;
					public getAttribution(): string;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.layers.LayerType;
					public getMaxScale(): java.lang.Double;
					public setMaxScale(param0: java.lang.Double): void;
					public setName(param0: string): void;
					public getShowInLegend(): boolean;
					public equals(param0: any): boolean;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public isIdentifyEnabled(): boolean;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public setId(param0: string): void;
					public "load-IoAF18A"(param0: any): any;
					public getDescription(): string;
					public get_item$arcgis_maps_any_release(): com.arcgismaps.mapping.Item;
					public getVisibilityChanged(): kotlinx.coroutines.flow.SharedFlow<java.lang.Boolean>;
					public getItem(): com.arcgismaps.mapping.Item;
				}
				export module Layer {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.Layer.Companion>;
						public invalidId$arcgis_maps_any_release(): number;
					}
					export class Factory extends com.arcgismaps.mapping.layers.LayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.Layer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.Layer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class LayerContent {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerContent>;
					/**
					 * Constructs a new instance of the com.arcgismaps.mapping.layers.LayerContent interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getCanChangeVisibility(): boolean;
						isVisible(): boolean;
						setVisible(param0: boolean): void;
						getName(): string;
						getShowInLegend(): boolean;
						setShowInLegend(param0: boolean): void;
						getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
						"fetchLegendInfos-IoAF18A"(param0: any): any;
						isVisibleAtScale(param0: number): boolean;
					});
					public constructor();
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public setShowInLegend(param0: boolean): void;
					public getName(): string;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class LayerContentImpl extends com.arcgismaps.mapping.layers.LayerContent {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerContentImpl>;
					public getShowInLegend(): boolean;
					public getCoreLayerContent$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLayerContent;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public setShowInLegend(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLayerContent);
					public getName(): string;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export module LayerContentKt {

					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerContentKt.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class LayerFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreLayer,com.arcgismaps.mapping.layers.Layer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerFactory>;
					public constructor();
					public convertToPublic(param0: any): any;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLayer): com.arcgismaps.mapping.layers.Layer;
				}
				export module LayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class LayerType {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType>;
					public getCoreLayerType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLayerType;
				}
				export module LayerType {
					export class AnnotationLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.AnnotationLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.AnnotationLayer;
					}
					export class ArcGISMapImageLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.ArcGISMapImageLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.ArcGISMapImageLayer;
					}
					export class ArcGISSceneLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.ArcGISSceneLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.ArcGISSceneLayer;
					}
					export class ArcGISTiledLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.ArcGISTiledLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.ArcGISTiledLayer;
					}
					export class ArcGISVectorTiledLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.ArcGISVectorTiledLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.ArcGISVectorTiledLayer;
					}
					export class BingMapsLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.BingMapsLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.BingMapsLayer;
					}
					export class DimensionLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.DimensionLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.DimensionLayer;
					}
					export class DynamicEntityLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.DynamicEntityLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.DynamicEntityLayer;
					}
					export class EncLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.EncLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.EncLayer;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLayerType): com.arcgismaps.mapping.layers.LayerType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.Factory.WhenMappings>;
						}
					}
					export class FeatureCollectionLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.FeatureCollectionLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.FeatureCollectionLayer;
					}
					export class FeatureLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.FeatureLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.FeatureLayer;
					}
					export class GroupLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.GroupLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.GroupLayer;
					}
					export class ImageTiledLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.ImageTiledLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.ImageTiledLayer;
					}
					export class IntegratedMeshLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.IntegratedMeshLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.IntegratedMeshLayer;
					}
					export class KmlLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.KmlLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.KmlLayer;
					}
					export class MobileBasemapLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.MobileBasemapLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.MobileBasemapLayer;
					}
					export class Ogc3DTilesLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.Ogc3DTilesLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.Ogc3DTilesLayer;
					}
					export class OpenStreetMapLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.OpenStreetMapLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.OpenStreetMapLayer;
					}
					export class PointCloudLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.PointCloudLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.PointCloudLayer;
					}
					export class RasterLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.RasterLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.RasterLayer;
					}
					export class ServiceImageTiledLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.ServiceImageTiledLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.ServiceImageTiledLayer;
					}
					export class SubtypeFeatureLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.SubtypeFeatureLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.SubtypeFeatureLayer;
					}
					export class UnknownLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.UnknownLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.UnknownLayer;
					}
					export class UnsupportedLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.UnsupportedLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.UnsupportedLayer;
					}
					export class WebTiledLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.WebTiledLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.WebTiledLayer;
					}
					export class WmsLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.WmsLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.WmsLayer;
					}
					export class WmtsLayer extends com.arcgismaps.mapping.layers.LayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LayerType.WmtsLayer>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LayerType.WmtsLayer;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class LegendInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.LegendInfo>;
					public getSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public equals(param0: any): boolean;
					public getName(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLegendInfo);
					public getCoreLegendInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLegendInfo;
					public hashCode(): number;
				}
				export module LegendInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLegendInfo,com.arcgismaps.mapping.layers.LegendInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.LegendInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.LegendInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ManualDisplayFilterDefinition extends com.arcgismaps.mapping.layers.DisplayFilterDefinition {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ManualDisplayFilterDefinition>;
					public getAvailableFilters(): java.util.List<com.arcgismaps.mapping.layers.DisplayFilter>;
					public getCoreManualDisplayFilterDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreManualDisplayFilterDefinition;
					public setActiveFilter(param0: com.arcgismaps.mapping.layers.DisplayFilter): void;
					public constructor(param0: com.arcgismaps.mapping.layers.DisplayFilter, param1: java.lang.Iterable<any>);
					public constructor(param0: com.arcgismaps.internal.jni.CoreManualDisplayFilterDefinition);
					public getActiveFilter(): com.arcgismaps.mapping.layers.DisplayFilter;
				}
				export module ManualDisplayFilterDefinition {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreManualDisplayFilterDefinition,com.arcgismaps.mapping.layers.ManualDisplayFilterDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ManualDisplayFilterDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ManualDisplayFilterDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class MapServiceImageFormat {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat>;
					public getCoreMapServiceImageFormat$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMapServiceImageFormat;
				}
				export module MapServiceImageFormat {
					export class Bmp extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Bmp>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Bmp;
					}
					export class Default extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Default>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Default;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMapServiceImageFormat): com.arcgismaps.mapping.layers.MapServiceImageFormat;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Factory.WhenMappings>;
						}
					}
					export class Gif extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Gif>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Gif;
					}
					export class Jpg extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Jpg>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Jpg;
					}
					export class JpgPng extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.JpgPng>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.JpgPng;
					}
					export class Png extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Png>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Png;
					}
					export class Png24 extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Png24>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Png24;
					}
					export class Png32 extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Png32>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Png32;
					}
					export class Png8 extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Png8>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Png8;
					}
					export class Tiff extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Tiff>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Tiff;
					}
					export class Unknown extends com.arcgismaps.mapping.layers.MapServiceImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapServiceImageFormat.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapServiceImageFormat.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class MapSublayerSource extends com.arcgismaps.mapping.layers.SublayerSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapSublayerSource>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMapSublayerSource);
					public getCoreMapSublayerSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMapSublayerSource;
					public setGeodatabaseVersion(param0: string): void;
					public getGeodatabaseVersion(): string;
					public getMapSublayerId(): number;
					public constructor(param0: number);
				}
				export module MapSublayerSource {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMapSublayerSource,com.arcgismaps.mapping.layers.MapSublayerSource> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MapSublayerSource.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MapSublayerSource.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class MobileBasemapLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.MobileBasemapLayer>;
					public getSublayerIds(): java.util.List<java.lang.Long>;
					public getCoreMobileBasemapLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMobileBasemapLayer;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMobileBasemapLayer, param1: boolean);
					public getPath(): string;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.MobileBasemapLayer;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
				}
				export module MobileBasemapLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreMobileBasemapLayer,com.arcgismaps.mapping.layers.MobileBasemapLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.MobileBasemapLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.MobileBasemapLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class NoDataTileBehavior {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.NoDataTileBehavior>;
					public getCoreNoDataTileBehavior$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNoDataTileBehavior;
				}
				export module NoDataTileBehavior {
					export class Blank extends com.arcgismaps.mapping.layers.NoDataTileBehavior {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.NoDataTileBehavior.Blank>;
						public static INSTANCE: com.arcgismaps.mapping.layers.NoDataTileBehavior.Blank;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.NoDataTileBehavior.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.NoDataTileBehavior.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreNoDataTileBehavior): com.arcgismaps.mapping.layers.NoDataTileBehavior;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.NoDataTileBehavior.Factory.WhenMappings>;
						}
					}
					export class Show extends com.arcgismaps.mapping.layers.NoDataTileBehavior {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.NoDataTileBehavior.Show>;
						public static INSTANCE: com.arcgismaps.mapping.layers.NoDataTileBehavior.Show;
					}
					export class Unknown extends com.arcgismaps.mapping.layers.NoDataTileBehavior {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.NoDataTileBehavior.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.layers.NoDataTileBehavior.Unknown;
					}
					export class UpSample extends com.arcgismaps.mapping.layers.NoDataTileBehavior {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.NoDataTileBehavior.UpSample>;
						public static INSTANCE: com.arcgismaps.mapping.layers.NoDataTileBehavior.UpSample;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class Ogc3DTilesLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.Ogc3DTilesLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getOccludeSurface(): boolean;
					public constructor(param0: string);
					public getAltitudeOffset(): number;
					public getUri(): string;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public setOccludeSurface(param0: boolean): void;
					public getCanChangeVisibility(): boolean;
					public constructor(param0: com.arcgismaps.mapping.PortalItem);
					public clone(): com.arcgismaps.mapping.layers.Ogc3DTilesLayer;
					public setShowInLegend(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOGC3DTilesLayer, param1: boolean);
					public getCustomParameters(): java.util.Map<string,string>;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public getCoreOgc3DTilesLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOGC3DTilesLayer;
					public cancelLoad(): void;
					public getShowInLegend(): boolean;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public setAltitudeOffset(param0: number): void;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
				}
				export module Ogc3DTilesLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreOGC3DTilesLayer,com.arcgismaps.mapping.layers.Ogc3DTilesLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.Ogc3DTilesLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.Ogc3DTilesLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class OgcAxisOrder {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcAxisOrder>;
					public getCoreOgcAxisOrder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOGCAxisOrder;
				}
				export module OgcAxisOrder {
					export class Auto extends com.arcgismaps.mapping.layers.OgcAxisOrder {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcAxisOrder.Auto>;
						public static INSTANCE: com.arcgismaps.mapping.layers.OgcAxisOrder.Auto;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcAxisOrder.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.OgcAxisOrder.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreOGCAxisOrder): com.arcgismaps.mapping.layers.OgcAxisOrder;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcAxisOrder.Factory.WhenMappings>;
						}
					}
					export class NoSwap extends com.arcgismaps.mapping.layers.OgcAxisOrder {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcAxisOrder.NoSwap>;
						public static INSTANCE: com.arcgismaps.mapping.layers.OgcAxisOrder.NoSwap;
					}
					export class Swap extends com.arcgismaps.mapping.layers.OgcAxisOrder {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcAxisOrder.Swap>;
						public static INSTANCE: com.arcgismaps.mapping.layers.OgcAxisOrder.Swap;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class OgcFeatureCollectionInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcFeatureCollectionInfo>;
					public getTitle(): string;
					public getCoreOgcFeatureCollectionInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo;
					public getCollectionId(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo, param1: boolean);
					public getExtent(): com.arcgismaps.geometry.Envelope;
					public getDescription(): string;
				}
				export module OgcFeatureCollectionInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreOGCFeatureCollectionInfo,com.arcgismaps.mapping.layers.OgcFeatureCollectionInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcFeatureCollectionInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.OgcFeatureCollectionInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class OgcFeatureService extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcFeatureService>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getUrl(): string;
					public constructor(param0: string);
					public constructor(param0: com.arcgismaps.internal.jni.CoreOGCFeatureService);
					public getCustomParameters(): java.util.Map<string,string>;
					public "retryLoad-IoAF18A"(param0: any): any;
					public cancelLoad(): void;
					public getServiceInfo(): com.arcgismaps.mapping.layers.OgcFeatureServiceInfo;
					public "load-IoAF18A"(param0: any): any;
					public getCoreOgcFeatureService$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOGCFeatureService;
				}
				export module OgcFeatureService {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOGCFeatureService,com.arcgismaps.mapping.layers.OgcFeatureService> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcFeatureService.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.OgcFeatureService.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class OgcFeatureServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcFeatureServiceInfo>;
					public getTitle(): string;
					public getFeatureCollectionInfos(): java.util.List<com.arcgismaps.mapping.layers.OgcFeatureCollectionInfo>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOGCFeatureServiceInfo);
					public getCoreOgcFeatureServiceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOGCFeatureServiceInfo;
					public getDescription(): string;
				}
				export module OgcFeatureServiceInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOGCFeatureServiceInfo,com.arcgismaps.mapping.layers.OgcFeatureServiceInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.OgcFeatureServiceInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.OgcFeatureServiceInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class OpenStreetMapLayer extends com.arcgismaps.mapping.layers.WebTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.OpenStreetMapLayer>;
					public clone(): com.arcgismaps.mapping.layers.WebTiledLayer;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public clone(): com.arcgismaps.mapping.layers.OpenStreetMapLayer;
					public cancelLoad(): void;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public getShowInLegend(): boolean;
					public clone(): com.arcgismaps.mapping.layers.ImageTiledLayer;
					public isVisibleAtScale(param0: number): boolean;
					public clone(): com.arcgismaps.mapping.layers.ServiceImageTiledLayer;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public constructor();
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOpenStreetMapLayer, param1: boolean);
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
					public getCoreOpenStreetMapLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOpenStreetMapLayer;
				}
				export module OpenStreetMapLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreOpenStreetMapLayer,com.arcgismaps.mapping.layers.OpenStreetMapLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.OpenStreetMapLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.OpenStreetMapLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class PointCloudLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.PointCloudLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public setUri(param0: string): void;
					public getAltitudeOffset(): number;
					public getUri(): string;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public getAltitudeUnit$arcgis_maps_any_release(): com.arcgismaps.geometry.LinearUnit;
					public constructor(param0: com.arcgismaps.internal.jni.CorePointCloudLayer, param1: boolean);
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public setAltitudeUnit$arcgis_maps_any_release(param0: com.arcgismaps.geometry.LinearUnit): void;
					public getShowInLegend(): boolean;
					public constructor(param0: com.arcgismaps.mapping.Item);
					public isVisible(): boolean;
					public getCorePointCloudLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePointCloudLayer;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public setAltitudeOffset(param0: number): void;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public clone(): com.arcgismaps.mapping.layers.PointCloudLayer;
					public "load-IoAF18A"(param0: any): any;
				}
				export module PointCloudLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CorePointCloudLayer,com.arcgismaps.mapping.layers.PointCloudLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.PointCloudLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.PointCloudLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class RasterCell extends com.arcgismaps.mapping.GeoElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.RasterCell>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRasterCell);
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public getCoreRasterCell$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRasterCell;
					public getAttributes(): java.util.Map<string,any>;
				}
				export module RasterCell {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRasterCell,com.arcgismaps.mapping.layers.RasterCell> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.RasterCell.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.RasterCell.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class RasterLayer extends com.arcgismaps.mapping.layers.ImageAdjustmentLayer implements com.arcgismaps.mapping.popup.PopupSource, com.arcgismaps.arcgisservices.TimeAware {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.RasterLayer>;
					public isPopupEnabled(): boolean;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getCoreRasterLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRasterLayer;
					public getRenderer(): com.arcgismaps.mapping.symbology.raster.RasterRenderer;
					public getTimeInterval(): com.arcgismaps.mapping.TimeValue;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public setPopupEnabled(param0: boolean): void;
					public setRenderer(param0: com.arcgismaps.mapping.symbology.raster.RasterRenderer): void;
					public setTimeFilteringEnabled(param0: boolean): void;
					public getRaster(): com.arcgismaps.raster.Raster;
					public getSupportsTimeFiltering(): boolean;
					public constructor(param0: com.arcgismaps.raster.Raster);
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public setShowInLegend(param0: boolean): void;
					public getTimeOffset(): com.arcgismaps.mapping.TimeValue;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public isTimeFilteringEnabled(): boolean;
					public cancelLoad(): void;
					public clone(): com.arcgismaps.mapping.layers.RasterLayer;
					public getShowInLegend(): boolean;
					public constructor(param0: com.arcgismaps.mapping.Item);
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRasterLayer, param1: boolean);
				}
				export module RasterLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreRasterLayer,com.arcgismaps.mapping.layers.RasterLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.RasterLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.RasterLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class RasterSublayerSource extends com.arcgismaps.mapping.layers.SublayerSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.RasterSublayerSource>;
					public constructor(param0: string, param1: string);
					public getDataSourceName(): string;
					public getWorkspaceId(): string;
					public getFields$arcgis_maps_any_release(): java.util.List<com.arcgismaps.data.Field>;
					public getCoreRasterSublayerSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRasterSublayerSource;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRasterSublayerSource);
				}
				export module RasterSublayerSource {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRasterSublayerSource,com.arcgismaps.mapping.layers.RasterSublayerSource> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.RasterSublayerSource.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.RasterSublayerSource.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class Refreshable {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.Refreshable>;
					/**
					 * Constructs a new instance of the com.arcgismaps.mapping.layers.Refreshable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getRefreshInterval(): java.lang.Long;
						setRefreshInterval(param0: java.lang.Long): void;
					});
					public constructor();
					public getRefreshInterval(): java.lang.Long;
					public setRefreshInterval(param0: java.lang.Long): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class RefreshableImpl extends com.arcgismaps.mapping.layers.Refreshable {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.RefreshableImpl>;
					public getRefreshInterval(): java.lang.Long;
					public setRefreshInterval(param0: java.lang.Long): void;
					public getCoreRefreshable$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRefreshable;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRefreshable);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ScaleDisplayFilterDefinition extends com.arcgismaps.mapping.layers.DisplayFilterDefinition {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ScaleDisplayFilterDefinition>;
					public constructor(param0: java.lang.Iterable<com.arcgismaps.mapping.layers.ScaleRangeDisplayFilter>);
					public constructor(param0: com.arcgismaps.internal.jni.CoreScaleDisplayFilterDefinition);
					public getFilters(): java.util.List<com.arcgismaps.mapping.layers.ScaleRangeDisplayFilter>;
					public getCoreScaleDisplayFilterDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreScaleDisplayFilterDefinition;
				}
				export module ScaleDisplayFilterDefinition {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreScaleDisplayFilterDefinition,com.arcgismaps.mapping.layers.ScaleDisplayFilterDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ScaleDisplayFilterDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ScaleDisplayFilterDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ScaleRangeDisplayFilter extends com.arcgismaps.mapping.layers.DisplayFilter {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ScaleRangeDisplayFilter>;
					public constructor(param0: string, param1: string, param2: java.lang.Double, param3: java.lang.Double);
					public getMinScale(): java.lang.Double;
					public setMinScale(param0: java.lang.Double): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreScaleRangeDisplayFilter, param1: boolean);
					public getCoreScaleRangeDisplayFilter$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreScaleRangeDisplayFilter;
					public getMaxScale(): java.lang.Double;
					public setMaxScale(param0: java.lang.Double): void;
				}
				export module ScaleRangeDisplayFilter {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreScaleRangeDisplayFilter,com.arcgismaps.mapping.layers.ScaleRangeDisplayFilter> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ScaleRangeDisplayFilter.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ScaleRangeDisplayFilter.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class SceneLayerPolygonFilter {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.SceneLayerPolygonFilter>;
					public getPolygons(): java.util.List<com.arcgismaps.geometry.Polygon>;
					public getCoreSceneLayerPolygonFilter$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilter;
					public setSpatialRelationship(param0: com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship): void;
					public constructor(param0: java.lang.Iterable<com.arcgismaps.geometry.Polygon>, param1: com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship);
					public getSpatialRelationship(): com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilter);
				}
				export module SceneLayerPolygonFilter {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilter,com.arcgismaps.mapping.layers.SceneLayerPolygonFilter> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SceneLayerPolygonFilter.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SceneLayerPolygonFilter.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class SceneLayerPolygonFilterSpatialRelationship {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship>;
					public getCoreSceneLayerPolygonFilterSpatialRelationship$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship;
				}
				export module SceneLayerPolygonFilterSpatialRelationship {
					export class Contains extends com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship.Contains>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship.Contains;
					}
					export class Disjoint extends com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship.Disjoint>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship.Disjoint;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSceneLayerPolygonFilterSpatialRelationship): com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.SceneLayerPolygonFilterSpatialRelationship.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class SelectionMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.SelectionMode>;
					public getCoreSelectionMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSelectionMode;
				}
				export module SelectionMode {
					export class Add extends com.arcgismaps.mapping.layers.SelectionMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SelectionMode.Add>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SelectionMode.Add;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SelectionMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SelectionMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSelectionMode): com.arcgismaps.mapping.layers.SelectionMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.SelectionMode.Factory.WhenMappings>;
						}
					}
					export class New extends com.arcgismaps.mapping.layers.SelectionMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SelectionMode.New>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SelectionMode.New;
					}
					export class Subtract extends com.arcgismaps.mapping.layers.SelectionMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SelectionMode.Subtract>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SelectionMode.Subtract;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class ServiceImageTiledLayer extends com.arcgismaps.mapping.layers.ImageTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ServiceImageTiledLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public getShowInLegend(): boolean;
					public clone(): com.arcgismaps.mapping.layers.ImageTiledLayer;
					public isVisibleAtScale(param0: number): boolean;
					public getCoreServiceImageTiledLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceImageTiledLayer;
					public clone(): com.arcgismaps.mapping.layers.ServiceImageTiledLayer;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ServiceImageTiledLayer {
					export class Factory extends com.arcgismaps.mapping.layers.ServiceImageTiledLayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ServiceImageTiledLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.ServiceImageTiledLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class ServiceImageTiledLayerFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreServiceImageTiledLayer,com.arcgismaps.mapping.layers.ServiceImageTiledLayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.ServiceImageTiledLayerFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreServiceImageTiledLayer): com.arcgismaps.mapping.layers.ServiceImageTiledLayer;
					public convertToPublic(param0: any): any;
				}
				export module ServiceImageTiledLayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.ServiceImageTiledLayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class SublayerSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSource>;
					public getCoreSublayerSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSublayerSource;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.layers.SublayerSourceType;
				}
				export module SublayerSource {
					export class Factory extends com.arcgismaps.mapping.layers.SublayerSourceFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSource.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SublayerSource.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class SublayerSourceFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreSublayerSource,com.arcgismaps.mapping.layers.SublayerSource> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSublayerSource): com.arcgismaps.mapping.layers.SublayerSource;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module SublayerSourceFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class SublayerSourceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceType>;
					public getCoreSublayerSourceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSublayerSourceType;
				}
				export module SublayerSourceType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SublayerSourceType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSublayerSourceType): com.arcgismaps.mapping.layers.SublayerSourceType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceType.Factory.WhenMappings>;
						}
					}
					export class MapSublayerSource extends com.arcgismaps.mapping.layers.SublayerSourceType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceType.MapSublayerSource>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SublayerSourceType.MapSublayerSource;
					}
					export class RasterSublayerSource extends com.arcgismaps.mapping.layers.SublayerSourceType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceType.RasterSublayerSource>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SublayerSourceType.RasterSublayerSource;
					}
					export class TableJoinSublayerSource extends com.arcgismaps.mapping.layers.SublayerSourceType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceType.TableJoinSublayerSource>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SublayerSourceType.TableJoinSublayerSource;
					}
					export class TableQuerySublayerSource extends com.arcgismaps.mapping.layers.SublayerSourceType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceType.TableQuerySublayerSource>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SublayerSourceType.TableQuerySublayerSource;
					}
					export class TableSublayerSource extends com.arcgismaps.mapping.layers.SublayerSourceType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceType.TableSublayerSource>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SublayerSourceType.TableSublayerSource;
					}
					export class Unknown extends com.arcgismaps.mapping.layers.SublayerSourceType {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SublayerSourceType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SublayerSourceType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class SubtypeFeatureLayer extends com.arcgismaps.mapping.layers.FeatureLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.SubtypeFeatureLayer>;
					public isPopupEnabled(): boolean;
					public constructor(param0: com.arcgismaps.data.ArcGISFeatureTable);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getTimeInterval(): com.arcgismaps.mapping.TimeValue;
					public setPopupEnabled(param0: boolean): void;
					public setTimeFilteringEnabled(param0: boolean): void;
					public isVisibleAtScale(param0: number): boolean;
					public getSupportsTimeFiltering(): boolean;
					public setVisible(param0: boolean): void;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getSublayerWithSubtypeName(param0: string): com.arcgismaps.mapping.layers.SubtypeSublayer;
					public setRefreshInterval(param0: java.lang.Long): void;
					public getCanChangeVisibility(): boolean;
					public setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
					public clone(): com.arcgismaps.mapping.layers.FeatureLayer;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public getRefreshInterval(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public getFloorDefinition(): com.arcgismaps.mapping.floor.LayerFloorDefinition;
					public setFloorDefinition(param0: com.arcgismaps.mapping.floor.LayerFloorDefinition): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public getTimeOffset(): com.arcgismaps.mapping.TimeValue;
					public isTimeFilteringEnabled(): boolean;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSubtypeFeatureLayer, param1: boolean);
					public clone(): com.arcgismaps.mapping.layers.SubtypeFeatureLayer;
					public getSubtypeSublayers(): java.util.List<com.arcgismaps.mapping.layers.SubtypeSublayer>;
					public getShowInLegend(): boolean;
					public isVisible(): boolean;
					public getName(): string;
					public getCoreSubtypeFeatureLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSubtypeFeatureLayer;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
					public constructor(param0: com.arcgismaps.mapping.Item, param1: number);
					public getSublayerWithSubtypeCode(param0: any): com.arcgismaps.mapping.layers.SubtypeSublayer;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
				}
				export module SubtypeFeatureLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreSubtypeFeatureLayer,com.arcgismaps.mapping.layers.SubtypeFeatureLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SubtypeFeatureLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SubtypeFeatureLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class SubtypeSublayer extends com.arcgismaps.mapping.layers.ArcGISSublayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.SubtypeSublayer>;
					public isPopupEnabled(): boolean;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setOpacity(param0: number): void;
					public getCoreSubtypeSublayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSubtypeSublayer;
					public getRenderer(): com.arcgismaps.mapping.symbology.Renderer;
					public getUnknownJson(): java.util.Map<string,any>;
					public setPopupEnabled(param0: boolean): void;
					public getFeatureTemplates(): java.util.List<com.arcgismaps.data.FeatureTemplate>;
					public isVisibleAtScale(param0: number): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSubtypeSublayer, param1: boolean);
					public setVisible(param0: boolean): void;
					public clone(): com.arcgismaps.mapping.layers.SubtypeSublayer;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public clone(): com.arcgismaps.mapping.layers.ArcGISSublayer;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public getOpacity(): number;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public getMinScale(): java.lang.Double;
					public setMinScale(param0: java.lang.Double): void;
					public getLabelsEnabled(): boolean;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public setRenderer(param0: com.arcgismaps.mapping.symbology.Renderer): void;
					public getMaxScale(): java.lang.Double;
					public getLabelDefinitions(): java.util.List<com.arcgismaps.mapping.labeling.LabelDefinition>;
					public setMaxScale(param0: java.lang.Double): void;
					public getUnsupportedJson(): java.util.Map<string,any>;
					public getShowInLegend(): boolean;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public setLabelsEnabled(param0: boolean): void;
					public getSubtype(): com.arcgismaps.data.FeatureSubtype;
					public "load-IoAF18A"(param0: any): any;
				}
				export module SubtypeSublayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreSubtypeSublayer,com.arcgismaps.mapping.layers.SubtypeSublayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.SubtypeSublayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.SubtypeSublayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class TableJoinSublayerSource extends com.arcgismaps.mapping.layers.SublayerSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.TableJoinSublayerSource>;
					public getFields$arcgis_maps_any_release(): java.util.List<com.arcgismaps.data.Field>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTableJoinSublayerSource);
					public getRightSublayerSource(): com.arcgismaps.mapping.layers.SublayerSource;
					public getLeftFieldName(): string;
					public constructor(param0: string, param1: com.arcgismaps.mapping.layers.SublayerSource, param2: string, param3: com.arcgismaps.mapping.layers.SublayerSource, param4: com.arcgismaps.mapping.layers.JoinType);
					public getRightFieldName(): string;
					public getCoreTableJoinSublayerSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTableJoinSublayerSource;
					public getJoinType(): com.arcgismaps.mapping.layers.JoinType;
					public getLeftSublayerSource(): com.arcgismaps.mapping.layers.SublayerSource;
				}
				export module TableJoinSublayerSource {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTableJoinSublayerSource,com.arcgismaps.mapping.layers.TableJoinSublayerSource> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TableJoinSublayerSource.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TableJoinSublayerSource.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class TableQuerySublayerSource extends com.arcgismaps.mapping.layers.SublayerSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.TableQuerySublayerSource>;
					public getGeometryType(): com.arcgismaps.geometry.GeometryType;
					public constructor(param0: string, param1: string, param2: java.lang.Iterable<string>);
					public getCoreTableQuerySublayerSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTableQuerySublayerSource;
					public getWorkspaceId(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTableQuerySublayerSource);
					public setSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
					public setGeometryType(param0: com.arcgismaps.geometry.GeometryType): void;
					public getFields$arcgis_maps_any_release(): java.util.List<com.arcgismaps.data.Field>;
					public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getSqlQuery(): string;
					public getObjectIdFieldNames(): java.util.List<string>;
				}
				export module TableQuerySublayerSource {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTableQuerySublayerSource,com.arcgismaps.mapping.layers.TableQuerySublayerSource> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TableQuerySublayerSource.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TableQuerySublayerSource.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class TableSublayerSource extends com.arcgismaps.mapping.layers.SublayerSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.TableSublayerSource>;
					public constructor(param0: string, param1: string);
					public getDataSourceName(): string;
					public getWorkspaceId(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTableSublayerSource);
					public getFields$arcgis_maps_any_release(): java.util.List<com.arcgismaps.data.Field>;
					public setGeodatabaseVersion(param0: string): void;
					public getGeodatabaseVersion(): string;
					public getCoreTableSublayerSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTableSublayerSource;
				}
				export module TableSublayerSource {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTableSublayerSource,com.arcgismaps.mapping.layers.TableSublayerSource> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TableSublayerSource.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TableSublayerSource.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class TileCache extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileCache>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public getAntialiasing(): boolean;
					public cancelLoad(): void;
					public getCoreTileCache$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTileCache;
					public getTileData(param0: com.arcgismaps.arcgisservices.TileKey): androidNative.Array<number>;
					public clone(): com.arcgismaps.mapping.layers.TileCache;
					public getFullExtent(): com.arcgismaps.geometry.Envelope;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileCache, param1: boolean);
					public getPath(): string;
					public equals(param0: any): boolean;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getCacheStorageFormat(): com.arcgismaps.arcgisservices.CacheStorageFormat;
					public getThumbnail(): globalAndroid.graphics.drawable.BitmapDrawable;
					public "load-IoAF18A"(param0: any): any;
					public hashCode(): number;
					public getTileInfo(): com.arcgismaps.mapping.layers.TileInfo;
				}
				export module TileCache {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreTileCache,com.arcgismaps.mapping.layers.TileCache> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileCache.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileCache.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class TileImageFormat {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat>;
					public getCoreTileImageFormat$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTileImageFormat;
				}
				export module TileImageFormat {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileImageFormat.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreTileImageFormat): com.arcgismaps.mapping.layers.TileImageFormat;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Factory.WhenMappings>;
						}
					}
					export class Jpg extends com.arcgismaps.mapping.layers.TileImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Jpg>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileImageFormat.Jpg;
					}
					export class Lerc extends com.arcgismaps.mapping.layers.TileImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Lerc>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileImageFormat.Lerc;
					}
					export class Mixed extends com.arcgismaps.mapping.layers.TileImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Mixed>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileImageFormat.Mixed;
					}
					export class Png extends com.arcgismaps.mapping.layers.TileImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Png>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileImageFormat.Png;
					}
					export class Png24 extends com.arcgismaps.mapping.layers.TileImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Png24>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileImageFormat.Png24;
					}
					export class Png32 extends com.arcgismaps.mapping.layers.TileImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Png32>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileImageFormat.Png32;
					}
					export class Png8 extends com.arcgismaps.mapping.layers.TileImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Png8>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileImageFormat.Png8;
					}
					export class Unknown extends com.arcgismaps.mapping.layers.TileImageFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileImageFormat.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileImageFormat.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class TileInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileInfo>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTileInfo);
					public getCompressionQuality(): number;
					public getLevelsOfDetail(): java.util.List<com.arcgismaps.arcgisservices.LevelOfDetail>;
					public getOrigin(): com.arcgismaps.geometry.Point;
					public getCoreTileInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTileInfo;
					public getDpi(): number;
					public getFormat(): com.arcgismaps.mapping.layers.TileImageFormat;
					public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public constructor(param0: number, param1: com.arcgismaps.mapping.layers.TileImageFormat, param2: java.lang.Iterable<com.arcgismaps.arcgisservices.LevelOfDetail>, param3: com.arcgismaps.geometry.Point, param4: com.arcgismaps.geometry.SpatialReference, param5: number, param6: number);
					public getTileHeight(): number;
					public getTileWidth(): number;
				}
				export module TileInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTileInfo,com.arcgismaps.mapping.layers.TileInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TileInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TileInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class TrackDisplayProperties {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.TrackDisplayProperties>;
					public getShowTrackLine(): boolean;
					public getPreviousObservationRenderer(): com.arcgismaps.mapping.symbology.Renderer;
					public setMaximumDuration(param0: number): void;
					public setShowTrackLine(param0: boolean): void;
					public getMaximumDuration(): number;
					public getShowPreviousObservations(): boolean;
					public setShowPreviousObservations(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTrackDisplayProperties);
					public setTrackLineRenderer(param0: com.arcgismaps.mapping.symbology.Renderer): void;
					public getMaximumObservations(): number;
					public setPreviousObservationRenderer(param0: com.arcgismaps.mapping.symbology.Renderer): void;
					public getTrackLineRenderer(): com.arcgismaps.mapping.symbology.Renderer;
					public getCoreTrackDisplayProperties$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTrackDisplayProperties;
					public setMaximumObservations(param0: number): void;
				}
				export module TrackDisplayProperties {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTrackDisplayProperties,com.arcgismaps.mapping.layers.TrackDisplayProperties> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.TrackDisplayProperties.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.TrackDisplayProperties.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class UnknownLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.UnknownLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public getCoreUnknownLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnknownLayer;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUnknownLayer, param1: boolean);
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public clone(): com.arcgismaps.mapping.layers.UnknownLayer;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
				}
				export module UnknownLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUnknownLayer,com.arcgismaps.mapping.layers.UnknownLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.UnknownLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.UnknownLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class UnsupportedLayer extends com.arcgismaps.mapping.layers.Layer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.UnsupportedLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public clone(): com.arcgismaps.mapping.layers.UnsupportedLayer;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUnsupportedLayer, param1: boolean);
					public getCoreUnsupportedLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnsupportedLayer;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
				}
				export module UnsupportedLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUnsupportedLayer,com.arcgismaps.mapping.layers.UnsupportedLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.UnsupportedLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.UnsupportedLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class WebTiledLayer extends com.arcgismaps.mapping.layers.ServiceImageTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WebTiledLayer>;
					public clone(): com.arcgismaps.mapping.layers.WebTiledLayer;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public setShowInLegend(param0: boolean): void;
					public getSubDomains(): java.util.List<string>;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public getShowInLegend(): boolean;
					public clone(): com.arcgismaps.mapping.layers.ImageTiledLayer;
					public isVisibleAtScale(param0: number): boolean;
					public clone(): com.arcgismaps.mapping.layers.ServiceImageTiledLayer;
					public setVisible(param0: boolean): void;
					public getCoreWebTiledLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWebTiledLayer;
					public getUrlTemplate(): string;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public getCanChangeVisibility(): boolean;
					public "load-IoAF18A"(param0: any): any;
				}
				export module WebTiledLayer {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WebTiledLayer.Companion>;
						public create(param0: string, param1: java.util.List<string>, param2: com.arcgismaps.mapping.layers.TileInfo, param3: com.arcgismaps.geometry.Envelope): com.arcgismaps.mapping.layers.WebTiledLayer;
					}
					export class Factory extends com.arcgismaps.mapping.layers.WebTiledLayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WebTiledLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WebTiledLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WebTiledLayerFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreWebTiledLayer,com.arcgismaps.mapping.layers.WebTiledLayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WebTiledLayerFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreWebTiledLayer): com.arcgismaps.mapping.layers.WebTiledLayer;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module WebTiledLayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WebTiledLayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WfsLayerInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WfsLayerInfo>;
					public getTitle(): string;
					public getSpatialReferences(): java.util.List<com.arcgismaps.geometry.SpatialReference>;
					public getCoreWfsLayerInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWFSLayerInfo;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWFSLayerInfo, param1: boolean);
					public getName(): string;
					public getKeywords(): java.util.List<string>;
					public getExtent(): com.arcgismaps.geometry.Envelope;
					public getDescription(): string;
				}
				export module WfsLayerInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreWFSLayerInfo,com.arcgismaps.mapping.layers.WfsLayerInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WfsLayerInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WfsLayerInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WfsService extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WfsService>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getUrl(): string;
					public constructor(param0: string);
					public getCustomParameters(): java.util.Map<string,string>;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getCoreWfsService$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWFSService;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWFSService);
					public "load-IoAF18A"(param0: any): any;
					public getServiceInfo(): com.arcgismaps.mapping.layers.WfsServiceInfo;
				}
				export module WfsService {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWFSService,com.arcgismaps.mapping.layers.WfsService> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WfsService.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WfsService.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WfsServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WfsServiceInfo>;
					public getLayerInfos(): java.util.List<com.arcgismaps.mapping.layers.WfsLayerInfo>;
					public getTitle(): string;
					public getCoreWfsServiceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWFSServiceInfo;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWFSServiceInfo);
					public getKeywords(): java.util.List<string>;
					public getDescription(): string;
				}
				export module WfsServiceInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWFSServiceInfo,com.arcgismaps.mapping.layers.WfsServiceInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WfsServiceInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WfsServiceInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmsFeature extends com.arcgismaps.mapping.GeoElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsFeature>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMSFeature);
					public getAttributeValue$arcgis_maps_any_release(param0: string): com.arcgismaps.internal.jni.CoreElement;
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public getCoreWmsFeature$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMSFeature;
					public getAttributes(): java.util.Map<string,any>;
				}
				export module WmsFeature {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWMSFeature,com.arcgismaps.mapping.layers.WmsFeature> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsFeature.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsFeature.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmsLayer extends com.arcgismaps.mapping.layers.ImageAdjustmentLayer implements com.arcgismaps.mapping.layers.Refreshable, com.arcgismaps.arcgisservices.TimeAware {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsLayer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMSLayer, param1: boolean);
					public getLayerNames(): java.util.List<string>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getSublayers(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public getTimeInterval(): com.arcgismaps.mapping.TimeValue;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public setTimeFilteringEnabled(param0: boolean): void;
					public getVersion(): com.arcgismaps.mapping.layers.WmsVersion;
					public getSupportsTimeFiltering(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public getLayerInfos(): java.util.List<com.arcgismaps.mapping.layers.WmsLayerInfo>;
					public constructor(param0: java.lang.Iterable<com.arcgismaps.mapping.layers.WmsLayerInfo>);
					public setVisible(param0: boolean): void;
					public getUrl(): string;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public setRefreshInterval(param0: java.lang.Long): void;
					public getCanChangeVisibility(): boolean;
					public setTimeOffset(param0: com.arcgismaps.mapping.TimeValue): void;
					public getRefreshInterval(): java.lang.Long;
					public setShowInLegend(param0: boolean): void;
					public setPreferredImageFormat(param0: com.arcgismaps.mapping.layers.MapServiceImageFormat): void;
					public getCustomParameters(): java.util.Map<string,string>;
					public clone(): com.arcgismaps.mapping.layers.WmsLayer;
					public getTimeOffset(): com.arcgismaps.mapping.TimeValue;
					public constructor(param0: string, param1: java.lang.Iterable<string>);
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public isTimeFilteringEnabled(): boolean;
					public cancelLoad(): void;
					public getPreferredImageFormat(): com.arcgismaps.mapping.layers.MapServiceImageFormat;
					public getCoreWmsLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMSLayer;
					public getShowInLegend(): boolean;
					public constructor(param0: com.arcgismaps.mapping.Item);
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getFullTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
				}
				export module WmsLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreWMSLayer,com.arcgismaps.mapping.layers.WmsLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmsLayerInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsLayerInfo>;
					public getTitle(): string;
					public getKeywords(): java.util.List<string>;
					public getFixedImageWidth(): number;
					public getQueryable(): boolean;
					public getSpatialReferences(): java.util.List<com.arcgismaps.geometry.SpatialReference>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMSLayerInfo, param1: boolean);
					public getName(): string;
					public getOpaque(): boolean;
					public getFixedImageHeight(): number;
					public getExtent(): com.arcgismaps.geometry.Envelope;
					public getStyles(): java.util.List<string>;
					public getDescription(): string;
					public getSublayerInfos(): java.util.List<com.arcgismaps.mapping.layers.WmsLayerInfo>;
					public getCoreWmsLayerInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMSLayerInfo;
				}
				export module WmsLayerInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreWMSLayerInfo,com.arcgismaps.mapping.layers.WmsLayerInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsLayerInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsLayerInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmsService extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsService>;
					public getVersion(): com.arcgismaps.mapping.layers.WmsVersion;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getUrl(): string;
					public constructor(param0: string);
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMSService);
					public getCustomParameters(): java.util.Map<string,string>;
					public "retryLoad-IoAF18A"(param0: any): any;
					public cancelLoad(): void;
					public getServiceInfo(): com.arcgismaps.mapping.layers.WmsServiceInfo;
					public "load-IoAF18A"(param0: any): any;
					public getCoreWmsService$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMSService;
				}
				export module WmsService {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWMSService,com.arcgismaps.mapping.layers.WmsService> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsService.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsService.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmsServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsServiceInfo>;
					public getTitle(): string;
					public getLayerInfos(): java.util.List<com.arcgismaps.mapping.layers.WmsLayerInfo>;
					public getName(): string;
					public getKeywords(): java.util.List<string>;
					public getCoreWmsServiceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMSServiceInfo;
					public getDescription(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMSServiceInfo);
					public getImageFormats(): java.util.List<com.arcgismaps.mapping.layers.MapServiceImageFormat>;
				}
				export module WmsServiceInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWMSServiceInfo,com.arcgismaps.mapping.layers.WmsServiceInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsServiceInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsServiceInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmsSublayer extends com.arcgismaps.mapping.layers.LayerContent {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsSublayer>;
					public setShowInLegend(param0: boolean): void;
					public getCurrentStyle(): string;
					public getCoreWmsSublayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMSSublayer;
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public getShowInLegend(): boolean;
					public isVisibleAtScale(param0: number): boolean;
					public getSublayerInfo(): com.arcgismaps.mapping.layers.WmsLayerInfo;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMSSublayer, param1: boolean);
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getName(): string;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public setCurrentStyle(param0: string): void;
					public getCanChangeVisibility(): boolean;
					public clone(): com.arcgismaps.mapping.layers.WmsSublayer;
				}
				export module WmsSublayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreWMSSublayer,com.arcgismaps.mapping.layers.WmsSublayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsSublayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsSublayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export abstract class WmsVersion {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsVersion>;
					public getCoreWmsVersion$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMSVersion;
				}
				export module WmsVersion {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsVersion.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsVersion.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreWMSVersion): com.arcgismaps.mapping.layers.WmsVersion;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsVersion.Factory.WhenMappings>;
						}
					}
					export class V1_1_0 extends com.arcgismaps.mapping.layers.WmsVersion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsVersion.V1_1_0>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsVersion.V1_1_0;
					}
					export class V1_1_1 extends com.arcgismaps.mapping.layers.WmsVersion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsVersion.V1_1_1>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsVersion.V1_1_1;
					}
					export class V1_3_0 extends com.arcgismaps.mapping.layers.WmsVersion {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmsVersion.V1_3_0>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmsVersion.V1_3_0;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmtsLayer extends com.arcgismaps.mapping.layers.ImageTiledLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsLayer>;
					public getCoreWmtsLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMTSLayer;
					public getLayerId(): string;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getTileMatrixSet(): com.arcgismaps.mapping.layers.WmtsTileMatrixSet;
					public clone(): com.arcgismaps.mapping.layers.ImageAdjustmentLayer;
					public getTileMatrixSetId(): string;
					public clone(): com.arcgismaps.mapping.layers.ImageTiledLayer;
					public isVisibleAtScale(param0: number): boolean;
					public setVisible(param0: boolean): void;
					public getUrl(): string;
					public "fetchLegendInfos-IoAF18A"(param0: any): any;
					public getCanChangeVisibility(): boolean;
					public constructor(param0: string, param1: string, param2: string, param3: com.arcgismaps.mapping.layers.TileImageFormat);
					public getLayerInfo(): com.arcgismaps.mapping.layers.WmtsLayerInfo;
					public setShowInLegend(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSLayer, param1: boolean);
					public getCustomParameters(): java.util.Map<string,string>;
					public constructor(param0: com.arcgismaps.mapping.layers.WmtsLayerInfo, param1: com.arcgismaps.mapping.layers.WmtsTileMatrixSet, param2: com.arcgismaps.mapping.layers.TileImageFormat);
					public getSubLayerContents(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.layers.LayerContent>>;
					public cancelLoad(): void;
					public getPreferredImageFormat(): com.arcgismaps.mapping.layers.TileImageFormat;
					public getShowInLegend(): boolean;
					public clone(): com.arcgismaps.mapping.layers.WmtsLayer;
					public isVisible(): boolean;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.layers.Layer;
					public "load-IoAF18A"(param0: any): any;
				}
				export module WmtsLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreWMTSLayer,com.arcgismaps.mapping.layers.WmtsLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmtsLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmtsLayerInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsLayerInfo>;
					public getTitle(): string;
					public getCoreWmtsLayerInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMTSLayerInfo;
					public getImageFormats(): java.util.List<com.arcgismaps.mapping.layers.TileImageFormat>;
					public getTileMatrixSets(): java.util.List<com.arcgismaps.mapping.layers.WmtsTileMatrixSet>;
					public getId(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSLayerInfo);
					public getKeywords(): java.util.List<string>;
					public getStyles(): java.util.List<string>;
					public getDescription(): string;
				}
				export module WmtsLayerInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWMTSLayerInfo,com.arcgismaps.mapping.layers.WmtsLayerInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsLayerInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmtsLayerInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmtsService extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsService>;
					public getCoreWmtsService$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMTSService;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getUrl(): string;
					public constructor(param0: string);
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSService);
					public getCustomParameters(): java.util.Map<string,string>;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getServiceInfo(): com.arcgismaps.mapping.layers.WmtsServiceInfo;
					public cancelLoad(): void;
					public "load-IoAF18A"(param0: any): any;
				}
				export module WmtsService {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWMTSService,com.arcgismaps.mapping.layers.WmtsService> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsService.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmtsService.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmtsServiceInfo {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsServiceInfo>;
					public getTitle(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSServiceInfo);
					public getTileMatrixSets(): java.util.List<com.arcgismaps.mapping.layers.WmtsTileMatrixSet>;
					public getVersion(): string;
					public getLayerInfos(): java.util.List<com.arcgismaps.mapping.layers.WmtsLayerInfo>;
					public getCoreWmtsServiceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMTSServiceInfo;
					public getKeywords(): java.util.List<string>;
					public getDescription(): string;
				}
				export module WmtsServiceInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWMTSServiceInfo,com.arcgismaps.mapping.layers.WmtsServiceInfo> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsServiceInfo.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmtsServiceInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmtsTileMatrix {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsTileMatrix>;
					public getId(): string;
					public getScaleDenominator(): number;
					public getCoreWmtsTileMatrix$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMTSTileMatrix;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSTileMatrix);
				}
				export module WmtsTileMatrix {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWMTSTileMatrix,com.arcgismaps.mapping.layers.WmtsTileMatrix> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsTileMatrix.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmtsTileMatrix.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export class WmtsTileMatrixSet {
					public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsTileMatrixSet>;
					public getTitle(): string;
					public getId(): string;
					public getCoreWmtsTileMatrixSet$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet;
					public getKeywords(): java.util.List<string>;
					public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getTileMatrices(): java.util.List<com.arcgismaps.mapping.layers.WmtsTileMatrix>;
					public getExtent(): com.arcgismaps.geometry.Envelope;
					public getDescription(): string;
					public getWellKnownScaleSetId(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet);
				}
				export module WmtsTileMatrixSet {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreWMTSTileMatrixSet,com.arcgismaps.mapping.layers.WmtsTileMatrixSet> {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.WmtsTileMatrixSet.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.layers.WmtsTileMatrixSet.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export module vectortiles {
					export class VectorTileCache extends com.arcgismaps.Loadable {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.vectortiles.VectorTileCache>;
						public getSourceInfo(): com.arcgismaps.mapping.layers.vectortiles.VectorTileSourceInfo;
						public cancelLoad(): void;
						public constructor(param0: com.arcgismaps.internal.jni.CoreVectorTileCache, param1: boolean);
						public "retryLoad-IoAF18A"(param0: any): any;
						public getPath(): string;
						public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
						public getThumbnail(): globalAndroid.graphics.drawable.BitmapDrawable;
						public getCoreVectorTileCache$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVectorTileCache;
						public "load-IoAF18A"(param0: any): any;
						public constructor(param0: string);
					}
					export module VectorTileCache {
						export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreVectorTileCache,com.arcgismaps.mapping.layers.vectortiles.VectorTileCache> {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.vectortiles.VectorTileCache.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.layers.vectortiles.VectorTileCache.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export module vectortiles {
					export class VectorTileSourceInfo {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.vectortiles.VectorTileSourceInfo>;
						public getDefaultStyle(): com.arcgismaps.mapping.layers.vectortiles.VectorTileStyle;
						public getVersion(): string;
						public getMaxExportTilesCount(): number;
						public getMinScale(): java.lang.Double;
						public getName(): string;
						public getDefaultStyleUri(): string;
						public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
						public getFullExtent(): com.arcgismaps.geometry.Envelope;
						public getLevelsOfDetail(): java.util.List<com.arcgismaps.arcgisservices.LevelOfDetail>;
						public getUri(): string;
						public getExportTilesAllowed(): boolean;
						public getOrigin(): com.arcgismaps.geometry.Point;
						public getCoreVectorTileSourceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVectorTileSourceInfo;
						public getInitialExtent(): com.arcgismaps.geometry.Envelope;
						public getMaxScale(): java.lang.Double;
						public constructor(param0: com.arcgismaps.internal.jni.CoreVectorTileSourceInfo);
					}
					export module VectorTileSourceInfo {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreVectorTileSourceInfo,com.arcgismaps.mapping.layers.vectortiles.VectorTileSourceInfo> {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.vectortiles.VectorTileSourceInfo.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.layers.vectortiles.VectorTileSourceInfo.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module layers {
				export module vectortiles {
					export class VectorTileStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.layers.vectortiles.VectorTileStyle>;
						public getVersion(): string;
						public getSourceUri(): string;
						public constructor(param0: com.arcgismaps.internal.jni.CoreVectorTileStyle);
						public getCoreVectorTileStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVectorTileStyle;
					}
					export module VectorTileStyle {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreVectorTileStyle,com.arcgismaps.mapping.layers.vectortiles.VectorTileStyle> {
							public static class: java.lang.Class<com.arcgismaps.mapping.layers.vectortiles.VectorTileStyle.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.layers.vectortiles.VectorTileStyle.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class AttachmentsPopupElement extends com.arcgismaps.mapping.popup.PopupElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.AttachmentsPopupElement>;
					public getTitle(): string;
					public toJson(): string;
					public setDescription(param0: string): void;
					public setTitle(param0: string): void;
					public "fetchAttachments-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreAttachmentsPopupElement);
					public constructor(param0: com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType);
					public getDescription(): string;
					public setDisplayType(param0: com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType): void;
					public getCoreAttachmentsPopupElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAttachmentsPopupElement;
					public getAttachments(): java.util.List<com.arcgismaps.mapping.popup.PopupAttachment>;
					public getDisplayType(): com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType;
				}
				export module AttachmentsPopupElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreAttachmentsPopupElement,com.arcgismaps.mapping.popup.AttachmentsPopupElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.AttachmentsPopupElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.AttachmentsPopupElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class ExpressionPopupElement extends com.arcgismaps.mapping.popup.PopupElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.ExpressionPopupElement>;
					public constructor(param0: com.arcgismaps.mapping.popup.PopupExpression);
					public toJson(): string;
					public getPopupExpression(): com.arcgismaps.mapping.popup.PopupExpression;
					public getCoreExpressionPopupElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExpressionPopupElement;
					public constructor(param0: com.arcgismaps.internal.jni.CoreExpressionPopupElement);
					public setPopupExpression(param0: com.arcgismaps.mapping.popup.PopupExpression): void;
				}
				export module ExpressionPopupElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreExpressionPopupElement,com.arcgismaps.mapping.popup.ExpressionPopupElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.ExpressionPopupElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.ExpressionPopupElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class FieldsPopupElement extends com.arcgismaps.mapping.popup.PopupElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.FieldsPopupElement>;
					public getTitle(): string;
					public getFields(): java.util.List<com.arcgismaps.mapping.popup.PopupField>;
					public toJson(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFieldsPopupElement);
					public getCoreFieldsPopupElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFieldsPopupElement;
					public setDescription(param0: string): void;
					public setTitle(param0: string): void;
					public getDescription(): string;
					public getLabels(): java.util.List<string>;
					public constructor(param0: java.lang.Iterable<com.arcgismaps.mapping.popup.PopupField>);
					public getFormattedValues(): java.util.List<string>;
				}
				export module FieldsPopupElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFieldsPopupElement,com.arcgismaps.mapping.popup.FieldsPopupElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.FieldsPopupElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.FieldsPopupElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class MediaPopupElement extends com.arcgismaps.mapping.popup.PopupElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.MediaPopupElement>;
					public getTitle(): string;
					public toJson(): string;
					public setDescription(param0: string): void;
					public getCoreMediaPopupElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMediaPopupElement;
					public setTitle(param0: string): void;
					public getMedia(): java.util.List<com.arcgismaps.mapping.popup.PopupMedia>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMediaPopupElement);
					public constructor(param0: java.lang.Iterable<com.arcgismaps.mapping.popup.PopupMedia>);
					public getDescription(): string;
				}
				export module MediaPopupElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMediaPopupElement,com.arcgismaps.mapping.popup.MediaPopupElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.MediaPopupElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.MediaPopupElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class Popup {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.Popup>;
					public getTitle(): string;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopup);
					public getFieldValue$arcgis_maps_any_release(param0: string, param1: com.arcgismaps.mapping.popup.PopupElement): any;
					public "evaluateExpressions-IoAF18A"(param0: any): any;
					public getFieldValue$arcgis_maps_any_release(param0: com.arcgismaps.mapping.popup.PopupField): any;
					public getEvaluatedElements(): java.util.List<com.arcgismaps.mapping.popup.PopupElement>;
					public getSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public getGeoElement(): com.arcgismaps.mapping.GeoElement;
					public substitute$arcgis_maps_any_release(param0: string): string;
					public getCorePopup$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopup;
					public constructor(param0: com.arcgismaps.mapping.GeoElement, param1: com.arcgismaps.mapping.popup.PopupDefinition);
					public getFormattedValue(param0: com.arcgismaps.mapping.popup.PopupField): string;
				}
				export module Popup {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.Popup.Companion>;
						public fromGeoElement$arcgis_maps_any_release(param0: com.arcgismaps.mapping.GeoElement): com.arcgismaps.mapping.popup.Popup;
						public toDateTimeFormat$arcgis_maps_any_release(param0: com.arcgismaps.mapping.popup.PopupDateFormat): com.arcgismaps.DateTimeFormat;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePopup,com.arcgismaps.mapping.popup.Popup> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.Popup.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.Popup.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupAttachment extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachment>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getCorePopupAttachment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupAttachment;
					public cancelLoad(): void;
					public getContentType(): string;
					public getSize(): number;
					public getFilePath(): string;
					public getAttachment(): com.arcgismaps.data.Attachment;
					public "createThumbnail-0E7RQCE"(param0: number, param1: number, param2: any): any;
					public "createFullImage-IoAF18A"(param0: any): any;
					public getName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getType(): com.arcgismaps.mapping.popup.PopupAttachmentType;
					public "load-IoAF18A"(param0: any): any;
					public isLocal(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupAttachment, param1: boolean);
				}
				export module PopupAttachment {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CorePopupAttachment,com.arcgismaps.mapping.popup.PopupAttachment> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachment.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachment.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export abstract class PopupAttachmentType {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentType>;
					public getCorePopupAttachmentType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupAttachmentType;
				}
				export module PopupAttachmentType {
					export class Document extends com.arcgismaps.mapping.popup.PopupAttachmentType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentType.Document>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachmentType.Document;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachmentType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePopupAttachmentType): com.arcgismaps.mapping.popup.PopupAttachmentType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentType.Factory.WhenMappings>;
						}
					}
					export class Image extends com.arcgismaps.mapping.popup.PopupAttachmentType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentType.Image>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachmentType.Image;
					}
					export class Other extends com.arcgismaps.mapping.popup.PopupAttachmentType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentType.Other>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachmentType.Other;
					}
					export class Video extends com.arcgismaps.mapping.popup.PopupAttachmentType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentType.Video>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachmentType.Video;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export abstract class PopupAttachmentsDisplayType {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType>;
					public getCorePopupAttachmentsDisplayType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType;
				}
				export module PopupAttachmentsDisplayType {
					export class Auto extends com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType.Auto>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType.Auto;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePopupAttachmentsDisplayType): com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType.Factory.WhenMappings>;
						}
					}
					export class List extends com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType.List>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType.List;
					}
					export class Preview extends com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType.Preview>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupAttachmentsDisplayType.Preview;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export abstract class PopupDateFormat {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat>;
					public getCorePopupDateFormat$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupDateFormat;
					public getPattern(): string;
					public getFormatter(): java.time.format.DateTimeFormatter;
				}
				export module PopupDateFormat {
					export class DayShortMonthYear extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.DayShortMonthYear>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.DayShortMonthYear;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePopupDateFormat): com.arcgismaps.mapping.popup.PopupDateFormat;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.Factory.WhenMappings>;
						}
					}
					export class LongDate extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.LongDate>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.LongDate;
					}
					export class LongMonthDayYear extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.LongMonthDayYear>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.LongMonthDayYear;
					}
					export class LongMonthYear extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.LongMonthYear>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.LongMonthYear;
					}
					export class ShortDate extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDate>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDate;
					}
					export class ShortDateLe extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLe>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLe;
					}
					export class ShortDateLeLongTime extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLeLongTime>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLeLongTime;
					}
					export class ShortDateLeLongTime24 extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLeLongTime24>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLeLongTime24;
					}
					export class ShortDateLeShortTime extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLeShortTime>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLeShortTime;
					}
					export class ShortDateLeShortTime24 extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLeShortTime24>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLeShortTime24;
					}
					export class ShortDateLongTime extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLongTime>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLongTime;
					}
					export class ShortDateLongTime24 extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLongTime24>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateLongTime24;
					}
					export class ShortDateShortTime extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateShortTime>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateShortTime;
					}
					export class ShortDateShortTime24 extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateShortTime24>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortDateShortTime24;
					}
					export class ShortMonthYear extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.ShortMonthYear>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.ShortMonthYear;
					}
					export class Unknown extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.Unknown;
					}
					export class Year extends com.arcgismaps.mapping.popup.PopupDateFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDateFormat.Year>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDateFormat.Year;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupDefinition {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDefinition>;
					public getTitle(): string;
					public setDescription(param0: string): void;
					public getExpressions(): java.util.List<com.arcgismaps.mapping.popup.PopupExpression>;
					public setTitle(param0: string): void;
					public setAllowEditGeometry(param0: boolean): void;
					public getMedia(): java.util.List<com.arcgismaps.mapping.popup.PopupMedia>;
					public constructor(param0: com.arcgismaps.mapping.popup.PopupSource);
					public setAllowDelete(param0: boolean): void;
					public getRelatedFeaturesDefinition(): com.arcgismaps.mapping.popup.PopupRelatedFeaturesDefinition;
					public getElements(): java.util.List<com.arcgismaps.mapping.popup.PopupElement>;
					public getAllowEditGeometry(): boolean;
					public getFields(): java.util.List<com.arcgismaps.mapping.popup.PopupField>;
					public constructor();
					public getShowAttachments(): boolean;
					public setShowEditSummary(param0: boolean): void;
					public getShowEditSummary(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupDefinition, param1: boolean);
					public setShowAttachments(param0: boolean): void;
					public setAllowEdit(param0: boolean): void;
					public getDescription(): string;
					public setRelatedFeaturesDefinition(param0: com.arcgismaps.mapping.popup.PopupRelatedFeaturesDefinition): void;
					public getCorePopupDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupDefinition;
					public getAllowDelete(): boolean;
					public getAllowEdit(): boolean;
					public constructor(param0: com.arcgismaps.mapping.GeoElement);
				}
				export module PopupDefinition {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDefinition.Companion>;
						public fromGeoElement$arcgis_maps_any_release(param0: com.arcgismaps.mapping.GeoElement): com.arcgismaps.mapping.popup.PopupDefinition;
						public fromPopupSource$arcgis_maps_any_release(param0: com.arcgismaps.mapping.popup.PopupSource): com.arcgismaps.mapping.popup.PopupDefinition;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CorePopupDefinition,com.arcgismaps.mapping.popup.PopupDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export abstract class PopupElement extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElement>;
					public isEvaluated(): boolean;
					public toJson(): string;
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getCorePopupElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupElement;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.popup.PopupElementType;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				}
				export module PopupElement {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElement.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.popup.PopupElement;
					}
					export class Factory extends com.arcgismaps.mapping.popup.PopupElementFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupElementFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CorePopupElement,com.arcgismaps.mapping.popup.PopupElement> {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CorePopupElement): com.arcgismaps.mapping.popup.PopupElement;
					public convertToPublic(param0: any): any;
				}
				export module PopupElementFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export abstract class PopupElementType {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType>;
					public getCorePopupElementType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupElementType;
				}
				export module PopupElementType {
					export class AttachmentsPopupElement extends com.arcgismaps.mapping.popup.PopupElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.AttachmentsPopupElement>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElementType.AttachmentsPopupElement;
					}
					export class ExpressionPopupElement extends com.arcgismaps.mapping.popup.PopupElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.ExpressionPopupElement>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElementType.ExpressionPopupElement;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElementType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePopupElementType): com.arcgismaps.mapping.popup.PopupElementType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.Factory.WhenMappings>;
						}
					}
					export class FieldsPopupElement extends com.arcgismaps.mapping.popup.PopupElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.FieldsPopupElement>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElementType.FieldsPopupElement;
					}
					export class MediaPopupElement extends com.arcgismaps.mapping.popup.PopupElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.MediaPopupElement>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElementType.MediaPopupElement;
					}
					export class RelationshipPopupElement extends com.arcgismaps.mapping.popup.PopupElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.RelationshipPopupElement>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElementType.RelationshipPopupElement;
					}
					export class TextPopupElement extends com.arcgismaps.mapping.popup.PopupElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.TextPopupElement>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElementType.TextPopupElement;
					}
					export class Unknown extends com.arcgismaps.mapping.popup.PopupElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElementType.Unknown;
					}
					export class UnsupportedPopupElement extends com.arcgismaps.mapping.popup.PopupElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupElementType.UnsupportedPopupElement>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupElementType.UnsupportedPopupElement;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupExpression {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpression>;
					public getTitle(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupExpression, param1: boolean);
					public setTitle(param0: string): void;
					public setName(param0: string): void;
					public getCorePopupExpression$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupExpression;
					public equals(param0: any): boolean;
					public getExpression(): string;
					public getName(): string;
					public constructor();
					public getReturnType(): com.arcgismaps.mapping.popup.PopupExpressionReturnType;
					public setReturnType(param0: com.arcgismaps.mapping.popup.PopupExpressionReturnType): void;
					public hashCode(): number;
					public setExpression(param0: string): void;
				}
				export module PopupExpression {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CorePopupExpression,com.arcgismaps.mapping.popup.PopupExpression> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpression.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupExpression.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupExpressionEvaluation {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpressionEvaluation>;
					public getPopupExpression(): com.arcgismaps.mapping.popup.PopupExpression;
					public getResult(): any;
					public getCorePopupExpressionEvaluation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupExpressionEvaluation;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupExpressionEvaluation);
					public getError(): java.lang.Throwable;
				}
				export module PopupExpressionEvaluation {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePopupExpressionEvaluation,com.arcgismaps.mapping.popup.PopupExpressionEvaluation> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpressionEvaluation.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupExpressionEvaluation.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export abstract class PopupExpressionReturnType {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpressionReturnType>;
					public getCorePopupExpressionReturnType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupExpressionReturnType;
				}
				export module PopupExpressionReturnType {
					export class Dictionary extends com.arcgismaps.mapping.popup.PopupExpressionReturnType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpressionReturnType.Dictionary>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupExpressionReturnType.Dictionary;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpressionReturnType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupExpressionReturnType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePopupExpressionReturnType): com.arcgismaps.mapping.popup.PopupExpressionReturnType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpressionReturnType.Factory.WhenMappings>;
						}
					}
					export class Number extends com.arcgismaps.mapping.popup.PopupExpressionReturnType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpressionReturnType.Number>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupExpressionReturnType.Number;
					}
					export class String extends com.arcgismaps.mapping.popup.PopupExpressionReturnType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupExpressionReturnType.String>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupExpressionReturnType.String;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupField {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupField>;
					public getLabel(): string;
					public getStringFieldOption(): com.arcgismaps.mapping.popup.PopupStringFieldOption;
					public setFormat(param0: com.arcgismaps.mapping.popup.PopupFieldFormat): void;
					public setStringFieldOption(param0: com.arcgismaps.mapping.popup.PopupStringFieldOption): void;
					public getCorePopupField$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupField;
					public setLabel(param0: string): void;
					public setFieldName(param0: string): void;
					public setEditable(param0: boolean): void;
					public setTooltip(param0: string): void;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public constructor();
					public getFormat(): com.arcgismaps.mapping.popup.PopupFieldFormat;
					public isEditable(): boolean;
					public getTooltip(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupField);
					public getFieldName(): string;
				}
				export module PopupField {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePopupField,com.arcgismaps.mapping.popup.PopupField> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupField.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupField.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupFieldFormat {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupFieldFormat>;
					public getCorePopupFieldFormat$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupFieldFormat;
					public setDecimalPlaces(param0: number): void;
					public setUseThousandsSeparator(param0: boolean): void;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupFieldFormat);
					public getDecimalPlaces(): number;
					public setDateFormat(param0: com.arcgismaps.mapping.popup.PopupDateFormat): void;
					public getDateFormat(): com.arcgismaps.mapping.popup.PopupDateFormat;
					public getUseThousandsSeparator(): boolean;
				}
				export module PopupFieldFormat {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePopupFieldFormat,com.arcgismaps.mapping.popup.PopupFieldFormat> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupFieldFormat.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupFieldFormat.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupMedia {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMedia>;
					public getTitle(): string;
					public setImageRefreshInterval(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupMedia);
					public setTitle(param0: string): void;
					public getCaption(): string;
					public getImageRefreshInterval(): number;
					public getType(): com.arcgismaps.mapping.popup.PopupMediaType;
					public setValue(param0: com.arcgismaps.mapping.popup.PopupMediaValue): void;
					public setCaption(param0: string): void;
					public getValue(): com.arcgismaps.mapping.popup.PopupMediaValue;
					public constructor();
					public setType(param0: com.arcgismaps.mapping.popup.PopupMediaType): void;
					public getCorePopupMedia$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupMedia;
				}
				export module PopupMedia {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePopupMedia,com.arcgismaps.mapping.popup.PopupMedia> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMedia.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupMedia.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export abstract class PopupMediaType {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaType>;
					public getCorePopupMediaType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupMediaType;
				}
				export module PopupMediaType {
					export class BarChart extends com.arcgismaps.mapping.popup.PopupMediaType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaType.BarChart>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupMediaType.BarChart;
					}
					export class ColumnChart extends com.arcgismaps.mapping.popup.PopupMediaType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaType.ColumnChart>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupMediaType.ColumnChart;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupMediaType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePopupMediaType): com.arcgismaps.mapping.popup.PopupMediaType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaType.Factory.WhenMappings>;
						}
					}
					export class Image extends com.arcgismaps.mapping.popup.PopupMediaType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaType.Image>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupMediaType.Image;
					}
					export class LineChart extends com.arcgismaps.mapping.popup.PopupMediaType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaType.LineChart>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupMediaType.LineChart;
					}
					export class PieChart extends com.arcgismaps.mapping.popup.PopupMediaType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaType.PieChart>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupMediaType.PieChart;
					}
					export class Unknown extends com.arcgismaps.mapping.popup.PopupMediaType {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupMediaType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupMediaValue {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaValue>;
					public setSourceUrl(param0: string): void;
					public getLinkUrl(): string;
					public getCorePopupMediaValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupMediaValue;
					public getData(): java.util.List<any>;
					public getSourceUrl(): string;
					public getNormalizeFieldName(): string;
					public getLabels(): java.util.List<string>;
					public getTooltipFieldName(): string;
					public setTooltipFieldName(param0: string): void;
					public setNormalizeFieldName(param0: string): void;
					public constructor();
					public setLinkUrl(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupMediaValue);
					public getFieldNames(): java.util.List<string>;
				}
				export module PopupMediaValue {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePopupMediaValue,com.arcgismaps.mapping.popup.PopupMediaValue> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupMediaValue.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupMediaValue.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupRelatedFeaturesDefinition {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupRelatedFeaturesDefinition>;
					public constructor();
					public setShowRelatedFeatures(param0: boolean): void;
					public getShowRelatedFeatures(): boolean;
					public getCorePopupRelatedFeaturesDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupRelatedFeaturesDefinition;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupRelatedFeaturesDefinition);
					public getSortOrder(): java.util.List<com.arcgismaps.mapping.popup.PopupRelatedFeaturesSortOrder>;
				}
				export module PopupRelatedFeaturesDefinition {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePopupRelatedFeaturesDefinition,com.arcgismaps.mapping.popup.PopupRelatedFeaturesDefinition> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupRelatedFeaturesDefinition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupRelatedFeaturesDefinition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupRelatedFeaturesSortOrder {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupRelatedFeaturesSortOrder>;
					public setRelationshipId(param0: number): void;
					public getRelationshipId(): number;
					public constructor();
					public getCorePopupRelatedFeaturesSortOrder$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupRelatedFeaturesSortOrder;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupRelatedFeaturesSortOrder);
					public getOrderByField(): com.arcgismaps.data.OrderBy;
					public setOrderByField(param0: com.arcgismaps.data.OrderBy): void;
				}
				export module PopupRelatedFeaturesSortOrder {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePopupRelatedFeaturesSortOrder,com.arcgismaps.mapping.popup.PopupRelatedFeaturesSortOrder> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupRelatedFeaturesSortOrder.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupRelatedFeaturesSortOrder.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupSource>;
					/**
					 * Constructs a new instance of the com.arcgismaps.mapping.popup.PopupSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						isPopupEnabled(): boolean;
						setPopupEnabled(param0: boolean): void;
						getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
						setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					});
					public constructor();
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public isPopupEnabled(): boolean;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public setPopupEnabled(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class PopupSourceImpl extends com.arcgismaps.mapping.popup.PopupSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupSourceImpl>;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public isPopupEnabled(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CorePopupSource);
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public setPopupEnabled(param0: boolean): void;
					public getCorePopupSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupSource;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export module PopupSourceKt {

					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupSourceKt.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export abstract class PopupStringFieldOption {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupStringFieldOption>;
					public getCorePopupStringFieldOption$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePopupStringFieldOption;
				}
				export module PopupStringFieldOption {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupStringFieldOption.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupStringFieldOption.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePopupStringFieldOption): com.arcgismaps.mapping.popup.PopupStringFieldOption;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupStringFieldOption.Factory.WhenMappings>;
						}
					}
					export class MultiLine extends com.arcgismaps.mapping.popup.PopupStringFieldOption {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupStringFieldOption.MultiLine>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupStringFieldOption.MultiLine;
					}
					export class RichText extends com.arcgismaps.mapping.popup.PopupStringFieldOption {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupStringFieldOption.RichText>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupStringFieldOption.RichText;
					}
					export class SingleLine extends com.arcgismaps.mapping.popup.PopupStringFieldOption {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupStringFieldOption.SingleLine>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupStringFieldOption.SingleLine;
					}
					export class Unknown extends com.arcgismaps.mapping.popup.PopupStringFieldOption {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.PopupStringFieldOption.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.popup.PopupStringFieldOption.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class RelationshipPopupElement extends com.arcgismaps.mapping.popup.PopupElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.RelationshipPopupElement>;
					public getTitle(): string;
					public getCoreRelationshipPopupElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRelationshipPopupElement;
					public toJson(): string;
					public setDescription(param0: string): void;
					public getRelationshipId(): number;
					public getDisplayCount(): number;
					public setDisplayCount(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRelationshipPopupElement);
					public setTitle(param0: string): void;
					public getOrderByFields(): java.util.List<com.arcgismaps.data.OrderBy>;
					public getDescription(): string;
					public constructor(param0: number);
				}
				export module RelationshipPopupElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRelationshipPopupElement,com.arcgismaps.mapping.popup.RelationshipPopupElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.RelationshipPopupElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.RelationshipPopupElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class TextPopupElement extends com.arcgismaps.mapping.popup.PopupElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.TextPopupElement>;
					public toJson(): string;
					public setText(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTextPopupElement);
					public getText(): string;
					public constructor(param0: string);
					public getCoreTextPopupElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTextPopupElement;
				}
				export module TextPopupElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTextPopupElement,com.arcgismaps.mapping.popup.TextPopupElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.TextPopupElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.TextPopupElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module popup {
				export class UnsupportedPopupElement extends com.arcgismaps.mapping.popup.PopupElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.popup.UnsupportedPopupElement>;
					public getCoreUnsupportedPopupElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnsupportedPopupElement;
					public toJson(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUnsupportedPopupElement);
				}
				export module UnsupportedPopupElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUnsupportedPopupElement,com.arcgismaps.mapping.popup.UnsupportedPopupElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.popup.UnsupportedPopupElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.popup.UnsupportedPopupElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module reduction {
				export class AggregateField {
					public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateField>;
					public getStatisticExpression(): com.arcgismaps.arcade.ArcadeExpression;
					public setStatisticExpression(param0: com.arcgismaps.arcade.ArcadeExpression): void;
					public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.reduction.AggregateStatisticType);
					public getCoreAggregateField$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAggregateField;
					public getStatisticType(): com.arcgismaps.mapping.reduction.AggregateStatisticType;
					public constructor(param0: com.arcgismaps.internal.jni.CoreAggregateField);
					public setName(param0: string): void;
					public setStatisticType(param0: com.arcgismaps.mapping.reduction.AggregateStatisticType): void;
					public setAlias(param0: string): void;
					public getName(): string;
					public setStatisticFieldName(param0: string): void;
					public constructor(param0: string, param1: com.arcgismaps.arcade.ArcadeExpression, param2: com.arcgismaps.mapping.reduction.AggregateStatisticType);
					public getAlias(): string;
					public getStatisticFieldName(): string;
				}
				export module AggregateField {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreAggregateField,com.arcgismaps.mapping.reduction.AggregateField> {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateField.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateField.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module reduction {
				export class AggregateGeoElement extends com.arcgismaps.mapping.GeoElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateGeoElement>;
					public "getGeoElements-IoAF18A"(param0: any): any;
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public setSelected(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreAggregateGeoElement);
					public getCoreAggregateGeoElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAggregateGeoElement;
					public getAttributes(): java.util.Map<string,any>;
					public isSelected(): boolean;
				}
				export module AggregateGeoElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreAggregateGeoElement,com.arcgismaps.mapping.reduction.AggregateGeoElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateGeoElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateGeoElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module reduction {
				export abstract class AggregateStatisticType {
					public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType>;
					public getCoreAggregateStatisticType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAggregateStatisticType;
				}
				export module AggregateStatisticType {
					export class Average extends com.arcgismaps.mapping.reduction.AggregateStatisticType {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.Average>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateStatisticType.Average;
					}
					export class Count extends com.arcgismaps.mapping.reduction.AggregateStatisticType {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.Count>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateStatisticType.Count;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateStatisticType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAggregateStatisticType): com.arcgismaps.mapping.reduction.AggregateStatisticType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.Factory.WhenMappings>;
						}
					}
					export class Max extends com.arcgismaps.mapping.reduction.AggregateStatisticType {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.Max>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateStatisticType.Max;
					}
					export class Min extends com.arcgismaps.mapping.reduction.AggregateStatisticType {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.Min>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateStatisticType.Min;
					}
					export class Mode extends com.arcgismaps.mapping.reduction.AggregateStatisticType {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.Mode>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateStatisticType.Mode;
					}
					export class StandardDeviation extends com.arcgismaps.mapping.reduction.AggregateStatisticType {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.StandardDeviation>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateStatisticType.StandardDeviation;
					}
					export class Sum extends com.arcgismaps.mapping.reduction.AggregateStatisticType {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.Sum>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateStatisticType.Sum;
					}
					export class Variance extends com.arcgismaps.mapping.reduction.AggregateStatisticType {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregateStatisticType.Variance>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregateStatisticType.Variance;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module reduction {
				export abstract class AggregationFeatureReduction extends com.arcgismaps.mapping.reduction.FeatureReduction implements com.arcgismaps.mapping.popup.PopupSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregationFeatureReduction>;
					public _renderer: com.arcgismaps.mapping.symbology.Renderer;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public isPopupEnabled(): boolean;
					public setMaxScale(param0: number): void;
					public setShowLabels(param0: boolean): void;
					public getRenderer(): com.arcgismaps.mapping.symbology.Renderer;
					public setPopupEnabled(param0: boolean): void;
					public setRenderer(param0: com.arcgismaps.mapping.symbology.Renderer): void;
					public getLabelDefinitions(): java.util.List<com.arcgismaps.mapping.labeling.LabelDefinition>;
					public getMaxScale(): number;
					public set_renderer$arcgis_maps_any_release(param0: com.arcgismaps.mapping.symbology.Renderer): void;
					public getShowLabels(): boolean;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public getAggregateFields(): java.util.List<com.arcgismaps.mapping.reduction.AggregateField>;
					public getCoreAggregationFeatureReduction$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAggregationFeatureReduction;
					public get_renderer$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.Renderer;
				}
				export module AggregationFeatureReduction {
					export class Factory extends com.arcgismaps.mapping.reduction.AggregationFeatureReductionFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregationFeatureReduction.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.AggregationFeatureReduction.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module reduction {
				export class AggregationFeatureReductionFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreAggregationFeatureReduction,com.arcgismaps.mapping.reduction.AggregationFeatureReduction> {
					public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregationFeatureReductionFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAggregationFeatureReduction): com.arcgismaps.mapping.reduction.AggregationFeatureReduction;
					public convertToPublic(param0: any): any;
				}
				export module AggregationFeatureReductionFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.AggregationFeatureReductionFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module reduction {
				export class ClusteringFeatureReduction extends com.arcgismaps.mapping.reduction.AggregationFeatureReduction {
					public static class: java.lang.Class<com.arcgismaps.mapping.reduction.ClusteringFeatureReduction>;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public isPopupEnabled(): boolean;
					public getMinSymbolSize(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreClusteringFeatureReduction);
					public setMaxSymbolSize(param0: number): void;
					public getRadius(): number;
					public setPopupEnabled(param0: boolean): void;
					public getMaxSymbolSize(): number;
					public setMinSymbolSize(param0: number): void;
					public constructor(param0: com.arcgismaps.mapping.symbology.Renderer);
					public getCoreClusteringFeatureReduction$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClusteringFeatureReduction;
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public setRadius(param0: number): void;
				}
				export module ClusteringFeatureReduction {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreClusteringFeatureReduction,com.arcgismaps.mapping.reduction.ClusteringFeatureReduction> {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.ClusteringFeatureReduction.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.ClusteringFeatureReduction.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module reduction {
				export abstract class FeatureReduction {
					public static class: java.lang.Class<com.arcgismaps.mapping.reduction.FeatureReduction>;
					public setEnabled(param0: boolean): void;
					public getCoreFeatureReduction$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureReduction;
					public isEnabled(): boolean;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.reduction.FeatureReductionType;
				}
				export module FeatureReduction {
					export class Factory extends com.arcgismaps.mapping.reduction.FeatureReductionFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.FeatureReduction.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.FeatureReduction.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module reduction {
				export class FeatureReductionFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreFeatureReduction,com.arcgismaps.mapping.reduction.FeatureReduction> {
					public static class: java.lang.Class<com.arcgismaps.mapping.reduction.FeatureReductionFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureReduction): com.arcgismaps.mapping.reduction.FeatureReduction;
					public convertToPublic(param0: any): any;
				}
				export module FeatureReductionFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.FeatureReductionFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module reduction {
				export abstract class FeatureReductionType {
					public static class: java.lang.Class<com.arcgismaps.mapping.reduction.FeatureReductionType>;
					public getCoreFeatureReductionType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFeatureReductionType;
				}
				export module FeatureReductionType {
					export class ClusteringFeatureReduction extends com.arcgismaps.mapping.reduction.FeatureReductionType {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.FeatureReductionType.ClusteringFeatureReduction>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.FeatureReductionType.ClusteringFeatureReduction;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.reduction.FeatureReductionType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.reduction.FeatureReductionType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFeatureReductionType): com.arcgismaps.mapping.reduction.FeatureReductionType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.reduction.FeatureReductionType.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class ClassBreak extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ClassBreak>;
					public getLabel(): string;
					public toJson(): string;
					public setDescription(param0: string): void;
					public setMaxValue(param0: number): void;
					public setMinValue(param0: number): void;
					public setLabel(param0: string): void;
					public getCoreClassBreak$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClassBreak;
					public setSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public constructor(param0: string, param1: string, param2: number, param3: number, param4: com.arcgismaps.mapping.symbology.Symbol, param5: java.lang.Iterable<any>);
					public getSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public equals(param0: any): boolean;
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getMaxValue(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreClassBreak, param1: boolean);
					public getAlternateSymbols(): java.util.List<com.arcgismaps.mapping.symbology.Symbol>;
					public getDescription(): string;
					public hashCode(): number;
					public clone(): com.arcgismaps.mapping.symbology.ClassBreak;
					public getMinValue(): number;
				}
				export module ClassBreak {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ClassBreak.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.symbology.ClassBreak;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreClassBreak,com.arcgismaps.mapping.symbology.ClassBreak> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ClassBreak.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.ClassBreak.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class ClassBreaksRenderer extends com.arcgismaps.mapping.symbology.Renderer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ClassBreaksRenderer>;
					public getDefaultSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public clone(): com.arcgismaps.mapping.symbology.ClassBreaksRenderer;
					public toJson(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreClassBreaksRenderer, param1: boolean);
					public setNormalizationType(param0: com.arcgismaps.mapping.symbology.RendererNormalizationType): void;
					public setMinValue(param0: number): void;
					public getNormalizationType(): com.arcgismaps.mapping.symbology.RendererNormalizationType;
					public setNormalizationField(param0: string): void;
					public getClassBreaks(): java.util.List<com.arcgismaps.mapping.symbology.ClassBreak>;
					public setBackgroundFillSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public setFieldName(param0: string): void;
					public getDefaultLabel(): string;
					public getNormalizationField(): string;
					public clone(): com.arcgismaps.mapping.symbology.Renderer;
					public getCoreClassBreaksRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClassBreaksRenderer;
					public getClassificationMethod(): com.arcgismaps.mapping.symbology.RendererClassificationMethod;
					public constructor(param0: string, param1: java.lang.Iterable<com.arcgismaps.mapping.symbology.ClassBreak>);
					public setDefaultSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public setNormalizationTotal(param0: number): void;
					public getBackgroundFillSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public getNormalizationTotal(): number;
					public setDefaultLabel(param0: string): void;
					public getFieldName(): string;
					public getMinValue(): number;
				}
				export module ClassBreaksRenderer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreClassBreaksRenderer,com.arcgismaps.mapping.symbology.ClassBreaksRenderer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ClassBreaksRenderer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.ClassBreaksRenderer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class CompositeSymbol extends com.arcgismaps.mapping.symbology.Symbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.CompositeSymbol>;
					public clone(): com.arcgismaps.mapping.symbology.CompositeSymbol;
					public toJson(): string;
					public getSymbols(): java.util.List<com.arcgismaps.mapping.symbology.Symbol>;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public constructor(param0: java.lang.Iterable<any>);
					public getCoreCompositeSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCompositeSymbol;
					public constructor(param0: com.arcgismaps.internal.jni.CoreCompositeSymbol, param1: boolean);
				}
				export module CompositeSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreCompositeSymbol,com.arcgismaps.mapping.symbology.CompositeSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.CompositeSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.CompositeSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class DashGeometricEffect extends com.arcgismaps.mapping.symbology.GeometricEffect {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DashGeometricEffect>;
					public clone(): com.arcgismaps.mapping.symbology.GeometricEffect;
					public clone(): com.arcgismaps.mapping.symbology.DashGeometricEffect;
					public getCoreDashGeometricEffect$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDashGeometricEffect;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDashGeometricEffect);
					public getDashTemplate(): java.util.List<java.lang.Double>;
					public constructor(param0: java.lang.Iterable<java.lang.Double>);
				}
				export module DashGeometricEffect {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDashGeometricEffect,com.arcgismaps.mapping.symbology.DashGeometricEffect> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DashGeometricEffect.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.DashGeometricEffect.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class DictionaryRenderer extends com.arcgismaps.mapping.symbology.Renderer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DictionaryRenderer>;
					public setDictionarySymbolStyle(param0: com.arcgismaps.mapping.symbology.DictionarySymbolStyle): void;
					public toJson(): string;
					public getScaleExpression(): com.arcgismaps.arcade.ArcadeExpression;
					public setScaleExpression(param0: com.arcgismaps.arcade.ArcadeExpression): void;
					public getDictionarySymbolStyle(): com.arcgismaps.mapping.symbology.DictionarySymbolStyle;
					public getTextFieldOverrides(): java.util.Map<string,string>;
					public clone(): com.arcgismaps.mapping.symbology.DictionaryRenderer;
					public getSymbologyFieldOverrides(): java.util.Map<string,string>;
					public getCoreDictionaryRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDictionaryRenderer;
					public constructor(param0: com.arcgismaps.mapping.symbology.DictionarySymbolStyle, param1: java.util.Map<string,string>, param2: java.util.Map<string,string>);
					public clone(): com.arcgismaps.mapping.symbology.Renderer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDictionaryRenderer, param1: boolean);
				}
				export module DictionaryRenderer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreDictionaryRenderer,com.arcgismaps.mapping.symbology.DictionaryRenderer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DictionaryRenderer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.DictionaryRenderer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class DictionarySymbolStyle extends com.arcgismaps.mapping.symbology.SymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DictionarySymbolStyle>;
					public constructor(param0: com.arcgismaps.mapping.PortalItem);
					public "getSymbol-gIAlu-s"(param0: java.util.Map<string,any>, param1: any): any;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDictionarySymbolStyle);
					public getConfigurations(): java.util.List<com.arcgismaps.mapping.symbology.DictionarySymbolStyleConfiguration>;
					public cancelLoad(): void;
					public "getSymbol-gIAlu-s"(param0: java.lang.Iterable<string>, param1: any): any;
					public getCoreDictionarySymbolStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDictionarySymbolStyle;
					public getDictionaryName(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getSymbologyFieldNames(): java.util.List<string>;
					public "load-IoAF18A"(param0: any): any;
					public getTextFieldNames(): java.util.List<string>;
				}
				export module DictionarySymbolStyle {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DictionarySymbolStyle.Companion>;
						public createFromFile(param0: string): com.arcgismaps.mapping.symbology.DictionarySymbolStyle;
						public createFromUrl(param0: string): com.arcgismaps.mapping.symbology.DictionarySymbolStyle;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDictionarySymbolStyle,com.arcgismaps.mapping.symbology.DictionarySymbolStyle> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DictionarySymbolStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.DictionarySymbolStyle.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class DictionarySymbolStyleConfiguration {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DictionarySymbolStyleConfiguration>;
					public getValue(): any;
					public getName(): string;
					public setValue(param0: any): void;
					public getCoreDictionarySymbolStyleConfiguration$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDictionarySymbolStyleConfiguration;
					public getInfo(): string;
					public getDomain(): java.util.List<any>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDictionarySymbolStyleConfiguration);
				}
				export module DictionarySymbolStyleConfiguration {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDictionarySymbolStyleConfiguration,com.arcgismaps.mapping.symbology.DictionarySymbolStyleConfiguration> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DictionarySymbolStyleConfiguration.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.DictionarySymbolStyleConfiguration.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class DistanceCompositeSceneSymbol extends com.arcgismaps.mapping.symbology.Symbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DistanceCompositeSceneSymbol>;
					public toJson(): string;
					public clone(): com.arcgismaps.mapping.symbology.DistanceCompositeSceneSymbol;
					public constructor();
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public getCoreDistanceCompositeSceneSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDistanceCompositeSceneSymbol;
					public getRanges(): java.util.List<com.arcgismaps.mapping.symbology.DistanceSymbolRange>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDistanceCompositeSceneSymbol, param1: boolean);
				}
				export module DistanceCompositeSceneSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreDistanceCompositeSceneSymbol,com.arcgismaps.mapping.symbology.DistanceCompositeSceneSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DistanceCompositeSceneSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.DistanceCompositeSceneSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class DistanceSymbolRange {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DistanceSymbolRange>;
					public getSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDistanceSymbolRange);
					public constructor();
					public constructor(param0: com.arcgismaps.mapping.symbology.Symbol, param1: java.lang.Double, param2: java.lang.Double);
					public setMaxDistance(param0: java.lang.Double): void;
					public getMaxDistance(): java.lang.Double;
					public getCoreDistanceSymbolRange$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDistanceSymbolRange;
					public setSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public getMinDistance(): java.lang.Double;
					public setMinDistance(param0: java.lang.Double): void;
				}
				export module DistanceSymbolRange {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDistanceSymbolRange,com.arcgismaps.mapping.symbology.DistanceSymbolRange> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.DistanceSymbolRange.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.DistanceSymbolRange.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class ExtrusionMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ExtrusionMode>;
					public getCoreExtrusionMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExtrusionMode;
				}
				export module ExtrusionMode {
					export class AbsoluteHeight extends com.arcgismaps.mapping.symbology.ExtrusionMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ExtrusionMode.AbsoluteHeight>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.ExtrusionMode.AbsoluteHeight;
					}
					export class BaseHeight extends com.arcgismaps.mapping.symbology.ExtrusionMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ExtrusionMode.BaseHeight>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.ExtrusionMode.BaseHeight;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ExtrusionMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.ExtrusionMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreExtrusionMode): com.arcgismaps.mapping.symbology.ExtrusionMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ExtrusionMode.Factory.WhenMappings>;
						}
					}
					export class Maximum extends com.arcgismaps.mapping.symbology.ExtrusionMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ExtrusionMode.Maximum>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.ExtrusionMode.Maximum;
					}
					export class Minimum extends com.arcgismaps.mapping.symbology.ExtrusionMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ExtrusionMode.Minimum>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.ExtrusionMode.Minimum;
					}
					export class None extends com.arcgismaps.mapping.symbology.ExtrusionMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ExtrusionMode.None>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.ExtrusionMode.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class FillSymbol extends com.arcgismaps.mapping.symbology.Symbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FillSymbol>;
					public equals(param0: any): boolean;
					public toJson(): string;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public get_outline$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.LineSymbol;
					public getCoreFillSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFillSymbol;
					public getOutline(): com.arcgismaps.mapping.symbology.LineSymbol;
					public "getColor-I-ELunk"(): number;
					public set_outline$arcgis_maps_any_release(param0: com.arcgismaps.mapping.symbology.LineSymbol): void;
					public clone(): com.arcgismaps.mapping.symbology.FillSymbol;
					public setOutline(param0: com.arcgismaps.mapping.symbology.LineSymbol): void;
					public "setColor-iGKdAYA"(param0: number): void;
				}
				export module FillSymbol {
					export class Factory extends com.arcgismaps.mapping.symbology.FillSymbolFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FillSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FillSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class FillSymbolFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreFillSymbol,com.arcgismaps.mapping.symbology.FillSymbol> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FillSymbolFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFillSymbol): com.arcgismaps.mapping.symbology.FillSymbol;
					public convertToPublic(param0: any): any;
				}
				export module FillSymbolFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FillSymbolFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class FillSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FillSymbolLayer>;
					public getCoreFillSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFillSymbolLayer;
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
					public clone(): com.arcgismaps.mapping.symbology.FillSymbolLayer;
				}
				export module FillSymbolLayer {
					export class Factory extends com.arcgismaps.mapping.symbology.FillSymbolLayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FillSymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FillSymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class FillSymbolLayerFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFillSymbolLayer,com.arcgismaps.mapping.symbology.FillSymbolLayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FillSymbolLayerFactory>;
					public constructor(param0: any);
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFillSymbolLayer): com.arcgismaps.mapping.symbology.FillSymbolLayer;
					public convertToPublic(param0: any): any;
				}
				export module FillSymbolLayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FillSymbolLayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class FillSymbolLayerImpl extends com.arcgismaps.mapping.symbology.FillSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FillSymbolLayerImpl>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFillSymbolLayer);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class FontDecoration {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontDecoration>;
					public getCoreFontDecoration$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFontDecoration;
				}
				export module FontDecoration {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontDecoration.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontDecoration.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFontDecoration): com.arcgismaps.mapping.symbology.FontDecoration;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontDecoration.Factory.WhenMappings>;
						}
					}
					export class LineThrough extends com.arcgismaps.mapping.symbology.FontDecoration {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontDecoration.LineThrough>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontDecoration.LineThrough;
					}
					export class None extends com.arcgismaps.mapping.symbology.FontDecoration {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontDecoration.None>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontDecoration.None;
					}
					export class Underline extends com.arcgismaps.mapping.symbology.FontDecoration {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontDecoration.Underline>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontDecoration.Underline;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class FontStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontStyle>;
					public getCoreFontStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFontStyle;
				}
				export module FontStyle {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontStyle.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFontStyle): com.arcgismaps.mapping.symbology.FontStyle;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontStyle.Factory.WhenMappings>;
						}
					}
					export class Italic extends com.arcgismaps.mapping.symbology.FontStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontStyle.Italic>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontStyle.Italic;
					}
					export class Normal extends com.arcgismaps.mapping.symbology.FontStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontStyle.Normal>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontStyle.Normal;
					}
					export class Oblique extends com.arcgismaps.mapping.symbology.FontStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontStyle.Oblique>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontStyle.Oblique;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class FontWeight {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontWeight>;
					public getCoreFontWeight$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFontWeight;
				}
				export module FontWeight {
					export class Bold extends com.arcgismaps.mapping.symbology.FontWeight {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontWeight.Bold>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontWeight.Bold;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontWeight.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontWeight.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreFontWeight): com.arcgismaps.mapping.symbology.FontWeight;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontWeight.Factory.WhenMappings>;
						}
					}
					export class Normal extends com.arcgismaps.mapping.symbology.FontWeight {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.FontWeight.Normal>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.FontWeight.Normal;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class GeometricEffect {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.GeometricEffect>;
					public equals(param0: any): boolean;
					public getCoreGeometricEffect$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometricEffect;
					public clone(): com.arcgismaps.mapping.symbology.GeometricEffect;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.GeometricEffectType;
					public hashCode(): number;
				}
				export module GeometricEffect {
					export class Factory extends com.arcgismaps.mapping.symbology.GeometricEffectFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.GeometricEffect.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.GeometricEffect.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class GeometricEffectFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeometricEffect,com.arcgismaps.mapping.symbology.GeometricEffect> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.GeometricEffectFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometricEffect): com.arcgismaps.mapping.symbology.GeometricEffect;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module GeometricEffectFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.GeometricEffectFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class GeometricEffectType {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.GeometricEffectType>;
					public getCoreGeometricEffectType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometricEffectType;
				}
				export module GeometricEffectType {
					export class DashGeometricEffect extends com.arcgismaps.mapping.symbology.GeometricEffectType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.GeometricEffectType.DashGeometricEffect>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.GeometricEffectType.DashGeometricEffect;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.GeometricEffectType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.GeometricEffectType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometricEffectType): com.arcgismaps.mapping.symbology.GeometricEffectType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.GeometricEffectType.Factory.WhenMappings>;
						}
					}
					export class Unknown extends com.arcgismaps.mapping.symbology.GeometricEffectType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.GeometricEffectType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.GeometricEffectType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class HatchFillSymbolLayer extends com.arcgismaps.mapping.symbology.FillSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HatchFillSymbolLayer>;
					public getAngle(): number;
					public constructor(param0: com.arcgismaps.mapping.symbology.MultilayerPolylineSymbol, param1: number);
					public constructor(param0: com.arcgismaps.internal.jni.CoreHatchFillSymbolLayer);
					public getPolyline(): com.arcgismaps.mapping.symbology.MultilayerPolylineSymbol;
					public setSeparation(param0: number): void;
					public getCoreHatchFillSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreHatchFillSymbolLayer;
					public setPolyline(param0: com.arcgismaps.mapping.symbology.MultilayerPolylineSymbol): void;
					public setAngle(param0: number): void;
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
					public getSeparation(): number;
					public clone(): com.arcgismaps.mapping.symbology.HatchFillSymbolLayer;
					public clone(): com.arcgismaps.mapping.symbology.FillSymbolLayer;
				}
				export module HatchFillSymbolLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreHatchFillSymbolLayer,com.arcgismaps.mapping.symbology.HatchFillSymbolLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HatchFillSymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.HatchFillSymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class HeatmapRenderer extends com.arcgismaps.mapping.symbology.Renderer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HeatmapRenderer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreHeatmapRenderer, param1: boolean);
					public toJson(): string;
					public getCoreHeatmapRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreHeatmapRenderer;
					public clone(): com.arcgismaps.mapping.symbology.HeatmapRenderer;
					public clone(): com.arcgismaps.mapping.symbology.Renderer;
				}
				export module HeatmapRenderer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreHeatmapRenderer,com.arcgismaps.mapping.symbology.HeatmapRenderer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HeatmapRenderer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.HeatmapRenderer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class HorizontalAlignment {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HorizontalAlignment>;
					public getCoreHorizontalAlignment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreHorizontalAlignment;
				}
				export module HorizontalAlignment {
					export class Center extends com.arcgismaps.mapping.symbology.HorizontalAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HorizontalAlignment.Center>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.HorizontalAlignment.Center;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HorizontalAlignment.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.HorizontalAlignment.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreHorizontalAlignment): com.arcgismaps.mapping.symbology.HorizontalAlignment;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HorizontalAlignment.Factory.WhenMappings>;
						}
					}
					export class Justify extends com.arcgismaps.mapping.symbology.HorizontalAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HorizontalAlignment.Justify>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.HorizontalAlignment.Justify;
					}
					export class Left extends com.arcgismaps.mapping.symbology.HorizontalAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HorizontalAlignment.Left>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.HorizontalAlignment.Left;
					}
					export class Right extends com.arcgismaps.mapping.symbology.HorizontalAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.HorizontalAlignment.Right>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.HorizontalAlignment.Right;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class LineSymbol extends com.arcgismaps.mapping.symbology.Symbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.LineSymbol>;
					public equals(param0: any): boolean;
					public getCoreLineSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLineSymbol;
					public toJson(): string;
					public getAntiAlias(): boolean;
					public setWidth(param0: number): void;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public getWidth(): number;
					public setAntiAlias(param0: boolean): void;
					public "getColor-I-ELunk"(): number;
					public "setColor-iGKdAYA"(param0: number): void;
					public clone(): com.arcgismaps.mapping.symbology.LineSymbol;
				}
				export module LineSymbol {
					export class Factory extends com.arcgismaps.mapping.symbology.LineSymbolFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.LineSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.LineSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class LineSymbolFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreLineSymbol,com.arcgismaps.mapping.symbology.LineSymbol> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.LineSymbolFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLineSymbol): com.arcgismaps.mapping.symbology.LineSymbol;
					public convertToPublic(param0: any): any;
				}
				export module LineSymbolFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.LineSymbolFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class MarkerSceneSymbol extends com.arcgismaps.mapping.symbology.Symbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSceneSymbol>;
					public getCoreMarkerSceneSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMarkerSceneSymbol;
					public toJson(): string;
					public getAnchorPosition(): com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition;
					public setAnchorPosition(param0: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition): void;
					public getPitch(): number;
					public getHeight(): number;
					public setWidth(param0: number): void;
					public setHeight(param0: number): void;
					public setRoll(param0: number): void;
					public getHeading(): number;
					public setPitch(param0: number): void;
					public getWidth(): number;
					public clone(): com.arcgismaps.mapping.symbology.MarkerSceneSymbol;
					public "getColor-I-ELunk"(): number;
					public "setColor-iGKdAYA"(param0: number): void;
					public setDepth(param0: number): void;
					public setHeading(param0: number): void;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public getDepth(): number;
					public getRoll(): number;
				}
				export module MarkerSceneSymbol {
					export class Factory extends com.arcgismaps.mapping.symbology.MarkerSceneSymbolFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSceneSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.MarkerSceneSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class MarkerSceneSymbolFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreMarkerSceneSymbol,com.arcgismaps.mapping.symbology.MarkerSceneSymbol> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSceneSymbolFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMarkerSceneSymbol): com.arcgismaps.mapping.symbology.MarkerSceneSymbol;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module MarkerSceneSymbolFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSceneSymbolFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class MarkerSymbol extends com.arcgismaps.mapping.symbology.Symbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSymbol>;
					public setLeaderOffsetY(param0: number): void;
					public toJson(): string;
					public setAngleAlignment(param0: com.arcgismaps.mapping.symbology.SymbolAngleAlignment): void;
					public getAngleAlignment(): com.arcgismaps.mapping.symbology.SymbolAngleAlignment;
					public getOffsetX(): number;
					public setOffsetX(param0: number): void;
					public setLeaderOffsetX(param0: number): void;
					public getLeaderOffsetX(): number;
					public setOffsetY(param0: number): void;
					public equals(param0: any): boolean;
					public getAngle(): number;
					public getOffsetY(): number;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public getCoreMarkerSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMarkerSymbol;
					public setAngle(param0: number): void;
					public getLeaderOffsetY(): number;
					public clone(): com.arcgismaps.mapping.symbology.MarkerSymbol;
				}
				export module MarkerSymbol {
					export class Factory extends com.arcgismaps.mapping.symbology.MarkerSymbolFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.MarkerSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class MarkerSymbolFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreMarkerSymbol,com.arcgismaps.mapping.symbology.MarkerSymbol> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSymbolFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMarkerSymbol): com.arcgismaps.mapping.symbology.MarkerSymbol;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module MarkerSymbolFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSymbolFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class MarkerSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSymbolLayer>;
					public getAnchor(): com.arcgismaps.mapping.symbology.SymbolAnchor;
					public setSize(param0: number): void;
					public getHeading(): number;
					public getOffsetX(): number;
					public clone(): com.arcgismaps.mapping.symbology.MarkerSymbolLayer;
					public setOffsetX(param0: number): void;
					public getSize(): number;
					public setHeading(param0: number): void;
					public setOffsetY(param0: number): void;
					public getCoreMarkerSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMarkerSymbolLayer;
					public getOffsetY(): number;
					public setAnchor(param0: com.arcgismaps.mapping.symbology.SymbolAnchor): void;
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
				}
				export module MarkerSymbolLayer {
					export class Factory extends com.arcgismaps.mapping.symbology.MarkerSymbolLayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.MarkerSymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class MarkerSymbolLayerFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMarkerSymbolLayer,com.arcgismaps.mapping.symbology.MarkerSymbolLayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSymbolLayerFactory>;
					public constructor(param0: any);
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMarkerSymbolLayer): com.arcgismaps.mapping.symbology.MarkerSymbolLayer;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module MarkerSymbolLayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSymbolLayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class MarkerSymbolLayerImpl extends com.arcgismaps.mapping.symbology.MarkerSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MarkerSymbolLayerImpl>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMarkerSymbolLayer);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class ModelSceneSymbol extends com.arcgismaps.mapping.symbology.MarkerSceneSymbol implements com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ModelSceneSymbol>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreModelSceneSymbol, param1: boolean);
					public toJson(): string;
					public clone(): com.arcgismaps.mapping.symbology.ModelSceneSymbol;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public clone(): com.arcgismaps.mapping.symbology.MarkerSceneSymbol;
					public cancelLoad(): void;
					public getUri(): string;
					public setSymbolSizeUnits(param0: com.arcgismaps.mapping.symbology.SymbolSizeUnits): void;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public "retryLoad-IoAF18A"(param0: any): any;
					public getSymbolSizeUnits(): com.arcgismaps.mapping.symbology.SymbolSizeUnits;
					public constructor(param0: string, param1: number);
					public getCoreModelSceneSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreModelSceneSymbol;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ModelSceneSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreModelSceneSymbol,com.arcgismaps.mapping.symbology.ModelSceneSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.ModelSceneSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.ModelSceneSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class MultilayerPointSymbol extends com.arcgismaps.mapping.symbology.MultilayerSymbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerPointSymbol>;
					public toJson(): string;
					public setSize(param0: number): void;
					public clone(): com.arcgismaps.mapping.symbology.MultilayerSymbol;
					public setAngleAlignment(param0: com.arcgismaps.mapping.symbology.SymbolAngleAlignment): void;
					public getAngleAlignment(): com.arcgismaps.mapping.symbology.SymbolAngleAlignment;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMultilayerPointSymbol, param1: boolean);
					public getSize(): number;
					public clone(): com.arcgismaps.mapping.symbology.MultilayerPointSymbol;
					public getAngle(): number;
					public getCoreMultilayerPointSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMultilayerPointSymbol;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public setAngle(param0: number): void;
					public constructor(param0: java.lang.Iterable<any>, param1: com.arcgismaps.mapping.symbology.SymbolReferenceProperties);
				}
				export module MultilayerPointSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreMultilayerPointSymbol,com.arcgismaps.mapping.symbology.MultilayerPointSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerPointSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.MultilayerPointSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class MultilayerPolygonSymbol extends com.arcgismaps.mapping.symbology.MultilayerSymbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerPolygonSymbol>;
					public clone(): com.arcgismaps.mapping.symbology.MultilayerPolygonSymbol;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMultilayerPolygonSymbol, param1: boolean);
					public toJson(): string;
					public clone(): com.arcgismaps.mapping.symbology.MultilayerSymbol;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public getCoreMultilayerPolygonSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMultilayerPolygonSymbol;
					public constructor(param0: java.lang.Iterable<any>, param1: com.arcgismaps.mapping.symbology.SymbolReferenceProperties);
				}
				export module MultilayerPolygonSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreMultilayerPolygonSymbol,com.arcgismaps.mapping.symbology.MultilayerPolygonSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerPolygonSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.MultilayerPolygonSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class MultilayerPolylineSymbol extends com.arcgismaps.mapping.symbology.MultilayerSymbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerPolylineSymbol>;
					public toJson(): string;
					public clone(): com.arcgismaps.mapping.symbology.MultilayerSymbol;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMultilayerPolylineSymbol, param1: boolean);
					public getCoreMultilayerPolylineSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMultilayerPolylineSymbol;
					public setWidth(param0: number): void;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public clone(): com.arcgismaps.mapping.symbology.MultilayerPolylineSymbol;
					public getWidth(): number;
					public constructor(param0: java.lang.Iterable<any>, param1: com.arcgismaps.mapping.symbology.SymbolReferenceProperties);
				}
				export module MultilayerPolylineSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreMultilayerPolylineSymbol,com.arcgismaps.mapping.symbology.MultilayerPolylineSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerPolylineSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.MultilayerPolylineSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class MultilayerSymbol extends com.arcgismaps.mapping.symbology.Symbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerSymbol>;
					public toJson(): string;
					public getCoreMultilayerSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMultilayerSymbol;
					public clone(): com.arcgismaps.mapping.symbology.MultilayerSymbol;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public get_referenceProperties$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.SymbolReferenceProperties;
					public "getColor-I-ELunk"(): number;
					public setReferenceProperties(param0: com.arcgismaps.mapping.symbology.SymbolReferenceProperties): void;
					public getReferenceProperties(): com.arcgismaps.mapping.symbology.SymbolReferenceProperties;
					public "setColor-iGKdAYA"(param0: number): void;
					public set_referenceProperties$arcgis_maps_any_release(param0: com.arcgismaps.mapping.symbology.SymbolReferenceProperties): void;
					public getSymbolLayers(): java.util.List<com.arcgismaps.mapping.symbology.SymbolLayer>;
				}
				export module MultilayerSymbol {
					export class Factory extends com.arcgismaps.mapping.symbology.MultilayerSymbolFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.MultilayerSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class MultilayerSymbolFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreMultilayerSymbol,com.arcgismaps.mapping.symbology.MultilayerSymbol> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerSymbolFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMultilayerSymbol): com.arcgismaps.mapping.symbology.MultilayerSymbol;
					public convertToPublic(param0: any): any;
				}
				export module MultilayerSymbolFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.MultilayerSymbolFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class PictureFillSymbol extends com.arcgismaps.mapping.symbology.FillSymbol implements com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureFillSymbol>;
					public toMultilayerSymbol(): com.arcgismaps.mapping.symbology.MultilayerPolygonSymbol;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getImage(): globalAndroid.graphics.drawable.BitmapDrawable;
					public getCorePictureFillSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePictureFillSymbol;
					public constructor(param0: string);
					public setOpacity(param0: number): void;
					public setScaleX(param0: number): void;
					public setHeight(param0: number): void;
					public getOffsetX(): number;
					public clone(): com.arcgismaps.mapping.symbology.FillSymbol;
					public setOffsetX(param0: number): void;
					public getUrl(): string;
					public getOffsetY(): number;
					public constructor();
					public setAngle(param0: number): void;
					public getOpacity(): number;
					public toJson(): string;
					public getScaleY(): number;
					public getHeight(): number;
					public setWidth(param0: number): void;
					public getWidth(): number;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePictureFillSymbol, param1: boolean);
					public setOffsetY(param0: number): void;
					public equals(param0: any): boolean;
					public getAngle(): number;
					public getScaleX(): number;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public clone(): com.arcgismaps.mapping.symbology.PictureFillSymbol;
					public "retryLoad-IoAF18A"(param0: any): any;
					public setScaleY(param0: number): void;
					public "load-IoAF18A"(param0: any): any;
				}
				export module PictureFillSymbol {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureFillSymbol.Companion>;
						public createWithImage(param0: globalAndroid.graphics.drawable.BitmapDrawable): com.arcgismaps.mapping.symbology.PictureFillSymbol;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CorePictureFillSymbol,com.arcgismaps.mapping.symbology.PictureFillSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureFillSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.PictureFillSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class PictureFillSymbolLayer extends com.arcgismaps.mapping.symbology.FillSymbolLayer implements com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureFillSymbolLayer>;
					public constructor(param0: com.arcgismaps.internal.jni.CorePictureFillSymbolLayer);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getImage(): globalAndroid.graphics.drawable.BitmapDrawable;
					public constructor(param0: string);
					public "setTintColor-iGKdAYA"(param0: number): void;
					public cancelLoad(): void;
					public getUri(): string;
					public clone(): com.arcgismaps.mapping.symbology.FillSymbolLayer;
					public clone(): com.arcgismaps.mapping.symbology.PictureFillSymbolLayer;
					public getCorePictureFillSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePictureFillSymbolLayer;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "getTintColor-I-ELunk"(): number;
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
					public "load-IoAF18A"(param0: any): any;
				}
				export module PictureFillSymbolLayer {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureFillSymbolLayer.Companion>;
						public createWithImage(param0: globalAndroid.graphics.drawable.BitmapDrawable): com.arcgismaps.mapping.symbology.PictureFillSymbolLayer;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePictureFillSymbolLayer,com.arcgismaps.mapping.symbology.PictureFillSymbolLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureFillSymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.PictureFillSymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class PictureMarkerSymbol extends com.arcgismaps.mapping.symbology.MarkerSymbol implements com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureMarkerSymbol>;
					public toJson(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CorePictureMarkerSymbol, param1: boolean);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getImage(): globalAndroid.graphics.drawable.BitmapDrawable;
					public constructor(param0: string);
					public getHeight(): number;
					public setOpacity(param0: number): void;
					public setWidth(param0: number): void;
					public setHeight(param0: number): void;
					public getWidth(): number;
					public cancelLoad(): void;
					public getCorePictureMarkerSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePictureMarkerSymbol;
					public equals(param0: any): boolean;
					public toMultilayerSymbol(): com.arcgismaps.mapping.symbology.MultilayerPointSymbol;
					public getUrl(): string;
					public constructor();
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "load-IoAF18A"(param0: any): any;
					public clone(): com.arcgismaps.mapping.symbology.MarkerSymbol;
					public getOpacity(): number;
					public clone(): com.arcgismaps.mapping.symbology.PictureMarkerSymbol;
				}
				export module PictureMarkerSymbol {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureMarkerSymbol.Companion>;
						public createWithImage(param0: globalAndroid.graphics.drawable.BitmapDrawable): com.arcgismaps.mapping.symbology.PictureMarkerSymbol;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CorePictureMarkerSymbol,com.arcgismaps.mapping.symbology.PictureMarkerSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureMarkerSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.PictureMarkerSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class PictureMarkerSymbolLayer extends com.arcgismaps.mapping.symbology.MarkerSymbolLayer implements com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureMarkerSymbolLayer>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getImage(): globalAndroid.graphics.drawable.BitmapDrawable;
					public constructor(param0: string);
					public "setTintColor-iGKdAYA"(param0: number): void;
					public getCorePictureMarkerSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePictureMarkerSymbolLayer;
					public cancelLoad(): void;
					public clone(): com.arcgismaps.mapping.symbology.MarkerSymbolLayer;
					public getUri(): string;
					public clone(): com.arcgismaps.mapping.symbology.PictureMarkerSymbolLayer;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "getTintColor-I-ELunk"(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CorePictureMarkerSymbolLayer);
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
					public "load-IoAF18A"(param0: any): any;
				}
				export module PictureMarkerSymbolLayer {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureMarkerSymbolLayer.Companion>;
						public createWithImage(param0: globalAndroid.graphics.drawable.BitmapDrawable): com.arcgismaps.mapping.symbology.PictureMarkerSymbolLayer;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePictureMarkerSymbolLayer,com.arcgismaps.mapping.symbology.PictureMarkerSymbolLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.PictureMarkerSymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.PictureMarkerSymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class Renderer extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.Renderer>;
					public getSymbol(param0: com.arcgismaps.data.Feature, param1: boolean): com.arcgismaps.mapping.symbology.Symbol;
					public toJson(): string;
					public setRotationType(param0: com.arcgismaps.mapping.symbology.RotationType): void;
					public getRotationType(): com.arcgismaps.mapping.symbology.RotationType;
					public getSymbol(param0: com.arcgismaps.realtime.DynamicEntityObservation, param1: boolean): com.arcgismaps.mapping.symbology.Symbol;
					public setSceneProperties(param0: com.arcgismaps.mapping.symbology.RendererSceneProperties): void;
					public getCoreRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRenderer;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.RendererType;
					public getSceneProperties(): com.arcgismaps.mapping.symbology.RendererSceneProperties;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public clone(): com.arcgismaps.mapping.symbology.Renderer;
					public equals(param0: any): boolean;
					public getRotationExpression(): string;
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getSymbol(param0: com.arcgismaps.realtime.DynamicEntity, param1: boolean): com.arcgismaps.mapping.symbology.Symbol;
					public setRotationExpression(param0: string): void;
					public hashCode(): number;
					public getSymbol(param0: com.arcgismaps.mapping.view.Graphic, param1: boolean): com.arcgismaps.mapping.symbology.Symbol;
				}
				export module Renderer {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.Renderer.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.symbology.Renderer;
					}
					export class Factory extends com.arcgismaps.mapping.symbology.RendererFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.Renderer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.Renderer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class RendererClassificationMethod {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod>;
					public getCoreRendererClassificationMethod$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRendererClassificationMethod;
				}
				export module RendererClassificationMethod {
					export class DefinedInterval extends com.arcgismaps.mapping.symbology.RendererClassificationMethod {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod.DefinedInterval>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererClassificationMethod.DefinedInterval;
					}
					export class EqualInterval extends com.arcgismaps.mapping.symbology.RendererClassificationMethod {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod.EqualInterval>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererClassificationMethod.EqualInterval;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererClassificationMethod.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRendererClassificationMethod): com.arcgismaps.mapping.symbology.RendererClassificationMethod;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod.Factory.WhenMappings>;
						}
					}
					export class GeometricalInterval extends com.arcgismaps.mapping.symbology.RendererClassificationMethod {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod.GeometricalInterval>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererClassificationMethod.GeometricalInterval;
					}
					export class Manual extends com.arcgismaps.mapping.symbology.RendererClassificationMethod {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod.Manual>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererClassificationMethod.Manual;
					}
					export class NaturalBreaks extends com.arcgismaps.mapping.symbology.RendererClassificationMethod {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod.NaturalBreaks>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererClassificationMethod.NaturalBreaks;
					}
					export class Quantile extends com.arcgismaps.mapping.symbology.RendererClassificationMethod {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod.Quantile>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererClassificationMethod.Quantile;
					}
					export class StandardDeviation extends com.arcgismaps.mapping.symbology.RendererClassificationMethod {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererClassificationMethod.StandardDeviation>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererClassificationMethod.StandardDeviation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class RendererFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreRenderer,com.arcgismaps.mapping.symbology.Renderer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRenderer): com.arcgismaps.mapping.symbology.Renderer;
					public convertToPublic(param0: any): any;
				}
				export module RendererFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class RendererNormalizationType {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererNormalizationType>;
					public getCoreRendererNormalizationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRendererNormalizationType;
				}
				export module RendererNormalizationType {
					export class ByField extends com.arcgismaps.mapping.symbology.RendererNormalizationType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererNormalizationType.ByField>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererNormalizationType.ByField;
					}
					export class ByLog extends com.arcgismaps.mapping.symbology.RendererNormalizationType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererNormalizationType.ByLog>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererNormalizationType.ByLog;
					}
					export class ByPercentOfTotal extends com.arcgismaps.mapping.symbology.RendererNormalizationType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererNormalizationType.ByPercentOfTotal>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererNormalizationType.ByPercentOfTotal;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererNormalizationType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererNormalizationType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRendererNormalizationType): com.arcgismaps.mapping.symbology.RendererNormalizationType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererNormalizationType.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.mapping.symbology.RendererNormalizationType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererNormalizationType.None>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererNormalizationType.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class RendererSceneProperties {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererSceneProperties>;
					public getHeadingExpression(): string;
					public setRollExpression(param0: string): void;
					public setExtrusionExpression(param0: string): void;
					public setExtrusionMode(param0: com.arcgismaps.mapping.symbology.ExtrusionMode): void;
					public getExtrusionExpression(): string;
					public setPitchExpression(param0: string): void;
					public setHeadingExpression(param0: string): void;
					public constructor(param0: string, param1: com.arcgismaps.mapping.symbology.ExtrusionMode);
					public constructor(param0: com.arcgismaps.internal.jni.CoreRendererSceneProperties);
					public getExtrusionMode(): com.arcgismaps.mapping.symbology.ExtrusionMode;
					public getPitchExpression(): string;
					public getRollExpression(): string;
					public constructor(param0: string, param1: string, param2: string);
					public getCoreRendererSceneProperties$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRendererSceneProperties;
				}
				export module RendererSceneProperties {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRendererSceneProperties,com.arcgismaps.mapping.symbology.RendererSceneProperties> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererSceneProperties.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererSceneProperties.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class RendererType {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType>;
					public getCoreRendererType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRendererType;
				}
				export module RendererType {
					export class ClassBreaksRenderer extends com.arcgismaps.mapping.symbology.RendererType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType.ClassBreaksRenderer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererType.ClassBreaksRenderer;
					}
					export class DictionaryRenderer extends com.arcgismaps.mapping.symbology.RendererType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType.DictionaryRenderer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererType.DictionaryRenderer;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRendererType): com.arcgismaps.mapping.symbology.RendererType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType.Factory.WhenMappings>;
						}
					}
					export class HeatmapRenderer extends com.arcgismaps.mapping.symbology.RendererType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType.HeatmapRenderer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererType.HeatmapRenderer;
					}
					export class SimpleRenderer extends com.arcgismaps.mapping.symbology.RendererType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType.SimpleRenderer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererType.SimpleRenderer;
					}
					export class UniqueValueRenderer extends com.arcgismaps.mapping.symbology.RendererType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType.UniqueValueRenderer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererType.UniqueValueRenderer;
					}
					export class Unknown extends com.arcgismaps.mapping.symbology.RendererType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererType.Unknown;
					}
					export class UnsupportedRenderer extends com.arcgismaps.mapping.symbology.RendererType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RendererType.UnsupportedRenderer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RendererType.UnsupportedRenderer;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class RotationType {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RotationType>;
					public getCoreRotationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRotationType;
				}
				export module RotationType {
					export class Arithmetic extends com.arcgismaps.mapping.symbology.RotationType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RotationType.Arithmetic>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RotationType.Arithmetic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RotationType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RotationType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRotationType): com.arcgismaps.mapping.symbology.RotationType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RotationType.Factory.WhenMappings>;
						}
					}
					export class Geographic extends com.arcgismaps.mapping.symbology.RotationType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.RotationType.Geographic>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.RotationType.Geographic;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SceneSymbolAnchorPosition {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition>;
					public getCoreSceneSymbolAnchorPosition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition;
				}
				export module SceneSymbolAnchorPosition {
					export class Bottom extends com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Bottom>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Bottom;
					}
					export class Center extends com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Center>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Center;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSceneSymbolAnchorPosition): com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Factory.WhenMappings>;
						}
					}
					export class Origin extends com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Origin>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Origin;
					}
					export class Top extends com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Top>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition.Top;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SimpleFillSymbol extends com.arcgismaps.mapping.symbology.FillSymbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbol>;
					public getStyle(): com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle;
					public equals(param0: any): boolean;
					public toMultilayerSymbol(): com.arcgismaps.mapping.symbology.MultilayerPolygonSymbol;
					public toJson(): string;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public getCoreSimpleFillSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleFillSymbol;
					public clone(): com.arcgismaps.mapping.symbology.SimpleFillSymbol;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleFillSymbol, param1: boolean);
					public clone(): com.arcgismaps.mapping.symbology.FillSymbol;
					public setStyle(param0: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle): void;
				}
				export module SimpleFillSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreSimpleFillSymbol,com.arcgismaps.mapping.symbology.SimpleFillSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SimpleFillSymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle>;
					public getCoreSimpleFillSymbolStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle;
				}
				export module SimpleFillSymbolStyle {
					export class BackwardDiagonal extends com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.BackwardDiagonal>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.BackwardDiagonal;
					}
					export class Cross extends com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Cross>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Cross;
					}
					export class DiagonalCross extends com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.DiagonalCross>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.DiagonalCross;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSimpleFillSymbolStyle): com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Factory.WhenMappings>;
						}
					}
					export class ForwardDiagonal extends com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.ForwardDiagonal>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.ForwardDiagonal;
					}
					export class Horizontal extends com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Horizontal>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Horizontal;
					}
					export class Null extends com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Null>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Null;
					}
					export class Solid extends com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Solid>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Solid;
					}
					export class Vertical extends com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Vertical>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleFillSymbolStyle.Vertical;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SimpleLineSymbol extends com.arcgismaps.mapping.symbology.LineSymbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbol>;
					public getStyle(): com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle;
					public toJson(): string;
					public getMarkerStyle(): com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle;
					public setMarkerPlacement(param0: com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement): void;
					public clone(): com.arcgismaps.mapping.symbology.SimpleLineSymbol;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbol, param1: boolean);
					public equals(param0: any): boolean;
					public setStyle(param0: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle): void;
					public toMultilayerSymbol(): com.arcgismaps.mapping.symbology.MultilayerPolylineSymbol;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public setMarkerStyle(param0: com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle): void;
					public getMarkerPlacement(): com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement;
					public getCoreSimpleLineSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleLineSymbol;
					public clone(): com.arcgismaps.mapping.symbology.LineSymbol;
				}
				export module SimpleLineSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreSimpleLineSymbol,com.arcgismaps.mapping.symbology.SimpleLineSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SimpleLineSymbolMarkerPlacement {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement>;
					public getCoreSimpleLineSymbolMarkerPlacement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement;
				}
				export module SimpleLineSymbolMarkerPlacement {
					export class Begin extends com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement.Begin>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement.Begin;
					}
					export class BeginAndEnd extends com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement.BeginAndEnd>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement.BeginAndEnd;
					}
					export class End extends com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement.End>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement.End;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerPlacement): com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerPlacement.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SimpleLineSymbolMarkerStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle>;
					public getCoreSimpleLineSymbolMarkerStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle;
				}
				export module SimpleLineSymbolMarkerStyle {
					export class Arrow extends com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle.Arrow>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle.Arrow;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbolMarkerStyle): com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle.None>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolMarkerStyle.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SimpleLineSymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle>;
					public getCoreSimpleLineSymbolStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle;
				}
				export module SimpleLineSymbolStyle {
					export class Dash extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Dash>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Dash;
					}
					export class DashDot extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.DashDot>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.DashDot;
					}
					export class DashDotDot extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.DashDotDot>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.DashDotDot;
					}
					export class Dot extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Dot>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Dot;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSimpleLineSymbolStyle): com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Factory.WhenMappings>;
						}
					}
					export class LongDash extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.LongDash>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.LongDash;
					}
					export class LongDashDot extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.LongDashDot>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.LongDashDot;
					}
					export class Null extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Null>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Null;
					}
					export class ShortDash extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.ShortDash>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.ShortDash;
					}
					export class ShortDashDot extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.ShortDashDot>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.ShortDashDot;
					}
					export class ShortDashDotDot extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.ShortDashDotDot>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.ShortDashDotDot;
					}
					export class ShortDot extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.ShortDot>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.ShortDot;
					}
					export class Solid extends com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Solid>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleLineSymbolStyle.Solid;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SimpleMarkerSceneSymbol extends com.arcgismaps.mapping.symbology.MarkerSceneSymbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol>;
					public getStyle(): com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle;
					public toJson(): string;
					public clone(): com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public getCoreSimpleMarkerSceneSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol;
					public setStyle(param0: com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol, param1: boolean);
					public clone(): com.arcgismaps.mapping.symbology.MarkerSceneSymbol;
				}
				export module SimpleMarkerSceneSymbol {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol.Companion>;
						public "cylinder-LwGsejo"(param0: number, param1: number, param2: number, param3: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition): com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol;
						public "diamond-LwGsejo"(param0: number, param1: number, param2: number, param3: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition): com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol;
						public "cone-LwGsejo"(param0: number, param1: number, param2: number, param3: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition): com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol;
						public "cube-qfJ1VYM"(param0: number, param1: number, param2: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition): com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol;
						public "tetrahedron-LwGsejo"(param0: number, param1: number, param2: number, param3: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition): com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol;
						public "sphere-qfJ1VYM"(param0: number, param1: number, param2: com.arcgismaps.mapping.symbology.SceneSymbolAnchorPosition): com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbol,com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SimpleMarkerSceneSymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle>;
					public getCoreSimpleMarkerSceneSymbolStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle;
				}
				export module SimpleMarkerSceneSymbolStyle {
					export class Cone extends com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Cone>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Cone;
					}
					export class Cube extends com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Cube>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Cube;
					}
					export class Cylinder extends com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Cylinder>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Cylinder;
					}
					export class Diamond extends com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Diamond>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Diamond;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSimpleMarkerSceneSymbolStyle): com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Factory.WhenMappings>;
						}
					}
					export class Sphere extends com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Sphere>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Sphere;
					}
					export class Tetrahedron extends com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Tetrahedron>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSceneSymbolStyle.Tetrahedron;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SimpleMarkerSymbol extends com.arcgismaps.mapping.symbology.MarkerSymbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbol>;
					public toJson(): string;
					public setSize(param0: number): void;
					public setOutline(param0: com.arcgismaps.mapping.symbology.SimpleLineSymbol): void;
					public clone(): com.arcgismaps.mapping.symbology.SimpleMarkerSymbol;
					public "getColor-I-ELunk"(): number;
					public getOutline(): com.arcgismaps.mapping.symbology.SimpleLineSymbol;
					public getCoreSimpleMarkerSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleMarkerSymbol;
					public "setColor-iGKdAYA"(param0: number): void;
					public getSize(): number;
					public equals(param0: any): boolean;
					public toMultilayerSymbol(): com.arcgismaps.mapping.symbology.MultilayerPointSymbol;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbol, param1: boolean);
					public setStyle(param0: com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle): void;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public getStyle(): com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle;
					public clone(): com.arcgismaps.mapping.symbology.MarkerSymbol;
				}
				export module SimpleMarkerSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreSimpleMarkerSymbol,com.arcgismaps.mapping.symbology.SimpleMarkerSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SimpleMarkerSymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle>;
					public getCoreSimpleMarkerSymbolStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle;
				}
				export module SimpleMarkerSymbolStyle {
					export class Circle extends com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Circle>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Circle;
					}
					export class Cross extends com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Cross>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Cross;
					}
					export class Diamond extends com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Diamond>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Diamond;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSimpleMarkerSymbolStyle): com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Factory.WhenMappings>;
						}
					}
					export class Square extends com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Square>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Square;
					}
					export class Triangle extends com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Triangle>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.Triangle;
					}
					export class X extends com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.X>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleMarkerSymbolStyle.X;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SimpleRenderer extends com.arcgismaps.mapping.symbology.Renderer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleRenderer>;
					public getLabel(): string;
					public getSymbol(param0: com.arcgismaps.data.Feature, param1: boolean): com.arcgismaps.mapping.symbology.Symbol;
					public toJson(): string;
					public setDescription(param0: string): void;
					public getSymbol(param0: com.arcgismaps.realtime.DynamicEntityObservation, param1: boolean): com.arcgismaps.mapping.symbology.Symbol;
					public setLabel(param0: string): void;
					public setSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public clone(): com.arcgismaps.mapping.symbology.Renderer;
					public getSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public getCoreSimpleRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSimpleRenderer;
					public getSymbol(param0: com.arcgismaps.realtime.DynamicEntity, param1: boolean): com.arcgismaps.mapping.symbology.Symbol;
					public constructor(param0: com.arcgismaps.mapping.symbology.Symbol);
					public constructor(param0: com.arcgismaps.internal.jni.CoreSimpleRenderer, param1: boolean);
					public getDescription(): string;
					public getSymbol(param0: com.arcgismaps.mapping.view.Graphic, param1: boolean): com.arcgismaps.mapping.symbology.Symbol;
					public clone(): com.arcgismaps.mapping.symbology.SimpleRenderer;
				}
				export module SimpleRenderer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreSimpleRenderer,com.arcgismaps.mapping.symbology.SimpleRenderer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SimpleRenderer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SimpleRenderer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SolidFillSymbolLayer extends com.arcgismaps.mapping.symbology.FillSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SolidFillSymbolLayer>;
					public clone(): com.arcgismaps.mapping.symbology.SolidFillSymbolLayer;
					public "getColor-I-ELunk"(): number;
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSolidFillSymbolLayer);
					public "setColor-iGKdAYA"(param0: number): void;
					public clone(): com.arcgismaps.mapping.symbology.FillSymbolLayer;
					public getCoreSolidFillSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSolidFillSymbolLayer;
				}
				export module SolidFillSymbolLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSolidFillSymbolLayer,com.arcgismaps.mapping.symbology.SolidFillSymbolLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SolidFillSymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SolidFillSymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SolidStrokeSymbolLayer extends com.arcgismaps.mapping.symbology.StrokeSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SolidStrokeSymbolLayer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSolidStrokeSymbolLayer);
					public getCoreSolidStrokeSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSolidStrokeSymbolLayer;
					public clone(): com.arcgismaps.mapping.symbology.SolidStrokeSymbolLayer;
					public getGeometricEffects(): java.util.List<com.arcgismaps.mapping.symbology.GeometricEffect>;
					public "getColor-I-ELunk"(): number;
					public clone(): com.arcgismaps.mapping.symbology.StrokeSymbolLayer;
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
					public "setColor-iGKdAYA"(param0: number): void;
				}
				export module SolidStrokeSymbolLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSolidStrokeSymbolLayer,com.arcgismaps.mapping.symbology.SolidStrokeSymbolLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SolidStrokeSymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SolidStrokeSymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class StrokeSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayer>;
					public setLineStyle3D(param0: com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D): void;
					public getCapStyle(): com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle;
					public setWidth(param0: number): void;
					public getWidth(): number;
					public setCapStyle(param0: com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle): void;
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
					public clone(): com.arcgismaps.mapping.symbology.StrokeSymbolLayer;
					public getCoreStrokeSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStrokeSymbolLayer;
					public getLineStyle3D(): com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D;
				}
				export module StrokeSymbolLayer {
					export class Factory extends com.arcgismaps.mapping.symbology.StrokeSymbolLayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.StrokeSymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class StrokeSymbolLayerCapStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle>;
					public getCoreStrokeSymbolLayerCapStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle;
				}
				export module StrokeSymbolLayerCapStyle {
					export class Butt extends com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle.Butt>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle.Butt;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerCapStyle): com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle.Factory.WhenMappings>;
						}
					}
					export class Round extends com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle.Round>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle.Round;
					}
					export class Square extends com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle.Square>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.StrokeSymbolLayerCapStyle.Square;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class StrokeSymbolLayerFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreStrokeSymbolLayer,com.arcgismaps.mapping.symbology.StrokeSymbolLayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerFactory>;
					public constructor(param0: any);
					public constructor();
					public convertToPublic(param0: any): any;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreStrokeSymbolLayer): com.arcgismaps.mapping.symbology.StrokeSymbolLayer;
				}
				export module StrokeSymbolLayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class StrokeSymbolLayerImpl extends com.arcgismaps.mapping.symbology.StrokeSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerImpl>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreStrokeSymbolLayer);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class StrokeSymbolLayerLineStyle3D {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D>;
					public getCoreStrokeSymbolLayerLineStyle3D$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D;
				}
				export module StrokeSymbolLayerLineStyle3D {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreStrokeSymbolLayerLineStyle3D): com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D.Factory.WhenMappings>;
						}
					}
					export class Strip extends com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D.Strip>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D.Strip;
					}
					export class Tube extends com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D.Tube>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.StrokeSymbolLayerLineStyle3D.Tube;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class Symbol extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.Symbol>;
					public equals(param0: any): boolean;
					public toJson(): string;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.SymbolType;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public "createSwatch-uEXvvEQ"(param0: number, param1: number, param2: number, param3: com.arcgismaps.geometry.Geometry, param4: number, param5: any): any;
					public "createSwatch-oYdtzcE"(param0: number, param1: java.lang.Float, param2: java.lang.Float, param3: number, param4: any): any;
					public hashCode(): number;
					public getCoreSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbol;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
				}
				export module Symbol {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.Symbol.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.symbology.Symbol;
					}
					export class Factory extends com.arcgismaps.mapping.symbology.SymbolFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.Symbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.Symbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolAnchor {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAnchor>;
					public getX(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSymbolAnchor);
					public getPlacementMode(): com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode;
					public getY(): number;
					public getCoreSymbolAnchor$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolAnchor;
					public constructor(param0: number, param1: number, param2: com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode);
				}
				export module SymbolAnchor {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSymbolAnchor,com.arcgismaps.mapping.symbology.SymbolAnchor> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAnchor.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolAnchor.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SymbolAnchorPlacementMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode>;
					public getCoreSymbolAnchorPlacementMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode;
				}
				export module SymbolAnchorPlacementMode {
					export class Absolute extends com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode.Absolute>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode.Absolute;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSymbolAnchorPlacementMode): com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode.Factory.WhenMappings>;
						}
					}
					export class Relative extends com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode.Relative>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolAnchorPlacementMode.Relative;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SymbolAngleAlignment {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAngleAlignment>;
					public getCoreSymbolAngleAlignment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolAngleAlignment;
				}
				export module SymbolAngleAlignment {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAngleAlignment.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolAngleAlignment.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSymbolAngleAlignment): com.arcgismaps.mapping.symbology.SymbolAngleAlignment;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAngleAlignment.Factory.WhenMappings>;
						}
					}
					export class Map extends com.arcgismaps.mapping.symbology.SymbolAngleAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAngleAlignment.Map>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolAngleAlignment.Map;
					}
					export class Screen extends com.arcgismaps.mapping.symbology.SymbolAngleAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolAngleAlignment.Screen>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolAngleAlignment.Screen;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreSymbol,com.arcgismaps.mapping.symbology.Symbol> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSymbol): com.arcgismaps.mapping.symbology.Symbol;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module SymbolFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayer>;
					public setEnabled(param0: boolean): void;
					public setColorLocked(param0: boolean): void;
					public isColorLocked(): boolean;
					public getCoreSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolLayer;
					public isEnabled(): boolean;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.SymbolLayerType;
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
				}
				export module SymbolLayer {
					export class Factory extends com.arcgismaps.mapping.symbology.SymbolLayerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolLayerFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSymbolLayer,com.arcgismaps.mapping.symbology.SymbolLayer> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerFactory>;
					public constructor(param0: any);
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSymbolLayer): com.arcgismaps.mapping.symbology.SymbolLayer;
					public convertToPublic(param0: any): any;
				}
				export module SymbolLayerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolLayerImpl extends com.arcgismaps.mapping.symbology.SymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerImpl>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSymbolLayer);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SymbolLayerType {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType>;
					public getCoreSymbolLayerType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolLayerType;
				}
				export module SymbolLayerType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSymbolLayerType): com.arcgismaps.mapping.symbology.SymbolLayerType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.Factory.WhenMappings>;
						}
					}
					export class FillSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.FillSymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.FillSymbolLayer;
					}
					export class HatchFillSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.HatchFillSymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.HatchFillSymbolLayer;
					}
					export class MarkerSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.MarkerSymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.MarkerSymbolLayer;
					}
					export class PictureFillSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.PictureFillSymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.PictureFillSymbolLayer;
					}
					export class PictureMarkerSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.PictureMarkerSymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.PictureMarkerSymbolLayer;
					}
					export class SolidFillSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.SolidFillSymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.SolidFillSymbolLayer;
					}
					export class SolidStrokeSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.SolidStrokeSymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.SolidStrokeSymbolLayer;
					}
					export class StrokeSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.StrokeSymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.StrokeSymbolLayer;
					}
					export class SymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.SymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.SymbolLayer;
					}
					export class Unknown extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.Unknown;
					}
					export class VectorMarkerSymbolLayer extends com.arcgismaps.mapping.symbology.SymbolLayerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolLayerType.VectorMarkerSymbolLayer>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolLayerType.VectorMarkerSymbolLayer;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolReferenceProperties {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolReferenceProperties>;
					public getCoreSymbolReferenceProperties$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolReferenceProperties;
					public getMinScale(): java.lang.Double;
					public setMinScale(param0: java.lang.Double): void;
					public constructor(param0: java.lang.Double, param1: java.lang.Double);
					public constructor(param0: com.arcgismaps.internal.jni.CoreSymbolReferenceProperties);
					public getMaxScale(): java.lang.Double;
					public setMaxScale(param0: java.lang.Double): void;
				}
				export module SymbolReferenceProperties {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSymbolReferenceProperties,com.arcgismaps.mapping.symbology.SymbolReferenceProperties> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolReferenceProperties.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolReferenceProperties.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolSerializer extends kotlinx.serialization.KSerializer<com.arcgismaps.mapping.symbology.Symbol> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolSerializer>;
					public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolSerializer;
					public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.mapping.symbology.Symbol): void;
					public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.mapping.symbology.Symbol;
					public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SymbolSizeUnits {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolSizeUnits>;
					public getCoreSymbolSizeUnits$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolSizeUnits;
				}
				export module SymbolSizeUnits {
					export class Dips extends com.arcgismaps.mapping.symbology.SymbolSizeUnits {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolSizeUnits.Dips>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolSizeUnits.Dips;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolSizeUnits.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolSizeUnits.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSymbolSizeUnits): com.arcgismaps.mapping.symbology.SymbolSizeUnits;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolSizeUnits.Factory.WhenMappings>;
						}
					}
					export class Meters extends com.arcgismaps.mapping.symbology.SymbolSizeUnits {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolSizeUnits.Meters>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolSizeUnits.Meters;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SymbolStyle extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyle>;
					public getCoreSymbolStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolStyle;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public cancelLoad(): void;
					public getPortalItem(): com.arcgismaps.mapping.PortalItem;
					public get_portal(): com.arcgismaps.portal.Portal;
					public set_portal(param0: com.arcgismaps.portal.Portal): void;
					public "getSymbol-gIAlu-s"(param0: java.lang.Iterable<string>, param1: any): any;
					public "getDefaultSearchParameters-IoAF18A"(param0: any): any;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.SymbolStyleType;
					public getUrl(): string;
					public getStyleName(): string;
					public "searchSymbols-gIAlu-s"(param0: com.arcgismaps.mapping.symbology.SymbolStyleSearchParameters, param1: any): any;
					public getStyleLocation(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public get_portalItem$arcgis_maps_any_release(): com.arcgismaps.mapping.PortalItem;
					public set_portalItem$arcgis_maps_any_release(param0: com.arcgismaps.mapping.PortalItem): void;
					public "load-IoAF18A"(param0: any): any;
					public getPortal(): com.arcgismaps.portal.Portal;
				}
				export module SymbolStyle {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyle.Companion>;
						public createWithStyleNameAndPortal(param0: string, param1: com.arcgismaps.portal.Portal): com.arcgismaps.mapping.symbology.SymbolStyle;
						public createWithPortalItem(param0: com.arcgismaps.mapping.PortalItem): com.arcgismaps.mapping.symbology.SymbolStyle;
						public createWithFile(param0: string): com.arcgismaps.mapping.symbology.SymbolStyle;
						public createWithUrl(param0: string): com.arcgismaps.mapping.symbology.SymbolStyle;
					}
					export class Factory extends com.arcgismaps.mapping.symbology.SymbolStyleFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyle.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolStyle.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolStyleFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSymbolStyle,com.arcgismaps.mapping.symbology.SymbolStyle> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleFactory>;
					public constructor(param0: any);
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSymbolStyle): com.arcgismaps.mapping.symbology.SymbolStyle;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module SymbolStyleFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolStyleImpl extends com.arcgismaps.mapping.symbology.SymbolStyle {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleImpl>;
					public constructor(param0: com.arcgismaps.mapping.PortalItem);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string, param1: com.arcgismaps.portal.Portal);
					public "retryLoad-IoAF18A"(param0: any): any;
					public cancelLoad(): void;
					public "load-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSymbolStyle);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolStyleSearchParameters {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleSearchParameters>;
					public constructor(param0: java.lang.Iterable<string>);
					public constructor(param0: com.arcgismaps.internal.jni.CoreSymbolStyleSearchParameters);
					public isEmpty(): boolean;
					public getSymbolClasses(): java.util.List<string>;
					public setTagsStrictlyMatch(param0: boolean): void;
					public getTagsStrictlyMatch(): boolean;
					public getCoreSymbolStyleSearchParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolStyleSearchParameters;
					public getSymbolClassesStrictlyMatch(): boolean;
					public setSymbolClassesStrictlyMatch(param0: boolean): void;
					public getNamesStrictlyMatch(): boolean;
					public setKeysStrictlyMatch(param0: boolean): void;
					public getCategoriesStrictlyMatch(): boolean;
					public getNames(): java.util.List<string>;
					public getTags(): java.util.List<string>;
					public constructor();
					public getCategories(): java.util.List<string>;
					public getKeys(): java.util.List<string>;
					public getKeysStrictlyMatch(): boolean;
					public setNamesStrictlyMatch(param0: boolean): void;
					public setCategoriesStrictlyMatch(param0: boolean): void;
				}
				export module SymbolStyleSearchParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSymbolStyleSearchParameters,com.arcgismaps.mapping.symbology.SymbolStyleSearchParameters> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleSearchParameters.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolStyleSearchParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolStyleSearchResult {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleSearchResult>;
					public getKey(): string;
					public "getSymbol-IoAF18A"(param0: any): any;
					public getName(): string;
					public getTags(): java.util.List<string>;
					public getCoreSymbolStyleSearchResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolStyleSearchResult;
					public getCategory(): string;
					public getSymbolClass(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSymbolStyleSearchResult);
				}
				export module SymbolStyleSearchResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSymbolStyleSearchResult,com.arcgismaps.mapping.symbology.SymbolStyleSearchResult> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleSearchResult.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolStyleSearchResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SymbolStyleType {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleType>;
					public getCoreSymbolStyleType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolStyleType;
				}
				export module SymbolStyleType {
					export class DictionarySymbolStyle extends com.arcgismaps.mapping.symbology.SymbolStyleType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleType.DictionarySymbolStyle>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolStyleType.DictionarySymbolStyle;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolStyleType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSymbolStyleType): com.arcgismaps.mapping.symbology.SymbolStyleType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleType.Factory.WhenMappings>;
						}
					}
					export class SymbolStyle extends com.arcgismaps.mapping.symbology.SymbolStyleType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleType.SymbolStyle>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolStyleType.SymbolStyle;
					}
					export class Unknown extends com.arcgismaps.mapping.symbology.SymbolStyleType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolStyleType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolStyleType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class SymbolTransformingSerializer extends kotlinx.serialization.json.JsonTransformingSerializer<com.arcgismaps.mapping.symbology.Symbol> {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolTransformingSerializer>;
					public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolTransformingSerializer;
					public transformDeserialize(param0: kotlinx.serialization.json.JsonElement): kotlinx.serialization.json.JsonElement;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class SymbolType {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType>;
					public getCoreSymbolType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSymbolType;
				}
				export module SymbolType {
					export class CompositeSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.CompositeSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.CompositeSymbol;
					}
					export class DistanceCompositeSceneSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.DistanceCompositeSceneSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.DistanceCompositeSceneSymbol;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSymbolType): com.arcgismaps.mapping.symbology.SymbolType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.Factory.WhenMappings>;
						}
					}
					export class ModelSceneSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.ModelSceneSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.ModelSceneSymbol;
					}
					export class MultilayerPointSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.MultilayerPointSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.MultilayerPointSymbol;
					}
					export class MultilayerPolygonSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.MultilayerPolygonSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.MultilayerPolygonSymbol;
					}
					export class MultilayerPolylineSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.MultilayerPolylineSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.MultilayerPolylineSymbol;
					}
					export class PictureFillSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.PictureFillSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.PictureFillSymbol;
					}
					export class PictureMarkerSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.PictureMarkerSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.PictureMarkerSymbol;
					}
					export class SimpleFillSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.SimpleFillSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.SimpleFillSymbol;
					}
					export class SimpleLineSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.SimpleLineSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.SimpleLineSymbol;
					}
					export class SimpleMarkerSceneSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.SimpleMarkerSceneSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.SimpleMarkerSceneSymbol;
					}
					export class SimpleMarkerSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.SimpleMarkerSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.SimpleMarkerSymbol;
					}
					export class TextSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.TextSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.TextSymbol;
					}
					export class Unknown extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.Unknown;
					}
					export class UnsupportedSymbol extends com.arcgismaps.mapping.symbology.SymbolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.SymbolType.UnsupportedSymbol>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.SymbolType.UnsupportedSymbol;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class TextSymbol extends com.arcgismaps.mapping.symbology.MarkerSymbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.TextSymbol>;
					public getFontFamily(): string;
					public getVerticalAlignment(): com.arcgismaps.mapping.symbology.VerticalAlignment;
					public setFontFamily(param0: string): void;
					public setSize(param0: number): void;
					public "getBackgroundColor-I-ELunk"(): number;
					public getHaloWidth(): number;
					public setVerticalAlignment(param0: com.arcgismaps.mapping.symbology.VerticalAlignment): void;
					public getOutlineWidth(): number;
					public "getColor-I-ELunk"(): number;
					public getFontDecoration(): com.arcgismaps.mapping.symbology.FontDecoration;
					public "setColor-iGKdAYA"(param0: number): void;
					public getSize(): number;
					public setFontWeight(param0: com.arcgismaps.mapping.symbology.FontWeight): void;
					public setText(param0: string): void;
					public "setHaloColor-siLklbo"(param0: com.arcgismaps.Color): void;
					public "getOutlineColor-ZC_MnaQ"(): com.arcgismaps.Color;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreTextSymbol, param1: boolean);
					public setKerningEnabled(param0: boolean): void;
					public "getHaloColor-ZC_MnaQ"(): com.arcgismaps.Color;
					public setHorizontalAlignment(param0: com.arcgismaps.mapping.symbology.HorizontalAlignment): void;
					public getFontStyle(): com.arcgismaps.mapping.symbology.FontStyle;
					public getFontWeight(): com.arcgismaps.mapping.symbology.FontWeight;
					public getKerningEnabled(): boolean;
					public toJson(): string;
					public "setBackgroundColor-iGKdAYA"(param0: number): void;
					public getText(): string;
					public setOutlineWidth(param0: number): void;
					public getHorizontalAlignment(): com.arcgismaps.mapping.symbology.HorizontalAlignment;
					public equals(param0: any): boolean;
					public clone(): com.arcgismaps.mapping.symbology.TextSymbol;
					public getCoreTextSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTextSymbol;
					public setHaloWidth(param0: number): void;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public setFontStyle(param0: com.arcgismaps.mapping.symbology.FontStyle): void;
					public "setOutlineColor-siLklbo"(param0: com.arcgismaps.Color): void;
					public setFontDecoration(param0: com.arcgismaps.mapping.symbology.FontDecoration): void;
					public clone(): com.arcgismaps.mapping.symbology.MarkerSymbol;
				}
				export module TextSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreTextSymbol,com.arcgismaps.mapping.symbology.TextSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.TextSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.TextSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class UniqueValue extends com.arcgismaps.io.JsonSerializable {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.UniqueValue>;
					public getLabel(): string;
					public toJson(): string;
					public setDescription(param0: string): void;
					public getValues(): java.util.List<any>;
					public getCoreUniqueValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUniqueValue;
					public setLabel(param0: string): void;
					public setSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public getUnsupportedJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public clone(): com.arcgismaps.mapping.symbology.UniqueValue;
					public getSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public equals(param0: any): boolean;
					public constructor(param0: string, param1: string, param2: com.arcgismaps.mapping.symbology.Symbol, param3: java.lang.Iterable<any>, param4: java.lang.Iterable<any>);
					public constructor(param0: com.arcgismaps.internal.jni.CoreUniqueValue, param1: boolean);
					public getUnknownJson$arcgis_maps_any_release(): java.util.Map<string,any>;
					public getAlternateSymbols(): java.util.List<com.arcgismaps.mapping.symbology.Symbol>;
					public getDescription(): string;
					public hashCode(): number;
				}
				export module UniqueValue {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.UniqueValue.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.mapping.symbology.UniqueValue;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUniqueValue,com.arcgismaps.mapping.symbology.UniqueValue> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.UniqueValue.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.UniqueValue.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class UniqueValueRenderer extends com.arcgismaps.mapping.symbology.Renderer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.UniqueValueRenderer>;
					public setDefaultSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public getDefaultSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public toJson(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUniqueValueRenderer, param1: boolean);
					public getCoreUniqueValueRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUniqueValueRenderer;
					public clone(): com.arcgismaps.mapping.symbology.UniqueValueRenderer;
					public getUniqueValues(): java.util.List<com.arcgismaps.mapping.symbology.UniqueValue>;
					public constructor(param0: java.lang.Iterable<string>, param1: java.lang.Iterable<com.arcgismaps.mapping.symbology.UniqueValue>, param2: string, param3: com.arcgismaps.mapping.symbology.Symbol);
					public setDefaultLabel(param0: string): void;
					public getFieldNames(): java.util.List<string>;
					public getDefaultLabel(): string;
					public clone(): com.arcgismaps.mapping.symbology.Renderer;
				}
				export module UniqueValueRenderer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUniqueValueRenderer,com.arcgismaps.mapping.symbology.UniqueValueRenderer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.UniqueValueRenderer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.UniqueValueRenderer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class UnsupportedRenderer extends com.arcgismaps.mapping.symbology.Renderer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.UnsupportedRenderer>;
					public getCoreUnsupportedRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnsupportedRenderer;
					public toJson(): string;
					public clone(): com.arcgismaps.mapping.symbology.UnsupportedRenderer;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUnsupportedRenderer, param1: boolean);
					public clone(): com.arcgismaps.mapping.symbology.Renderer;
				}
				export module UnsupportedRenderer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUnsupportedRenderer,com.arcgismaps.mapping.symbology.UnsupportedRenderer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.UnsupportedRenderer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.UnsupportedRenderer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class UnsupportedSymbol extends com.arcgismaps.mapping.symbology.Symbol {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.UnsupportedSymbol>;
					public toJson(): string;
					public clone(): com.arcgismaps.mapping.symbology.Symbol;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUnsupportedSymbol, param1: boolean);
					public clone(): com.arcgismaps.mapping.symbology.UnsupportedSymbol;
					public getCoreUnsupportedSymbol$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUnsupportedSymbol;
				}
				export module UnsupportedSymbol {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUnsupportedSymbol,com.arcgismaps.mapping.symbology.UnsupportedSymbol> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.UnsupportedSymbol.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.UnsupportedSymbol.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class VectorMarkerSymbolElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VectorMarkerSymbolElement>;
					public getMultilayerSymbol(): com.arcgismaps.mapping.symbology.MultilayerSymbol;
					public getCoreVectorMarkerSymbolElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVectorMarkerSymbolElement;
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public setMultilayerSymbol(param0: com.arcgismaps.mapping.symbology.MultilayerSymbol): void;
					public constructor(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.mapping.symbology.MultilayerSymbol);
					public constructor(param0: com.arcgismaps.internal.jni.CoreVectorMarkerSymbolElement);
					public setGeometry(param0: com.arcgismaps.geometry.Geometry): void;
				}
				export module VectorMarkerSymbolElement {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreVectorMarkerSymbolElement,com.arcgismaps.mapping.symbology.VectorMarkerSymbolElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VectorMarkerSymbolElement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.VectorMarkerSymbolElement.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export class VectorMarkerSymbolLayer extends com.arcgismaps.mapping.symbology.MarkerSymbolLayer {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VectorMarkerSymbolLayer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreVectorMarkerSymbolLayer);
					public getCoreVectorMarkerSymbolLayer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVectorMarkerSymbolLayer;
					public getVectorMarkerSymbolElements(): java.util.List<com.arcgismaps.mapping.symbology.VectorMarkerSymbolElement>;
					public clone(): com.arcgismaps.mapping.symbology.MarkerSymbolLayer;
					public clone(): com.arcgismaps.mapping.symbology.VectorMarkerSymbolLayer;
					public clone(): com.arcgismaps.mapping.symbology.SymbolLayer;
					public constructor(param0: java.lang.Iterable<com.arcgismaps.mapping.symbology.VectorMarkerSymbolElement>);
				}
				export module VectorMarkerSymbolLayer {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreVectorMarkerSymbolLayer,com.arcgismaps.mapping.symbology.VectorMarkerSymbolLayer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VectorMarkerSymbolLayer.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.VectorMarkerSymbolLayer.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export abstract class VerticalAlignment {
					public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VerticalAlignment>;
					public getCoreVerticalAlignment$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVerticalAlignment;
				}
				export module VerticalAlignment {
					export class Baseline extends com.arcgismaps.mapping.symbology.VerticalAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VerticalAlignment.Baseline>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.VerticalAlignment.Baseline;
					}
					export class Bottom extends com.arcgismaps.mapping.symbology.VerticalAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VerticalAlignment.Bottom>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.VerticalAlignment.Bottom;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VerticalAlignment.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.VerticalAlignment.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreVerticalAlignment): com.arcgismaps.mapping.symbology.VerticalAlignment;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VerticalAlignment.Factory.WhenMappings>;
						}
					}
					export class Middle extends com.arcgismaps.mapping.symbology.VerticalAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VerticalAlignment.Middle>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.VerticalAlignment.Middle;
					}
					export class Top extends com.arcgismaps.mapping.symbology.VerticalAlignment {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.VerticalAlignment.Top>;
						public static INSTANCE: com.arcgismaps.mapping.symbology.VerticalAlignment.Top;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export abstract class BaseStretchRenderer extends com.arcgismaps.mapping.symbology.raster.RasterRenderer {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.BaseStretchRenderer>;
						public get_stretchParameters$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.raster.StretchParameters;
						public set_stretchParameters$arcgis_maps_any_release(param0: com.arcgismaps.mapping.symbology.raster.StretchParameters): void;
						public getStretchParameters(): com.arcgismaps.mapping.symbology.raster.StretchParameters;
						public getGammas(): java.util.List<java.lang.Double>;
						public getEstimateStatistics(): boolean;
						public getCoreBaseStretchRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBaseStretchRenderer;
					}
					export module BaseStretchRenderer {
						export class Factory extends com.arcgismaps.mapping.symbology.raster.BaseStretchRendererFactory {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.BaseStretchRenderer.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.BaseStretchRenderer.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class BaseStretchRendererFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreBaseStretchRenderer,com.arcgismaps.mapping.symbology.raster.BaseStretchRenderer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.BaseStretchRendererFactory>;
						public constructor();
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreBaseStretchRenderer): com.arcgismaps.mapping.symbology.raster.BaseStretchRenderer;
						public convertToPublic(param0: any): any;
					}
					export module BaseStretchRendererFactory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.BaseStretchRendererFactory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class BlendRenderer extends com.arcgismaps.mapping.symbology.raster.HillshadeRenderer {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.BlendRenderer>;
						public getSourceMinValues(): java.util.List<java.lang.Double>;
						public getElevationRaster(): com.arcgismaps.raster.Raster;
						public getNoDataValues(): java.util.List<java.lang.Double>;
						public getColorRamp(): com.arcgismaps.mapping.symbology.raster.ColorRamp;
						public getCoreBlendRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBlendRenderer;
						public constructor(param0: com.arcgismaps.raster.Raster, param1: java.lang.Iterable<java.lang.Double>, param2: java.lang.Iterable<java.lang.Double>, param3: java.lang.Iterable<java.lang.Double>, param4: java.lang.Iterable<java.lang.Double>, param5: java.lang.Iterable<java.lang.Double>, param6: java.lang.Iterable<java.lang.Double>, param7: com.arcgismaps.mapping.symbology.raster.ColorRamp, param8: number, param9: number, param10: com.arcgismaps.raster.SlopeType, param11: number, param12: number, param13: number, param14: number);
						public getGammas(): java.util.List<java.lang.Double>;
						public getSourceMaxValues(): java.util.List<java.lang.Double>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreBlendRenderer);
						public getOutputMaxValues(): java.util.List<java.lang.Double>;
						public getOutputMinValues(): java.util.List<java.lang.Double>;
					}
					export module BlendRenderer {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreBlendRenderer,com.arcgismaps.mapping.symbology.raster.BlendRenderer> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.BlendRenderer.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.BlendRenderer.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class ColorRamp {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.ColorRamp>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreColorRamp);
						public getCoreColorRamp$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreColorRamp;
					}
					export module ColorRamp {
						export class Companion {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.ColorRamp.Companion>;
							public create(param0: com.arcgismaps.mapping.symbology.raster.PresetColorRampType, param1: number): com.arcgismaps.mapping.symbology.raster.ColorRamp;
						}
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreColorRamp,com.arcgismaps.mapping.symbology.raster.ColorRamp> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.ColorRamp.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.ColorRamp.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class Colormap {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.Colormap>;
						public getCoreColormap$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreColormap;
						public constructor(param0: com.arcgismaps.internal.jni.CoreColormap);
					}
					export module Colormap {
						export class Companion {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.Colormap.Companion>;
							public create(param0: java.lang.Iterable<com.arcgismaps.Color>): com.arcgismaps.mapping.symbology.raster.Colormap;
						}
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreColormap,com.arcgismaps.mapping.symbology.raster.Colormap> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.Colormap.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.Colormap.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class ColormapRenderer extends com.arcgismaps.mapping.symbology.raster.RasterRenderer {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.ColormapRenderer>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreColormapRenderer);
						public getCoreColormapRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreColormapRenderer;
						public constructor(param0: java.lang.Iterable<com.arcgismaps.Color>);
						public getColormap(): com.arcgismaps.mapping.symbology.raster.Colormap;
						public constructor(param0: com.arcgismaps.mapping.symbology.raster.Colormap);
					}
					export module ColormapRenderer {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreColormapRenderer,com.arcgismaps.mapping.symbology.raster.ColormapRenderer> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.ColormapRenderer.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.ColormapRenderer.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export abstract class HillshadeRenderer extends com.arcgismaps.mapping.symbology.raster.RasterRenderer {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.HillshadeRenderer>;
						public getPixelSizeFactor(): number;
						public getOutputBitDepth(): number;
						public getSlopeType(): com.arcgismaps.raster.SlopeType;
						public getAltitude(): number;
						public getAzimuth(): number;
						public getZFactor(): number;
						public getPixelSizePower(): number;
						public getCoreHillshadeRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreHillshadeRenderer;
					}
					export module HillshadeRenderer {
						export class Companion {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.HillshadeRenderer.Companion>;
							public create(param0: number, param1: number, param2: number, param3: com.arcgismaps.raster.SlopeType, param4: number, param5: number, param6: number): com.arcgismaps.mapping.symbology.raster.HillshadeRenderer;
						}
						export class Factory extends com.arcgismaps.mapping.symbology.raster.HillshadeRendererFactory {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.HillshadeRenderer.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.HillshadeRenderer.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class HillshadeRendererFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreHillshadeRenderer,com.arcgismaps.mapping.symbology.raster.HillshadeRenderer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.HillshadeRendererFactory>;
						public constructor();
						public constructor(param0: any);
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreHillshadeRenderer): com.arcgismaps.mapping.symbology.raster.HillshadeRenderer;
						public convertToPublic(param0: any): any;
					}
					export module HillshadeRendererFactory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.HillshadeRendererFactory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class HillshadeRendererImpl extends com.arcgismaps.mapping.symbology.raster.HillshadeRenderer {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.HillshadeRendererImpl>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreHillshadeRenderer);
						public constructor(param0: number, param1: number, param2: number, param3: com.arcgismaps.raster.SlopeType, param4: number, param5: number, param6: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class HistogramEqualizationStretchParameters extends com.arcgismaps.mapping.symbology.raster.StretchParameters {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.HistogramEqualizationStretchParameters>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreHistogramEqualizationStretchParameters);
						public getCoreHistogramEqualizationStretchParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreHistogramEqualizationStretchParameters;
					}
					export module HistogramEqualizationStretchParameters {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreHistogramEqualizationStretchParameters,com.arcgismaps.mapping.symbology.raster.HistogramEqualizationStretchParameters> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.HistogramEqualizationStretchParameters.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.HistogramEqualizationStretchParameters.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class MinMaxStretchParameters extends com.arcgismaps.mapping.symbology.raster.StretchParameters {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.MinMaxStretchParameters>;
						public getMaxValues(): java.util.List<java.lang.Double>;
						public getCoreMinMaxStretchParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMinMaxStretchParameters;
						public constructor(param0: java.lang.Iterable<java.lang.Double>, param1: java.lang.Iterable<java.lang.Double>);
						public constructor(param0: com.arcgismaps.internal.jni.CoreMinMaxStretchParameters);
						public getMinValues(): java.util.List<java.lang.Double>;
					}
					export module MinMaxStretchParameters {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMinMaxStretchParameters,com.arcgismaps.mapping.symbology.raster.MinMaxStretchParameters> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.MinMaxStretchParameters.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.MinMaxStretchParameters.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export abstract class PansharpenType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PansharpenType>;
						public getCorePansharpenType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePansharpenType;
					}
					export module PansharpenType {
						export class Brovey extends com.arcgismaps.mapping.symbology.raster.PansharpenType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PansharpenType.Brovey>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PansharpenType.Brovey;
						}
						export class Esri extends com.arcgismaps.mapping.symbology.raster.PansharpenType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PansharpenType.Esri>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PansharpenType.Esri;
						}
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PansharpenType.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PansharpenType.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CorePansharpenType): com.arcgismaps.mapping.symbology.raster.PansharpenType;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PansharpenType.Factory.WhenMappings>;
							}
						}
						export class GramSchmidt extends com.arcgismaps.mapping.symbology.raster.PansharpenType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PansharpenType.GramSchmidt>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PansharpenType.GramSchmidt;
						}
						export class Ihs extends com.arcgismaps.mapping.symbology.raster.PansharpenType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PansharpenType.Ihs>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PansharpenType.Ihs;
						}
						export class Mean extends com.arcgismaps.mapping.symbology.raster.PansharpenType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PansharpenType.Mean>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PansharpenType.Mean;
						}
						export class None extends com.arcgismaps.mapping.symbology.raster.PansharpenType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PansharpenType.None>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PansharpenType.None;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class PercentClipStretchParameters extends com.arcgismaps.mapping.symbology.raster.StretchParameters {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PercentClipStretchParameters>;
						public constructor(param0: com.arcgismaps.internal.jni.CorePercentClipStretchParameters);
						public getCorePercentClipStretchParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePercentClipStretchParameters;
						public getMin(): number;
						public constructor(param0: number, param1: number);
						public getMax(): number;
					}
					export module PercentClipStretchParameters {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePercentClipStretchParameters,com.arcgismaps.mapping.symbology.raster.PercentClipStretchParameters> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PercentClipStretchParameters.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PercentClipStretchParameters.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export abstract class PresetColorRampType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PresetColorRampType>;
						public getCorePresetColorRampType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePresetColorRampType;
					}
					export module PresetColorRampType {
						export class DemLight extends com.arcgismaps.mapping.symbology.raster.PresetColorRampType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PresetColorRampType.DemLight>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PresetColorRampType.DemLight;
						}
						export class DemScreen extends com.arcgismaps.mapping.symbology.raster.PresetColorRampType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PresetColorRampType.DemScreen>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PresetColorRampType.DemScreen;
						}
						export class Elevation extends com.arcgismaps.mapping.symbology.raster.PresetColorRampType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PresetColorRampType.Elevation>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PresetColorRampType.Elevation;
						}
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PresetColorRampType.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PresetColorRampType.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CorePresetColorRampType): com.arcgismaps.mapping.symbology.raster.PresetColorRampType;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PresetColorRampType.Factory.WhenMappings>;
							}
						}
						export class None extends com.arcgismaps.mapping.symbology.raster.PresetColorRampType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.PresetColorRampType.None>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.PresetColorRampType.None;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export abstract class RasterRenderer {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRenderer>;
						public getCoreRasterRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRasterRenderer;
						public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.raster.RasterRendererType;
					}
					export module RasterRenderer {
						export class Factory extends com.arcgismaps.mapping.symbology.raster.RasterRendererFactory {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRenderer.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.RasterRenderer.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class RasterRendererFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRasterRenderer,com.arcgismaps.mapping.symbology.raster.RasterRenderer> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererFactory>;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRasterRenderer): com.arcgismaps.mapping.symbology.raster.RasterRenderer;
						public constructor();
						public constructor(param0: any);
						public convertToPublic(param0: any): any;
					}
					export module RasterRendererFactory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererFactory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class RasterRendererImpl extends com.arcgismaps.mapping.symbology.raster.RasterRenderer {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererImpl>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreRasterRenderer);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export abstract class RasterRendererType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererType>;
						public getCoreRasterRendererType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRasterRendererType;
					}
					export module RasterRendererType {
						export class BlendRenderer extends com.arcgismaps.mapping.symbology.raster.RasterRendererType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererType.BlendRenderer>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.RasterRendererType.BlendRenderer;
						}
						export class ColormapRenderer extends com.arcgismaps.mapping.symbology.raster.RasterRendererType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererType.ColormapRenderer>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.RasterRendererType.ColormapRenderer;
						}
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererType.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.RasterRendererType.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRasterRendererType): com.arcgismaps.mapping.symbology.raster.RasterRendererType;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererType.Factory.WhenMappings>;
							}
						}
						export class HillshadeRenderer extends com.arcgismaps.mapping.symbology.raster.RasterRendererType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererType.HillshadeRenderer>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.RasterRendererType.HillshadeRenderer;
						}
						export class RasterRenderer extends com.arcgismaps.mapping.symbology.raster.RasterRendererType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererType.RasterRenderer>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.RasterRendererType.RasterRenderer;
						}
						export class RgbRenderer extends com.arcgismaps.mapping.symbology.raster.RasterRendererType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererType.RgbRenderer>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.RasterRendererType.RgbRenderer;
						}
						export class StretchRenderer extends com.arcgismaps.mapping.symbology.raster.RasterRendererType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RasterRendererType.StretchRenderer>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.RasterRendererType.StretchRenderer;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class RgbRenderer extends com.arcgismaps.mapping.symbology.raster.BaseStretchRenderer {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RgbRenderer>;
						public constructor(param0: com.arcgismaps.mapping.symbology.raster.StretchParameters, param1: java.lang.Iterable<java.lang.Integer>, param2: java.lang.Iterable<java.lang.Double>, param3: boolean, param4: com.arcgismaps.mapping.symbology.raster.PansharpenType, param5: com.arcgismaps.raster.Raster, param6: java.lang.Iterable<java.lang.Double>);
						public getBandIndexes(): java.util.List<java.lang.Integer>;
						public getPanchromaticRaster(): com.arcgismaps.raster.Raster;
						public constructor(param0: com.arcgismaps.internal.jni.CoreRGBRenderer);
						public constructor(param0: com.arcgismaps.mapping.symbology.raster.StretchParameters, param1: java.lang.Iterable<java.lang.Integer>, param2: java.lang.Iterable<java.lang.Double>, param3: boolean);
						public getWeights(): java.util.List<java.lang.Double>;
						public getCoreRgbRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRGBRenderer;
						public getPansharpenType(): com.arcgismaps.mapping.symbology.raster.PansharpenType;
					}
					export module RgbRenderer {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRGBRenderer,com.arcgismaps.mapping.symbology.raster.RgbRenderer> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.RgbRenderer.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.RgbRenderer.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class StandardDeviationStretchParameters extends com.arcgismaps.mapping.symbology.raster.StretchParameters {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StandardDeviationStretchParameters>;
						public getCoreStandardDeviationStretchParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStandardDeviationStretchParameters;
						public constructor(param0: number);
						public constructor(param0: com.arcgismaps.internal.jni.CoreStandardDeviationStretchParameters);
						public getFactor(): number;
					}
					export module StandardDeviationStretchParameters {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreStandardDeviationStretchParameters,com.arcgismaps.mapping.symbology.raster.StandardDeviationStretchParameters> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StandardDeviationStretchParameters.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.StandardDeviationStretchParameters.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export abstract class StretchParameters {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParameters>;
						public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.symbology.raster.StretchParametersType;
						public getCoreStretchParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStretchParameters;
					}
					export module StretchParameters {
						export class Factory extends com.arcgismaps.mapping.symbology.raster.StretchParametersFactory {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParameters.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.StretchParameters.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class StretchParametersFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreStretchParameters,com.arcgismaps.mapping.symbology.raster.StretchParameters> {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersFactory>;
						public constructor();
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreStretchParameters): com.arcgismaps.mapping.symbology.raster.StretchParameters;
						public convertToPublic(param0: any): any;
					}
					export module StretchParametersFactory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersFactory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export abstract class StretchParametersType {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersType>;
						public getCoreStretchParametersType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStretchParametersType;
					}
					export module StretchParametersType {
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersType.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.StretchParametersType.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CoreStretchParametersType): com.arcgismaps.mapping.symbology.raster.StretchParametersType;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersType.Factory.WhenMappings>;
							}
						}
						export class HistogramEqualizationStretchParameters extends com.arcgismaps.mapping.symbology.raster.StretchParametersType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersType.HistogramEqualizationStretchParameters>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.StretchParametersType.HistogramEqualizationStretchParameters;
						}
						export class MinMaxStretchParameters extends com.arcgismaps.mapping.symbology.raster.StretchParametersType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersType.MinMaxStretchParameters>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.StretchParametersType.MinMaxStretchParameters;
						}
						export class PercentClipStretchParameters extends com.arcgismaps.mapping.symbology.raster.StretchParametersType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersType.PercentClipStretchParameters>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.StretchParametersType.PercentClipStretchParameters;
						}
						export class StandardDeviationStretchParameters extends com.arcgismaps.mapping.symbology.raster.StretchParametersType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersType.StandardDeviationStretchParameters>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.StretchParametersType.StandardDeviationStretchParameters;
						}
						export class Unknown extends com.arcgismaps.mapping.symbology.raster.StretchParametersType {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchParametersType.Unknown>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.StretchParametersType.Unknown;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module symbology {
				export module raster {
					export class StretchRenderer extends com.arcgismaps.mapping.symbology.raster.BaseStretchRenderer {
						public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchRenderer>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreStretchRenderer);
						public getCoreStretchRenderer$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStretchRenderer;
						public constructor(param0: com.arcgismaps.mapping.symbology.raster.StretchParameters, param1: java.lang.Iterable<java.lang.Double>, param2: boolean, param3: com.arcgismaps.mapping.symbology.raster.ColorRamp);
					}
					export module StretchRenderer {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreStretchRenderer,com.arcgismaps.mapping.symbology.raster.StretchRenderer> {
							public static class: java.lang.Class<com.arcgismaps.mapping.symbology.raster.StretchRenderer.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.symbology.raster.StretchRenderer.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class AnalysisOverlay {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.AnalysisOverlay>;
					public setVisible(param0: boolean): void;
					public getCoreAnalysisOverlay$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAnalysisOverlay;
					public isVisible(): boolean;
					public constructor(param0: java.lang.Iterable<any>);
					public constructor(param0: com.arcgismaps.internal.jni.CoreAnalysisOverlay, param1: boolean);
					public getAnalyses(): java.util.List<com.arcgismaps.analysis.Analysis>;
				}
				export module AnalysisOverlay {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreAnalysisOverlay,com.arcgismaps.mapping.view.AnalysisOverlay> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnalysisOverlay.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnalysisOverlay.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class AnimationCurve {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve>;
					public getCoreAnimationCurve$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAnimationCurve;
				}
				export module AnimationCurve {
					export class EaseInCirc extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInCirc>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInCirc;
					}
					export class EaseInCubic extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInCubic>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInCubic;
					}
					export class EaseInExpo extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInExpo>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInExpo;
					}
					export class EaseInOutCirc extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInOutCirc>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInOutCirc;
					}
					export class EaseInOutCubic extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInOutCubic>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInOutCubic;
					}
					export class EaseInOutExpo extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInOutExpo>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInOutExpo;
					}
					export class EaseInOutQuad extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInOutQuad>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInOutQuad;
					}
					export class EaseInOutQuart extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInOutQuart>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInOutQuart;
					}
					export class EaseInOutQuint extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInOutQuint>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInOutQuint;
					}
					export class EaseInOutSine extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInOutSine>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInOutSine;
					}
					export class EaseInQuad extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInQuad>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInQuad;
					}
					export class EaseInQuart extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInQuart>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInQuart;
					}
					export class EaseInQuint extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInQuint>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInQuint;
					}
					export class EaseInSine extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseInSine>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseInSine;
					}
					export class EaseOutCirc extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseOutCirc>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseOutCirc;
					}
					export class EaseOutCubic extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseOutCubic>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseOutCubic;
					}
					export class EaseOutExpo extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseOutExpo>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseOutExpo;
					}
					export class EaseOutQuad extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseOutQuad>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseOutQuad;
					}
					export class EaseOutQuart extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseOutQuart>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseOutQuart;
					}
					export class EaseOutQuint extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseOutQuint>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseOutQuint;
					}
					export class EaseOutSine extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.EaseOutSine>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.EaseOutSine;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAnimationCurve): com.arcgismaps.mapping.view.AnimationCurve;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.Factory.WhenMappings>;
						}
					}
					export class Linear extends com.arcgismaps.mapping.view.AnimationCurve {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AnimationCurve.Linear>;
						public static INSTANCE: com.arcgismaps.mapping.view.AnimationCurve.Linear;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class AtmosphereEffect {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.AtmosphereEffect>;
					public getCoreAtmosphereEffect$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAtmosphereEffect;
				}
				export module AtmosphereEffect {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AtmosphereEffect.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.AtmosphereEffect.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAtmosphereEffect): com.arcgismaps.mapping.view.AtmosphereEffect;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.AtmosphereEffect.Factory.WhenMappings>;
						}
					}
					export class HorizonOnly extends com.arcgismaps.mapping.view.AtmosphereEffect {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AtmosphereEffect.HorizonOnly>;
						public static INSTANCE: com.arcgismaps.mapping.view.AtmosphereEffect.HorizonOnly;
					}
					export class None extends com.arcgismaps.mapping.view.AtmosphereEffect {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AtmosphereEffect.None>;
						public static INSTANCE: com.arcgismaps.mapping.view.AtmosphereEffect.None;
					}
					export class Realistic extends com.arcgismaps.mapping.view.AtmosphereEffect {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.AtmosphereEffect.Realistic>;
						public static INSTANCE: com.arcgismaps.mapping.view.AtmosphereEffect.Realistic;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class AttributionBarLayoutChangeEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.AttributionBarLayoutChangeEvent>;
					public getView(): globalAndroid.view.View;
					public component5(): number;
					public getOldBottom(): number;
					public getRight(): number;
					public getBottom(): number;
					public component3(): number;
					public component1(): globalAndroid.view.View;
					public copy(param0: globalAndroid.view.View, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): com.arcgismaps.mapping.view.AttributionBarLayoutChangeEvent;
					public constructor(param0: globalAndroid.view.View, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number);
					public component7(): number;
					public getTop(): number;
					public getOldRight(): number;
					public component9(): number;
					public getOldLeft(): number;
					public equals(param0: any): boolean;
					public toString(): string;
					public component6(): number;
					public component4(): number;
					public component2(): number;
					public component8(): number;
					public getLeft(): number;
					public hashCode(): number;
					public getOldTop(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class BackgroundGrid {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.BackgroundGrid>;
					public setVisible(param0: boolean): void;
					public "getLineColor-I-ELunk"(): number;
					public getCoreBackgroundGrid$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBackgroundGrid;
					public isVisible(): boolean;
					public setSize(param0: number): void;
					public "setLineColor-iGKdAYA"(param0: number): void;
					public "getColor-I-ELunk"(): number;
					public getLineWidth(): number;
					public "setColor-iGKdAYA"(param0: number): void;
					public getSize(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreBackgroundGrid);
					public setLineWidth(param0: number): void;
				}
				export module BackgroundGrid {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreBackgroundGrid,com.arcgismaps.mapping.view.BackgroundGrid> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.BackgroundGrid.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.BackgroundGrid.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class Callout {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.Callout>;
					public constructor(param0: com.arcgismaps.mapping.view.GeoView);
					public isVisible(): boolean;
					public isAnimationEnabled(): boolean;
					public onLifeCycleReady$arcgis_maps_any_release(): void;
					public show(param0: globalAndroid.view.View, param1: com.arcgismaps.mapping.GeoElement, param2: com.arcgismaps.geometry.Point): void;
					public show(param0: globalAndroid.view.View, param1: com.arcgismaps.geometry.Point, param2: com.arcgismaps.mapping.view.DoubleXY, param3: boolean): void;
					public dismiss(): void;
					public setAnimationEnabled(param0: boolean): void;
				}
				export module Callout {
					export class CalloutFrameDrawable {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Callout.CalloutFrameDrawable>;
						public onDraw(param0: globalAndroid.graphics.drawable.shapes.Shape, param1: globalAndroid.graphics.Canvas, param2: globalAndroid.graphics.Paint): void;
						public constructor(param0: globalAndroid.graphics.drawable.shapes.Shape, param1: number, param2: number, param3: number);
					}
					export class CalloutView {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Callout.CalloutView>;
						public showScaleDownAnimation$arcgis_maps_any_release(): void;
						public constructor(param0: globalAndroid.content.Context);
						public setContent(param0: globalAndroid.view.View): void;
						public initializeLaunchAndCollectOnViewPointChanged$arcgis_maps_any_release(): void;
						public showScaleUpAnimation$arcgis_maps_any_release(): void;
						public onMeasure(param0: number, param1: number): void;
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					}
					export class LeaderLocation {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Callout.LeaderLocation>;
						public getRotateOffsetWithGeoView(): boolean;
						public getLocation(): com.arcgismaps.geometry.Point;
						public setOffset(param0: com.arcgismaps.mapping.view.DoubleXY): void;
						public getScreenCoordinate$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.GeoView): com.arcgismaps.mapping.view.DoubleXY;
						public constructor(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.mapping.view.DoubleXY, param2: boolean);
						public applyOffsetAndRotate$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY, param1: number): com.arcgismaps.mapping.view.DoubleXY;
						public setRotateOffsetWithGeoView(param0: boolean): void;
						public setLocation(param0: com.arcgismaps.geometry.Point): void;
						public getOffset(): com.arcgismaps.mapping.view.DoubleXY;
					}
					export class Style {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Callout.Style>;
						public static INSTANCE: com.arcgismaps.mapping.view.Callout.Style;
						public static DEFAULT_LEADER_LENGTH: number;
						public static DEFAULT_LEADER_WIDTH: number;
						public static DEFAULT_LEADER_POSITION: number;
						public static DEFAULT_BACKGROUND_COLOR: number;
						public static DEFAULT_BORDER_COLOR: number;
						public static DEFAULT_BORDER_WIDTH: number;
						public static DEFAULT_CORNER_RADIUS: number;
						public static MIN_WIDTH: number;
						public static MIN_HEIGHT: number;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class Camera {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.Camera>;
					public elevate(param0: number): com.arcgismaps.mapping.view.Camera;
					public getPitch(): number;
					public getCoreCamera$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCamera;
					public constructor(param0: com.arcgismaps.mapping.view.TransformationMatrix);
					public getHeading(): number;
					public moveToward(param0: com.arcgismaps.geometry.Point, param1: number): com.arcgismaps.mapping.view.Camera;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number);
					public zoomToward(param0: com.arcgismaps.geometry.Point, param1: number): com.arcgismaps.mapping.view.Camera;
					public constructor(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number, param4: number);
					public getTransformationMatrix(): com.arcgismaps.mapping.view.TransformationMatrix;
					public constructor(param0: com.arcgismaps.internal.jni.CoreCamera);
					public moveTo(param0: com.arcgismaps.geometry.Point): com.arcgismaps.mapping.view.Camera;
					public constructor(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number);
					public moveForward(param0: number): com.arcgismaps.mapping.view.Camera;
					public getLocation(): com.arcgismaps.geometry.Point;
					public rotateTo(param0: number, param1: number, param2: number): com.arcgismaps.mapping.view.Camera;
					public getRoll(): number;
					public rotateAround(param0: com.arcgismaps.geometry.Point, param1: number, param2: number, param3: number): com.arcgismaps.mapping.view.Camera;
				}
				export module Camera {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreCamera,com.arcgismaps.mapping.view.Camera> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Camera.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.Camera.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class CameraController {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraController>;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.view.CameraControllerType;
					public getCoreCameraController$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCameraController;
				}
				export module CameraController {
					export class Factory extends com.arcgismaps.mapping.view.CameraControllerFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraController.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.CameraController.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class CameraControllerFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreCameraController,com.arcgismaps.mapping.view.CameraController> {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerFactory>;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreCameraController): com.arcgismaps.mapping.view.CameraController;
					public constructor();
					public convertToPublic(param0: any): any;
				}
				export module CameraControllerFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class CameraControllerType {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerType>;
					public getCoreCameraControllerType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCameraControllerType;
				}
				export module CameraControllerType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.CameraControllerType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreCameraControllerType): com.arcgismaps.mapping.view.CameraControllerType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerType.Factory.WhenMappings>;
						}
					}
					export class GlobeCameraController extends com.arcgismaps.mapping.view.CameraControllerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerType.GlobeCameraController>;
						public static INSTANCE: com.arcgismaps.mapping.view.CameraControllerType.GlobeCameraController;
					}
					export class OrbitGeoElementCameraController extends com.arcgismaps.mapping.view.CameraControllerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerType.OrbitGeoElementCameraController>;
						public static INSTANCE: com.arcgismaps.mapping.view.CameraControllerType.OrbitGeoElementCameraController;
					}
					export class OrbitLocationCameraController extends com.arcgismaps.mapping.view.CameraControllerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerType.OrbitLocationCameraController>;
						public static INSTANCE: com.arcgismaps.mapping.view.CameraControllerType.OrbitLocationCameraController;
					}
					export class TransformationMatrixCameraController extends com.arcgismaps.mapping.view.CameraControllerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerType.TransformationMatrixCameraController>;
						public static INSTANCE: com.arcgismaps.mapping.view.CameraControllerType.TransformationMatrixCameraController;
					}
					export class Unknown extends com.arcgismaps.mapping.view.CameraControllerType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.CameraControllerType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.view.CameraControllerType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class Device {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.Device>;
					public getCoreDevice$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDevice;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDevice);
				}
				export module Device {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Device.Companion>;
						public createOgl(): com.arcgismaps.mapping.view.Device;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDevice,com.arcgismaps.mapping.view.Device> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Device.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.Device.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class DeviceOrientation {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.DeviceOrientation>;
					public getCoreDeviceOrientation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDeviceOrientation;
				}
				export module DeviceOrientation {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DeviceOrientation.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.DeviceOrientation.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDeviceOrientation): com.arcgismaps.mapping.view.DeviceOrientation;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.DeviceOrientation.Factory.WhenMappings>;
						}
					}
					export class LandscapeLeft extends com.arcgismaps.mapping.view.DeviceOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DeviceOrientation.LandscapeLeft>;
						public static INSTANCE: com.arcgismaps.mapping.view.DeviceOrientation.LandscapeLeft;
					}
					export class LandscapeRight extends com.arcgismaps.mapping.view.DeviceOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DeviceOrientation.LandscapeRight>;
						public static INSTANCE: com.arcgismaps.mapping.view.DeviceOrientation.LandscapeRight;
					}
					export class Portrait extends com.arcgismaps.mapping.view.DeviceOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DeviceOrientation.Portrait>;
						public static INSTANCE: com.arcgismaps.mapping.view.DeviceOrientation.Portrait;
					}
					export class ReversePortrait extends com.arcgismaps.mapping.view.DeviceOrientation {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DeviceOrientation.ReversePortrait>;
						public static INSTANCE: com.arcgismaps.mapping.view.DeviceOrientation.ReversePortrait;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class DoubleTapEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.DoubleTapEvent>;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point);
					public equals(param0: any): boolean;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point): com.arcgismaps.mapping.view.DoubleTapEvent;
					public toString(): string;
					public getMapPoint(): com.arcgismaps.geometry.Point;
					public component2(): com.arcgismaps.geometry.Point;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public getScreenCoordinate(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class DoubleXY {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.DoubleXY>;
					public copy(param0: number, param1: number): com.arcgismaps.mapping.view.DoubleXY;
					public getX(): number;
					public getAbsoluteValue(): com.arcgismaps.mapping.view.DoubleXY;
					public minus(param0: com.arcgismaps.mapping.view.DoubleXY): com.arcgismaps.mapping.view.DoubleXY;
					public div(param0: number): com.arcgismaps.mapping.view.DoubleXY;
					public plus(param0: com.arcgismaps.mapping.view.DoubleXY): com.arcgismaps.mapping.view.DoubleXY;
					public getY(): number;
					public length(): number;
					public equals(param0: any): boolean;
					public toString(): string;
					public component1(): number;
					public component2(): number;
					public hashCode(): number;
					public constructor(param0: number, param1: number);
				}
				export module DoubleXY {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DoubleXY.Companion>;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DoubleXY.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.DoubleXY.Factory;
						public convertToPublic$arcgis_maps_any_release(param0: androidNative.Array<number>): com.arcgismaps.mapping.view.DoubleXY;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class DownEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.DownEvent>;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point);
					public equals(param0: any): boolean;
					public toString(): string;
					public getMapPoint(): com.arcgismaps.geometry.Point;
					public component2(): com.arcgismaps.geometry.Point;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point): com.arcgismaps.mapping.view.DownEvent;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public getScreenCoordinate(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class DrawStatus {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.DrawStatus>;
					public getCoreDrawStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDrawStatus;
				}
				export module DrawStatus {
					export class Completed extends com.arcgismaps.mapping.view.DrawStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DrawStatus.Completed>;
						public static INSTANCE: com.arcgismaps.mapping.view.DrawStatus.Completed;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DrawStatus.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.DrawStatus.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDrawStatus): com.arcgismaps.mapping.view.DrawStatus;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.DrawStatus.Factory.WhenMappings>;
						}
					}
					export class InProgress extends com.arcgismaps.mapping.view.DrawStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.DrawStatus.InProgress>;
						public static INSTANCE: com.arcgismaps.mapping.view.DrawStatus.InProgress;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class FlingEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.FlingEvent>;
					public equals(param0: any): boolean;
					public toString(): string;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY): com.arcgismaps.mapping.view.FlingEvent;
					public getVelocity(): com.arcgismaps.mapping.view.DoubleXY;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class GeoView {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoView>;
					public coreGeoView: com.arcgismaps.internal.jni.CoreGeoView;
					public textureView: globalAndroid.view.TextureView;
					public drawRequestedListener: com.arcgismaps.internal.jni.CoreDrawRequestedCallbackListener;
					public renderer: com.arcgismaps.mapping.view.GeoView.RenderingThread;
					public lifeCycleOwner: androidx.lifecycle.LifecycleOwner;
					public getOnDown(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DownEvent>;
					public "exportImage-IoAF18A"(param0: any): any;
					public "identifyGraphicsOverlays-yxL6bBk"(param0: com.arcgismaps.mapping.view.DoubleXY, param1: number, param2: boolean, param3: number, param4: any): any;
					public geometryEditorDragEnd$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): void;
					public finalize(): void;
					public getTimeExtent(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.TimeExtent>;
					public getCallout(): com.arcgismaps.mapping.view.Callout;
					public getLayerViewStateChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.GeoView.GeoViewLayerViewStateChanged>;
					public setTextureView(param0: globalAndroid.view.TextureView): void;
					public geometryEditorTap$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): boolean;
					public "identifyLayer-yxL6bBk"(param0: com.arcgismaps.mapping.layers.Layer, param1: com.arcgismaps.mapping.view.DoubleXY, param2: number, param3: boolean, param4: any): any;
					public getSpatialReference(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.geometry.SpatialReference>;
					public setSelectionProperties(param0: com.arcgismaps.mapping.view.SelectionProperties): void;
					public getDrawStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.view.DrawStatus>;
					public isWrapAroundEnabled(): boolean;
					public "setViewpointAnimated-0E7RQCE"(param0: com.arcgismaps.mapping.Viewpoint, param1: number, param2: any): any;
					public getGraphicsOverlays(): java.util.List<com.arcgismaps.mapping.view.GraphicsOverlay>;
					public onCreate(param0: androidx.lifecycle.LifecycleOwner): void;
					public "identifyLayers-yxL6bBk"(param0: com.arcgismaps.mapping.view.DoubleXY, param1: number, param2: boolean, param3: number, param4: any): any;
					public setAttributionBarVisible(param0: boolean): void;
					public isNavigating(): boolean;
					public getOnLongPress(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.LongPressEvent>;
					public getOnScale(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.ScaleChangeEvent>;
					public getDrawRequestedListener(): com.arcgismaps.internal.jni.CoreDrawRequestedCallbackListener;
					public hasValidSize$arcgis_maps_any_release(): void;
					public "identifyLayers-BWLJW6A"(param0: com.arcgismaps.mapping.view.DoubleXY, param1: number, param2: boolean, param3: any): any;
					public getHeight$arcgis_maps_any_release(): number;
					public setViewpoint(param0: com.arcgismaps.mapping.Viewpoint): void;
					public createCoreView$arcgis_maps_any_release(param0: globalAndroid.content.Context): com.arcgismaps.internal.jni.CoreGeoView;
					public isAttributionBarVisible(): boolean;
					public getLabeling(): com.arcgismaps.mapping.view.ViewLabelProperties;
					public getInteractionOptions(): com.arcgismaps.mapping.view.InteractionOptions;
					public getAttributionText(): kotlinx.coroutines.flow.StateFlow<string>;
					public addCalloutView$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.Callout.CalloutView): void;
					public getOnAttributionBarLayoutChanged(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.AttributionBarLayoutChangeEvent>;
					public getLifeCycleOwner$arcgis_maps_any_release(): androidx.lifecycle.LifecycleOwner;
					public zoomOutAnimated$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY, param1: number): void;
					public getOnPan(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.PanChangeEvent>;
					public setDrawRequestCallback$arcgis_maps_any_release(param0: com.arcgismaps.internal.jni.CoreDrawRequestedCallbackListener): void;
					public setLifeCycleOwner$arcgis_maps_any_release(param0: androidx.lifecycle.LifecycleOwner): void;
					public getSelectionProperties(): com.arcgismaps.mapping.view.SelectionProperties;
					public "identifyLayer-hUnOzRk"(param0: com.arcgismaps.mapping.layers.Layer, param1: com.arcgismaps.mapping.view.DoubleXY, param2: number, param3: boolean, param4: number, param5: any): any;
					public getOnUp(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.UpEvent>;
					public geometryEditorDragMove$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): void;
					public checkManualRenderingEnabled$arcgis_maps_any_release(): boolean;
					public setLabeling(param0: com.arcgismaps.mapping.view.ViewLabelProperties): void;
					public geometryEditorDragStart$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): boolean;
					public "setViewpointAnimated-gIAlu-s"(param0: com.arcgismaps.mapping.Viewpoint, param1: any): any;
					public geometryEditorLongPress$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): boolean;
					public "identifyGraphicsOverlays-BWLJW6A"(param0: com.arcgismaps.mapping.view.DoubleXY, param1: number, param2: boolean, param3: any): any;
					public "identifyGraphicsOverlay-yxL6bBk"(param0: com.arcgismaps.mapping.view.GraphicsOverlay, param1: com.arcgismaps.mapping.view.DoubleXY, param2: number, param3: boolean, param4: any): any;
					public "identifyGraphicsOverlay-hUnOzRk"(param0: com.arcgismaps.mapping.view.GraphicsOverlay, param1: com.arcgismaps.mapping.view.DoubleXY, param2: number, param3: boolean, param4: number, param5: any): any;
					public setRenderer$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.GeoView.RenderingThread): void;
					public geometryEditorCancel$arcgis_maps_any_release(): void;
					public getCoreGeoView(): com.arcgismaps.internal.jni.CoreGeoView;
					public zoomInAnimated$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY, param1: number): void;
					public getLayerViewState(param0: com.arcgismaps.mapping.layers.Layer): com.arcgismaps.mapping.view.LayerViewState;
					public getOnSingleTapConfirmed(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.SingleTapConfirmedEvent>;
					public getOnTwoPointerTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.TwoPointerTapEvent>;
					public getNavigationChanged(): kotlinx.coroutines.flow.SharedFlow<java.lang.Boolean>;
					public getCurrentViewpoint(param0: com.arcgismaps.mapping.ViewpointType): com.arcgismaps.mapping.Viewpoint;
					public setDrawRequestedListener(param0: com.arcgismaps.internal.jni.CoreDrawRequestedCallbackListener): void;
					public getOnDoubleTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleTapEvent>;
					public onCoreViewCreated$arcgis_maps_any_release(): void;
					public updateInteracting$arcgis_maps_any_release(param0: boolean): void;
					public getRenderer$arcgis_maps_any_release(): com.arcgismaps.mapping.view.GeoView.RenderingThread;
					public setCoreGeoView(param0: com.arcgismaps.internal.jni.CoreGeoView): void;
					public isInteracting(): kotlinx.coroutines.flow.StateFlow<java.lang.Boolean>;
					public setTimeExtent(param0: com.arcgismaps.mapping.TimeExtent): void;
					public getOnRotate(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.RotationChangeEvent>;
					public getTextureView(): globalAndroid.view.TextureView;
					public "setBookmark-gIAlu-s"(param0: com.arcgismaps.mapping.Bookmark, param1: any): any;
					public getWidth$arcgis_maps_any_release(): number;
					public getViewpointChanged(): kotlinx.coroutines.flow.SharedFlow<any>;
				}
				export module GeoView {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoView.Companion>;
					}
					export class GeoViewLayerViewStateChanged {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoView.GeoViewLayerViewStateChanged>;
						public getLayer(): com.arcgismaps.mapping.layers.Layer;
						public component2(): com.arcgismaps.mapping.view.LayerViewState;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public constructor(param0: com.arcgismaps.mapping.layers.Layer, param1: com.arcgismaps.mapping.view.LayerViewState);
						public component1(): com.arcgismaps.mapping.layers.Layer;
						public getLayerViewState(): com.arcgismaps.mapping.view.LayerViewState;
						public copy(param0: com.arcgismaps.mapping.layers.Layer, param1: com.arcgismaps.mapping.view.LayerViewState): com.arcgismaps.mapping.view.GeoView.GeoViewLayerViewStateChanged;
						public toString(): string;
					}
					export class RenderingThread {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoView.RenderingThread>;
						public static TAG: string;
						public resume(param0: globalAndroid.view.TextureView): void;
						public pause(): void;
						public onSurfaceTextureDestroyed(param0: globalAndroid.graphics.SurfaceTexture): boolean;
						public constructor(param0: com.arcgismaps.mapping.view.GeoView);
						public onSurfaceTextureAvailable(param0: globalAndroid.graphics.SurfaceTexture, param1: number, param2: number): void;
						public doFrame(param0: number): void;
						public renderFrame(param0: globalAndroid.view.TextureView): void;
						public dispose(): void;
						public onSurfaceTextureSizeChanged(param0: globalAndroid.graphics.SurfaceTexture, param1: number, param2: number): void;
						public run(): void;
						public onSurfaceTextureUpdated(param0: globalAndroid.graphics.SurfaceTexture): void;
						public draw(): void;
						public waitUntilReady(): void;
					}
					export module RenderingThread {
						export class Companion {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoView.RenderingThread.Companion>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class GeoViewType {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoViewType>;
					public getCoreGeoViewType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoViewType;
				}
				export module GeoViewType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoViewType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.GeoViewType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeoViewType): com.arcgismaps.mapping.view.GeoViewType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoViewType.Factory.WhenMappings>;
						}
					}
					export class MapView extends com.arcgismaps.mapping.view.GeoViewType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoViewType.MapView>;
						public static INSTANCE: com.arcgismaps.mapping.view.GeoViewType.MapView;
					}
					export class SceneView extends com.arcgismaps.mapping.view.GeoViewType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoViewType.SceneView>;
						public static INSTANCE: com.arcgismaps.mapping.view.GeoViewType.SceneView;
					}
					export class Unknown extends com.arcgismaps.mapping.view.GeoViewType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GeoViewType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.view.GeoViewType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class GeometryEditorDragEndEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GeometryEditorDragEndEvent>;
					public equals(param0: any): boolean;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY): com.arcgismaps.mapping.view.GeometryEditorDragEndEvent;
					public toString(): string;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public getScreenCoordinate(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class GeometryEditorDragMoveEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GeometryEditorDragMoveEvent>;
					public equals(param0: any): boolean;
					public toString(): string;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY): com.arcgismaps.mapping.view.GeometryEditorDragMoveEvent;
					public getScreenCoordinate(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class GlobeCameraController extends com.arcgismaps.mapping.view.CameraController {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GlobeCameraController>;
					public constructor();
					public getCoreGlobeCameraController$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGlobeCameraController;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGlobeCameraController);
				}
				export module GlobeCameraController {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGlobeCameraController,com.arcgismaps.mapping.view.GlobeCameraController> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GlobeCameraController.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.GlobeCameraController.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class Graphic extends com.arcgismaps.mapping.GeoElement {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.Graphic>;
					public constructor(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.mapping.symbology.Symbol);
					public setPointGeometry$arcgis_maps_any_release(param0: number, param1: number, param2: number, param3: number, param4: boolean, param5: boolean, param6: com.arcgismaps.geometry.SpatialReference): void;
					public getGraphicsOverlay(): com.arcgismaps.mapping.view.GraphicsOverlay;
					public getZIndex(): number;
					public getCoreGraphic$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGraphic;
					public setSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public getSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public setSelected(param0: boolean): void;
					public setVisible(param0: boolean): void;
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public isVisible(): boolean;
					public constructor(param0: com.arcgismaps.geometry.Geometry, param1: java.util.Map<string,any>, param2: com.arcgismaps.mapping.symbology.Symbol);
					public setZIndex(param0: number): void;
					public setGeometry(param0: com.arcgismaps.geometry.Geometry): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGraphic, param1: boolean);
					public isSelected(): boolean;
					public getAttributes(): java.util.Map<string,any>;
				}
				export module Graphic {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGraphic,com.arcgismaps.mapping.view.Graphic> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Graphic.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.Graphic.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class GraphicsHardwareResources {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsHardwareResources>;
					public getCoreGraphicsHardwareResources$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGraphicsHardwareResources;
				}
				export module GraphicsHardwareResources {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsHardwareResources.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.GraphicsHardwareResources.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGraphicsHardwareResources): com.arcgismaps.mapping.view.GraphicsHardwareResources;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsHardwareResources.Factory.WhenMappings>;
						}
					}
					export class Recycle extends com.arcgismaps.mapping.view.GraphicsHardwareResources {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsHardwareResources.Recycle>;
						public static INSTANCE: com.arcgismaps.mapping.view.GraphicsHardwareResources.Recycle;
					}
					export class Save extends com.arcgismaps.mapping.view.GraphicsHardwareResources {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsHardwareResources.Save>;
						public static INSTANCE: com.arcgismaps.mapping.view.GraphicsHardwareResources.Save;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class GraphicsOverlay extends com.arcgismaps.mapping.popup.PopupSource {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsOverlay>;
					public getSelectedGraphics(): java.util.List<com.arcgismaps.mapping.view.Graphic>;
					public isPopupEnabled(): boolean;
					public getId(): string;
					public setOpacity(param0: number): void;
					public setFeatureReduction(param0: com.arcgismaps.mapping.reduction.FeatureReduction): void;
					public getRenderer(): com.arcgismaps.mapping.symbology.Renderer;
					public getScaleSymbols(): boolean;
					public setPopupEnabled(param0: boolean): void;
					public setRenderingMode(param0: com.arcgismaps.mapping.view.GraphicsRenderingMode): void;
					public getGraphics(): java.util.List<com.arcgismaps.mapping.view.Graphic>;
					public setVisible(param0: boolean): void;
					public constructor(param0: java.lang.Iterable<com.arcgismaps.mapping.view.Graphic>, param1: com.arcgismaps.mapping.view.GraphicsRenderingMode);
					public setPopupDefinition(param0: com.arcgismaps.mapping.popup.PopupDefinition): void;
					public setScaleSymbols(param0: boolean): void;
					public selectGraphics(param0: java.lang.Iterable<com.arcgismaps.mapping.view.Graphic>): void;
					public unselectGraphics(param0: java.lang.Iterable<com.arcgismaps.mapping.view.Graphic>): void;
					public getOpacity(): number;
					public getPopupDefinition(): com.arcgismaps.mapping.popup.PopupDefinition;
					public getMinScale(): java.lang.Double;
					public setMinScale(param0: java.lang.Double): void;
					public getLabelsEnabled(): boolean;
					public getRenderingMode(): com.arcgismaps.mapping.view.GraphicsRenderingMode;
					public setRenderer(param0: com.arcgismaps.mapping.symbology.Renderer): void;
					public getMaxScale(): java.lang.Double;
					public clearSelection(): void;
					public getLabelDefinitions(): java.util.List<com.arcgismaps.mapping.labeling.LabelDefinition>;
					public setMaxScale(param0: java.lang.Double): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGraphicsOverlay, param1: boolean);
					public getFeatureReduction(): com.arcgismaps.mapping.reduction.FeatureReduction;
					public isVisible(): boolean;
					public getSceneProperties(): com.arcgismaps.mapping.view.LayerSceneProperties;
					public setSceneProperties(param0: com.arcgismaps.mapping.view.LayerSceneProperties): void;
					public getExtent(): com.arcgismaps.geometry.Envelope;
					public setId(param0: string): void;
					public setLabelsEnabled(param0: boolean): void;
					public getCoreGraphicsOverlay$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGraphicsOverlay;
				}
				export module GraphicsOverlay {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGraphicsOverlay,com.arcgismaps.mapping.view.GraphicsOverlay> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsOverlay.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.GraphicsOverlay.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class GraphicsRenderingMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsRenderingMode>;
					public getCoreGraphicsRenderingMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGraphicsRenderingMode;
				}
				export module GraphicsRenderingMode {
					export class Dynamic extends com.arcgismaps.mapping.view.GraphicsRenderingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsRenderingMode.Dynamic>;
						public static INSTANCE: com.arcgismaps.mapping.view.GraphicsRenderingMode.Dynamic;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsRenderingMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.GraphicsRenderingMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGraphicsRenderingMode): com.arcgismaps.mapping.view.GraphicsRenderingMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsRenderingMode.Factory.WhenMappings>;
						}
					}
					export class Static extends com.arcgismaps.mapping.view.GraphicsRenderingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GraphicsRenderingMode.Static>;
						public static INSTANCE: com.arcgismaps.mapping.view.GraphicsRenderingMode.Static;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class Grid {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.Grid>;
					public setLabelOffset(param0: number): void;
					public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.view.GridType;
					public setTextSymbol(param0: number, param1: com.arcgismaps.mapping.symbology.Symbol): void;
					public getLabelPosition(): com.arcgismaps.mapping.view.GridLabelPosition;
					public getCoreGrid$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGrid;
					public getLineSymbol(param0: number): com.arcgismaps.mapping.symbology.Symbol;
					public getLevelCount(): number;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public getTextSymbol(param0: number): com.arcgismaps.mapping.symbology.Symbol;
					public getLabelOffset(): number;
					public setLabelPosition(param0: com.arcgismaps.mapping.view.GridLabelPosition): void;
					public getLabelVisibility(): boolean;
					public setLabelVisibility(param0: boolean): void;
					public setLineSymbol(param0: number, param1: com.arcgismaps.mapping.symbology.Symbol): void;
				}
				export module Grid {
					export class Factory extends com.arcgismaps.mapping.view.GridFactory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Grid.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.Grid.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class GridFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGrid,com.arcgismaps.mapping.view.Grid> {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GridFactory>;
					public constructor();
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGrid): com.arcgismaps.mapping.view.Grid;
					public convertToPublic(param0: any): any;
				}
				export module GridFactory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridFactory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class GridLabelPosition {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition>;
					public getCoreGridLabelPosition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGridLabelPosition;
				}
				export module GridLabelPosition {
					export class AllSides extends com.arcgismaps.mapping.view.GridLabelPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition.AllSides>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridLabelPosition.AllSides;
					}
					export class BottomLeft extends com.arcgismaps.mapping.view.GridLabelPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition.BottomLeft>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridLabelPosition.BottomLeft;
					}
					export class BottomRight extends com.arcgismaps.mapping.view.GridLabelPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition.BottomRight>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridLabelPosition.BottomRight;
					}
					export class Center extends com.arcgismaps.mapping.view.GridLabelPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition.Center>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridLabelPosition.Center;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridLabelPosition.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGridLabelPosition): com.arcgismaps.mapping.view.GridLabelPosition;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition.Factory.WhenMappings>;
						}
					}
					export class Geographic extends com.arcgismaps.mapping.view.GridLabelPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition.Geographic>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridLabelPosition.Geographic;
					}
					export class TopLeft extends com.arcgismaps.mapping.view.GridLabelPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition.TopLeft>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridLabelPosition.TopLeft;
					}
					export class TopRight extends com.arcgismaps.mapping.view.GridLabelPosition {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridLabelPosition.TopRight>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridLabelPosition.TopRight;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class GridType {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.GridType>;
					public getCoreGridType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGridType;
				}
				export module GridType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGridType): com.arcgismaps.mapping.view.GridType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.GridType.Factory.WhenMappings>;
						}
					}
					export class LatitudeLongitudeGrid extends com.arcgismaps.mapping.view.GridType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridType.LatitudeLongitudeGrid>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridType.LatitudeLongitudeGrid;
					}
					export class MgrsGrid extends com.arcgismaps.mapping.view.GridType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridType.MgrsGrid>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridType.MgrsGrid;
					}
					export class Unknown extends com.arcgismaps.mapping.view.GridType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridType.Unknown;
					}
					export class UsngGrid extends com.arcgismaps.mapping.view.GridType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridType.UsngGrid>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridType.UsngGrid;
					}
					export class UtmGrid extends com.arcgismaps.mapping.view.GridType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.GridType.UtmGrid>;
						public static INSTANCE: com.arcgismaps.mapping.view.GridType.UtmGrid;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class IdentifyGraphicsOverlayResult {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.IdentifyGraphicsOverlayResult>;
					public getGraphics(): java.util.List<com.arcgismaps.mapping.view.Graphic>;
					public getGraphicsOverlay(): com.arcgismaps.mapping.view.GraphicsOverlay;
					public getGeoElements(): java.util.List<com.arcgismaps.mapping.GeoElement>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreIdentifyGraphicsOverlayResult);
					public getPopups(): java.util.List<com.arcgismaps.mapping.popup.Popup>;
					public getCoreIdentifyGraphicsOverlayResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreIdentifyGraphicsOverlayResult;
					public getError(): java.lang.Throwable;
				}
				export module IdentifyGraphicsOverlayResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreIdentifyGraphicsOverlayResult,com.arcgismaps.mapping.view.IdentifyGraphicsOverlayResult> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.IdentifyGraphicsOverlayResult.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.IdentifyGraphicsOverlayResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class IdentifyLayerResult {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.IdentifyLayerResult>;
					public getCoreIdentifyLayerResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreIdentifyLayerResult;
					public isTransferLimitExceeded(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreIdentifyLayerResult);
					public getGeoElements(): java.util.List<com.arcgismaps.mapping.GeoElement>;
					public getLayerContent(): com.arcgismaps.mapping.layers.LayerContent;
					public getPopups(): java.util.List<com.arcgismaps.mapping.popup.Popup>;
					public getError(): java.lang.Throwable;
					public getSublayerResults(): java.util.List<com.arcgismaps.mapping.view.IdentifyLayerResult>;
				}
				export module IdentifyLayerResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreIdentifyLayerResult,com.arcgismaps.mapping.view.IdentifyLayerResult> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.IdentifyLayerResult.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.IdentifyLayerResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class ImageFrame extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.ImageFrame>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreImageFrame);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getImage(): globalAndroid.graphics.drawable.BitmapDrawable;
					public constructor(param0: string);
					public cancelLoad(): void;
					public constructor(param0: string, param1: com.arcgismaps.geometry.Envelope);
					public getUri(): string;
					public getQuadrilateral(): com.arcgismaps.geometry.Polygon;
					public getCoreImageFrame$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreImageFrame;
					public constructor(param0: string, param1: com.arcgismaps.geometry.Polygon);
					public "retryLoad-IoAF18A"(param0: any): any;
					public getExtent(): com.arcgismaps.geometry.Envelope;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ImageFrame {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.ImageFrame.Companion>;
						public createWithImageAndExtent(param0: globalAndroid.graphics.drawable.BitmapDrawable, param1: com.arcgismaps.geometry.Envelope): com.arcgismaps.mapping.view.ImageFrame;
						public createWithImageAndQuadrilateral(param0: globalAndroid.graphics.drawable.BitmapDrawable, param1: com.arcgismaps.geometry.Polygon): com.arcgismaps.mapping.view.ImageFrame;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreImageFrame,com.arcgismaps.mapping.view.ImageFrame> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.ImageFrame.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.ImageFrame.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class ImageOverlay {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.ImageOverlay>;
					public getCoreImageOverlay$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreImageOverlay;
					public setVisible(param0: boolean): void;
					public isVisible(): boolean;
					public setOpacity(param0: number): void;
					public constructor(param0: com.arcgismaps.mapping.view.ImageFrame);
					public constructor(param0: com.arcgismaps.internal.jni.CoreImageOverlay);
					public getExtent(): com.arcgismaps.geometry.Envelope;
					public setImageFrame(param0: com.arcgismaps.mapping.view.ImageFrame): void;
					public getImageFrame(): com.arcgismaps.mapping.view.ImageFrame;
					public getOpacity(): number;
				}
				export module ImageOverlay {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreImageOverlay,com.arcgismaps.mapping.view.ImageOverlay> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.ImageOverlay.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.ImageOverlay.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class Insets {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.Insets>;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public setRight(param0: number): void;
					public getBottom(): number;
					public getRight(): number;
					public setBottom(param0: number): void;
					public setTop(param0: number): void;
					public getLeft(): number;
					public setLeft(param0: number): void;
					public getTop(): number;
					public getIsEmpty(): boolean;
					public getCoreInsets$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreInsets;
					public constructor(param0: com.arcgismaps.internal.jni.CoreInsets);
				}
				export module Insets {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreInsets,com.arcgismaps.mapping.view.Insets> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.Insets.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.Insets.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class InteractionDeviceType {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.InteractionDeviceType>;
					public getCoreInteractionDeviceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreInteractionDeviceType;
				}
				export module InteractionDeviceType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.InteractionDeviceType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.InteractionDeviceType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreInteractionDeviceType): com.arcgismaps.mapping.view.InteractionDeviceType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.InteractionDeviceType.Factory.WhenMappings>;
						}
					}
					export class Mouse extends com.arcgismaps.mapping.view.InteractionDeviceType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.InteractionDeviceType.Mouse>;
						public static INSTANCE: com.arcgismaps.mapping.view.InteractionDeviceType.Mouse;
					}
					export class Stylus extends com.arcgismaps.mapping.view.InteractionDeviceType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.InteractionDeviceType.Stylus>;
						public static INSTANCE: com.arcgismaps.mapping.view.InteractionDeviceType.Stylus;
					}
					export class Touch extends com.arcgismaps.mapping.view.InteractionDeviceType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.InteractionDeviceType.Touch>;
						public static INSTANCE: com.arcgismaps.mapping.view.InteractionDeviceType.Touch;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class InteractionOptions {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.InteractionOptions>;
					/**
					 * Constructs a new instance of the com.arcgismaps.mapping.view.InteractionOptions interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						isEnabled(): boolean;
						setEnabled(param0: boolean): void;
						getZoomFactor(): number;
						setZoomFactor(param0: number): void;
						isFlingEnabled(): boolean;
						setFlingEnabled(param0: boolean): void;
						isPanEnabled(): boolean;
						setPanEnabled(param0: boolean): void;
						isZoomEnabled(): boolean;
						setZoomEnabled(param0: boolean): void;
						isRotateEnabled(): boolean;
						setRotateEnabled(param0: boolean): void;
					});
					public constructor();
					public setEnabled(param0: boolean): void;
					public setFlingEnabled(param0: boolean): void;
					public isRotateEnabled(): boolean;
					public isPanEnabled(): boolean;
					public getZoomFactor(): number;
					public setZoomFactor(param0: number): void;
					public isEnabled(): boolean;
					public setPanEnabled(param0: boolean): void;
					public isZoomEnabled(): boolean;
					public setZoomEnabled(param0: boolean): void;
					public isFlingEnabled(): boolean;
					public setRotateEnabled(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class LatitudeLongitudeGrid extends com.arcgismaps.mapping.view.Grid {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LatitudeLongitudeGrid>;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreLatitudeLongitudeGrid);
					public getLabelFormat(): com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat;
					public setLabelFormat(param0: com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat): void;
					public getCoreLatitudeLongitudeGrid$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLatitudeLongitudeGrid;
				}
				export module LatitudeLongitudeGrid {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLatitudeLongitudeGrid,com.arcgismaps.mapping.view.LatitudeLongitudeGrid> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LatitudeLongitudeGrid.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.LatitudeLongitudeGrid.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class LatitudeLongitudeGridLabelFormat {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat>;
					public getCoreLatitudeLongitudeGridLabelFormat$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat;
				}
				export module LatitudeLongitudeGridLabelFormat {
					export class DecimalDegrees extends com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat.DecimalDegrees>;
						public static INSTANCE: com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat.DecimalDegrees;
					}
					export class DegreesMinutesSeconds extends com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat.DegreesMinutesSeconds>;
						public static INSTANCE: com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat.DegreesMinutesSeconds;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLatitudeLongitudeGridLabelFormat): com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.LatitudeLongitudeGridLabelFormat.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class LayerSceneProperties {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerSceneProperties>;
					public constructor(param0: com.arcgismaps.mapping.view.SurfacePlacement);
					public getSurfacePlacement(): com.arcgismaps.mapping.view.SurfacePlacement;
					public setAltitudeOffset(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLayerSceneProperties);
					public getAltitudeOffset(): number;
					public setAltitudeUnit$arcgis_maps_any_release(param0: com.arcgismaps.geometry.LinearUnit): void;
					public setSurfacePlacement(param0: com.arcgismaps.mapping.view.SurfacePlacement): void;
					public getCoreLayerSceneProperties$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLayerSceneProperties;
					public getAltitudeUnit$arcgis_maps_any_release(): com.arcgismaps.geometry.LinearUnit;
				}
				export module LayerSceneProperties {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLayerSceneProperties,com.arcgismaps.mapping.view.LayerSceneProperties> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerSceneProperties.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.LayerSceneProperties.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class LayerViewState {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewState>;
					public getStatus(): java.util.Set<com.arcgismaps.mapping.view.LayerViewStatus>;
					public getCoreLayerViewState$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLayerViewState;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLayerViewState);
					public getError(): java.lang.Throwable;
				}
				export module LayerViewState {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLayerViewState,com.arcgismaps.mapping.view.LayerViewState> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewState.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.LayerViewState.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class LayerViewStatus {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewStatus>;
					public getCoreLayerViewStatus$arcgis_maps_any_release(): number;
					public mask$arcgis_maps_any_release(param0: number): boolean;
				}
				export module LayerViewStatus {
					export class Active extends com.arcgismaps.mapping.view.LayerViewStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewStatus.Active>;
						public static INSTANCE: com.arcgismaps.mapping.view.LayerViewStatus.Active;
					}
					export class Error extends com.arcgismaps.mapping.view.LayerViewStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewStatus.Error>;
						public static INSTANCE: com.arcgismaps.mapping.view.LayerViewStatus.Error;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewStatus.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.LayerViewStatus.Factory;
						public convertToPublic(param0: number): java.util.Set<com.arcgismaps.mapping.view.LayerViewStatus>;
					}
					export class Loading extends com.arcgismaps.mapping.view.LayerViewStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewStatus.Loading>;
						public static INSTANCE: com.arcgismaps.mapping.view.LayerViewStatus.Loading;
					}
					export class NotVisible extends com.arcgismaps.mapping.view.LayerViewStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewStatus.NotVisible>;
						public static INSTANCE: com.arcgismaps.mapping.view.LayerViewStatus.NotVisible;
					}
					export class OutOfScale extends com.arcgismaps.mapping.view.LayerViewStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewStatus.OutOfScale>;
						public static INSTANCE: com.arcgismaps.mapping.view.LayerViewStatus.OutOfScale;
					}
					export class Warning extends com.arcgismaps.mapping.view.LayerViewStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LayerViewStatus.Warning>;
						public static INSTANCE: com.arcgismaps.mapping.view.LayerViewStatus.Warning;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class LeaderPointOffset {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LeaderPointOffset>;
					public getRotatesWithGeoView(): boolean;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY, param1: boolean);
					public constructor();
					public getOffset(): com.arcgismaps.mapping.view.DoubleXY;
					public setOffset(param0: com.arcgismaps.mapping.view.DoubleXY): void;
					public setRotatesWithGeoView(param0: boolean): void;
				}
				export module LeaderPointOffset {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LeaderPointOffset.Companion>;
						public create(param0: com.arcgismaps.geometry.Geometry, param1: com.arcgismaps.mapping.symbology.Symbol, param2: boolean): com.arcgismaps.mapping.view.LeaderPointOffset;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class LightingMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LightingMode>;
					public getCoreLightingMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLightingMode;
				}
				export module LightingMode {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LightingMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.LightingMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLightingMode): com.arcgismaps.mapping.view.LightingMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.LightingMode.Factory.WhenMappings>;
						}
					}
					export class Light extends com.arcgismaps.mapping.view.LightingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LightingMode.Light>;
						public static INSTANCE: com.arcgismaps.mapping.view.LightingMode.Light;
					}
					export class LightAndShadows extends com.arcgismaps.mapping.view.LightingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LightingMode.LightAndShadows>;
						public static INSTANCE: com.arcgismaps.mapping.view.LightingMode.LightAndShadows;
					}
					export class NoLight extends com.arcgismaps.mapping.view.LightingMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LightingMode.NoLight>;
						public static INSTANCE: com.arcgismaps.mapping.view.LightingMode.NoLight;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class LocationDisplay {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LocationDisplay>;
					public setAutoPanMode(param0: com.arcgismaps.location.LocationDisplayAutoPanMode): void;
					public setAcquiringSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public getShowLocation(): boolean;
					public getNavigationPointHeightFactor(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLocationDisplay, param1: boolean);
					public getHeadingSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public getLocation(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.location.Location>;
					public setOpacity(param0: number): void;
					public getWanderExtentFactor(): number;
					public getCoreLocationDisplay$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationDisplay;
					public getUseCourseSymbolOnMovement(): boolean;
					public getAcquiringSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public getPingAnimationSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public setDataSource(param0: com.arcgismaps.location.LocationDataSource): void;
					public getAutoPanMode(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.location.LocationDisplayAutoPanMode>;
					public getAccuracySymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public constructor();
					public constructor(param0: globalAndroid.content.Context, param1: com.arcgismaps.internal.jni.CoreLocationDisplay);
					public setInitialZoomScale(param0: number): void;
					public getOpacity(): number;
					public getCourseSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public getDefaultSymbol(): com.arcgismaps.mapping.symbology.Symbol;
					public setPingAnimationSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public getStatusChanged(): kotlinx.coroutines.flow.SharedFlow<java.lang.Boolean>;
					public setHeadingSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public setShowLocation(param0: boolean): void;
					public getHeading(): number;
					public setWanderExtentFactor(param0: number): void;
					public setDefaultSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public getShowAccuracy(): boolean;
					public getMapLocation(): com.arcgismaps.geometry.Point;
					public setCourseSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public getDataSource(): com.arcgismaps.location.LocationDataSource;
					public setShowAccuracy(param0: boolean): void;
					public getShowPingAnimationSymbol(): boolean;
					public setUseCourseSymbolOnMovement(param0: boolean): void;
					public setAccuracySymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					public setNavigationPointHeightFactor(param0: number): void;
					public setShowPingAnimationSymbol(param0: boolean): void;
					public getInitialZoomScale(): number;
				}
				export module LocationDisplay {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreLocationDisplay,com.arcgismaps.mapping.view.LocationDisplay> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LocationDisplay.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.LocationDisplay.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class LocationToScreenResult {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LocationToScreenResult>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLocationToScreenResult);
					public getCoreLocationToScreenResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationToScreenResult;
					public getVisibility(): com.arcgismaps.mapping.view.SceneLocationVisibility;
					public getScreenPoint(): com.arcgismaps.mapping.view.DoubleXY;
				}
				export module LocationToScreenResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLocationToScreenResult,com.arcgismaps.mapping.view.LocationToScreenResult> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.LocationToScreenResult.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.LocationToScreenResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class LongPressEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.LongPressEvent>;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point);
					public equals(param0: any): boolean;
					public toString(): string;
					public getMapPoint(): com.arcgismaps.geometry.Point;
					public component2(): com.arcgismaps.geometry.Point;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point): com.arcgismaps.mapping.view.LongPressEvent;
					public getScreenCoordinate(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class MapView extends com.arcgismaps.mapping.view.GeoView {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.MapView>;
					public getOnDown(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DownEvent>;
					public getBackgroundGrid(): com.arcgismaps.mapping.view.BackgroundGrid;
					public hideMagnifier$arcgis_maps_any_release(): void;
					public getLocationDisplay(): com.arcgismaps.mapping.view.LocationDisplay;
					public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
					public setLocationDisplay(param0: com.arcgismaps.mapping.view.LocationDisplay): void;
					public useLocationDisplayAnchor$arcgis_maps_any_release(): boolean;
					public drag$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): void;
					public getGrid(): com.arcgismaps.mapping.view.Grid;
					public getUnitsPerDip(): number;
					public "setViewpointRotation-gIAlu-s"(param0: number, param1: any): any;
					public setMap(param0: com.arcgismaps.mapping.ArcGISMap): void;
					public setInteractionOptions(param0: com.arcgismaps.mapping.view.MapViewInteractionOptions): void;
					public setGrid(param0: com.arcgismaps.mapping.view.Grid): void;
					public onCreate(param0: androidx.lifecycle.LifecycleOwner): void;
					public setIsMagnifierEnabled$arcgis_maps_any_release(param0: boolean): void;
					public setAttributionBarVisible(param0: boolean): void;
					public getOnLongPress(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.LongPressEvent>;
					public getOnScale(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.ScaleChangeEvent>;
					public hasValidSize$arcgis_maps_any_release(): void;
					public getViewInsetBottom(): number;
					public getInteractionOptions(): com.arcgismaps.mapping.view.MapViewInteractionOptions;
					public getGeometryEditor(): com.arcgismaps.mapping.view.geometryeditor.GeometryEditor;
					public getVisibleArea(): com.arcgismaps.geometry.Polygon;
					public setWrapAroundMode(param0: com.arcgismaps.mapping.view.WrapAroundMode): void;
					public createCoreView$arcgis_maps_any_release(param0: globalAndroid.content.Context): com.arcgismaps.internal.jni.CoreGeoView;
					public setViewInsets(param0: number, param1: number, param2: number, param3: number): void;
					public isAttributionBarVisible(): boolean;
					public getInteractionOptions(): com.arcgismaps.mapping.view.InteractionOptions;
					public isViewInsetsValid(): boolean;
					public locationToScreen(param0: com.arcgismaps.geometry.Point): com.arcgismaps.mapping.view.DoubleXY;
					public "setViewpointScale-gIAlu-s"(param0: number, param1: any): any;
					public getMapRotation(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public getOnPan(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.PanChangeEvent>;
					public screenToLocation(param0: com.arcgismaps.mapping.view.DoubleXY): com.arcgismaps.geometry.Point;
					public onDestroy(param0: androidx.lifecycle.LifecycleOwner): void;
					public getOnUp(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.UpEvent>;
					public checkManualRenderingEnabled$arcgis_maps_any_release(): boolean;
					public zoomToScale$arcgis_maps_any_release(param0: number, param1: com.arcgismaps.mapping.view.DoubleXY): void;
					public getViewInsetTop(): number;
					public onResume(param0: androidx.lifecycle.LifecycleOwner): void;
					public showMagnifierWithOffsetAt$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): void;
					public setBackgroundGrid(param0: com.arcgismaps.mapping.view.BackgroundGrid): void;
					public rotate$arcgis_maps_any_release(param0: number, param1: com.arcgismaps.mapping.view.DoubleXY): void;
					public "setViewpointAnimated-BWLJW6A"(param0: com.arcgismaps.mapping.Viewpoint, param1: number, param2: com.arcgismaps.mapping.view.AnimationCurve, param3: any): any;
					public "setViewpointGeometry-0E7RQCE"(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: any): any;
					public onMeasure(param0: number, param1: number): void;
					public getViewInsetRight(): number;
					public getOnSingleTapConfirmed(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.SingleTapConfirmedEvent>;
					public getOnTwoPointerTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.TwoPointerTapEvent>;
					public "setViewpointCenter-0E7RQCE"(param0: com.arcgismaps.geometry.Point, param1: number, param2: any): any;
					public "setViewpointCenter-gIAlu-s"(param0: com.arcgismaps.geometry.Point, param1: any): any;
					public getWrapAroundMode(): com.arcgismaps.mapping.view.WrapAroundMode;
					public getOnDoubleTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleTapEvent>;
					public getMap(): com.arcgismaps.mapping.ArcGISMap;
					public constructor(param0: globalAndroid.content.Context);
					public onPause(param0: androidx.lifecycle.LifecycleOwner): void;
					public fling$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): void;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public getViewInsetLeft(): number;
					public setGeometryEditor(param0: com.arcgismaps.mapping.view.geometryeditor.GeometryEditor): void;
					public getOnRotate(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.RotationChangeEvent>;
					public getMapScale(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public setAllowMagnifierToPan$arcgis_maps_any_release(param0: boolean): void;
					public "setViewpointGeometry-gIAlu-s"(param0: com.arcgismaps.geometry.Geometry, param1: any): any;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class MapViewInteractionOptions extends com.arcgismaps.mapping.view.InteractionOptions {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.MapViewInteractionOptions>;
					public getAllowMagnifierToPan(): boolean;
					public component7(): number;
					public component5(): boolean;
					public constructor(param0: boolean, param1: number, param2: boolean, param3: boolean, param4: boolean, param5: boolean, param6: number, param7: boolean, param8: boolean);
					public isFlingEnabled(): boolean;
					public component6(): boolean;
					public toString(): string;
					public isRotateEnabled(): boolean;
					public isPanEnabled(): boolean;
					public constructor();
					public component8(): boolean;
					public copy(param0: boolean, param1: number, param2: boolean, param3: boolean, param4: boolean, param5: boolean, param6: number, param7: boolean, param8: boolean): com.arcgismaps.mapping.view.MapViewInteractionOptions;
					public setSnapToNorthThreshold(param0: number): void;
					public setZoomFactor(param0: number): void;
					public isEnabled(): boolean;
					public component9(): boolean;
					public hashCode(): number;
					public setZoomEnabled(param0: boolean): void;
					public setRotateEnabled(param0: boolean): void;
					public setEnabled(param0: boolean): void;
					public setPanEnabled(param0: boolean): void;
					public setAllowMagnifierToPan(param0: boolean): void;
					public isZoomEnabled(): boolean;
					public isMagnifierEnabled(): boolean;
					public equals(param0: any): boolean;
					public setFlingEnabled(param0: boolean): void;
					public component4(): boolean;
					public setMagnifierEnabled(param0: boolean): void;
					public component2(): number;
					public component3(): boolean;
					public getZoomFactor(): number;
					public component1(): boolean;
					public getSnapToNorthThreshold(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class MgrsGrid extends com.arcgismaps.mapping.view.Grid {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.MgrsGrid>;
					public getLabelUnit(): com.arcgismaps.mapping.view.MgrsGridLabelUnit;
					public constructor();
					public setLabelUnit(param0: com.arcgismaps.mapping.view.MgrsGridLabelUnit): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreMGRSGrid);
					public getCoreMgrsGrid$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMGRSGrid;
				}
				export module MgrsGrid {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMGRSGrid,com.arcgismaps.mapping.view.MgrsGrid> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.MgrsGrid.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.MgrsGrid.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class MgrsGridLabelUnit {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.MgrsGridLabelUnit>;
					public getCoreMgrsGridLabelUnit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit;
				}
				export module MgrsGridLabelUnit {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.MgrsGridLabelUnit.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.MgrsGridLabelUnit.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMGRSGridLabelUnit): com.arcgismaps.mapping.view.MgrsGridLabelUnit;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.MgrsGridLabelUnit.Factory.WhenMappings>;
						}
					}
					export class KilometersMeters extends com.arcgismaps.mapping.view.MgrsGridLabelUnit {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.MgrsGridLabelUnit.KilometersMeters>;
						public static INSTANCE: com.arcgismaps.mapping.view.MgrsGridLabelUnit.KilometersMeters;
					}
					export class Meters extends com.arcgismaps.mapping.view.MgrsGridLabelUnit {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.MgrsGridLabelUnit.Meters>;
						public static INSTANCE: com.arcgismaps.mapping.view.MgrsGridLabelUnit.Meters;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class OrbitGeoElementCameraController extends com.arcgismaps.mapping.view.CameraController {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.OrbitGeoElementCameraController>;
					public constructor(param0: com.arcgismaps.mapping.GeoElement, param1: number);
					public getTargetVerticalScreenFactor(): number;
					public isAutoRollEnabled(): boolean;
					public isAutoPitchEnabled(): boolean;
					public setTargetOffsetY(param0: number): void;
					public getMaxCameraPitchOffset(): number;
					public getCameraHeadingOffset(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public getMinCameraDistance(): number;
					public setMaxCameraHeadingOffset(param0: number): void;
					public setCameraPitchOffsetInteractive(param0: boolean): void;
					public getTargetOffsetY(): number;
					public getMinCameraHeadingOffset(): number;
					public isCameraPitchOffsetInteractive(): boolean;
					public getTargetGeoElement(): com.arcgismaps.mapping.GeoElement;
					public setMaxCameraPitchOffset(param0: number): void;
					public setAutoRollEnabled(param0: boolean): void;
					public isAutoHeadingEnabled(): boolean;
					public setCameraHeadingOffsetInteractive(param0: boolean): void;
					public getTargetOffsetX(): number;
					public setTargetOffsetX(param0: number): void;
					public setTargetVerticalScreenFactor(param0: number): void;
					public setMaxCameraDistance(param0: number): void;
					public setMinCameraDistance(param0: number): void;
					public setCameraHeadingOffset(param0: number): void;
					public "setTargetOffsets-yxL6bBk"(param0: number, param1: number, param2: number, param3: number, param4: any): any;
					public isCameraDistanceInteractive(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOrbitGeoElementCameraController);
					public setCameraDistance(param0: number): void;
					public setAutoHeadingEnabled(param0: boolean): void;
					public getMinCameraPitchOffset(): number;
					public setCameraDistanceInteractive(param0: boolean): void;
					public setTargetOffsetZ(param0: number): void;
					public getCameraPitchOffset(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public setMinCameraPitchOffset(param0: number): void;
					public setMinCameraHeadingOffset(param0: number): void;
					public "moveCamera-yxL6bBk"(param0: number, param1: number, param2: number, param3: number, param4: any): any;
					public isCameraHeadingOffsetInteractive(): boolean;
					public getMaxCameraDistance(): number;
					public setCameraPitchOffset(param0: number): void;
					public getCoreOrbitGeoElementCameraController$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOrbitGeoElementCameraController;
					public getCameraDistance(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public getMaxCameraHeadingOffset(): number;
					public setAutoPitchEnabled(param0: boolean): void;
					public getTargetOffsetZ(): number;
				}
				export module OrbitGeoElementCameraController {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOrbitGeoElementCameraController,com.arcgismaps.mapping.view.OrbitGeoElementCameraController> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.OrbitGeoElementCameraController.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.OrbitGeoElementCameraController.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class OrbitLocationCameraController extends com.arcgismaps.mapping.view.CameraController {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.OrbitLocationCameraController>;
					public constructor(param0: com.arcgismaps.geometry.Point, param1: number);
					public getMaxCameraPitchOffset(): number;
					public getCameraHeadingOffset(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public getMinCameraDistance(): number;
					public setMaxCameraHeadingOffset(param0: number): void;
					public setCameraPitchOffsetInteractive(param0: boolean): void;
					public getCoreOrbitLocationCameraController$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOrbitLocationCameraController;
					public getMinCameraHeadingOffset(): number;
					public isCameraPitchOffsetInteractive(): boolean;
					public setMaxCameraPitchOffset(param0: number): void;
					public constructor(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.geometry.Point);
					public setCameraHeadingOffsetInteractive(param0: boolean): void;
					public setMaxCameraDistance(param0: number): void;
					public setMinCameraDistance(param0: number): void;
					public setCameraHeadingOffset(param0: number): void;
					public isCameraDistanceInteractive(): boolean;
					public setCameraDistance(param0: number): void;
					public getMinCameraPitchOffset(): number;
					public setCameraDistanceInteractive(param0: boolean): void;
					public getCameraPitchOffset(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public getTargetLocation(): com.arcgismaps.geometry.Point;
					public setMinCameraPitchOffset(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOrbitLocationCameraController);
					public setMinCameraHeadingOffset(param0: number): void;
					public "moveCamera-yxL6bBk"(param0: number, param1: number, param2: number, param3: number, param4: any): any;
					public isCameraHeadingOffsetInteractive(): boolean;
					public getMaxCameraDistance(): number;
					public setCameraPitchOffset(param0: number): void;
					public getCameraDistance(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public getMaxCameraHeadingOffset(): number;
				}
				export module OrbitLocationCameraController {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOrbitLocationCameraController,com.arcgismaps.mapping.view.OrbitLocationCameraController> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.OrbitLocationCameraController.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.OrbitLocationCameraController.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class PanChangeEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.PanChangeEvent>;
					public equals(param0: any): boolean;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.mapping.view.PanChangeEvent.PanStatus);
					public toString(): string;
					public component2(): com.arcgismaps.mapping.view.PanChangeEvent.PanStatus;
					public getMotion(): com.arcgismaps.mapping.view.DoubleXY;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
					public getStatus(): com.arcgismaps.mapping.view.PanChangeEvent.PanStatus;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.mapping.view.PanChangeEvent.PanStatus): com.arcgismaps.mapping.view.PanChangeEvent;
				}
				export module PanChangeEvent {
					export abstract class PanStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.PanChangeEvent.PanStatus>;
					}
					export module PanStatus {
						export class End extends com.arcgismaps.mapping.view.PanChangeEvent.PanStatus {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.PanChangeEvent.PanStatus.End>;
							public static INSTANCE: com.arcgismaps.mapping.view.PanChangeEvent.PanStatus.End;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class Panning extends com.arcgismaps.mapping.view.PanChangeEvent.PanStatus {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.PanChangeEvent.PanStatus.Panning>;
							public static INSTANCE: com.arcgismaps.mapping.view.PanChangeEvent.PanStatus.Panning;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class Start extends com.arcgismaps.mapping.view.PanChangeEvent.PanStatus {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.PanChangeEvent.PanStatus.Start>;
							public static INSTANCE: com.arcgismaps.mapping.view.PanChangeEvent.PanStatus.Start;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class PulseThread {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.PulseThread>;
					public getCorePulseThread$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePulseThread;
				}
				export module PulseThread {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.PulseThread.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.PulseThread.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePulseThread): com.arcgismaps.mapping.view.PulseThread;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.PulseThread.Factory.WhenMappings>;
						}
					}
					export class UseGeoView extends com.arcgismaps.mapping.view.PulseThread {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.PulseThread.UseGeoView>;
						public static INSTANCE: com.arcgismaps.mapping.view.PulseThread.UseGeoView;
					}
					export class UserDefined extends com.arcgismaps.mapping.view.PulseThread {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.PulseThread.UserDefined>;
						public static INSTANCE: com.arcgismaps.mapping.view.PulseThread.UserDefined;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class RotationChangeEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.RotationChangeEvent>;
					public equals(param0: any): boolean;
					public component2(): com.arcgismaps.mapping.view.DoubleXY;
					public toString(): string;
					public getStatus(): com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus;
					public component3(): com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus;
					public copy(param0: number, param1: com.arcgismaps.mapping.view.DoubleXY, param2: com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus): com.arcgismaps.mapping.view.RotationChangeEvent;
					public constructor(param0: number, param1: com.arcgismaps.mapping.view.DoubleXY, param2: com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus);
					public component1(): number;
					public getDeltaSinceLastEvent(): number;
					public getMidpoint(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
				}
				export module RotationChangeEvent {
					export abstract class RotationStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus>;
					}
					export module RotationStatus {
						export class End extends com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus.End>;
							public static INSTANCE: com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus.End;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class Rotating extends com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus.Rotating>;
							public static INSTANCE: com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus.Rotating;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class Start extends com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus.Start>;
							public static INSTANCE: com.arcgismaps.mapping.view.RotationChangeEvent.RotationStatus.Start;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class ScaleChangeEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.ScaleChangeEvent>;
					public equals(param0: any): boolean;
					public component3(): com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus;
					public getStatus(): com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus;
					public toString(): string;
					public getScaleFactor(): number;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY, param1: number, param2: com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus);
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY, param1: number, param2: com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus): com.arcgismaps.mapping.view.ScaleChangeEvent;
					public getFocusPoint(): com.arcgismaps.mapping.view.DoubleXY;
					public component2(): number;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
				}
				export module ScaleChangeEvent {
					export abstract class ScaleStatus {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus>;
					}
					export module ScaleStatus {
						export class End extends com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus.End>;
							public static INSTANCE: com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus.End;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class Scaling extends com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus.Scaling>;
							public static INSTANCE: com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus.Scaling;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
						}
						export class Start extends com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus.Start>;
							public static INSTANCE: com.arcgismaps.mapping.view.ScaleChangeEvent.ScaleStatus.Start;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class SceneLayerDataType {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLayerDataType>;
					public getCoreSceneLayerDataType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSceneLayerDataType;
				}
				export module SceneLayerDataType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLayerDataType.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLayerDataType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSceneLayerDataType): com.arcgismaps.mapping.view.SceneLayerDataType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLayerDataType.Factory.WhenMappings>;
						}
					}
					export class IntegratedMesh extends com.arcgismaps.mapping.view.SceneLayerDataType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLayerDataType.IntegratedMesh>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLayerDataType.IntegratedMesh;
					}
					export class Point extends com.arcgismaps.mapping.view.SceneLayerDataType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLayerDataType.Point>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLayerDataType.Point;
					}
					export class SceneObject extends com.arcgismaps.mapping.view.SceneLayerDataType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLayerDataType.SceneObject>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLayerDataType.SceneObject;
					}
					export class Unknown extends com.arcgismaps.mapping.view.SceneLayerDataType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLayerDataType.Unknown>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLayerDataType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class SceneLocationVisibility {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLocationVisibility>;
					public getCoreSceneLocationVisibility$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSceneLocationVisibility;
				}
				export module SceneLocationVisibility {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLocationVisibility.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLocationVisibility.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSceneLocationVisibility): com.arcgismaps.mapping.view.SceneLocationVisibility;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLocationVisibility.Factory.WhenMappings>;
						}
					}
					export class HiddenByBaseSurface extends com.arcgismaps.mapping.view.SceneLocationVisibility {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLocationVisibility.HiddenByBaseSurface>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLocationVisibility.HiddenByBaseSurface;
					}
					export class HiddenByEarth extends com.arcgismaps.mapping.view.SceneLocationVisibility {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLocationVisibility.HiddenByEarth>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLocationVisibility.HiddenByEarth;
					}
					export class HiddenByElevation extends com.arcgismaps.mapping.view.SceneLocationVisibility {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLocationVisibility.HiddenByElevation>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLocationVisibility.HiddenByElevation;
					}
					export class NotOnScreen extends com.arcgismaps.mapping.view.SceneLocationVisibility {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLocationVisibility.NotOnScreen>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLocationVisibility.NotOnScreen;
					}
					export class Visible extends com.arcgismaps.mapping.view.SceneLocationVisibility {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneLocationVisibility.Visible>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneLocationVisibility.Visible;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class SceneView extends com.arcgismaps.mapping.view.GeoView {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneView>;
					public getCameraController(): com.arcgismaps.mapping.view.CameraController;
					public getOnDown(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DownEvent>;
					public "setViewpointCameraAnimated-gIAlu-s"(param0: com.arcgismaps.mapping.view.Camera, param1: any): any;
					public getSunLighting(): com.arcgismaps.mapping.view.LightingMode;
					public getAtmosphereEffect(): com.arcgismaps.mapping.view.AtmosphereEffect;
					public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
					public setAtmosphereEffect(param0: com.arcgismaps.mapping.view.AtmosphereEffect): void;
					public getCurrentViewpointCamera(): com.arcgismaps.mapping.view.Camera;
					public "screenToLocation-gIAlu-s"(param0: com.arcgismaps.mapping.view.DoubleXY, param1: any): any;
					public "setAmbientLightColor-iGKdAYA"(param0: number): void;
					public onCreate(param0: androidx.lifecycle.LifecycleOwner): void;
					public setViewpointCamera(param0: com.arcgismaps.mapping.view.Camera): void;
					public interactionPan$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): void;
					public getOnLongPress(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.LongPressEvent>;
					public getOnScale(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.ScaleChangeEvent>;
					public getImageOverlays(): java.util.List<com.arcgismaps.mapping.view.ImageOverlay>;
					public getFieldOfViewDistortionRatio(): number;
					public screenToBaseSurface(param0: com.arcgismaps.mapping.view.DoubleXY): com.arcgismaps.geometry.Point;
					public "getAmbientLightColor-I-ELunk"(): number;
					public createCoreView$arcgis_maps_any_release(param0: globalAndroid.content.Context): com.arcgismaps.internal.jni.CoreGeoView;
					public getInteractionOptions(): com.arcgismaps.mapping.view.InteractionOptions;
					public interactionFling$arcgis_maps_any_release(): void;
					public setSpaceEffect(param0: com.arcgismaps.mapping.view.SpaceEffect): void;
					public setSunTime(param0: java.time.Instant): void;
					public setManualRenderingEnabled(param0: boolean): void;
					public setCameraController(param0: com.arcgismaps.mapping.view.CameraController): void;
					public setInteractionOptions(param0: com.arcgismaps.mapping.view.SceneViewInteractionOptions): void;
					public getOnPan(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.PanChangeEvent>;
					public getSunTime(): java.time.Instant;
					public interactionSetOrigin$arcgis_maps_any_release(param0: com.arcgismaps.mapping.view.DoubleXY): void;
					public onDestroy(param0: androidx.lifecycle.LifecycleOwner): void;
					public "setViewpointCameraAnimated-0E7RQCE"(param0: com.arcgismaps.mapping.view.Camera, param1: number, param2: any): any;
					public getOnUp(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.UpEvent>;
					public interactionPitch$arcgis_maps_any_release(param0: number): void;
					public checkManualRenderingEnabled$arcgis_maps_any_release(): boolean;
					public setFieldOfViewAndDistortionRatio(param0: number, param1: number): void;
					public setSunLighting(param0: com.arcgismaps.mapping.view.LightingMode): void;
					public renderFrame(): void;
					public onResume(param0: androidx.lifecycle.LifecycleOwner): void;
					public getScene(): com.arcgismaps.mapping.ArcGISScene;
					public setFieldOfViewFromLensIntrinsics(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.arcgismaps.mapping.view.DeviceOrientation): void;
					public onMeasure(param0: number, param1: number): void;
					public getAnalysisOverlays(): java.util.List<com.arcgismaps.mapping.view.AnalysisOverlay>;
					public getOnSingleTapConfirmed(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.SingleTapConfirmedEvent>;
					public getOnTwoPointerTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.TwoPointerTapEvent>;
					public setFieldOfView(param0: number): void;
					public locationToScreen(param0: com.arcgismaps.geometry.Point): com.arcgismaps.mapping.view.LocationToScreenResult;
					public getOnDoubleTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleTapEvent>;
					public interactionUpdateZoomToOrigin$arcgis_maps_any_release(param0: number): void;
					public isManualRenderingEnabled(): boolean;
					public constructor(param0: globalAndroid.content.Context);
					public getInteractionOptions(): com.arcgismaps.mapping.view.SceneViewInteractionOptions;
					public onPause(param0: androidx.lifecycle.LifecycleOwner): void;
					public getFieldOfView(): number;
					public setScene(param0: com.arcgismaps.mapping.ArcGISScene): void;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public getOnRotate(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.RotationChangeEvent>;
					public getSpaceEffect(): com.arcgismaps.mapping.view.SpaceEffect;
					public interactionRotate$arcgis_maps_any_release(param0: number): void;
				}
				export module SceneView {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneView.Companion>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class SceneViewInteractionOptions extends com.arcgismaps.mapping.view.InteractionOptions {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneViewInteractionOptions>;
					public setEnabled(param0: boolean): void;
					public setPanEnabled(param0: boolean): void;
					public copy(param0: boolean, param1: number, param2: boolean, param3: boolean, param4: boolean, param5: boolean): com.arcgismaps.mapping.view.SceneViewInteractionOptions;
					public component5(): boolean;
					public isZoomEnabled(): boolean;
					public isFlingEnabled(): boolean;
					public component6(): boolean;
					public equals(param0: any): boolean;
					public toString(): string;
					public setFlingEnabled(param0: boolean): void;
					public isRotateEnabled(): boolean;
					public isPanEnabled(): boolean;
					public constructor();
					public component4(): boolean;
					public component2(): number;
					public component3(): boolean;
					public constructor(param0: boolean, param1: number, param2: boolean, param3: boolean, param4: boolean, param5: boolean);
					public getZoomFactor(): number;
					public setZoomFactor(param0: number): void;
					public isEnabled(): boolean;
					public component1(): boolean;
					public hashCode(): number;
					public setZoomEnabled(param0: boolean): void;
					public setRotateEnabled(param0: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class SceneViewTilingScheme {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneViewTilingScheme>;
					public getCoreSceneViewTilingScheme$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSceneViewTilingScheme;
				}
				export module SceneViewTilingScheme {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneViewTilingScheme.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneViewTilingScheme.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSceneViewTilingScheme): com.arcgismaps.mapping.view.SceneViewTilingScheme;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneViewTilingScheme.Factory.WhenMappings>;
						}
					}
					export class Geographic extends com.arcgismaps.mapping.view.SceneViewTilingScheme {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneViewTilingScheme.Geographic>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneViewTilingScheme.Geographic;
					}
					export class WebMercator extends com.arcgismaps.mapping.view.SceneViewTilingScheme {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SceneViewTilingScheme.WebMercator>;
						public static INSTANCE: com.arcgismaps.mapping.view.SceneViewTilingScheme.WebMercator;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class SelectionProperties {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.SelectionProperties>;
					public getCoreSelectionProperties$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSelectionProperties;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSelectionProperties);
					public "getColor-I-ELunk"(): number;
					public "setColor-iGKdAYA"(param0: number): void;
				}
				export module SelectionProperties {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSelectionProperties,com.arcgismaps.mapping.view.SelectionProperties> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SelectionProperties.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.SelectionProperties.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class SingleTapConfirmedEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.SingleTapConfirmedEvent>;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point);
					public equals(param0: any): boolean;
					public toString(): string;
					public getMapPoint(): com.arcgismaps.geometry.Point;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point): com.arcgismaps.mapping.view.SingleTapConfirmedEvent;
					public component2(): com.arcgismaps.geometry.Point;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public getScreenCoordinate(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class SpaceEffect {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.SpaceEffect>;
					public getCoreSpaceEffect$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSpaceEffect;
				}
				export module SpaceEffect {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SpaceEffect.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.SpaceEffect.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSpaceEffect): com.arcgismaps.mapping.view.SpaceEffect;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.SpaceEffect.Factory.WhenMappings>;
						}
					}
					export class Stars extends com.arcgismaps.mapping.view.SpaceEffect {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SpaceEffect.Stars>;
						public static INSTANCE: com.arcgismaps.mapping.view.SpaceEffect.Stars;
					}
					export class Transparent extends com.arcgismaps.mapping.view.SpaceEffect {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SpaceEffect.Transparent>;
						public static INSTANCE: com.arcgismaps.mapping.view.SpaceEffect.Transparent;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class SurfacePlacement {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.SurfacePlacement>;
					public getCoreSurfacePlacement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSurfacePlacement;
				}
				export module SurfacePlacement {
					export class Absolute extends com.arcgismaps.mapping.view.SurfacePlacement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SurfacePlacement.Absolute>;
						public static INSTANCE: com.arcgismaps.mapping.view.SurfacePlacement.Absolute;
					}
					export class DrapedBillboarded extends com.arcgismaps.mapping.view.SurfacePlacement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SurfacePlacement.DrapedBillboarded>;
						public static INSTANCE: com.arcgismaps.mapping.view.SurfacePlacement.DrapedBillboarded;
					}
					export class DrapedFlat extends com.arcgismaps.mapping.view.SurfacePlacement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SurfacePlacement.DrapedFlat>;
						public static INSTANCE: com.arcgismaps.mapping.view.SurfacePlacement.DrapedFlat;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SurfacePlacement.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.SurfacePlacement.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSurfacePlacement): com.arcgismaps.mapping.view.SurfacePlacement;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.SurfacePlacement.Factory.WhenMappings>;
						}
					}
					export class Relative extends com.arcgismaps.mapping.view.SurfacePlacement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SurfacePlacement.Relative>;
						public static INSTANCE: com.arcgismaps.mapping.view.SurfacePlacement.Relative;
					}
					export class RelativeToScene extends com.arcgismaps.mapping.view.SurfacePlacement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.SurfacePlacement.RelativeToScene>;
						public static INSTANCE: com.arcgismaps.mapping.view.SurfacePlacement.RelativeToScene;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class TiltChangeEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.TiltChangeEvent>;
					public equals(param0: any): boolean;
					public toString(): string;
					public copy(param0: number): com.arcgismaps.mapping.view.TiltChangeEvent;
					public component1(): number;
					public getDeltaSinceLastEvent(): number;
					public hashCode(): number;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class TransformationMatrix {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.TransformationMatrix>;
					public getQuaternionZ(): number;
					public getTranslationZ(): number;
					public getCoreTransformationMatrix$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTransformationMatrix;
					public plus(param0: com.arcgismaps.mapping.view.TransformationMatrix): com.arcgismaps.mapping.view.TransformationMatrix;
					public getTranslationX(): number;
					public getQuaternionX(): number;
					public getQuaternionW(): number;
					public getQuaternionY(): number;
					public getTranslationY(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTransformationMatrix);
					public minus(param0: com.arcgismaps.mapping.view.TransformationMatrix): com.arcgismaps.mapping.view.TransformationMatrix;
				}
				export module TransformationMatrix {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.TransformationMatrix.Companion>;
						public createIdentityMatrix(): com.arcgismaps.mapping.view.TransformationMatrix;
						public createWithQuaternionAndTranslation(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): com.arcgismaps.mapping.view.TransformationMatrix;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTransformationMatrix,com.arcgismaps.mapping.view.TransformationMatrix> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.TransformationMatrix.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.TransformationMatrix.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class TransformationMatrixCameraController extends com.arcgismaps.mapping.view.CameraController {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.TransformationMatrixCameraController>;
					public setTransformationMatrix(param0: com.arcgismaps.mapping.view.TransformationMatrix): void;
					public setOriginCamera(param0: com.arcgismaps.mapping.view.Camera): void;
					public getTransformationMatrix(): com.arcgismaps.mapping.view.TransformationMatrix;
					public constructor();
					public getCoreTransformationMatrixCameraController$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTransformationMatrixCameraController;
					public getTranslationFactor(): kotlinx.coroutines.flow.StateFlow<java.lang.Double>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTransformationMatrixCameraController);
					public getClippingDistance(): java.lang.Double;
					public constructor(param0: com.arcgismaps.mapping.view.Camera);
					public setClippingDistance(param0: java.lang.Double): void;
					public getOriginCamera(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.view.Camera>;
					public setTranslationFactor(param0: number): void;
				}
				export module TransformationMatrixCameraController {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTransformationMatrixCameraController,com.arcgismaps.mapping.view.TransformationMatrixCameraController> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.TransformationMatrixCameraController.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.TransformationMatrixCameraController.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class TwoPointerTapEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.TwoPointerTapEvent>;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point);
					public getScreenMidpoint(): com.arcgismaps.mapping.view.DoubleXY;
					public equals(param0: any): boolean;
					public toString(): string;
					public component2(): com.arcgismaps.geometry.Point;
					public getMapMidpoint(): com.arcgismaps.geometry.Point;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point): com.arcgismaps.mapping.view.TwoPointerTapEvent;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class UpEvent {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.UpEvent>;
					public constructor(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point);
					public equals(param0: any): boolean;
					public copy(param0: com.arcgismaps.mapping.view.DoubleXY, param1: com.arcgismaps.geometry.Point): com.arcgismaps.mapping.view.UpEvent;
					public toString(): string;
					public getMapPoint(): com.arcgismaps.geometry.Point;
					public component2(): com.arcgismaps.geometry.Point;
					public component1(): com.arcgismaps.mapping.view.DoubleXY;
					public getScreenCoordinate(): com.arcgismaps.mapping.view.DoubleXY;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class UsngGrid extends com.arcgismaps.mapping.view.Grid {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.UsngGrid>;
					public getCoreUsngGrid$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUSNGGrid;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreUSNGGrid);
					public getLabelUnit(): com.arcgismaps.mapping.view.UsngGridLabelUnit;
					public setLabelUnit(param0: com.arcgismaps.mapping.view.UsngGridLabelUnit): void;
				}
				export module UsngGrid {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUSNGGrid,com.arcgismaps.mapping.view.UsngGrid> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.UsngGrid.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.UsngGrid.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class UsngGridLabelUnit {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.UsngGridLabelUnit>;
					public getCoreUsngGridLabelUnit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit;
				}
				export module UsngGridLabelUnit {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.UsngGridLabelUnit.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.UsngGridLabelUnit.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUSNGGridLabelUnit): com.arcgismaps.mapping.view.UsngGridLabelUnit;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.UsngGridLabelUnit.Factory.WhenMappings>;
						}
					}
					export class KilometersMeters extends com.arcgismaps.mapping.view.UsngGridLabelUnit {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.UsngGridLabelUnit.KilometersMeters>;
						public static INSTANCE: com.arcgismaps.mapping.view.UsngGridLabelUnit.KilometersMeters;
					}
					export class Meters extends com.arcgismaps.mapping.view.UsngGridLabelUnit {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.UsngGridLabelUnit.Meters>;
						public static INSTANCE: com.arcgismaps.mapping.view.UsngGridLabelUnit.Meters;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class UtmGrid extends com.arcgismaps.mapping.view.Grid {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.UtmGrid>;
					public getCoreUtmGrid$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUTMGrid;
					public constructor();
					public constructor(param0: com.arcgismaps.internal.jni.CoreUTMGrid);
				}
				export module UtmGrid {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUTMGrid,com.arcgismaps.mapping.view.UtmGrid> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.UtmGrid.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.UtmGrid.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export class ViewLabelProperties {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.ViewLabelProperties>;
					public constructor(param0: boolean, param1: boolean);
					public setLabelingEnabled(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreViewLabelProperties);
					public isAnimationEnabled(): boolean;
					public isLabelingEnabled(): boolean;
					public getCoreViewLabelProperties$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreViewLabelProperties;
					public setAnimationEnabled(param0: boolean): void;
				}
				export module ViewLabelProperties {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreViewLabelProperties,com.arcgismaps.mapping.view.ViewLabelProperties> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.ViewLabelProperties.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.ViewLabelProperties.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export abstract class WrapAroundMode {
					public static class: java.lang.Class<com.arcgismaps.mapping.view.WrapAroundMode>;
					public getCoreWrapAroundMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreWrapAroundMode;
				}
				export module WrapAroundMode {
					export class Disabled extends com.arcgismaps.mapping.view.WrapAroundMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.WrapAroundMode.Disabled>;
						public static INSTANCE: com.arcgismaps.mapping.view.WrapAroundMode.Disabled;
					}
					export class EnabledWhenSupported extends com.arcgismaps.mapping.view.WrapAroundMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.WrapAroundMode.EnabledWhenSupported>;
						public static INSTANCE: com.arcgismaps.mapping.view.WrapAroundMode.EnabledWhenSupported;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.WrapAroundMode.Factory>;
						public static INSTANCE: com.arcgismaps.mapping.view.WrapAroundMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreWrapAroundMode): com.arcgismaps.mapping.view.WrapAroundMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.WrapAroundMode.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class FreehandTool extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.FreehandTool>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreFreehandTool);
						public getConfiguration(): com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration;
						public setConfiguration(param0: com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration): void;
						public constructor();
						public getCoreFreehandTool$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFreehandTool;
					}
					export module FreehandTool {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFreehandTool,com.arcgismaps.mapping.view.geometryeditor.FreehandTool> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.FreehandTool.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.FreehandTool.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class GeometryEditor {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditor>;
						public insertVertex(param0: com.arcgismaps.geometry.Point): void;
						public getTool(): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool;
						public deleteSelectedElement(): void;
						public scaleSelectedElement(param0: number, param1: number, param2: com.arcgismaps.geometry.Point): void;
						public getSnapSettings(): com.arcgismaps.mapping.view.geometryeditor.SnapSettings;
						public isStarted(): kotlinx.coroutines.flow.StateFlow<java.lang.Boolean>;
						public selectPart(param0: number): void;
						public undo(): void;
						public getCoreGeometryEditor$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditor;
						public selectMidVertex(param0: number, param1: number): void;
						public isVisible(): boolean;
						public clearSelection(): void;
						public start(param0: com.arcgismaps.geometry.Geometry): void;
						public replaceGeometry(param0: com.arcgismaps.geometry.Geometry): void;
						public getCanRedo(): kotlinx.coroutines.flow.StateFlow<java.lang.Boolean>;
						public constructor();
						public setTool(param0: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool): void;
						public moveSelectedElement(param0: number, param1: number): void;
						public redo(): void;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeometryEditor);
						public selectGeometry(): void;
						public stop(): com.arcgismaps.geometry.Geometry;
						public getSelectedElement(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement>;
						public setSnapSettings(param0: com.arcgismaps.mapping.view.geometryeditor.SnapSettings): void;
						public getGeometry(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.geometry.Geometry>;
						public rotateSelectedElement(param0: number, param1: com.arcgismaps.geometry.Point): void;
						public start(param0: com.arcgismaps.geometry.GeometryType): void;
						public setVisible(param0: boolean): void;
						public getCanUndo(): kotlinx.coroutines.flow.StateFlow<java.lang.Boolean>;
						public selectVertex(param0: number, param1: number): void;
						public moveSelectedElement(param0: com.arcgismaps.geometry.Point): void;
						public clearGeometry(): void;
					}
					export module GeometryEditor {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeometryEditor,com.arcgismaps.mapping.view.geometryeditor.GeometryEditor> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditor.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditor.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export abstract class GeometryEditorElement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement>;
						public getCoreGeometryEditorElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorElement;
						public getCanDelete(): boolean;
						public getCanRotate(): boolean;
						public getExtent(): com.arcgismaps.geometry.Envelope;
						public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType;
						public getCanScale(): boolean;
						public getCanMove(): boolean;
					}
					export module GeometryEditorElement {
						export class Factory extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementFactory {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class GeometryEditorElementFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeometryEditorElement,com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementFactory>;
						public constructor();
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryEditorElement): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement;
						public convertToPublic(param0: any): any;
					}
					export module GeometryEditorElementFactory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementFactory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export abstract class GeometryEditorElementType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType>;
						public getCoreGeometryEditorElementType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorElementType;
					}
					export module GeometryEditorElementType {
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryEditorElementType): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.Factory.WhenMappings>;
							}
						}
						export class GeometryEditorGeometry extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.GeometryEditorGeometry>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.GeometryEditorGeometry;
						}
						export class GeometryEditorMidVertex extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.GeometryEditorMidVertex>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.GeometryEditorMidVertex;
						}
						export class GeometryEditorPart extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.GeometryEditorPart>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.GeometryEditorPart;
						}
						export class GeometryEditorVertex extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.GeometryEditorVertex>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElementType.GeometryEditorVertex;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class GeometryEditorGeometry extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorGeometry>;
						public getCoreGeometryEditorGeometry$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorGeometry;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeometryEditorGeometry);
						public getGeometry(): com.arcgismaps.geometry.Geometry;
					}
					export module GeometryEditorGeometry {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeometryEditorGeometry,com.arcgismaps.mapping.view.geometryeditor.GeometryEditorGeometry> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorGeometry.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorGeometry.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class GeometryEditorMidVertex extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorMidVertex>;
						public getCoreGeometryEditorMidVertex$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorMidVertex;
						public getSegmentIndex(): number;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeometryEditorMidVertex);
						public getPoint(): com.arcgismaps.geometry.Point;
						public getPartIndex(): number;
					}
					export module GeometryEditorMidVertex {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeometryEditorMidVertex,com.arcgismaps.mapping.view.geometryeditor.GeometryEditorMidVertex> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorMidVertex.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorMidVertex.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class GeometryEditorPart extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorPart>;
						public getPartIndex(): number;
						public getCoreGeometryEditorPart$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorPart;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeometryEditorPart);
						public getPart(): com.arcgismaps.geometry.Part;
					}
					export module GeometryEditorPart {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeometryEditorPart,com.arcgismaps.mapping.view.geometryeditor.GeometryEditorPart> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorPart.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorPart.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export abstract class GeometryEditorScaleMode {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode>;
						public getCoreGeometryEditorScaleMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode;
					}
					export module GeometryEditorScaleMode {
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryEditorScaleMode): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode.Factory.WhenMappings>;
							}
						}
						export class Stretch extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode.Stretch>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode.Stretch;
						}
						export class Uniform extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode.Uniform>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode.Uniform;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class GeometryEditorStyle {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorStyle>;
						public setBoundingBoxHandleSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public setFillSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public setLineSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public getBoundingBoxSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public getRotateHandleSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public getSelectedMidVertexSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public setSnappedToVertexSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public getLineSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public getSelectedVertexSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public getFillSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public setFeedbackLineSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public getMidVertexSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public getVertexSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public setBoundingBoxSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public getVertexTextSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public setOpacity(param0: number): void;
						public setRotateHandleSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public getFeedbackVertexSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public setSnappedToLineSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public constructor();
						public setFeedbackVertexSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public getSnappedToLineSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public getBoundingBoxHandleSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public getOpacity(): number;
						public getSnappedToVertexSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public getCoreGeometryEditorStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorStyle;
						public setSelectedMidVertexSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public setVertexTextSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeometryEditorStyle);
						public setSelectedVertexSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public getFeedbackLineSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public setVertexSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public getMultipleSnapCandidatesSymbol(): com.arcgismaps.mapping.symbology.Symbol;
						public setMidVertexSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
						public setMultipleSnapCandidatesSymbol(param0: com.arcgismaps.mapping.symbology.Symbol): void;
					}
					export module GeometryEditorStyle {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeometryEditorStyle,com.arcgismaps.mapping.view.geometryeditor.GeometryEditorStyle> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorStyle.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorStyle.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export abstract class GeometryEditorTool {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool>;
						public setStyle(param0: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorStyle): void;
						public getCoreGeometryEditorTool$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorTool;
						public getObjectType$arcgis_maps_any_release(): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType;
						public getStyle(): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorStyle;
					}
					export module GeometryEditorTool {
						export class Factory extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolFactory {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class GeometryEditorToolFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeometryEditorTool,com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool> {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolFactory>;
						public constructor();
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryEditorTool): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool;
						public convertToPublic(param0: any): any;
					}
					export module GeometryEditorToolFactory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolFactory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export abstract class GeometryEditorToolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType>;
						public getCoreGeometryEditorToolType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorToolType;
					}
					export module GeometryEditorToolType {
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeometryEditorToolType): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType.Factory.WhenMappings>;
							}
						}
						export class FreehandTool extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType.FreehandTool>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType.FreehandTool;
						}
						export class ShapeTool extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType.ShapeTool>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType.ShapeTool;
						}
						export class VertexTool extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType.VertexTool>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorToolType.VertexTool;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class GeometryEditorVertex extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorElement {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorVertex>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeometryEditorVertex);
						public getPoint(): com.arcgismaps.geometry.Point;
						public getPartIndex(): number;
						public getVertexIndex(): number;
						public getCoreGeometryEditorVertex$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeometryEditorVertex;
					}
					export module GeometryEditorVertex {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeometryEditorVertex,com.arcgismaps.mapping.view.geometryeditor.GeometryEditorVertex> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.GeometryEditorVertex.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorVertex.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class InteractionConfiguration {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration>;
						public getAllowPartCreation(): boolean;
						public setAllowScalingSelectedElement(param0: boolean): void;
						public getAllowMidVertexSelection(): boolean;
						public setAllowPartSelection(param0: boolean): void;
						public setAllowVertexSelection(param0: boolean): void;
						public constructor(param0: com.arcgismaps.internal.jni.CoreInteractionConfiguration);
						public getCoreInteractionConfiguration$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreInteractionConfiguration;
						public setScaleMode(param0: com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode): void;
						public getAllowDeletingSelectedElement(): boolean;
						public getAllowPartSelection(): boolean;
						public setAllowMidVertexSelection(param0: boolean): void;
						public setAllowDeletingSelectedElement(param0: boolean): void;
						public setRequireSelectionBeforeMove(param0: boolean): void;
						public setAllowRotatingSelectedElement(param0: boolean): void;
						public getScaleMode(): com.arcgismaps.mapping.view.geometryeditor.GeometryEditorScaleMode;
						public setAllowTransformation(param0: boolean): void;
						public setAllowPartCreation(param0: boolean): void;
						public setAllowMovingSelectedElement(param0: boolean): void;
						public constructor();
						public getAllowScalingSelectedElement(): boolean;
						public getAllowVertexSelection(): boolean;
						public getAllowMovingSelectedElement(): boolean;
						public setAllowVertexCreation(param0: boolean): void;
						public setAllowDeletion(param0: boolean): void;
						public getAllowGeometrySelection(): boolean;
						public setAllowSelection(param0: boolean): void;
						public getAllowRotatingSelectedElement(): boolean;
						public setAllowGeometrySelection(param0: boolean): void;
						public getAllowVertexCreation(): boolean;
						public setAllowCreation(param0: boolean): void;
						public getRequireSelectionBeforeMove(): boolean;
					}
					export module InteractionConfiguration {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreInteractionConfiguration,com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class ShapeTool extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.ShapeTool>;
						public getConfiguration(): com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration;
						public setConfiguration(param0: com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration): void;
						public getCoreShapeTool$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreShapeTool;
						public constructor(param0: com.arcgismaps.mapping.view.geometryeditor.ShapeToolType);
						public getShapeType(): com.arcgismaps.mapping.view.geometryeditor.ShapeToolType;
						public constructor(param0: com.arcgismaps.internal.jni.CoreShapeTool);
					}
					export module ShapeTool {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreShapeTool,com.arcgismaps.mapping.view.geometryeditor.ShapeTool> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.ShapeTool.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.ShapeTool.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export abstract class ShapeToolType {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.ShapeToolType>;
						public getCoreShapeToolType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreShapeToolType;
					}
					export module ShapeToolType {
						export class Arrow extends com.arcgismaps.mapping.view.geometryeditor.ShapeToolType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Arrow>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Arrow;
						}
						export class Ellipse extends com.arcgismaps.mapping.view.geometryeditor.ShapeToolType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Ellipse>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Ellipse;
						}
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CoreShapeToolType): com.arcgismaps.mapping.view.geometryeditor.ShapeToolType;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Factory.WhenMappings>;
							}
						}
						export class Rectangle extends com.arcgismaps.mapping.view.geometryeditor.ShapeToolType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Rectangle>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Rectangle;
						}
						export class Triangle extends com.arcgismaps.mapping.view.geometryeditor.ShapeToolType {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Triangle>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.ShapeToolType.Triangle;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class SnapSettings {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.SnapSettings>;
						public constructor();
						public syncSourceSettings(): void;
						public getCoreSnapSettings$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSnapSettings;
						public constructor(param0: com.arcgismaps.internal.jni.CoreSnapSettings);
						public getTolerance$arcgis_maps_any_release(): number;
						public isEnabled(): boolean;
						public setTolerance$arcgis_maps_any_release(param0: number): void;
						public setEnabled(param0: boolean): void;
						public getSourceSettings(): java.util.List<com.arcgismaps.mapping.view.geometryeditor.SnapSourceSettings>;
					}
					export module SnapSettings {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSnapSettings,com.arcgismaps.mapping.view.geometryeditor.SnapSettings> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.SnapSettings.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.SnapSettings.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class SnapSource {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.SnapSource>;
						/**
						 * Constructs a new instance of the com.arcgismaps.mapping.view.geometryeditor.SnapSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class SnapSourceImpl extends com.arcgismaps.mapping.view.geometryeditor.SnapSource {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.SnapSourceImpl>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreSnapSource);
						public getCoreSnapSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSnapSource;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class SnapSourceSettings {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.SnapSourceSettings>;
						public getCoreSnapSourceSettings$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSnapSourceSettings;
						public constructor(param0: com.arcgismaps.internal.jni.CoreSnapSourceSettings);
						public getSource(): com.arcgismaps.mapping.view.geometryeditor.SnapSource;
						public isEnabled(): boolean;
						public setEnabled(param0: boolean): void;
					}
					export module SnapSourceSettings {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSnapSourceSettings,com.arcgismaps.mapping.view.geometryeditor.SnapSourceSettings> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.SnapSourceSettings.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.SnapSourceSettings.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module geometryeditor {
					export class VertexTool extends com.arcgismaps.mapping.view.geometryeditor.GeometryEditorTool {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.VertexTool>;
						public getConfiguration(): com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration;
						public setConfiguration(param0: com.arcgismaps.mapping.view.geometryeditor.InteractionConfiguration): void;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreVertexTool);
						public getCoreVertexTool$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVertexTool;
					}
					export module VertexTool {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreVertexTool,com.arcgismaps.mapping.view.geometryeditor.VertexTool> {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.geometryeditor.VertexTool.Factory>;
							public static INSTANCE: com.arcgismaps.mapping.view.geometryeditor.VertexTool.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class DefaultMapViewOnTouchListener {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.DefaultMapViewOnTouchListener>;
						public getOnDoubleTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleTapEvent>;
						public getOnUp(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.UpEvent>;
						public getOnRotate(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.RotationChangeEvent>;
						public onLifecycleReady$arcgis_maps_any_release(): void;
						public getOnDown(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DownEvent>;
						public getOnTwoPointerTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.TwoPointerTapEvent>;
						public setInteractionOptions(param0: com.arcgismaps.mapping.view.MapViewInteractionOptions): void;
						public onTouch(param0: globalAndroid.view.View, param1: globalAndroid.view.MotionEvent): boolean;
						public getOnPan(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.PanChangeEvent>;
						public constructor(param0: globalAndroid.content.Context, param1: com.arcgismaps.mapping.view.MapView);
						public getOnSingleTapConfirmed(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.SingleTapConfirmedEvent>;
						public getInteractionOptions(): com.arcgismaps.mapping.view.MapViewInteractionOptions;
						public getOnLongPress(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.LongPressEvent>;
						public getOnScale(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.ScaleChangeEvent>;
					}
					export module DefaultMapViewOnTouchListener {
						export class MapViewRotator {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.DefaultMapViewOnTouchListener.MapViewRotator>;
							public onRotationStartEvent(): void;
							public onRotationChangeEvent(param0: com.arcgismaps.mapping.view.RotationChangeEvent): void;
							public constructor(param0: com.arcgismaps.mapping.view.internal.DefaultMapViewOnTouchListener);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class DefaultSceneViewOnTouchListener {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.DefaultSceneViewOnTouchListener>;
						public getOnDoubleTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleTapEvent>;
						public getOnUp(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.UpEvent>;
						public getOnRotate(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.RotationChangeEvent>;
						public getInteractionOptions(): com.arcgismaps.mapping.view.SceneViewInteractionOptions;
						public setInteractionOptions(param0: com.arcgismaps.mapping.view.SceneViewInteractionOptions): void;
						public onLifecycleReady$arcgis_maps_any_release(): void;
						public getOnDown(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DownEvent>;
						public getOnTwoPointerTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.TwoPointerTapEvent>;
						public onTouch(param0: globalAndroid.view.View, param1: globalAndroid.view.MotionEvent): boolean;
						public getOnPan(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.PanChangeEvent>;
						public getOnSingleTapConfirmed(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.SingleTapConfirmedEvent>;
						public getOnLongPress(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.LongPressEvent>;
						public getOnScale(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.ScaleChangeEvent>;
						public constructor(param0: globalAndroid.content.Context, param1: com.arcgismaps.mapping.view.SceneView);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class DoubleTapGestureRecognizer extends com.arcgismaps.mapping.view.internal.GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.DoubleTapGestureRecognizer>;
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public constructor(param0: com.arcgismaps.mapping.view.internal.GestureState, param1: com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts);
						public getOnDoubleTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleXY>;
					}
					export module DoubleTapGestureRecognizer {
						export class WaitingState {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.DoubleTapGestureRecognizer.WaitingState>;
							public static WAITING_FOR_FIRST_DOWN: com.arcgismaps.mapping.view.internal.DoubleTapGestureRecognizer.WaitingState;
							public static WAITING_FOR_FIRST_UP: com.arcgismaps.mapping.view.internal.DoubleTapGestureRecognizer.WaitingState;
							public static WAITING_FOR_SECOND_DOWN: com.arcgismaps.mapping.view.internal.DoubleTapGestureRecognizer.WaitingState;
							public static WAITING_FOR_SECOND_UP: com.arcgismaps.mapping.view.internal.DoubleTapGestureRecognizer.WaitingState;
							public static valueOf(param0: string): com.arcgismaps.mapping.view.internal.DoubleTapGestureRecognizer.WaitingState;
							public static values(): androidNative.Array<com.arcgismaps.mapping.view.internal.DoubleTapGestureRecognizer.WaitingState>;
							public static getEntries(): any;
						}
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.DoubleTapGestureRecognizer.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class GeometryEditorDragGestureRecognizer extends com.arcgismaps.mapping.view.internal.GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.GeometryEditorDragGestureRecognizer>;
						public getOnDragEnd(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.GeometryEditorDragEndEvent>;
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public constructor(param0: com.arcgismaps.mapping.view.internal.GestureState, param1: any);
						public getOnDragMove(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.GeometryEditorDragMoveEvent>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.GestureRecognizer>;
						/**
						 * Constructs a new instance of the com.arcgismaps.mapping.view.internal.GestureRecognizer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onTouch(param0: globalAndroid.view.MotionEvent): void;
						});
						public constructor();
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class GestureState {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.GestureState>;
						public getLastUpEvent(): globalAndroid.view.MotionEvent;
						public setShouldNotRotate(param0: boolean): void;
						public getShouldNotRotate(): boolean;
						public getShouldNotFling(): boolean;
						public getShouldNotPan(): boolean;
						public setShouldNotTilt(param0: boolean): void;
						public getShouldNotTilt(): boolean;
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public getHasAnyPointerMoved(): boolean;
						public constructor(param0: com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts);
						public getShouldNotGeometryEditorDrag(): boolean;
						public setShouldNotPan(param0: boolean): void;
						public setShouldNotGeometryEditorDrag(param0: boolean): void;
						public setShouldNotFling(param0: boolean): void;
						public getLastDownEvent(): globalAndroid.view.MotionEvent;
						public getShouldNotPinch(): boolean;
						public setShouldNotPinch(param0: boolean): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class LongPressGestureRecognizer extends com.arcgismaps.mapping.view.internal.GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.LongPressGestureRecognizer>;
						public getOnLongPressDrag(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleXY>;
						public getOnLongPressEnd(): kotlinx.coroutines.flow.SharedFlow<any>;
						public constructor(param0: com.arcgismaps.mapping.view.internal.GestureState, param1: com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts, param2: any, param3: any, param4: any);						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public getOnLongPress(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleXY>;
					}
					export module LongPressGestureRecognizer {
						export class WaitingState {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.LongPressGestureRecognizer.WaitingState>;
							public static WAITING_FOR_DOWN: com.arcgismaps.mapping.view.internal.LongPressGestureRecognizer.WaitingState;
							public static WAITING_FOR_TIMER: com.arcgismaps.mapping.view.internal.LongPressGestureRecognizer.WaitingState;
							public static getEntries(): any;
							public static values(): androidNative.Array<com.arcgismaps.mapping.view.internal.LongPressGestureRecognizer.WaitingState>;
							public static valueOf(param0: string): com.arcgismaps.mapping.view.internal.LongPressGestureRecognizer.WaitingState;
						}
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.LongPressGestureRecognizer.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class PanAndTiltGestureRecognizer extends com.arcgismaps.mapping.view.internal.GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer>;
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public getOnTiltChange(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.TiltChangeEvent>;
						public constructor(param0: com.arcgismaps.mapping.view.internal.GestureState, param1: com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts);
						public getOnPanChange(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.PanChangeEvent>;
						public getOnFling(): kotlinx.coroutines.flow.SharedFlow<any>;
					}
					export module PanAndTiltGestureRecognizer {
						export class ActiveGesture {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer.ActiveGesture>;
							public static UNDECIDED: com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer.ActiveGesture;
							public static PANNING: com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer.ActiveGesture;
							public static TILTING: com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer.ActiveGesture;
							public static values(): androidNative.Array<com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer.ActiveGesture>;
							public static valueOf(param0: string): com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer.ActiveGesture;
							public static getEntries(): any;
						}
						export class PointerInfo {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer.PointerInfo>;
							public setVelocity(param0: com.arcgismaps.mapping.view.DoubleXY): void;
							public getVelocity(): com.arcgismaps.mapping.view.DoubleXY;
							public hashCode(): number;
							public component2(): com.arcgismaps.mapping.view.DoubleXY;
							public constructor(param0: number, param1: com.arcgismaps.mapping.view.DoubleXY, param2: com.arcgismaps.mapping.view.DoubleXY);
							public component3(): com.arcgismaps.mapping.view.DoubleXY;
							public toString(): string;
							public setPosition(param0: com.arcgismaps.mapping.view.DoubleXY): void;
							public copy(param0: number, param1: com.arcgismaps.mapping.view.DoubleXY, param2: com.arcgismaps.mapping.view.DoubleXY): com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer.PointerInfo;
							public component1(): number;
							public getPosition(): com.arcgismaps.mapping.view.DoubleXY;
							public getId(): number;
							public equals(param0: any): boolean;
						}
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.PanAndTiltGestureRecognizer.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class PanGestureRecognizer extends com.arcgismaps.mapping.view.internal.GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.PanGestureRecognizer>;
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public constructor(param0: com.arcgismaps.mapping.view.internal.GestureState, param1: com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts);
						public getOnPanChange(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.PanChangeEvent>;
						public getOnFling(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.FlingEvent>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class PinchGestureRecognizer extends com.arcgismaps.mapping.view.internal.GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.PinchGestureRecognizer>;
						public constructor(param0: com.arcgismaps.mapping.view.internal.GestureState, param1: com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts, param2: com.arcgismaps.mapping.view.InteractionOptions, param3: any);
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public getOnScaleChange(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.ScaleChangeEvent>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class RotateGestureRecognizer extends com.arcgismaps.mapping.view.internal.GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.RotateGestureRecognizer>;
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public constructor(param0: com.arcgismaps.mapping.view.internal.GestureState, param1: com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts, param2: com.arcgismaps.mapping.view.InteractionOptions);
						public getOnRotationStart(): kotlinx.coroutines.flow.SharedFlow<any>;
						public getOnRotationChange(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.RotationChangeEvent>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class SingleTapConfirmedGestureRecognizer extends com.arcgismaps.mapping.view.internal.GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.SingleTapConfirmedGestureRecognizer>;
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public constructor(param0: com.arcgismaps.mapping.view.internal.GestureState, param1: com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts, param2: any);
						public getOnSingleTapConfirmed(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleXY>;
					}
					export module SingleTapConfirmedGestureRecognizer {
						export class WaitingState {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.SingleTapConfirmedGestureRecognizer.WaitingState>;
							public static WAITING_FOR_DOWN: com.arcgismaps.mapping.view.internal.SingleTapConfirmedGestureRecognizer.WaitingState;
							public static WAITING_FOR_UP: com.arcgismaps.mapping.view.internal.SingleTapConfirmedGestureRecognizer.WaitingState;
							public static WAITING_FOR_TIMER: com.arcgismaps.mapping.view.internal.SingleTapConfirmedGestureRecognizer.WaitingState;
							public static valueOf(param0: string): com.arcgismaps.mapping.view.internal.SingleTapConfirmedGestureRecognizer.WaitingState;
							public static values(): androidNative.Array<com.arcgismaps.mapping.view.internal.SingleTapConfirmedGestureRecognizer.WaitingState>;
							public static getEntries(): any;
						}
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.SingleTapConfirmedGestureRecognizer.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class ThresholdsAndTimeouts {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts>;
						public component13(): number;
						public getLongPressTimeout(): number;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public getDoubleTapTimeout(): number;
						public getFlingVelocityThreshold(): number;
						public getTiltScaleFactor(): number;
						public component6(): number;
						public component2(): number;
						public component9(): number;
						public component10(): number;
						public getPinchTiltLockThreshold(): number;
						public component1(): number;
						public getTiltRegionThreshold(): number;
						public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number);
						public component5(): number;
						public component8(): number;
						public copy(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number): com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts;
						public getTiltAmountThreshold(): number;
						public component11(): number;
						public getMultiPointerHeightThreshold(): number;
						public getMultiPointerWidthThreshold(): number;
						public component4(): number;
						public toString(): string;
						public getSinglePointerDistanceThreshold(): number;
						public getMaxDistanceBetweenDoubleTaps(): number;
						public getMinRotationRange(): number;
						public component12(): number;
						public getPinchRotateLockThreshold(): number;
						public component7(): number;
						public component3(): number;
					}
					export module ThresholdsAndTimeouts {
						export class Companion {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts.Companion>;
							public fromContext(param0: globalAndroid.content.Context): com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module mapping {
			export module view {
				export module internal {
					export class TwoPointerTapGestureRecognizer extends com.arcgismaps.mapping.view.internal.GestureRecognizer {
						public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.TwoPointerTapGestureRecognizer>;
						public onTouch(param0: globalAndroid.view.MotionEvent): void;
						public constructor(param0: com.arcgismaps.mapping.view.internal.GestureState, param1: com.arcgismaps.mapping.view.internal.ThresholdsAndTimeouts);
						public getOnTwoPointerTap(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.mapping.view.DoubleXY>;
					}
					export module TwoPointerTapGestureRecognizer {
						export class WaitingState {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.TwoPointerTapGestureRecognizer.WaitingState>;
							public static WAITING_FOR_FIRST_DOWN: com.arcgismaps.mapping.view.internal.TwoPointerTapGestureRecognizer.WaitingState;
							public static WAITING_FOR_SECOND_DOWN: com.arcgismaps.mapping.view.internal.TwoPointerTapGestureRecognizer.WaitingState;
							public static WAITING_FOR_UP: com.arcgismaps.mapping.view.internal.TwoPointerTapGestureRecognizer.WaitingState;
							public static getEntries(): any;
							public static valueOf(param0: string): com.arcgismaps.mapping.view.internal.TwoPointerTapGestureRecognizer.WaitingState;
							public static values(): androidNative.Array<com.arcgismaps.mapping.view.internal.TwoPointerTapGestureRecognizer.WaitingState>;
						}
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.mapping.view.internal.TwoPointerTapGestureRecognizer.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export abstract class DestinationStatus {
				public static class: java.lang.Class<com.arcgismaps.navigation.DestinationStatus>;
				public getCoreDestinationStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDestinationStatus;
			}
			export module DestinationStatus {
				export class Approaching extends com.arcgismaps.navigation.DestinationStatus {
					public static class: java.lang.Class<com.arcgismaps.navigation.DestinationStatus.Approaching>;
					public static INSTANCE: com.arcgismaps.navigation.DestinationStatus.Approaching;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.navigation.DestinationStatus.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.DestinationStatus.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDestinationStatus): com.arcgismaps.navigation.DestinationStatus;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.navigation.DestinationStatus.Factory.WhenMappings>;
					}
				}
				export class NotReached extends com.arcgismaps.navigation.DestinationStatus {
					public static class: java.lang.Class<com.arcgismaps.navigation.DestinationStatus.NotReached>;
					public static INSTANCE: com.arcgismaps.navigation.DestinationStatus.NotReached;
				}
				export class Reached extends com.arcgismaps.navigation.DestinationStatus {
					public static class: java.lang.Class<com.arcgismaps.navigation.DestinationStatus.Reached>;
					public static INSTANCE: com.arcgismaps.navigation.DestinationStatus.Reached;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export class ReroutingParameters {
				public static class: java.lang.Class<com.arcgismaps.navigation.ReroutingParameters>;
				public getRouteTask(): com.arcgismaps.tasks.networkanalysis.RouteTask;
				public setVisitFirstStopOnStart(param0: boolean): void;
				public getStrategy(): com.arcgismaps.navigation.ReroutingStrategy;
				public setStrategy(param0: com.arcgismaps.navigation.ReroutingStrategy): void;
				public getNetworkEdgeGeometries(): com.arcgismaps.data.ArcGISFeatureTable;
				public getRouteParameters(): com.arcgismaps.tasks.networkanalysis.RouteParameters;
				public setNetworkEdgeGeometries(param0: com.arcgismaps.data.ArcGISFeatureTable): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreReroutingParameters);
				public getCoreReroutingParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreReroutingParameters;
				public getVisitFirstStopOnStart(): boolean;
				public constructor(param0: com.arcgismaps.tasks.networkanalysis.RouteTask, param1: com.arcgismaps.tasks.networkanalysis.RouteParameters);
			}
			export module ReroutingParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreReroutingParameters,com.arcgismaps.navigation.ReroutingParameters> {
					public static class: java.lang.Class<com.arcgismaps.navigation.ReroutingParameters.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.ReroutingParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export abstract class ReroutingStrategy {
				public static class: java.lang.Class<com.arcgismaps.navigation.ReroutingStrategy>;
				public getCoreReroutingStrategy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreReroutingStrategy;
			}
			export module ReroutingStrategy {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.navigation.ReroutingStrategy.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.ReroutingStrategy.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreReroutingStrategy): com.arcgismaps.navigation.ReroutingStrategy;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.navigation.ReroutingStrategy.Factory.WhenMappings>;
					}
				}
				export class ResequenceStopsOnly extends com.arcgismaps.navigation.ReroutingStrategy {
					public static class: java.lang.Class<com.arcgismaps.navigation.ReroutingStrategy.ResequenceStopsOnly>;
					public static INSTANCE: com.arcgismaps.navigation.ReroutingStrategy.ResequenceStopsOnly;
				}
				export class ToNextStop extends com.arcgismaps.navigation.ReroutingStrategy {
					public static class: java.lang.Class<com.arcgismaps.navigation.ReroutingStrategy.ToNextStop>;
					public static INSTANCE: com.arcgismaps.navigation.ReroutingStrategy.ToNextStop;
				}
				export class ToNextWaypoint extends com.arcgismaps.navigation.ReroutingStrategy {
					public static class: java.lang.Class<com.arcgismaps.navigation.ReroutingStrategy.ToNextWaypoint>;
					public static INSTANCE: com.arcgismaps.navigation.ReroutingStrategy.ToNextWaypoint;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export class RouteTracker extends com.arcgismaps.Resourceable {
				public static class: java.lang.Class<com.arcgismaps.navigation.RouteTracker>;
				public constructor(param0: com.arcgismaps.tasks.networkanalysis.RouteResult, param1: number, param2: boolean);
				public "switchToNextDestination-IoAF18A"(param0: any): any;
				public cancelRerouting(): void;
				public getRerouteStarted(): kotlinx.coroutines.flow.SharedFlow<any>;
				public disableRerouting(): void;
				public isReroutingEnabled(): boolean;
				public getSkipCoincidentStops(): boolean;
				public setVoiceGuidanceUnitSystem(param0: com.arcgismaps.UnitSystem): void;
				public setSpeechEngineReadyCallback(param0: any): void;
				public getNewVoiceGuidance(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.navigation.VoiceGuidance>;
				public getTrackingStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.navigation.TrackingStatus>;
				public getRerouteCompleted(): kotlinx.coroutines.flow.SharedFlow<any>;
				public "trackLocation-gIAlu-s"(param0: com.arcgismaps.location.Location, param1: any): any;
				public "enableRerouting-gIAlu-s"(param0: com.arcgismaps.navigation.ReroutingParameters, param1: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRouteTracker);
				public "updateRouteResult-0E7RQCE$arcgis_maps_any_release"(param0: com.arcgismaps.tasks.networkanalysis.RouteResult, param1: number, param2: any): any;
				public getCoreRouteTracker$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRouteTracker;
				public getVoiceGuidanceUnitSystem(): com.arcgismaps.UnitSystem;
				public generateVoiceGuidance(): com.arcgismaps.navigation.VoiceGuidance;
			}
			export module RouteTracker {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRouteTracker,com.arcgismaps.navigation.RouteTracker> {
					public static class: java.lang.Class<com.arcgismaps.navigation.RouteTracker.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.RouteTracker.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export class RouteTrackerLogger {
				public static class: java.lang.Class<com.arcgismaps.navigation.RouteTrackerLogger>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRouteTrackerLogger);
				public getFeatureCache$arcgis_maps_any_release(): java.util.List<com.arcgismaps.geometry.Polyline>;
				public isRerouteTaskInProgress$arcgis_maps_any_release(): boolean;
				public getCoreRouteTrackerLogger$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRouteTrackerLogger;
				public constructor(param0: com.arcgismaps.navigation.RouteTracker, param1: string);
				public startGeodatabaseLogging(): void;
				public setLocationsSpatialReference$arcgis_maps_any_release(param0: com.arcgismaps.geometry.SpatialReference): void;
				public getBaselineDatabasePath$arcgis_maps_any_release(): string;
				public stopGeodatabaseLogging(): void;
				public getLocationsSpatialReference$arcgis_maps_any_release(): com.arcgismaps.geometry.SpatialReference;
				public setSessionName$arcgis_maps_any_release(param0: string): void;
				public getFeatureBuffer$arcgis_maps_any_release(): java.util.List<com.arcgismaps.geometry.Polygon>;
				public setBaselineDatabasePath$arcgis_maps_any_release(param0: string): void;
				public isFeatureQueryInProgress$arcgis_maps_any_release(): boolean;
				public getSessionName$arcgis_maps_any_release(): string;
			}
			export module RouteTrackerLogger {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRouteTrackerLogger,com.arcgismaps.navigation.RouteTrackerLogger> {
					public static class: java.lang.Class<com.arcgismaps.navigation.RouteTrackerLogger.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.RouteTrackerLogger.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export class TrackingDistance {
				public static class: java.lang.Class<com.arcgismaps.navigation.TrackingDistance>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTrackingDistance);
				public getCoreTrackingDistance$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTrackingDistance;
				public getDisplayTextUnits(): com.arcgismaps.geometry.LinearUnit;
				public getDistance(): number;
				public getDisplayText(): string;
			}
			export module TrackingDistance {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTrackingDistance,com.arcgismaps.navigation.TrackingDistance> {
					public static class: java.lang.Class<com.arcgismaps.navigation.TrackingDistance.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.TrackingDistance.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export class TrackingProgress {
				public static class: java.lang.Class<com.arcgismaps.navigation.TrackingProgress>;
				public getCoreTrackingProgress$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTrackingProgress;
				public getRemainingDistance(): com.arcgismaps.navigation.TrackingDistance;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTrackingProgress);
				public getRemainingGeometry(): com.arcgismaps.geometry.Polyline;
				public getTraversedGeometry(): com.arcgismaps.geometry.Polyline;
				public getRemainingTime(): number;
			}
			export module TrackingProgress {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTrackingProgress,com.arcgismaps.navigation.TrackingProgress> {
					public static class: java.lang.Class<com.arcgismaps.navigation.TrackingProgress.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.TrackingProgress.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export class TrackingStatus {
				public static class: java.lang.Class<com.arcgismaps.navigation.TrackingStatus>;
				public getManeuverProgress(): com.arcgismaps.navigation.TrackingProgress;
				public getRemainingDestinationCount(): number;
				public getLocationOnRoute(): com.arcgismaps.location.Location;
				public getRouteResult(): com.arcgismaps.tasks.networkanalysis.RouteResult;
				public getRouteProgress(): com.arcgismaps.navigation.TrackingProgress;
				public isApproachingFinalDestination(): boolean;
				public getDisplayLocation(): com.arcgismaps.location.Location;
				public getDestinationStatus(): com.arcgismaps.navigation.DestinationStatus;
				public isOnRoute(): boolean;
				public getStopIndexesAtNextDestination(): java.util.List<java.lang.Integer>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreTrackingStatus, param1: boolean);
				public getCoreTrackingStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTrackingStatus;
				public getCurrentManeuverIndex(): number;
				public isCalculatingRoute(): boolean;
				public getDestinationProgress(): com.arcgismaps.navigation.TrackingProgress;
			}
			export module TrackingStatus {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreTrackingStatus,com.arcgismaps.navigation.TrackingStatus> {
					public static class: java.lang.Class<com.arcgismaps.navigation.TrackingStatus.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.TrackingStatus.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export class VoiceGuidance {
				public static class: java.lang.Class<com.arcgismaps.navigation.VoiceGuidance>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreVoiceGuidance);
				public getCoreVoiceGuidance$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVoiceGuidance;
				public getType(): com.arcgismaps.navigation.VoiceGuidanceType;
				public getText(): string;
			}
			export module VoiceGuidance {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreVoiceGuidance,com.arcgismaps.navigation.VoiceGuidance> {
					public static class: java.lang.Class<com.arcgismaps.navigation.VoiceGuidance.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.VoiceGuidance.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module navigation {
			export abstract class VoiceGuidanceType {
				public static class: java.lang.Class<com.arcgismaps.navigation.VoiceGuidanceType>;
				public getCoreVoiceGuidanceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreVoiceGuidanceType;
			}
			export module VoiceGuidanceType {
				export class ApproachingDestination extends com.arcgismaps.navigation.VoiceGuidanceType {
					public static class: java.lang.Class<com.arcgismaps.navigation.VoiceGuidanceType.ApproachingDestination>;
					public static INSTANCE: com.arcgismaps.navigation.VoiceGuidanceType.ApproachingDestination;
				}
				export class ApproachingManeuver extends com.arcgismaps.navigation.VoiceGuidanceType {
					public static class: java.lang.Class<com.arcgismaps.navigation.VoiceGuidanceType.ApproachingManeuver>;
					public static INSTANCE: com.arcgismaps.navigation.VoiceGuidanceType.ApproachingManeuver;
				}
				export class AtManeuver extends com.arcgismaps.navigation.VoiceGuidanceType {
					public static class: java.lang.Class<com.arcgismaps.navigation.VoiceGuidanceType.AtManeuver>;
					public static INSTANCE: com.arcgismaps.navigation.VoiceGuidanceType.AtManeuver;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.navigation.VoiceGuidanceType.Factory>;
					public static INSTANCE: com.arcgismaps.navigation.VoiceGuidanceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreVoiceGuidanceType): com.arcgismaps.navigation.VoiceGuidanceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.navigation.VoiceGuidanceType.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

// declare module com {
// 	export module arcgismaps {
// 		export module portal {
// 			export class ElevationServiceInfo {
// 				public static class: java.lang.Class<com.arcgismaps.portal.ElevationServiceInfo>;
// 				public getLayerType(): string;
// 				public copy(param0: string, param1: string, param2: string): com.arcgismaps.portal.ElevationServiceInfo;
// 				public getId(): string;
// 				public component1(): string;
// 				public component3(): string;
// 				public hashCode(): number;
// 				public constructor(param0: string, param1: string, param2: string);
// 				public component2(): string;
// 				public equals(param0: any): boolean;
// 				public getUrl(): string;
// 				public toString(): string;
// 			}
				
// 			export module ElevationServiceInfo {
// 					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.ElevationServiceInfo> {
// 						public static class: java.lang.Class<com.arcgismaps.portal.ElevationServiceInfo.serializer>;
// 						public static INSTANCE: com.arcgismaps.portal.ElevationServiceInfo.serializer;
// 						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
// 						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.ElevationServiceInfo;
// 						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.ElevationServiceInfo): void;
// 						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
// 						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
// 					}
// 				}
// 				export class Companion {
// 					public static class: java.lang.Class<com.arcgismaps.portal.ElevationServiceInfo.Companion>;
// 					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.ElevationServiceInfo>;
// 				}
// 			}
// 		}
// 	}


declare module com {
    export module arcgismaps {
        export module portal {
            export class GroupQueryInfo {
                public static class: java.lang.Class<com.arcgismaps.portal.GroupQueryInfo>;
                public component1(): string;
                public getQueryString(): string;
                public hashCode(): number;
                public getOwner(): string;
                public component2(): string;
                public equals(param0: any): boolean;
                public toString(): string;
                public constructor(param0: string, param1: string);
                public getTitle(): string;
                public copy(param0: string, param1: string): com.arcgismaps.portal.GroupQueryInfo;
            }

            export module GroupQueryInfo {
                export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.GroupQueryInfo> {
                    public static class: java.lang.Class<com.arcgismaps.portal.GroupQueryInfo.serializer>;
                    public static INSTANCE: com.arcgismaps.portal.GroupQueryInfo.serializer;
                    public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
                    public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.GroupQueryInfo;
                    public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.GroupQueryInfo): void;
                    public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
                    public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
                }
            }
            export class Companion {
                public static class: java.lang.Class<com.arcgismaps.portal.GroupQueryInfo.Companion>;
                public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.GroupQueryInfo>;
            }
        }
    }
}


declare module com {
	export module arcgismaps {
		export module portal {
			export class HelperServiceUrl {
				public static class: java.lang.Class<com.arcgismaps.portal.HelperServiceUrl>;
				public copy(param0: string): com.arcgismaps.portal.HelperServiceUrl;
				public component1(): string;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getUrl(): string;
				public toString(): string;
				public constructor(param0: string);
			}
				
			export module HelperServiceUrl {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.HelperServiceUrl> {
						public static class: java.lang.Class<com.arcgismaps.portal.HelperServiceUrl.serializer>;
						public static INSTANCE: com.arcgismaps.portal.HelperServiceUrl.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.HelperServiceUrl;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.HelperServiceUrl): void;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.HelperServiceUrl.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.HelperServiceUrl>;
				}
			}
		}
	}

declare module com {
	export module arcgismaps {
		export module portal {
			export class LoadableImage extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.portal.LoadableImage>;
				public getImage(): globalAndroid.graphics.drawable.BitmapDrawable;
				public getUri(): string;
				public "retryLoad-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLoadableImage);
				public getCoreLoadableImage$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLoadableImage;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
			}
			export module LoadableImage {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.LoadableImage.Companion>;
					public createWithImage(param0: globalAndroid.graphics.drawable.BitmapDrawable): com.arcgismaps.portal.LoadableImage;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLoadableImage,com.arcgismaps.portal.LoadableImage> {
					public static class: java.lang.Class<com.arcgismaps.portal.LoadableImage.Factory>;
					public static INSTANCE: com.arcgismaps.portal.LoadableImage.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class Portal extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.portal.Portal>;
				public "fetchVectorBasemaps-IoAF18A"(param0: any): any;
				public "findAllItems-BWLJW6A$arcgis_maps_any_release"(param0: com.arcgismaps.portal.PortalQueryParameters, param1: java.util.List<com.arcgismaps.mapping.PortalItem>, param2: number, param3: any): any;
				public cancelLoad(): void;
				public "fetchBasemaps-IoAF18A"(param0: any): any;
				public getLocale(): java.util.Locale;
				public getVersion(): com.arcgismaps.portal.PortalVersion;
				public "fetchSymbolSets-IoAF18A"(param0: any): any;
				public setPortalInfoOrError$arcgis_maps_any_release(param0: com.arcgismaps.portal.PortalInfo, param1: java.lang.Throwable): void;
				public "fetchDeveloperBasemaps-IoAF18A"(param0: any): any;
				public "fetchFeaturedItems-IoAF18A"(param0: any): any;
				public "fetchPortalInfo-IoAF18A$arcgis_maps_any_release"(param0: any): any;
				public getConnection(): com.arcgismaps.portal.Portal.Connection;
				/** @deprecated */
				public "fetchHomePageFeaturedContent-IoAF18A"(param0: any): any;
				public getUser(): com.arcgismaps.portal.PortalUser;
				public getCorePortal$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePortal;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public "fetchFeaturedGroups-IoAF18A"(param0: any): any;
				public "findGroups-gIAlu-s"(param0: com.arcgismaps.portal.PortalQueryParameters, param1: any): any;
				public getUrl(): string;
				public "findItems-gIAlu-s"(param0: com.arcgismaps.portal.PortalQueryParameters, param1: any): any;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string, param1: com.arcgismaps.portal.Portal.Connection);
				public getPortalInfo(): com.arcgismaps.portal.PortalInfo;
				public "fetchStyles-IoAF18A"(param0: any): any;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getAuthenticationMode$arcgis_maps_any_release(param0: any): any;
				public setLocale(param0: java.util.Locale): void;
				public "fetchLicenseInfo-IoAF18A"(param0: any): any;
			}
			export module Portal {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.Portal.Companion>;
					public arcGISOnline(param0: com.arcgismaps.portal.Portal.Connection): com.arcgismaps.portal.Portal;
					public createServiceException$arcgis_maps_any_release(param0: string, param1: java.lang.Integer, param2: string): com.arcgismaps.exceptions.ServiceException;
				}
				export abstract class Connection {
					public static class: java.lang.Class<com.arcgismaps.portal.Portal.Connection>;
				}
				export module Connection {
					export class Anonymous extends com.arcgismaps.portal.Portal.Connection {
						public static class: java.lang.Class<com.arcgismaps.portal.Portal.Connection.Anonymous>;
						public static INSTANCE: com.arcgismaps.portal.Portal.Connection.Anonymous;
					}
					export class Authenticated extends com.arcgismaps.portal.Portal.Connection {
						public static class: java.lang.Class<com.arcgismaps.portal.Portal.Connection.Authenticated>;
						public static INSTANCE: com.arcgismaps.portal.Portal.Connection.Authenticated;
					}
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CorePortal,com.arcgismaps.portal.Portal> {
					public static class: java.lang.Class<com.arcgismaps.portal.Portal.Factory>;
					public static INSTANCE: com.arcgismaps.portal.Portal.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalAccess extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalAccess>;
				public getEncoding(): string;
				public getCorePortalAccess$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePortalAccess;
			}
			export module PortalAccess {
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.PortalAccess> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalAccess.Companion>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalAccess>;
					public unknownCase(param0: string): any;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalAccess>;
					public getDecoder(): java.util.Map<string,any>;
					public unknownCase(param0: string): com.arcgismaps.portal.PortalAccess;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalAccess.Factory>;
					public static INSTANCE: com.arcgismaps.portal.PortalAccess.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CorePortalAccess): com.arcgismaps.portal.PortalAccess;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalAccess.Factory.WhenMappings>;
					}
				}
				export class Organization extends com.arcgismaps.portal.PortalAccess {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalAccess.Organization>;
					public static INSTANCE: com.arcgismaps.portal.PortalAccess.Organization;
				}
				export class Private extends com.arcgismaps.portal.PortalAccess {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalAccess.Private>;
					public static INSTANCE: com.arcgismaps.portal.PortalAccess.Private;
				}
				export class Public extends com.arcgismaps.portal.PortalAccess {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalAccess.Public>;
					public static INSTANCE: com.arcgismaps.portal.PortalAccess.Public;
				}
				export class Shared extends com.arcgismaps.portal.PortalAccess {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalAccess.Shared>;
					public static INSTANCE: com.arcgismaps.portal.PortalAccess.Shared;
				}
				export class Unknown extends com.arcgismaps.portal.PortalAccess {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalAccess.Unknown>;
					public constructor(param0: string);
					public getUnknownState(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalAccessSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalAccess> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalAccessSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalAccessSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalAccessStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalAccess> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalAccessStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalAccessStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalFolder {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalFolder>;
				public component4(): java.time.Instant;
				public getCreationDate(): java.time.Instant;
				public component1(): string;
				public copy(param0: string, param1: string, param2: string, param3: java.time.Instant): com.arcgismaps.portal.PortalFolder;
				public constructor(param0: string, param1: string, param2: string, param3: java.time.Instant);
				public toString(): string;
				public getTitle(): string;
				public component3(): string;
				public hashCode(): number;
				public component2(): string;
				public equals(param0: any): boolean;
				public getUsername(): string;
				public getFolderId(): string;
			}
				
			export module PortalFolder {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalFolder> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalFolder.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalFolder.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalFolder;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalFolder): void;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalFolder.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalFolder>;
				}
			}
		}
	}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalGroup implements com.arcgismaps.Loadable, com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalGroup>;
				public component1(): com.arcgismaps.portal.Portal;
				public getSnippet(): string;
				public getId(): string;
				public cancelLoad(): void;
				public getCreationDate(): java.time.Instant;
				public getPhone(): string;
				public getOwner(): string;
				public getDescription(): string;
				public getPortal(): com.arcgismaps.portal.Portal;
				public isViewOnly(): boolean;
				public hashCode(): number;
				public constructor(param0: com.arcgismaps.portal.Portal, param1: string, param2: com.arcgismaps.LoadableImplWithData<com.arcgismaps.portal.PortalGroupLoadableData>);
				public component2(): string;
				public equals(param0: any): boolean;
				public copy(param0: com.arcgismaps.portal.Portal, param1: string, param2: com.arcgismaps.LoadableImplWithData<com.arcgismaps.portal.PortalGroupLoadableData>): com.arcgismaps.portal.PortalGroup;
				public getSortField(): com.arcgismaps.portal.PortalGroupSortField;
				public getThumbnail(): com.arcgismaps.portal.LoadableImage;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public "fetchGroupUsers-IoAF18A"(param0: any): any;
				public getSortOrder(): com.arcgismaps.portal.PortalQuerySortOrder;
				public toString(): string;
				public "load-IoAF18A"(param0: any): any;
				public toJson(): string;
				public getTitle(): string;
				public getTags(): java.util.List<string>;
				public "findItems-gIAlu-s"(param0: com.arcgismaps.portal.PortalGroupContentSearchParameters, param1: any): any;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getModificationDate(): java.time.Instant;
				public isInvitationOnly(): boolean;
				public getAccess(): com.arcgismaps.portal.PortalAccess;
				public constructor(param0: com.arcgismaps.portal.Portal, param1: string);
			}
			export module PortalGroup {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroup.Companion>;
					public fromJsonOrNull(param0: string, param1: com.arcgismaps.portal.Portal): com.arcgismaps.portal.PortalGroup;
					public getJson$arcgis_maps_any_release(): kotlinx.serialization.json.Json;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalGroupContentSearchParameters {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupContentSearchParameters>;
				public setSearchPublic(param0: boolean): void;
				public getRequestParameters$arcgis_maps_any_release(param0: string): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
				public setLimit(param0: number): void;
				public getBoundingBox(): com.arcgismaps.geometry.Envelope;
				public nextRequestParameters$arcgis_maps_any_release(param0: number): com.arcgismaps.portal.PortalGroupContentSearchParameters;
				public getSortOrder(): com.arcgismaps.portal.PortalQuerySortOrder;
				public getStartIndex(): number;
				public setSortField(param0: string): void;
				public setSortOrder(param0: com.arcgismaps.portal.PortalQuerySortOrder): void;
				public getSortField(): string;
				public getCategories(): java.util.List<string>;
				public setStartIndex(param0: number): void;
				public setBoundingBox(param0: com.arcgismaps.geometry.Envelope): void;
				public getQuery(): string;
				public getSearchPublic(): boolean;
				public getLimit(): number;
			}
			export module PortalGroupContentSearchParameters {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupContentSearchParameters.Companion>;
					public items(param0: java.lang.Iterable<any>, param1: string, param2: string): com.arcgismaps.portal.PortalGroupContentSearchParameters;
					public item(param0: string): com.arcgismaps.portal.PortalGroupContentSearchParameters;
					public query(param0: string): com.arcgismaps.portal.PortalGroupContentSearchParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalGroupContentSearchResultSet {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupContentSearchResultSet>;
				public copy(param0: com.arcgismaps.portal.PortalGroupContentSearchParameters, param1: com.arcgismaps.portal.PortalGroupContentSearchParameters, param2: number, param3: java.util.List<com.arcgismaps.mapping.PortalItem>): com.arcgismaps.portal.PortalGroupContentSearchResultSet;
				public getResults(): java.util.List<com.arcgismaps.mapping.PortalItem>;
				public component2(): com.arcgismaps.portal.PortalGroupContentSearchParameters;
				public toString(): string;
				public component1(): com.arcgismaps.portal.PortalGroupContentSearchParameters;
				public getTotalResults(): number;
				public component3(): number;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public component4(): java.util.List<com.arcgismaps.mapping.PortalItem>;
				public getNextSearchParameters(): com.arcgismaps.portal.PortalGroupContentSearchParameters;
				public constructor(param0: com.arcgismaps.portal.PortalGroupContentSearchParameters, param1: com.arcgismaps.portal.PortalGroupContentSearchParameters, param2: number, param3: java.util.List<com.arcgismaps.mapping.PortalItem>);
				public getSearchParameters(): com.arcgismaps.portal.PortalGroupContentSearchParameters;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalGroupLoadableData extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupLoadableData>;
				public getSnippet(): string;
				public getId(): string;
				public component11(): com.arcgismaps.portal.PortalGroupSortField;
				public getCreationDate(): java.time.Instant;
				public copy(param0: string, param1: com.arcgismaps.portal.PortalAccess, param2: java.time.Instant, param3: string, param4: boolean, param5: boolean, param6: java.time.Instant, param7: string, param8: string, param9: string, param10: com.arcgismaps.portal.PortalGroupSortField, param11: com.arcgismaps.portal.PortalQuerySortOrder, param12: java.util.List<string>, param13: string, param14: string): com.arcgismaps.portal.PortalGroupLoadableData;
				public getPhone(): string;
				public getOwner(): string;
				public component5(): boolean;
				public getDescription(): string;
				public isViewOnly(): boolean;
				public component12(): com.arcgismaps.portal.PortalQuerySortOrder;
				public hashCode(): number;
				public getThumbnailUri(): string;
				public equals(param0: any): boolean;
				public component15(): string;
				public getSortField(): com.arcgismaps.portal.PortalGroupSortField;
				public component9(): string;
				public component6(): boolean;
				public component13(): java.util.List<string>;
				public component1(): string;
				public component4(): string;
				public component8(): string;
				public getSortOrder(): com.arcgismaps.portal.PortalQuerySortOrder;
				public toString(): string;
				public toJson(): string;
				public getTitle(): string;
				public getTags(): java.util.List<string>;
				public component2(): com.arcgismaps.portal.PortalAccess;
				public component3(): java.time.Instant;
				public constructor(param0: string, param1: com.arcgismaps.portal.PortalAccess, param2: java.time.Instant, param3: string, param4: boolean, param5: boolean, param6: java.time.Instant, param7: string, param8: string, param9: string, param10: com.arcgismaps.portal.PortalGroupSortField, param11: com.arcgismaps.portal.PortalQuerySortOrder, param12: java.util.List<string>, param13: string, param14: string);
				public component14(): string;
				public component10(): string;
				public getModificationDate(): java.time.Instant;
				public isInvitationOnly(): boolean;
				public getAccess(): com.arcgismaps.portal.PortalAccess;
				public component7(): java.time.Instant;
			}
				
			export module PortalGroupLoadableData {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalGroupLoadableData> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupLoadableData.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalGroupLoadableData.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalGroupLoadableData): void;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalGroupLoadableData;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupLoadableData.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalGroupLoadableData>;
					public fromJsonOrNull(param0: string): com.arcgismaps.portal.PortalGroupLoadableData;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalGroupSortField extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortField>;
				public getEncoding(): string;
			}
			export module PortalGroupSortField {
				export class AverageRating extends com.arcgismaps.portal.PortalGroupSortField {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortField.AverageRating>;
					public static INSTANCE: com.arcgismaps.portal.PortalGroupSortField.AverageRating;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.PortalGroupSortField> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortField.Companion>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalGroupSortField>;
					public unknownCase(param0: string): com.arcgismaps.portal.PortalGroupSortField;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalGroupSortField>;
					public unknownCase(param0: string): any;
					public getDecoder(): java.util.Map<string,any>;
				}
				export class Created extends com.arcgismaps.portal.PortalGroupSortField {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortField.Created>;
					public static INSTANCE: com.arcgismaps.portal.PortalGroupSortField.Created;
				}
				export class Modified extends com.arcgismaps.portal.PortalGroupSortField {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortField.Modified>;
					public static INSTANCE: com.arcgismaps.portal.PortalGroupSortField.Modified;
				}
				export class Owner extends com.arcgismaps.portal.PortalGroupSortField {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortField.Owner>;
					public static INSTANCE: com.arcgismaps.portal.PortalGroupSortField.Owner;
				}
				export class Title extends com.arcgismaps.portal.PortalGroupSortField {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortField.Title>;
					public static INSTANCE: com.arcgismaps.portal.PortalGroupSortField.Title;
				}
				export class Unknown extends com.arcgismaps.portal.PortalGroupSortField {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortField.Unknown>;
					public constructor(param0: string);
				}
				export class ViewCount extends com.arcgismaps.portal.PortalGroupSortField {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortField.ViewCount>;
					public static INSTANCE: com.arcgismaps.portal.PortalGroupSortField.ViewCount;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalGroupSortFieldSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalGroupSortField> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortFieldSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalGroupSortFieldSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalGroupSortFieldStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalGroupSortField> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupSortFieldStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalGroupSortFieldStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalGroupUsers {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupUsers>;
				public getAdmins(): java.util.List<string>;
				public constructor(param0: java.util.List<string>, param1: java.util.List<string>);
				public component1(): java.util.List<string>;
				public copy(param0: java.util.List<string>, param1: java.util.List<string>): com.arcgismaps.portal.PortalGroupUsers;
				public hashCode(): number;
				public getUsers(): java.util.List<string>;
				public equals(param0: any): boolean;
				public component2(): java.util.List<string>;
				public toString(): string;
				public constructor();
			}
				
			export module PortalGroupUsers {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalGroupUsers> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupUsers.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalGroupUsers.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalGroupUsers;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalGroupUsers): void;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalGroupUsers.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalGroupUsers>;
				}
			}
		}
	}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalHelperServices extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalHelperServices>;
				public getLocationTracking(): string;
				public getAsyncRouteServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getRouteServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getHydrology(): string;
				public component19$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getElevation(): string;
				public component1$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getAsyncVrp(): string;
				public constructor();
				public getAsyncClosestFacilityServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getGeometryServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getPrintTask(): string;
				public component9$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.ElevationServiceInfo>;
				public component21$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component18$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public hashCode(): number;
				public constructor(param0: com.arcgismaps.portal.HelperServiceUrl, param1: com.arcgismaps.portal.HelperServiceUrl, param2: com.arcgismaps.portal.HelperServiceUrl, param3: com.arcgismaps.portal.HelperServiceUrl, param4: com.arcgismaps.portal.HelperServiceUrl, param5: com.arcgismaps.portal.HelperServiceUrl, param6: com.arcgismaps.portal.HelperServiceUrl, param7: com.arcgismaps.portal.HelperServiceUrl, param8: java.util.List<com.arcgismaps.portal.ElevationServiceInfo>, param9: com.arcgismaps.portal.HelperServiceUrl, param10: com.arcgismaps.portal.HelperServiceUrl, param11: java.util.List<com.arcgismaps.portal.HelperServiceUrl>, param12: com.arcgismaps.portal.HelperServiceUrl, param13: com.arcgismaps.portal.HelperServiceUrl, param14: com.arcgismaps.portal.HelperServiceUrl, param15: com.arcgismaps.portal.HelperServiceUrl, param16: com.arcgismaps.portal.HelperServiceUrl, param17: com.arcgismaps.portal.HelperServiceUrl, param18: com.arcgismaps.portal.HelperServiceUrl, param19: com.arcgismaps.portal.HelperServiceUrl, param20: com.arcgismaps.portal.HelperServiceUrl);
				public equals(param0: any): boolean;
				public component7$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getAsyncServiceArea(): string;
				public component14$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component20$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getRoute(): string;
				public getAsyncServiceAreaServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getGeoenrichment(): string;
				public getSyncVrp(): string;
				public component8$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public toString(): string;
				public getAnalysisServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component12$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.HelperServiceUrl>;
				public getGeometry(): string;
				public component13$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getGeoenrichmentServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component2$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getTrafficServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getElevationSync(): string;
				public component4$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getLocationTrackingServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component16$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getHydrologyServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getServiceAreaServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getAsyncRoute(): string;
				public getSyncVrpServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component3$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getTraffic(): string;
				public getGeocode(): java.util.List<string>;
				public getServiceArea(): string;
				public getAsyncOdCostMatrix(): string;
				public getClosestFacilityServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component15$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component11$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component17$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getClosestFacility(): string;
				public getElevationServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public copy(param0: com.arcgismaps.portal.HelperServiceUrl, param1: com.arcgismaps.portal.HelperServiceUrl, param2: com.arcgismaps.portal.HelperServiceUrl, param3: com.arcgismaps.portal.HelperServiceUrl, param4: com.arcgismaps.portal.HelperServiceUrl, param5: com.arcgismaps.portal.HelperServiceUrl, param6: com.arcgismaps.portal.HelperServiceUrl, param7: com.arcgismaps.portal.HelperServiceUrl, param8: java.util.List<com.arcgismaps.portal.ElevationServiceInfo>, param9: com.arcgismaps.portal.HelperServiceUrl, param10: com.arcgismaps.portal.HelperServiceUrl, param11: java.util.List<com.arcgismaps.portal.HelperServiceUrl>, param12: com.arcgismaps.portal.HelperServiceUrl, param13: com.arcgismaps.portal.HelperServiceUrl, param14: com.arcgismaps.portal.HelperServiceUrl, param15: com.arcgismaps.portal.HelperServiceUrl, param16: com.arcgismaps.portal.HelperServiceUrl, param17: com.arcgismaps.portal.HelperServiceUrl, param18: com.arcgismaps.portal.HelperServiceUrl, param19: com.arcgismaps.portal.HelperServiceUrl, param20: com.arcgismaps.portal.HelperServiceUrl): com.arcgismaps.portal.PortalHelperServices;
				public getElevationSyncServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public toJson(): string;
				public getAsyncLocationAllocationServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getAsyncClosestFacility(): string;
				public getAsyncOdCostMatrixServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component6$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getGeocodeServiceUrls$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.HelperServiceUrl>;
				public getPrintTaskUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getAnalysis1(): string;
				public component5$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getDefaultElevationServices$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.ElevationServiceInfo>;
				public getAsyncVrpServiceUrl$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public component10$arcgis_maps_any_release(): com.arcgismaps.portal.HelperServiceUrl;
				public getAsyncLocationAllocation(): string;
			}
				
			export module PortalHelperServices {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalHelperServices> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalHelperServices.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalHelperServices.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalHelperServices;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalHelperServices): void;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalHelperServices.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalHelperServices>;
					public fromJsonOrNull(param0: string): com.arcgismaps.portal.PortalHelperServices;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalInfo extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalInfo>;
				public corePortalInfo: com.arcgismaps.internal.jni.CorePortalInfo;
				public getDefaultExtent(): com.arcgismaps.geometry.Envelope;
				public getFeaturedItemsGroupQuery(): string;
				public getHostname(): string;
				public getStylesGroupQuery(): string;
				/** @deprecated */
				public getHomePageFeaturedContentGroupQuery(): string;
				public component32(): string;
				public getOrganizationName(): string;
				public component22(): string;
				public getCanSearchPublic(): boolean;
				public getFeaturedGroups$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.GroupQueryInfo>;
				public getCreated(): java.time.Instant;
				public getReadOnlyMessage(): string;
				public component15(): string;
				public getOrganizationSubdomain(): string;
				public component38(): string;
				public getFeaturedGroupsQueries(): java.util.List<string>;
				public getBingKey(): string;
				public getThumbnailUri$arcgis_maps_any_release(): string;
				public getOrganizationBanner(): com.arcgismaps.portal.LoadableImage;
				public getCorePortalInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePortalInfo;
				public component44(): boolean;
				public component37(): boolean;
				public component45(): com.arcgismaps.portal.PortalVersion;
				public getSymbolSetsGroupQuery(): string;
				public component46(): string;
				public getPortalThumbnail(): com.arcgismaps.portal.LoadableImage;
				public component36(): string;
				public getUserLoadableData$arcgis_maps_any_release(): com.arcgismaps.portal.PortalUserLoadableData;
				public component26(): string;
				public component30(): string;
				public getDeveloperBasemapGalleryGroupQuery(): string;
				public getCulture(): string;
				public getLivingAtlasGroupQuery(): string;
				public component40(): boolean;
				public component16$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.GroupQueryInfo>;
				public component28(): com.arcgismaps.portal.LoadableImage;
				public getUser(): com.arcgismaps.portal.PortalUser;
				public getThumbnail(): com.arcgismaps.portal.LoadableImage;
				public component41(): string;
				public component42$arcgis_maps_any_release(): string;
				public component34(): string;
				public component33(): com.arcgismaps.portal.PortalMode;
				public toJson(): string;
				public component19(): number;
				public isReadOnly(): boolean;
				public getCommentsEnabled(): boolean;
				public getBasemapGalleryGroupQuery(): string;
				public getHelperServices(): com.arcgismaps.portal.PortalHelperServices;
				public getCanSharePublic(): boolean;
				public getUseVectorBasemaps(): boolean;
				public isEueiEnabled(): boolean;
				public component2(): boolean;
				public component5(): boolean;
				public getVectorBasemapGalleryGroupQuery(): string;
				public getDefaultVectorBasemap(): com.arcgismaps.mapping.Basemap;
				public constructor();
				public getIpCountryCode(): string;
				public hashCode(): number;
				public component27(): java.time.Instant;
				public component39(): com.arcgismaps.portal.SubscriptionInfo;
				public equals(param0: any): boolean;
				public getOrganizationId(): string;
				public component43$arcgis_maps_any_release(): com.arcgismaps.portal.PortalUserLoadableData;
				public component6(): boolean;
				public component8(): boolean;
				public component7(): boolean;
				public component31(): string;
				public getCanShareBingPublic(): boolean;
				public component21(): string;
				public component11(): string;
				public component4(): string;
				public getPortalThumbnailUri$arcgis_maps_any_release(): string;
				public component12(): com.arcgismaps.mapping.Basemap;
				public toString(): string;
				public getPortalName(): string;
				public component35$arcgis_maps_any_release(): string;
				public component17(): string;
				public component18(): com.arcgismaps.portal.PortalHelperServices;
				public component20(): string;
				public component23(): boolean;
				public copy(param0: com.arcgismaps.portal.PortalAccess, param1: boolean, param2: string, param3: string, param4: boolean, param5: boolean, param6: boolean, param7: boolean, param8: java.time.Instant, param9: string, param10: string, param11: com.arcgismaps.mapping.Basemap, param12: com.arcgismaps.geometry.Envelope, param13: com.arcgismaps.mapping.Basemap, param14: string, param15: java.util.List<com.arcgismaps.portal.GroupQueryInfo>, param16: string, param17: com.arcgismaps.portal.PortalHelperServices, param18: number, param19: string, param20: string, param21: string, param22: boolean, param23: boolean, param24: boolean, param25: string, param26: java.time.Instant, param27: com.arcgismaps.portal.LoadableImage, param28: string, param29: string, param30: string, param31: string, param32: com.arcgismaps.portal.PortalMode, param33: string, param34: string, param35: string, param36: boolean, param37: string, param38: com.arcgismaps.portal.SubscriptionInfo, param39: boolean, param40: string, param41: string, param42: com.arcgismaps.portal.PortalUserLoadableData, param43: boolean, param44: com.arcgismaps.portal.PortalVersion, param45: string): com.arcgismaps.portal.PortalInfo;
				public component3(): string;
				public component10(): string;
				public component25(): boolean;
				public component24(): boolean;
				public isPortal(): boolean;
				public setCorePortalInfo$arcgis_maps_any_release(param0: com.arcgismaps.internal.jni.CorePortalInfo): void;
				public getOrganizationDescription(): string;
				public getVersion(): com.arcgismaps.portal.PortalVersion;
				public getPortal(): com.arcgismaps.portal.Portal;
				public getDefaultBasemap(): com.arcgismaps.mapping.Basemap;
				public getRequiresSSL(): boolean;
				public component9(): java.time.Instant;
				/** @deprecated */
				public getShowHomePageDescription(): boolean;
				public component29(): string;
				public constructor(param0: com.arcgismaps.portal.PortalAccess, param1: boolean, param2: string, param3: string, param4: boolean, param5: boolean, param6: boolean, param7: boolean, param8: java.time.Instant, param9: string, param10: string, param11: com.arcgismaps.mapping.Basemap, param12: com.arcgismaps.geometry.Envelope, param13: com.arcgismaps.mapping.Basemap, param14: string, param15: java.util.List<com.arcgismaps.portal.GroupQueryInfo>, param16: string, param17: com.arcgismaps.portal.PortalHelperServices, param18: number, param19: string, param20: string, param21: string, param22: boolean, param23: boolean, param24: boolean, param25: string, param26: java.time.Instant, param27: com.arcgismaps.portal.LoadableImage, param28: string, param29: string, param30: string, param31: string, param32: com.arcgismaps.portal.PortalMode, param33: string, param34: string, param35: string, param36: boolean, param37: string, param38: com.arcgismaps.portal.SubscriptionInfo, param39: boolean, param40: string, param41: string, param42: com.arcgismaps.portal.PortalUserLoadableData, param43: boolean, param44: com.arcgismaps.portal.PortalVersion, param45: string);
				/** @deprecated */
				public getHomePageFeaturedContentCount(): number;
				public getPortalMode(): com.arcgismaps.portal.PortalMode;
				public getModified(): java.time.Instant;
				public component14(): com.arcgismaps.mapping.Basemap;
				public component13(): com.arcgismaps.geometry.Envelope;
				public component1(): com.arcgismaps.portal.PortalAccess;
				public getSubscriptionInfo(): com.arcgismaps.portal.SubscriptionInfo;
				public getCustomBaseDomain(): string;
				public getAccess(): com.arcgismaps.portal.PortalAccess;
				public getSupportsOauth(): boolean;
			}
				
			export module PortalInfo {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalInfo> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalInfo.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalInfo.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalInfo): void;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalInfo;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalInfo.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalInfo>;
					public fromJsonOrNull(param0: string, param1: com.arcgismaps.portal.Portal): com.arcgismaps.portal.PortalInfo;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemComment {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemComment>;
				public component1(): string;
				public getOwner(): string;
				public component4(): string;
				public constructor(param0: string, param1: string, param2: java.time.Instant, param3: string);
				public getCommentId(): string;
				public toString(): string;
				public component3(): java.time.Instant;
				public copy(param0: string, param1: string, param2: java.time.Instant, param3: string): com.arcgismaps.portal.PortalItemComment;
				public hashCode(): number;
				public getCreated(): java.time.Instant;
				public component2(): string;
				public equals(param0: any): boolean;
				public getComment(): string;
			}
				
			export module PortalItemComment {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalItemComment> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalItemComment.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalItemComment.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalItemComment;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalItemComment): void;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemComment.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalItemComment>;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemComments {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemComments>;
				public hashCode(): number;
				public copy(param0: java.util.List<com.arcgismaps.portal.PortalItemComment>): com.arcgismaps.portal.PortalItemComments;
				public equals(param0: any): boolean;
				public toString(): string;
				public constructor(param0: java.util.List<com.arcgismaps.portal.PortalItemComment>);
				public getComments(): java.util.List<com.arcgismaps.portal.PortalItemComment>;
				public component1(): java.util.List<com.arcgismaps.portal.PortalItemComment>;
				public constructor();
			}
				
			export module PortalItemComments {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalItemComments> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalItemComments.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalItemComments.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalItemComments): void;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalItemComments;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemComments.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalItemComments>;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalItemContentParameters {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemContentParameters>;
				public getValue(): any;
			}
			export module PortalItemContentParameters {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemContentParameters.Companion>;
					public json(param0: string): com.arcgismaps.portal.PortalItemContentParameters;
					public url(param0: java.net.URL): com.arcgismaps.portal.PortalItemContentParameters;
					public data(param0: androidNative.Array<number>, param1: string): com.arcgismaps.portal.PortalItemContentParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemFileContentParameters extends com.arcgismaps.portal.PortalItemContentParameters {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemFileContentParameters>;
				public getValue(): androidNative.Array<number>;
				public getFileName(): string;
				public getValue(): any;
				public constructor(param0: androidNative.Array<number>, param1: string);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemGroups {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemGroups>;
				public portal: com.arcgismaps.portal.Portal;
				public getOtherData$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
				public getUsers(): java.util.List<com.arcgismaps.portal.PortalGroup>;
				public component1$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
				public component2$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
				public component3$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
				public toString(): string;
				public getUserData$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
				public constructor();
				public getAdminData$arcgis_maps_any_release(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
				public hashCode(): number;
				public getOthers(): java.util.List<com.arcgismaps.portal.PortalGroup>;
				public constructor(param0: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>, param1: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>, param2: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>);
				public equals(param0: any): boolean;
				public getAdmins(): java.util.List<com.arcgismaps.portal.PortalGroup>;
				public getPortal$arcgis_maps_any_release(): com.arcgismaps.portal.Portal;
				public setPortal$arcgis_maps_any_release(param0: com.arcgismaps.portal.Portal): void;
				public copy(param0: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>, param1: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>, param2: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>): com.arcgismaps.portal.PortalItemGroups;
			}
				
			export module PortalItemGroups {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalItemGroups> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalItemGroups.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalItemGroups.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalItemGroups;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalItemGroups): void;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemGroups.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalItemGroups>;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemJsonContentParameters extends com.arcgismaps.portal.PortalItemContentParameters {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemJsonContentParameters>;
				public getValue(): string;
				public getValue(): any;
				public constructor(param0: string);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemMoveError {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemMoveError>;
				public setItemId(param0: string): void;
				public component3(): string;
				public hashCode(): number;
				public getCode(): number;
				public component2(): string;
				public equals(param0: any): boolean;
				public component1(): number;
				public getItemId(): string;
				public getMessage(): string;
				public toString(): string;
				public copy(param0: number, param1: string, param2: string): com.arcgismaps.portal.PortalItemMoveError;
				public constructor(param0: number, param1: string, param2: string);
			}
				
			export module PortalItemMoveError {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalItemMoveError> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalItemMoveError.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalItemMoveError.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalItemMoveError): void;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalItemMoveError;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemMoveError.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalItemMoveError>;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalItemRelationship extends com.arcgismaps.internal.io.StringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship>;
				public getEncoding(): string;
			}
			export module PortalItemRelationship {
				export class ApiKeyToItem extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ApiKeyToItem>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ApiKeyToItem;
					public getEncoding(): string;
				}
				export class AreaToCustomPackage extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.AreaToCustomPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.AreaToCustomPackage;
					public getEncoding(): string;
				}
				export class AreaToPackage extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.AreaToPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.AreaToPackage;
					public getEncoding(): string;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoder<com.arcgismaps.portal.PortalItemRelationship> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.Companion>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalItemRelationship>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalItemRelationship>;
					public getDecoder(): java.util.Map<string,any>;
				}
				export class ItemToAttachment extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ItemToAttachment>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ItemToAttachment;
					public getEncoding(): string;
				}
				export class ItemToReport extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ItemToReport>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ItemToReport;
					public getEncoding(): string;
				}
				export class ListedToProvisioned extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ListedToProvisioned>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ListedToProvisioned;
					public getEncoding(): string;
				}
				export class MapToAppConfig extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.MapToAppConfig>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.MapToAppConfig;
					public getEncoding(): string;
				}
				export class MapToArea extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.MapToArea>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.MapToArea;
					public getEncoding(): string;
				}
				export class MapToFeatureCollection extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.MapToFeatureCollection>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.MapToFeatureCollection;
					public getEncoding(): string;
				}
				export class MapToService extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.MapToService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.MapToService;
					public getEncoding(): string;
				}
				export class MobileAppToCode extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.MobileAppToCode>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.MobileAppToCode;
					public getEncoding(): string;
				}
				export class ServiceToData extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ServiceToData>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ServiceToData;
					public getEncoding(): string;
				}
				export class ServiceToLayer extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ServiceToLayer>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ServiceToLayer;
					public getEncoding(): string;
				}
				export class ServiceToRoute extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ServiceToRoute>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ServiceToRoute;
					public getEncoding(): string;
				}
				export class ServiceToService extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ServiceToService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ServiceToService;
					public getEncoding(): string;
				}
				export class ServiceToStyle extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ServiceToStyle>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ServiceToStyle;
					public getEncoding(): string;
				}
				export class SolutionToItem extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.SolutionToItem>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.SolutionToItem;
					public getEncoding(): string;
				}
				export class StyleToStyle extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.StyleToStyle>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.StyleToStyle;
					public getEncoding(): string;
				}
				export class SurveyAddInToData extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.SurveyAddInToData>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.SurveyAddInToData;
					public getEncoding(): string;
				}
				export class SurveyToData extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.SurveyToData>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.SurveyToData;
					public getEncoding(): string;
				}
				export class SurveyToService extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.SurveyToService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.SurveyToService;
					public getEncoding(): string;
				}
				export class ThemeToStory extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.ThemeToStory>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.ThemeToStory;
					public getEncoding(): string;
				}
				export class TrackViewToMap extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.TrackViewToMap>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.TrackViewToMap;
					public getEncoding(): string;
				}
				export class WebStyleToDesktopStyle extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.WebStyleToDesktopStyle>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.WebStyleToDesktopStyle;
					public getEncoding(): string;
				}
				export class WmaToCode extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.WmaToCode>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.WmaToCode;
					public getEncoding(): string;
				}
				export class WorkforceMapToFeatureService extends com.arcgismaps.portal.PortalItemRelationship {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationship.WorkforceMapToFeatureService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationship.WorkforceMapToFeatureService;
					public getEncoding(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalItemRelationshipDirection extends com.arcgismaps.internal.io.StringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationshipDirection>;
				public getEncoding(): string;
			}
			export module PortalItemRelationshipDirection {
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoder<com.arcgismaps.portal.PortalItemRelationshipDirection> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationshipDirection.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalItemRelationshipDirection>;
					public getDecoder(): java.util.Map<string,any>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalItemRelationshipDirection>;
				}
				export class Forward extends com.arcgismaps.portal.PortalItemRelationshipDirection {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationshipDirection.Forward>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationshipDirection.Forward;
					public getEncoding(): string;
				}
				export class Reverse extends com.arcgismaps.portal.PortalItemRelationshipDirection {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationshipDirection.Reverse>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemRelationshipDirection.Reverse;
					public getEncoding(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemRelationshipDirectionSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalItemRelationshipDirection> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationshipDirectionSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalItemRelationshipDirectionSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemRelationshipDirectionStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalItemRelationshipDirection> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationshipDirectionStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalItemRelationshipDirectionStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemRelationshipSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalItemRelationship> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationshipSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalItemRelationshipSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemRelationshipStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalItemRelationship> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemRelationshipStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalItemRelationshipStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalItemType extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType>;
				public getEncoding(): string;
				public getCorePortalItemType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePortalItemType;
			}
			export module PortalItemType {
				export class AdministrativeReport extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.AdministrativeReport>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.AdministrativeReport;
				}
				export class AppBuilderExtension extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.AppBuilderExtension>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.AppBuilderExtension;
				}
				export class AppBuilderWidgetPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.AppBuilderWidgetPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.AppBuilderWidgetPackage;
				}
				export class ArcGISProAddIn extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ArcGISProAddIn>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ArcGISProAddIn;
				}
				export class ArcGISProConfiguration extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ArcGISProConfiguration>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ArcGISProConfiguration;
				}
				export class ArcPadPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ArcPadPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ArcPadPackage;
				}
				export class BigDataAnalytic extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.BigDataAnalytic>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.BigDataAnalytic;
				}
				export class BuildingSceneLayer extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.BuildingSceneLayer>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.BuildingSceneLayer;
				}
				export class CadDrawing extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.CadDrawing>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.CadDrawing;
				}
				export class CityEngineWebScene extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.CityEngineWebScene>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.CityEngineWebScene;
				}
				export class CodeAttachment extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.CodeAttachment>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.CodeAttachment;
				}
				export class CodeSample extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.CodeSample>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.CodeSample;
				}
				export class ColorSet extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ColorSet>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ColorSet;
				}
				export class CompactTilePackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.CompactTilePackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.CompactTilePackage;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.PortalItemType> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Companion>;
					public unknownCase(param0: string): com.arcgismaps.portal.PortalItemType;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalItemType>;
					public unknownCase(param0: string): any;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalItemType>;
					public getDecoder(): java.util.Map<string,any>;
				}
				export class ContentCategorySet extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ContentCategorySet>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ContentCategorySet;
				}
				export class Csv extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Csv>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Csv;
				}
				export class Dashboard extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Dashboard>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Dashboard;
				}
				export class DataStore extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.DataStore>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.DataStore;
				}
				export class DeepLearningPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.DeepLearningPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.DeepLearningPackage;
				}
				export class DesktopAddIn extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.DesktopAddIn>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.DesktopAddIn;
				}
				export class DesktopApplication extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.DesktopApplication>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.DesktopApplication;
				}
				export class DesktopApplicationTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.DesktopApplicationTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.DesktopApplicationTemplate;
				}
				export class DesktopStyle extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.DesktopStyle>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.DesktopStyle;
				}
				export class DocumentLink extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.DocumentLink>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.DocumentLink;
				}
				export class EarthConfiguration extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.EarthConfiguration>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.EarthConfiguration;
				}
				export class ExcaliburImageryProject extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ExcaliburImageryProject>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ExcaliburImageryProject;
				}
				export class ExplorerAddIn extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ExplorerAddIn>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ExplorerAddIn;
				}
				export class ExplorerLayer extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ExplorerLayer>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ExplorerLayer;
				}
				export class ExplorerMap extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ExplorerMap>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ExplorerMap;
				}
				export class ExportPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ExportPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ExportPackage;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Factory>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CorePortalItemType): com.arcgismaps.portal.PortalItemType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Factory.WhenMappings>;
					}
				}
				export class FeatureCollection extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.FeatureCollection>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.FeatureCollection;
				}
				export class FeatureCollectionTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.FeatureCollectionTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.FeatureCollectionTemplate;
				}
				export class FeatureService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.FeatureService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.FeatureService;
				}
				export class Feed extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Feed>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Feed;
				}
				export class FileGeodatabase extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.FileGeodatabase>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.FileGeodatabase;
				}
				export class Form extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Form>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Form;
				}
				export class GeoJson extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GeoJson>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GeoJson;
				}
				export class GeoPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GeoPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GeoPackage;
				}
				export class GeocodingService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GeocodingService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GeocodingService;
				}
				export class GeodataService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GeodataService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GeodataService;
				}
				export class GeometryService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GeometryService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GeometryService;
				}
				export class GeoprocessingPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GeoprocessingPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GeoprocessingPackage;
				}
				export class GeoprocessingPackageProVersion extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GeoprocessingPackageProVersion>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GeoprocessingPackageProVersion;
				}
				export class GeoprocessingSample extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GeoprocessingSample>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GeoprocessingSample;
				}
				export class GeoprocessingService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GeoprocessingService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GeoprocessingService;
				}
				export class GlobeDocument extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GlobeDocument>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GlobeDocument;
				}
				export class GlobeService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.GlobeService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.GlobeService;
				}
				export class Gml extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Gml>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Gml;
				}
				export class HubEvent extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.HubEvent>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.HubEvent;
				}
				export class HubInitiative extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.HubInitiative>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.HubInitiative;
				}
				export class HubInitiativeTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.HubInitiativeTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.HubInitiativeTemplate;
				}
				export class HubPage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.HubPage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.HubPage;
				}
				export class HubSiteApplication extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.HubSiteApplication>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.HubSiteApplication;
				}
				export class Image extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Image>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Image;
				}
				export class ImageCollection extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ImageCollection>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ImageCollection;
				}
				export class ImageService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ImageService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ImageService;
				}
				export class InsightsModel extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.InsightsModel>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.InsightsModel;
				}
				export class InsightsPage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.InsightsPage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.InsightsPage;
				}
				export class InsightsScript extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.InsightsScript>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.InsightsScript;
				}
				export class InsightsTheme extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.InsightsTheme>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.InsightsTheme;
				}
				export class InsightsWorkbook extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.InsightsWorkbook>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.InsightsWorkbook;
				}
				export class KernelGatewayConnection extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.KernelGatewayConnection>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.KernelGatewayConnection;
				}
				export class Kml extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Kml>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Kml;
				}
				export class KmlCollection extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.KmlCollection>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.KmlCollection;
				}
				export class KnowledgeGraph extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.KnowledgeGraph>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.KnowledgeGraph;
				}
				export class Layer extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Layer>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Layer;
				}
				export class LayerPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.LayerPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.LayerPackage;
				}
				export class Layout extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Layout>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Layout;
				}
				export class LinkChart extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.LinkChart>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.LinkChart;
				}
				export class LocatorPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.LocatorPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.LocatorPackage;
				}
				export class MapArea extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MapArea>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MapArea;
				}
				export class MapDocument extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MapDocument>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MapDocument;
				}
				export class MapPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MapPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MapPackage;
				}
				export class MapService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MapService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MapService;
				}
				export class MapTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MapTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MapTemplate;
				}
				export class MicrosoftExcel extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MicrosoftExcel>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MicrosoftExcel;
				}
				export class MicrosoftPowerpoint extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MicrosoftPowerpoint>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MicrosoftPowerpoint;
				}
				export class MicrosoftWord extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MicrosoftWord>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MicrosoftWord;
				}
				export class Mission extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Mission>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Mission;
				}
				export class MobileApplication extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MobileApplication>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MobileApplication;
				}
				export class MobileBasemapPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MobileBasemapPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MobileBasemapPackage;
				}
				export class MobileMapPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MobileMapPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MobileMapPackage;
				}
				export class MobileScenePackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.MobileScenePackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.MobileScenePackage;
				}
				export class NativeApplication extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.NativeApplication>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.NativeApplication;
				}
				export class NativeApplicationInstaller extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.NativeApplicationInstaller>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.NativeApplicationInstaller;
				}
				export class NativeApplicationTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.NativeApplicationTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.NativeApplicationTemplate;
				}
				export class NetCdf extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.NetCdf>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.NetCdf;
				}
				export class NetworkAnalysisService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.NetworkAnalysisService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.NetworkAnalysisService;
				}
				export class Ogc3dTilesService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Ogc3dTilesService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Ogc3dTilesService;
				}
				export class OgcFeatureServer extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.OgcFeatureServer>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.OgcFeatureServer;
				}
				export class OperationView extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.OperationView>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.OperationView;
				}
				export class OrientedImageryCatalog extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.OrientedImageryCatalog>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.OrientedImageryCatalog;
				}
				export class OrthoMappingProject extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.OrthoMappingProject>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.OrthoMappingProject;
				}
				export class OrthoMappingTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.OrthoMappingTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.OrthoMappingTemplate;
				}
				export class Pdf extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Pdf>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Pdf;
				}
				export class ProMap extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ProMap>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ProMap;
				}
				export class ProReport extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ProReport>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ProReport;
				}
				export class ProjectPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ProjectPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ProjectPackage;
				}
				export class ProjectTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ProjectTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ProjectTemplate;
				}
				export class PublishedMap extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.PublishedMap>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.PublishedMap;
				}
				export class QuickCaptureProject extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.QuickCaptureProject>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.QuickCaptureProject;
				}
				export class RasterFunctionTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.RasterFunctionTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.RasterFunctionTemplate;
				}
				export class RealTimeAnalytic extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.RealTimeAnalytic>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.RealTimeAnalytic;
				}
				export class RelationalDatabaseConnection extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.RelationalDatabaseConnection>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.RelationalDatabaseConnection;
				}
				export class ReportTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ReportTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ReportTemplate;
				}
				export class RulePackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.RulePackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.RulePackage;
				}
				export class SQLiteGeodatabase extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.SQLiteGeodatabase>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.SQLiteGeodatabase;
				}
				export class SceneDocument extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.SceneDocument>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.SceneDocument;
				}
				export class ScenePackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ScenePackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ScenePackage;
				}
				export class SceneService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.SceneService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.SceneService;
				}
				export class ServiceDefinition extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.ServiceDefinition>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.ServiceDefinition;
				}
				export class Shapefile extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Shapefile>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Shapefile;
				}
				export class SiteApplication extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.SiteApplication>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.SiteApplication;
				}
				export class SitePage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.SitePage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.SitePage;
				}
				export class Solution extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Solution>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Solution;
				}
				export class StatisticalDataCollection extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.StatisticalDataCollection>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.StatisticalDataCollection;
				}
				export class StoryMap extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.StoryMap>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.StoryMap;
				}
				export class StoryMapTheme extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.StoryMapTheme>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.StoryMapTheme;
				}
				export class Style extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Style>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Style;
				}
				export class Survey123AddIn extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Survey123AddIn>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Survey123AddIn;
				}
				export class SymbolSet extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.SymbolSet>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.SymbolSet;
				}
				export class TaskFile extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.TaskFile>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.TaskFile;
				}
				export class TilePackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.TilePackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.TilePackage;
				}
				export class Unknown extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Unknown>;
					public equals(param0: any): boolean;
					public toString(): string;
					public component1(): string;
					public constructor(param0: string);
					public getUnknownState(): string;
					public hashCode(): number;
					public copy(param0: string): com.arcgismaps.portal.PortalItemType.Unknown;
				}
				export class UrbanModel extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.UrbanModel>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.UrbanModel;
				}
				export class VectorTilePackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.VectorTilePackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.VectorTilePackage;
				}
				export class VectorTileService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.VectorTileService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.VectorTileService;
				}
				export class VisioDocument extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.VisioDocument>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.VisioDocument;
				}
				export class Vr360Experience extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Vr360Experience>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Vr360Experience;
				}
				export class WebAppBuilderWidget extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WebAppBuilderWidget>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WebAppBuilderWidget;
				}
				export class WebExperience extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WebExperience>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WebExperience;
				}
				export class WebExperienceTemplate extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WebExperienceTemplate>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WebExperienceTemplate;
				}
				export class WebMap extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WebMap>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WebMap;
				}
				export class WebMappingApplication extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WebMappingApplication>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WebMappingApplication;
				}
				export class WebScene extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WebScene>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WebScene;
				}
				export class Wfs extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Wfs>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Wfs;
				}
				export class WindowsMobilePackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WindowsMobilePackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WindowsMobilePackage;
				}
				export class Wms extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Wms>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Wms;
				}
				export class Wmts extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Wmts>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Wmts;
				}
				export class Workflow extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.Workflow>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.Workflow;
				}
				export class WorkflowManagerPackage extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WorkflowManagerPackage>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WorkflowManagerPackage;
				}
				export class WorkflowManagerService extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WorkflowManagerService>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WorkflowManagerService;
				}
				export class WorkforceProject extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.WorkforceProject>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.WorkforceProject;
				}
				export class iWorkKeynote extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.iWorkKeynote>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.iWorkKeynote;
				}
				export class iWorkNumbers extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.iWorkNumbers>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.iWorkNumbers;
				}
				export class iWorkPages extends com.arcgismaps.portal.PortalItemType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalItemType.iWorkPages>;
					public static INSTANCE: com.arcgismaps.portal.PortalItemType.iWorkPages;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemTypeSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalItemType> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemTypeSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalItemTypeSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemTypeStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalItemType> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemTypeStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalItemTypeStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalItemUrlContentParameters extends com.arcgismaps.portal.PortalItemContentParameters {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalItemUrlContentParameters>;
				public constructor(param0: java.net.URL);
				public getValue(): any;
				public getValue(): java.net.URL;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalLoader extends com.arcgismaps.LoadableImplWithCore {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalLoader>;
				public portal: com.arcgismaps.portal.Portal;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreLoadable);
				public getPortal(): com.arcgismaps.portal.Portal;
				public "load-IoAF18A"(param0: any): any;
				public setPortal(param0: com.arcgismaps.portal.Portal): void;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalLoginType extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalLoginType>;
				public getEncoding(): string;
			}
			export module PortalLoginType {
				export class ClientCertificate extends com.arcgismaps.portal.PortalLoginType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalLoginType.ClientCertificate>;
					public static INSTANCE: com.arcgismaps.portal.PortalLoginType.ClientCertificate;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.PortalLoginType> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalLoginType.Companion>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalLoginType>;
					public unknownCase(param0: string): any;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalLoginType>;
					public unknownCase(param0: string): com.arcgismaps.portal.PortalLoginType;
					public getDecoder(): java.util.Map<string,any>;
				}
				export class OAuth extends com.arcgismaps.portal.PortalLoginType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalLoginType.OAuth>;
					public static INSTANCE: com.arcgismaps.portal.PortalLoginType.OAuth;
				}
				export class Unknown extends com.arcgismaps.portal.PortalLoginType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalLoginType.Unknown>;
					public constructor(param0: string);
					public getUnknownState(): string;
				}
				export class UsernamePassword extends com.arcgismaps.portal.PortalLoginType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalLoginType.UsernamePassword>;
					public static INSTANCE: com.arcgismaps.portal.PortalLoginType.UsernamePassword;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalLoginTypeSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalLoginType> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalLoginTypeSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalLoginTypeSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalLoginTypeStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalLoginType> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalLoginTypeStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalLoginTypeStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalMode extends com.arcgismaps.internal.io.StringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalMode>;
				public getEncoding(): string;
			}
			export module PortalMode {
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoder<com.arcgismaps.portal.PortalMode> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalMode.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalMode>;
					public getDecoder(): java.util.Map<string,any>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalMode>;
				}
				export class MultiTenant extends com.arcgismaps.portal.PortalMode {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalMode.MultiTenant>;
					public static INSTANCE: com.arcgismaps.portal.PortalMode.MultiTenant;
					public getEncoding(): string;
				}
				export class SingleTenant extends com.arcgismaps.portal.PortalMode {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalMode.SingleTenant>;
					public static INSTANCE: com.arcgismaps.portal.PortalMode.SingleTenant;
					public getEncoding(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalModeSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalMode> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalModeSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalModeSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalModeStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalMode> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalModeStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalModeStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilege {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilege>;
				public constructor(param0: com.arcgismaps.portal.PortalPrivilegeRealm, param1: com.arcgismaps.portal.PortalPrivilegeRole, param2: com.arcgismaps.portal.PortalPrivilegeType, param3: com.arcgismaps.portal.PortalPrivilegeSubtype);
				public getRole(): com.arcgismaps.portal.PortalPrivilegeRole;
				public getRealm(): com.arcgismaps.portal.PortalPrivilegeRealm;
				public getType(): com.arcgismaps.portal.PortalPrivilegeType;
				public getSubtype(): com.arcgismaps.portal.PortalPrivilegeSubtype;
				public toString(): string;
			}
			export module PortalPrivilege {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilege.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalPrivilege>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalPrivilegeRealm extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealm>;
				public getEncoding(): string;
			}
			export module PortalPrivilegeRealm {
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.PortalPrivilegeRealm> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealm.Companion>;
					public unknownCase(param0: string): any;
					public getDecoder(): java.util.Map<string,any>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalPrivilegeRealm>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalPrivilegeRealm>;
					public unknownCase(param0: string): com.arcgismaps.portal.PortalPrivilegeRealm;
				}
				export class Features extends com.arcgismaps.portal.PortalPrivilegeRealm {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealm.Features>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRealm.Features;
				}
				export class Marketplace extends com.arcgismaps.portal.PortalPrivilegeRealm {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealm.Marketplace>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRealm.Marketplace;
				}
				export class OpenData extends com.arcgismaps.portal.PortalPrivilegeRealm {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealm.OpenData>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRealm.OpenData;
				}
				export class Portal extends com.arcgismaps.portal.PortalPrivilegeRealm {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealm.Portal>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRealm.Portal;
				}
				export class Premium extends com.arcgismaps.portal.PortalPrivilegeRealm {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealm.Premium>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRealm.Premium;
				}
				export class Unknown extends com.arcgismaps.portal.PortalPrivilegeRealm {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealm.Unknown>;
					public constructor(param0: string);
					public getUnknownState(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeRealmSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalPrivilegeRealm> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealmSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRealmSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeRealmStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalPrivilegeRealm> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRealmStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRealmStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalPrivilegeRole extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRole>;
				public getEncoding(): string;
			}
			export module PortalPrivilegeRole {
				export class Administrator extends com.arcgismaps.portal.PortalPrivilegeRole {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRole.Administrator>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRole.Administrator;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.PortalPrivilegeRole> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRole.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalPrivilegeRole>;
					public unknownCase(param0: string): any;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalPrivilegeRole>;
					public getDecoder(): java.util.Map<string,any>;
					public unknownCase(param0: string): com.arcgismaps.portal.PortalPrivilegeRole;
				}
				export class Publisher extends com.arcgismaps.portal.PortalPrivilegeRole {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRole.Publisher>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRole.Publisher;
				}
				export class Unknown extends com.arcgismaps.portal.PortalPrivilegeRole {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRole.Unknown>;
					public constructor(param0: string);
					public getUnknownState(): string;
				}
				export class User extends com.arcgismaps.portal.PortalPrivilegeRole {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRole.User>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRole.User;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeRoleSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalPrivilegeRole> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRoleSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRoleSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeRoleStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalPrivilegeRole> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeRoleStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeRoleStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeSerializer extends kotlinx.serialization.json.JsonTransformingSerializer<com.arcgismaps.portal.PortalPrivilege> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSerializer;
				public transformDeserialize(param0: kotlinx.serialization.json.JsonElement): kotlinx.serialization.json.JsonElement;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeStringSerializer extends kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalPrivilege> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeStringSerializer;
				public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalPrivilege;
				public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
				public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalPrivilege): void;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalPrivilegeSubtype extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype>;
				public getEncoding(): string;
			}
			export module PortalPrivilegeSubtype {
				export class ClosestFacility extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.ClosestFacility>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.ClosestFacility;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.PortalPrivilegeSubtype> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalPrivilegeSubtype>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalPrivilegeSubtype>;
					public unknownCase(param0: string): com.arcgismaps.portal.PortalPrivilegeSubtype;
					public unknownCase(param0: string): any;
					public getDecoder(): java.util.Map<string,any>;
				}
				export class LocationAllocation extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.LocationAllocation>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.LocationAllocation;
				}
				export class None extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.None>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.None;
				}
				export class OptimizedRouting extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.OptimizedRouting>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.OptimizedRouting;
				}
				export class OriginDestinationCostMatrix extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.OriginDestinationCostMatrix>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.OriginDestinationCostMatrix;
				}
				export class Routing extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.Routing>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.Routing;
				}
				export class ServiceArea extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.ServiceArea>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.ServiceArea;
				}
				export class Stored extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.Stored>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.Stored;
				}
				export class Temporary extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.Temporary>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.Temporary;
				}
				export class Unknown extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.Unknown>;
					public constructor(param0: string);
					public getUnknownState(): string;
				}
				export class VehicleRouting extends com.arcgismaps.portal.PortalPrivilegeSubtype {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtype.VehicleRouting>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtype.VehicleRouting;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeSubtypeSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalPrivilegeSubtype> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtypeSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtypeSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeSubtypeStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalPrivilegeSubtype> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeSubtypeStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeSubtypeStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalPrivilegeType extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType>;
				public getEncoding(): string;
			}
			export module PortalPrivilegeType {
				export class AddExternalMembersToGroup extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.AddExternalMembersToGroup>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.AddExternalMembersToGroup;
				}
				export class AssignToGroups extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.AssignToGroups>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.AssignToGroups;
				}
				export class BulkPublishFromDataStores extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.BulkPublishFromDataStores>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.BulkPublishFromDataStores;
				}
				export class CategorizeItems extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.CategorizeItems>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.CategorizeItems;
				}
				export class ChangeUserRoles extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ChangeUserRoles>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ChangeUserRoles;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.PortalPrivilegeType> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalPrivilegeType>;
					public unknownCase(param0: string): com.arcgismaps.portal.PortalPrivilegeType;
					public unknownCase(param0: string): any;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalPrivilegeType>;
					public getDecoder(): java.util.Map<string,any>;
				}
				export class CreateAdvancedNotebooks extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.CreateAdvancedNotebooks>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.CreateAdvancedNotebooks;
				}
				export class CreateGroup extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.CreateGroup>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.CreateGroup;
				}
				export class CreateItem extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.CreateItem>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.CreateItem;
				}
				export class CreateNotebooks extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.CreateNotebooks>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.CreateNotebooks;
				}
				export class CreateUpdateCapableGroup extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.CreateUpdateCapableGroup>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.CreateUpdateCapableGroup;
				}
				export class DeleteGroups extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.DeleteGroups>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.DeleteGroups;
				}
				export class DeleteItems extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.DeleteItems>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.DeleteItems;
				}
				export class DeleteUsers extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.DeleteUsers>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.DeleteUsers;
				}
				export class Demographics extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Demographics>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Demographics;
				}
				export class DesignateGroup extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.DesignateGroup>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.DesignateGroup;
				}
				export class DisableUsers extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.DisableUsers>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.DisableUsers;
				}
				export class Edit extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Edit>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Edit;
				}
				export class Elevation extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Elevation>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Elevation;
				}
				export class EnumerateDataStores extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.EnumerateDataStores>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.EnumerateDataStores;
				}
				export class FeatureReport extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.FeatureReport>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.FeatureReport;
				}
				export class FullEdit extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.FullEdit>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.FullEdit;
				}
				export class Geoanalytics extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Geoanalytics>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Geoanalytics;
				}
				export class Geocode extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Geocode>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Geocode;
				}
				export class Geoenrichment extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Geoenrichment>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Geoenrichment;
				}
				export class InviteUsers extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.InviteUsers>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.InviteUsers;
				}
				export class JoinGroup extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.JoinGroup>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.JoinGroup;
				}
				export class JoinNonOrgGroup extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.JoinNonOrgGroup>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.JoinNonOrgGroup;
				}
				export class Manage extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Manage>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Manage;
				}
				export class ManageCollaborationGroupMembers extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageCollaborationGroupMembers>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageCollaborationGroupMembers;
				}
				export class ManageCollaborations extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageCollaborations>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageCollaborations;
				}
				export class ManageCredits extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageCredits>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageCredits;
				}
				export class ManageEnterpriseGroups extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageEnterpriseGroups>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageEnterpriseGroups;
				}
				export class ManageLicenses extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageLicenses>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageLicenses;
				}
				export class ManageReplications extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageReplications>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageReplications;
				}
				export class ManageRoles extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageRoles>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageRoles;
				}
				export class ManageSecurity extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageSecurity>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageSecurity;
				}
				export class ManageServers extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageServers>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageServers;
				}
				export class ManageUtilityServices extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageUtilityServices>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageUtilityServices;
				}
				export class ManageVersions extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageVersions>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageVersions;
				}
				export class ManageWebsite extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ManageWebsite>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ManageWebsite;
				}
				export class Networkanalysis extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Networkanalysis>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Networkanalysis;
				}
				export class OpenDataAdmin extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.OpenDataAdmin>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.OpenDataAdmin;
				}
				export class PublishDynamicImagery extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.PublishDynamicImagery>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.PublishDynamicImagery;
				}
				export class PublishFeatures extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.PublishFeatures>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.PublishFeatures;
				}
				export class PublishScenes extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.PublishScenes>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.PublishScenes;
				}
				export class PublishServerGpServices extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.PublishServerGpServices>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.PublishServerGpServices;
				}
				export class PublishServerServices extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.PublishServerServices>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.PublishServerServices;
				}
				export class PublishTiledImagery extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.PublishTiledImagery>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.PublishTiledImagery;
				}
				export class PublishTiles extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.PublishTiles>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.PublishTiles;
				}
				export class Purchase extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Purchase>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Purchase;
				}
				export class Rasteranalysis extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Rasteranalysis>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Rasteranalysis;
				}
				export class ReassignGroups extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ReassignGroups>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ReassignGroups;
				}
				export class ReassignItems extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ReassignItems>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ReassignItems;
				}
				export class ReassignUsers extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ReassignUsers>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ReassignUsers;
				}
				export class RegisterDataStores extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.RegisterDataStores>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.RegisterDataStores;
				}
				export class ScheduleNotebooks extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ScheduleNotebooks>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ScheduleNotebooks;
				}
				export class ShareGroupToOrg extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ShareGroupToOrg>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ShareGroupToOrg;
				}
				export class ShareGroupToPublic extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ShareGroupToPublic>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ShareGroupToPublic;
				}
				export class ShareToGroup extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ShareToGroup>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ShareToGroup;
				}
				export class ShareToOrg extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ShareToOrg>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ShareToOrg;
				}
				export class ShareToPublic extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ShareToPublic>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ShareToPublic;
				}
				export class Spatialanalysis extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Spatialanalysis>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.Spatialanalysis;
				}
				export class StartTrial extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.StartTrial>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.StartTrial;
				}
				export class Unknown extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.Unknown>;
					public constructor(param0: string);
					public getUnknownState(): string;
				}
				export class UpdateGroups extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.UpdateGroups>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.UpdateGroups;
				}
				export class UpdateItemCategorySchema extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.UpdateItemCategorySchema>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.UpdateItemCategorySchema;
				}
				export class UpdateItems extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.UpdateItems>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.UpdateItems;
				}
				export class UpdateUsers extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.UpdateUsers>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.UpdateUsers;
				}
				export class ViewGroups extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ViewGroups>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ViewGroups;
				}
				export class ViewItems extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ViewItems>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ViewItems;
				}
				export class ViewOrgGroups extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ViewOrgGroups>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ViewOrgGroups;
				}
				export class ViewOrgItems extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ViewOrgItems>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ViewOrgItems;
				}
				export class ViewOrgUsers extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ViewOrgUsers>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ViewOrgUsers;
				}
				export class ViewTracks extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ViewTracks>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ViewTracks;
				}
				export class ViewUsers extends com.arcgismaps.portal.PortalPrivilegeType {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeType.ViewUsers>;
					public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeType.ViewUsers;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeTypeSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalPrivilegeType> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeTypeSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeTypeSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalPrivilegeTypeStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalPrivilegeType> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalPrivilegeTypeStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalPrivilegeTypeStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalQueryParameters {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalQueryParameters>;
				public setSearchPublic(param0: boolean): void;
				public nextRequestParameters$arcgis_maps_any_release(param0: number): com.arcgismaps.portal.PortalQueryParameters;
				public setLimit(param0: number): void;
				public constructor(param0: string, param1: com.arcgismaps.geometry.Envelope, param2: number);
				public getBoundingBox(): com.arcgismaps.geometry.Envelope;
				public getSortOrder(): com.arcgismaps.portal.PortalQuerySortOrder;
				public getStartIndex(): number;
				public setSortField(param0: string): void;
				public setSortOrder(param0: com.arcgismaps.portal.PortalQuerySortOrder): void;
				public addGroupId$arcgis_maps_any_release(param0: string): void;
				public constructor();
				public getSortField(): string;
				public getCategories(): java.util.List<string>;
				public setStartIndex(param0: number): void;
				public setBoundingBox(param0: com.arcgismaps.geometry.Envelope): void;
				public getQuery(): string;
				public getSearchPublic(): boolean;
				public getRequestParameters$arcgis_maps_any_release(param0: boolean, param1: string): java.util.List<com.arcgismaps.httpcore.Request.Parameter>;
				public getLimit(): number;
			}
			export module PortalQueryParameters {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalQueryParameters.Companion>;
					public item(param0: string): com.arcgismaps.portal.PortalQueryParameters;
					public groups(param0: string, param1: string): com.arcgismaps.portal.PortalQueryParameters;
					public items(param0: java.lang.Iterable<any>, param1: string, param2: string, param3: string): com.arcgismaps.portal.PortalQueryParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalQueryResultSet<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalQueryResultSet<any>>;
				public constructor(param0: com.arcgismaps.portal.PortalQueryParameters, param1: com.arcgismaps.portal.PortalQueryParameters, param2: number, param3: java.util.List<any>);
				public component4(): java.util.List<T>;
				public copy(param0: com.arcgismaps.portal.PortalQueryParameters, param1: com.arcgismaps.portal.PortalQueryParameters, param2: number, param3: java.util.List<any>): com.arcgismaps.portal.PortalQueryResultSet<T>;
				public toString(): string;
				public getTotalResults(): number;
				public component3(): number;
				public component2(): com.arcgismaps.portal.PortalQueryParameters;
				public hashCode(): number;
				public getResults(): java.util.List<T>;
				public getQueryParameters(): com.arcgismaps.portal.PortalQueryParameters;
				public equals(param0: any): boolean;
				public getNextQueryParameters(): com.arcgismaps.portal.PortalQueryParameters;
				public component1(): com.arcgismaps.portal.PortalQueryParameters;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalQuerySortOrder extends com.arcgismaps.internal.io.StringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalQuerySortOrder>;
				public getEncoding(): string;
			}
			export module PortalQuerySortOrder {
				export class Ascending extends com.arcgismaps.portal.PortalQuerySortOrder {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalQuerySortOrder.Ascending>;
					public static INSTANCE: com.arcgismaps.portal.PortalQuerySortOrder.Ascending;
					public getEncoding(): string;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoder<com.arcgismaps.portal.PortalQuerySortOrder> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalQuerySortOrder.Companion>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalQuerySortOrder>;
					public getDecoder(): java.util.Map<string,any>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalQuerySortOrder>;
				}
				export class Descending extends com.arcgismaps.portal.PortalQuerySortOrder {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalQuerySortOrder.Descending>;
					public static INSTANCE: com.arcgismaps.portal.PortalQuerySortOrder.Descending;
					public getEncoding(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalQuerySortOrderSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalQuerySortOrder> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalQuerySortOrderSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalQuerySortOrderSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalQuerySortOrderStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalQuerySortOrder> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalQuerySortOrderStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalQuerySortOrderStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalUser implements com.arcgismaps.io.JsonSerializable, com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalUser>;
				public cancelLoad(): void;
				public getCreationDate(): java.time.Instant;
				public getUnits(): com.arcgismaps.UnitSystem;
				public getUserDefinedName(): string;
				public "fetchContentInFolder-gIAlu-s"(param0: string, param1: any): any;
				public getPrivileges(): java.util.List<com.arcgismaps.portal.PortalPrivilege>;
				public getDescription(): string;
				public getPortal(): com.arcgismaps.portal.Portal;
				public getGroups(): java.util.List<com.arcgismaps.portal.PortalGroup>;
				public "fetchContent-IoAF18A"(param0: any): any;
				public getCategories(): java.util.List<string>;
				public getRole(): com.arcgismaps.portal.PortalUserRole;
				public "removeFromFavorites-gIAlu-s"(param0: com.arcgismaps.mapping.PortalItem, param1: any): any;
				public getUsername(): string;
				public "fetchFavoritesStatus-gIAlu-s"(param0: com.arcgismaps.mapping.PortalItem, param1: any): any;
				public getOrganizationId(): string;
				public "movePortalItems-0E7RQCE"(param0: java.lang.Iterable<com.arcgismaps.mapping.PortalItem>, param1: com.arcgismaps.portal.PortalFolder, param2: any): any;
				public getFavoritesGroupId(): string;
				public getThumbnail(): com.arcgismaps.portal.LoadableImage;
				public "addToFavorites-gIAlu-s"(param0: com.arcgismaps.mapping.PortalItem, param1: any): any;
				public getEmail(): string;
				public constructor(param0: com.arcgismaps.portal.Portal, param1: string, param2: com.arcgismaps.LoadableImplWithData<com.arcgismaps.portal.PortalUserLoadableData>);
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public getFullName(): string;
				public getUserId(): string;
				public "load-IoAF18A"(param0: any): any;
				public toJson(): string;
				public "deleteFolder-gIAlu-s"(param0: com.arcgismaps.portal.PortalFolder, param1: any): any;
				public getTags(): java.util.List<string>;
				public getAssignedCredits(): java.lang.Double;
				public "retryLoad-IoAF18A"(param0: any): any;
				public "movePortalItem-0E7RQCE"(param0: com.arcgismaps.mapping.PortalItem, param1: com.arcgismaps.portal.PortalFolder, param2: any): any;
				public getModificationDate(): java.time.Instant;
				public "deletePortalItem-gIAlu-s"(param0: com.arcgismaps.mapping.PortalItem, param1: any): any;
				public getAccess(): com.arcgismaps.portal.PortalAccess;
				public "addPortalItem-BWLJW6A"(param0: com.arcgismaps.mapping.PortalItem, param1: com.arcgismaps.portal.PortalItemContentParameters, param2: com.arcgismaps.portal.PortalFolder, param3: any): any;
				public getAvailableCredits(): java.lang.Double;
				public constructor(param0: com.arcgismaps.portal.Portal, param1: string);
				public "createFolder-gIAlu-s"(param0: string, param1: any): any;
			}
			export module PortalUser {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalUser.Companion>;
					public fromJsonOrNull(param0: string, param1: com.arcgismaps.portal.Portal): com.arcgismaps.portal.PortalUser;
					public getJson$arcgis_maps_any_release(): kotlinx.serialization.json.Json;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalUserContent {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalUserContent>;
				public getItems(): java.util.List<com.arcgismaps.mapping.PortalItem>;
				public component1(): string;
				public component4(): java.util.List<com.arcgismaps.portal.PortalFolder>;
				public getFolders(): java.util.List<com.arcgismaps.portal.PortalFolder>;
				public copy(param0: string, param1: com.arcgismaps.portal.PortalFolder, param2: java.util.List<com.arcgismaps.mapping.PortalItem>, param3: java.util.List<com.arcgismaps.portal.PortalFolder>): com.arcgismaps.portal.PortalUserContent;
				public getCurrentFolder(): com.arcgismaps.portal.PortalFolder;
				public toString(): string;
				public component3(): java.util.List<com.arcgismaps.mapping.PortalItem>;
				public constructor(param0: string, param1: com.arcgismaps.portal.PortalFolder, param2: java.util.List<com.arcgismaps.mapping.PortalItem>, param3: java.util.List<com.arcgismaps.portal.PortalFolder>);
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getUsername(): string;
				public component2(): com.arcgismaps.portal.PortalFolder;
			}
				
			export module PortalUserContent {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalUserContent> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalUserContent.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalUserContent.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalUserContent;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalUserContent): void;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalUserContent.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalUserContent>;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalUserLoadableData extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalUserLoadableData>;
				public getOrgId(): string;
				public component12(): java.time.Instant;
				public getId(): string;
				public component10(): java.lang.Double;
				public getUnits(): com.arcgismaps.UnitSystem;
				public component6(): string;
				public component13(): string;
				public getPrivileges(): java.util.List<com.arcgismaps.portal.PortalPrivilege>;
				public getDescription(): string;
				public getGroups(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
				public component18(): com.arcgismaps.UnitSystem;
				public getCategories(): java.util.List<string>;
				public getRole(): com.arcgismaps.portal.PortalUserRole;
				public component4(): com.arcgismaps.portal.PortalAccess;
				public component5(): java.time.Instant;
				public component19(): string;
				public component16(): java.util.List<string>;
				public hashCode(): number;
				public component20(): java.util.List<string>;
				public getCreated(): java.time.Instant;
				public getThumbnailUri(): string;
				public component2(): string;
				public equals(param0: any): boolean;
				public getUsername(): string;
				public component15(): com.arcgismaps.portal.PortalUserRole;
				public getEmail(): string;
				public getFavGroupId(): string;
				public component1(): string;
				public getFullName(): string;
				public getModified(): java.time.Instant;
				public component8(): string;
				public toString(): string;
				public toJson(): string;
				public getTags(): java.util.List<string>;
				public getUdn(): string;
				public component11(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
				public getAssignedCredits(): java.lang.Double;
				public component9(): java.lang.Double;
				public copy(param0: string, param1: string, param2: string, param3: com.arcgismaps.portal.PortalAccess, param4: java.time.Instant, param5: string, param6: string, param7: string, param8: java.lang.Double, param9: java.lang.Double, param10: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>, param11: java.time.Instant, param12: string, param13: java.util.List<com.arcgismaps.portal.PortalPrivilege>, param14: com.arcgismaps.portal.PortalUserRole, param15: java.util.List<string>, param16: string, param17: com.arcgismaps.UnitSystem, param18: string, param19: java.util.List<string>): com.arcgismaps.portal.PortalUserLoadableData;
				public constructor(param0: string, param1: string, param2: string, param3: com.arcgismaps.portal.PortalAccess, param4: java.time.Instant, param5: string, param6: string, param7: string, param8: java.lang.Double, param9: java.lang.Double, param10: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>, param11: java.time.Instant, param12: string, param13: java.util.List<com.arcgismaps.portal.PortalPrivilege>, param14: com.arcgismaps.portal.PortalUserRole, param15: java.util.List<string>, param16: string, param17: com.arcgismaps.UnitSystem, param18: string, param19: java.util.List<string>);
				public component17(): string;
				public component7(): string;
				public component3(): string;
				public component14(): java.util.List<com.arcgismaps.portal.PortalPrivilege>;
				public getAccess(): com.arcgismaps.portal.PortalAccess;
				public getAvailableCredits(): java.lang.Double;
			}
				
			export module PortalUserLoadableData {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.PortalUserLoadableData> {
						public static class: java.lang.Class<com.arcgismaps.portal.PortalUserLoadableData.serializer>;
						public static INSTANCE: com.arcgismaps.portal.PortalUserLoadableData.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalUserLoadableData;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalUserLoadableData): void;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalUserLoadableData.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalUserLoadableData>;
					public fromJsonOrNull(param0: string): com.arcgismaps.portal.PortalUserLoadableData;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class PortalUserRole extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalUserRole>;
				public getEncoding(): string;
			}
			export module PortalUserRole {
				export class Admin extends com.arcgismaps.portal.PortalUserRole {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalUserRole.Admin>;
					public static INSTANCE: com.arcgismaps.portal.PortalUserRole.Admin;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.PortalUserRole> {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalUserRole.Companion>;
					public unknownCase(param0: string): com.arcgismaps.portal.PortalUserRole;
					public unknownCase(param0: string): any;
					public getDecoder(): java.util.Map<string,any>;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.PortalUserRole>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalUserRole>;
				}
				export class Publisher extends com.arcgismaps.portal.PortalUserRole {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalUserRole.Publisher>;
					public static INSTANCE: com.arcgismaps.portal.PortalUserRole.Publisher;
				}
				export class Unknown extends com.arcgismaps.portal.PortalUserRole {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalUserRole.Unknown>;
					public constructor(param0: string);
					public getUnknownState(): string;
				}
				export class User extends com.arcgismaps.portal.PortalUserRole {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalUserRole.User>;
					public static INSTANCE: com.arcgismaps.portal.PortalUserRole.User;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalUserRoleSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.PortalUserRole> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalUserRoleSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalUserRoleSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalUserRoleStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.PortalUserRole> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalUserRoleStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalUserRoleStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalVersion {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalVersion>;
				public copy(param0: number, param1: number, param2: number): com.arcgismaps.portal.PortalVersion;
				public constructor(param0: number, param1: number, param2: number);
				public component3(): number;
				public getPatch(): number;
				public component2(): number;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public component1(): number;
				public getMinor(): number;
				public toString(): string;
				public getMajor(): number;
			}
			export module PortalVersion {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.PortalVersion.Companion>;
					public getEightThree(): com.arcgismaps.portal.PortalVersion;
					public fromString(param0: string): com.arcgismaps.portal.PortalVersion;
					public getFiveOne(): com.arcgismaps.portal.PortalVersion;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalVersion>;
					public getTenFiveOne(): com.arcgismaps.portal.PortalVersion;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalVersionStringSerializer extends kotlinx.serialization.KSerializer<com.arcgismaps.portal.PortalVersion> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalVersionStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalVersionStringSerializer;
				public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.PortalVersion): void;
				public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.PortalVersion;
				public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class PortalVersionTransformingSerializer extends kotlinx.serialization.json.JsonTransformingSerializer<com.arcgismaps.portal.PortalVersion> {
				public static class: java.lang.Class<com.arcgismaps.portal.PortalVersionTransformingSerializer>;
				public static INSTANCE: com.arcgismaps.portal.PortalVersionTransformingSerializer;
				public transformDeserialize(param0: kotlinx.serialization.json.JsonElement): kotlinx.serialization.json.JsonElement;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class SubscriptionInfo {
				public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionInfo>;
				public component1(): java.time.Instant;
				public hashCode(): number;
				public component2(): com.arcgismaps.portal.SubscriptionState;
				public getExpiryDate(): java.time.Instant;
				public equals(param0: any): boolean;
				public toString(): string;
				public constructor(param0: java.time.Instant, param1: com.arcgismaps.portal.SubscriptionState);
				public getState(): com.arcgismaps.portal.SubscriptionState;
				public copy(param0: java.time.Instant, param1: com.arcgismaps.portal.SubscriptionState): com.arcgismaps.portal.SubscriptionInfo;
			}
				
			export module SubscriptionInfo {
					export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.SubscriptionInfo> {
						public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionInfo.serializer>;
						public static INSTANCE: com.arcgismaps.portal.SubscriptionInfo.serializer;
						public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
						public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.SubscriptionInfo): void;
						public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.SubscriptionInfo;
						public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
					}
				}
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionInfo.Companion>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.SubscriptionInfo>;
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export abstract class SubscriptionState extends com.arcgismaps.internal.io.UnknownStringEncodable {
				public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionState>;
				public getEncoding(): string;
			}
			export module SubscriptionState {
				export class Active extends com.arcgismaps.portal.SubscriptionState {
					public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionState.Active>;
					public static INSTANCE: com.arcgismaps.portal.SubscriptionState.Active;
				}
				export class Canceled extends com.arcgismaps.portal.SubscriptionState {
					public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionState.Canceled>;
					public static INSTANCE: com.arcgismaps.portal.SubscriptionState.Canceled;
				}
				export class Companion extends com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding<com.arcgismaps.portal.SubscriptionState> {
					public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionState.Companion>;
					public unknownCase(param0: string): com.arcgismaps.portal.SubscriptionState;
					public getDecoder(): java.util.Map<string,com.arcgismaps.portal.SubscriptionState>;
					public unknownCase(param0: string): any;
					public getDecoder(): java.util.Map<string,any>;
					public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.SubscriptionState>;
				}
				export class Deleted extends com.arcgismaps.portal.SubscriptionState {
					public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionState.Deleted>;
					public static INSTANCE: com.arcgismaps.portal.SubscriptionState.Deleted;
				}
				export class Expired extends com.arcgismaps.portal.SubscriptionState {
					public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionState.Expired>;
					public static INSTANCE: com.arcgismaps.portal.SubscriptionState.Expired;
				}
				export class Restricted extends com.arcgismaps.portal.SubscriptionState {
					public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionState.Restricted>;
					public static INSTANCE: com.arcgismaps.portal.SubscriptionState.Restricted;
				}
				export class Suspended extends com.arcgismaps.portal.SubscriptionState {
					public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionState.Suspended>;
					public static INSTANCE: com.arcgismaps.portal.SubscriptionState.Suspended;
				}
				export class Unknown extends com.arcgismaps.portal.SubscriptionState {
					public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionState.Unknown>;
					public constructor(param0: string);
					public getUnknownState(): string;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class SubscriptionStateSerializer extends com.arcgismaps.internal.io.StringTransformingSerializer<com.arcgismaps.portal.SubscriptionState> {
				public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionStateSerializer>;
				public static INSTANCE: com.arcgismaps.portal.SubscriptionStateSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export class SubscriptionStateStringSerializer extends com.arcgismaps.internal.io.SealedClassStringSerializer<com.arcgismaps.portal.SubscriptionState> {
				public static class: java.lang.Class<com.arcgismaps.portal.SubscriptionStateStringSerializer>;
				public static INSTANCE: com.arcgismaps.portal.SubscriptionStateStringSerializer;
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalGroupSearchResults {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalGroupSearchResults>;
					public getNextStart(): number;
					public component3(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
					public equals(param0: any): boolean;
					public getTotal(): number;
					public toPortalQueryResultSet(param0: com.arcgismaps.portal.PortalQueryParameters, param1: com.arcgismaps.portal.Portal): com.arcgismaps.portal.PortalQueryResultSet<com.arcgismaps.portal.PortalGroup>;
					public constructor(param0: number, param1: number, param2: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>);
					public getResults(): java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>;
					public toString(): string;
					public constructor();
					public component1(): number;
					public copy(param0: number, param1: number, param2: java.util.List<com.arcgismaps.portal.PortalGroupLoadableData>): com.arcgismaps.portal.internal.PortalGroupSearchResults;
					public component2(): number;
					public hashCode(): number;
				}
					
				export module PortalGroupSearchResults {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalGroupSearchResults> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalGroupSearchResults.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalGroupSearchResults.serializer;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalGroupSearchResults;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalGroupSearchResults): void;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalGroupSearchResults.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalGroupSearchResults>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalItemAddCommentResult {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemAddCommentResult>;
					public equals(param0: any): boolean;
					public getCommentId(): string;
					public toString(): string;
					public constructor(param0: boolean, param1: string);
					public component2(): string;
					public component1(): boolean;
					public hashCode(): number;
					public getSuccess(): boolean;
					public copy(param0: boolean, param1: string): com.arcgismaps.portal.internal.PortalItemAddCommentResult;
				}
					
				export module PortalItemAddCommentResult {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalItemAddCommentResult> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemAddCommentResult.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalItemAddCommentResult.serializer;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalItemAddCommentResult;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalItemAddCommentResult): void;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemAddCommentResult.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalItemAddCommentResult>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalItemAddUpdateError {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemAddUpdateError>;
					public equals(param0: any): boolean;
					public toString(): string;
					public component1(): com.arcgismaps.portal.internal.PortalResponseError;
					public getError(): com.arcgismaps.portal.internal.PortalResponseError;
					public copy(param0: com.arcgismaps.portal.internal.PortalResponseError): com.arcgismaps.portal.internal.PortalItemAddUpdateError;
					public hashCode(): number;
					public constructor(param0: com.arcgismaps.portal.internal.PortalResponseError);
				}
					
				export module PortalItemAddUpdateError {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalItemAddUpdateError> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemAddUpdateError.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalItemAddUpdateError.serializer;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalItemAddUpdateError): void;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalItemAddUpdateError;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemAddUpdateError.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalItemAddUpdateError>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalItemAddUpdateResult {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemAddUpdateResult>;
					public constructor(param0: boolean, param1: string, param2: string);
					public getFolderId(): string;
					public equals(param0: any): boolean;
					public toString(): string;
					public component2(): string;
					public copy(param0: boolean, param1: string, param2: string): com.arcgismaps.portal.internal.PortalItemAddUpdateResult;
					public component3(): string;
					public component1(): boolean;
					public hashCode(): number;
					public getItemId(): string;
					public getSuccess(): boolean;
				}
					
				export module PortalItemAddUpdateResult {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalItemAddUpdateResult> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemAddUpdateResult.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalItemAddUpdateResult.serializer;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalItemAddUpdateResult): void;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalItemAddUpdateResult;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemAddUpdateResult.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalItemAddUpdateResult>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalItemMoveDeleteResult {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemMoveDeleteResult>;
					public equals(param0: any): boolean;
					public toString(): string;
					public getError(): com.arcgismaps.portal.PortalItemMoveError;
					public component2(): string;
					public copy(param0: boolean, param1: string, param2: com.arcgismaps.portal.PortalItemMoveError): com.arcgismaps.portal.internal.PortalItemMoveDeleteResult;
					public component3(): com.arcgismaps.portal.PortalItemMoveError;
					public constructor(param0: boolean, param1: string, param2: com.arcgismaps.portal.PortalItemMoveError);
					public component1(): boolean;
					public hashCode(): number;
					public getItemId(): string;
					public getSuccess(): boolean;
				}
					
				export module PortalItemMoveDeleteResult {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalItemMoveDeleteResult> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemMoveDeleteResult.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalItemMoveDeleteResult.serializer;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalItemMoveDeleteResult;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalItemMoveDeleteResult): void;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemMoveDeleteResult.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalItemMoveDeleteResult>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalItemMoveDeleteResults {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemMoveDeleteResults>;
					public copy(param0: java.util.List<com.arcgismaps.portal.internal.PortalItemMoveDeleteResult>): com.arcgismaps.portal.internal.PortalItemMoveDeleteResults;
					public equals(param0: any): boolean;
					public component1(): java.util.List<com.arcgismaps.portal.internal.PortalItemMoveDeleteResult>;
					public toString(): string;
					public getResults(): java.util.List<com.arcgismaps.portal.internal.PortalItemMoveDeleteResult>;
					public constructor();
					public constructor(param0: java.util.List<com.arcgismaps.portal.internal.PortalItemMoveDeleteResult>);
					public hashCode(): number;
				}
					
				export module PortalItemMoveDeleteResults {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalItemMoveDeleteResults> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemMoveDeleteResults.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalItemMoveDeleteResults.serializer;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalItemMoveDeleteResults): void;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalItemMoveDeleteResults;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemMoveDeleteResults.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalItemMoveDeleteResults>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalItemShareResult {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemShareResult>;
					public equals(param0: any): boolean;
					public constructor(param0: java.util.List<string>, param1: string);
					public copy(param0: java.util.List<string>, param1: string): com.arcgismaps.portal.internal.PortalItemShareResult;
					public toString(): string;
					public getNotSharedWith(): java.util.List<string>;
					public component2(): string;
					public component1(): java.util.List<string>;
					public hashCode(): number;
					public getItemId(): string;
				}
					
				export module PortalItemShareResult {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalItemShareResult> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemShareResult.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalItemShareResult.serializer;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalItemShareResult;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalItemShareResult): void;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemShareResult.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalItemShareResult>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalItemUnshareResult {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemUnshareResult>;
					public equals(param0: any): boolean;
					public constructor(param0: java.util.List<string>, param1: string);
					public toString(): string;
					public component2(): string;
					public component1(): java.util.List<string>;
					public getNotUnsharedFrom(): java.util.List<string>;
					public copy(param0: java.util.List<string>, param1: string): com.arcgismaps.portal.internal.PortalItemUnshareResult;
					public hashCode(): number;
					public getItemId(): string;
				}
					
				export module PortalItemUnshareResult {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalItemUnshareResult> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemUnshareResult.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalItemUnshareResult.serializer;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalItemUnshareResult): void;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalItemUnshareResult;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemUnshareResult.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalItemUnshareResult>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalItemsSearchResults {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemsSearchResults>;
					public getResults(): java.util.List<com.arcgismaps.mapping.PortalItem>;
					public equals(param0: any): boolean;
					public getTotal(): number;
					public getNextStart(): number;
					public toString(): string;
					public component1(): number;
					public component2(): number;
					public hashCode(): number;
					public copy(param0: number, param1: number): com.arcgismaps.portal.internal.PortalItemsSearchResults;
					public constructor(param0: number, param1: number);
				}
					
				export module PortalItemsSearchResults {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalItemsSearchResults> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemsSearchResults.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalItemsSearchResults.serializer;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalItemsSearchResults;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalItemsSearchResults): void;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalItemsSearchResults.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalItemsSearchResults>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalResponseError {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalResponseError>;
					public getDetails(): java.util.List<string>;
					public component2(): string;
					public setItemId(param0: string): void;
					public component3(): string;
					public component4(): java.util.List<string>;
					public getMessageCode(): string;
					public equals(param0: any): boolean;
					public constructor(param0: number, param1: string, param2: string, param3: java.util.List<string>);
					public toString(): string;
					public component1(): number;
					public getMessage(): string;
					public hashCode(): number;
					public getItemId(): string;
					public getCode(): number;
					public copy(param0: number, param1: string, param2: string, param3: java.util.List<string>): com.arcgismaps.portal.internal.PortalResponseError;
				}
					
				export module PortalResponseError {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalResponseError> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalResponseError.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalResponseError.serializer;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalResponseError): void;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalResponseError;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalResponseError.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalResponseError>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalSuccessResponse {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalSuccessResponse>;
					public equals(param0: any): boolean;
					public toString(): string;
					public constructor(param0: boolean);
					public copy(param0: boolean): com.arcgismaps.portal.internal.PortalSuccessResponse;
					public component1(): boolean;
					public hashCode(): number;
					public getSuccess(): boolean;
				}
					
				export module PortalSuccessResponse {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalSuccessResponse> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalSuccessResponse.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalSuccessResponse.serializer;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalSuccessResponse): void;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalSuccessResponse;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalSuccessResponse.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalSuccessResponse>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalUserCreateDeleteFolderResult {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserCreateDeleteFolderResult>;
					public equals(param0: any): boolean;
					public constructor(param0: boolean, param1: com.arcgismaps.portal.PortalFolder);
					public toString(): string;
					public getFolder(): com.arcgismaps.portal.PortalFolder;
					public copy(param0: boolean, param1: com.arcgismaps.portal.PortalFolder): com.arcgismaps.portal.internal.PortalUserCreateDeleteFolderResult;
					public component2(): com.arcgismaps.portal.PortalFolder;
					public component1(): boolean;
					public hashCode(): number;
					public getSuccess(): boolean;
				}
					
				export module PortalUserCreateDeleteFolderResult {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalUserCreateDeleteFolderResult> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserCreateDeleteFolderResult.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalUserCreateDeleteFolderResult.serializer;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalUserCreateDeleteFolderResult;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalUserCreateDeleteFolderResult): void;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserCreateDeleteFolderResult.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalUserCreateDeleteFolderResult>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalUserDeleteItemResult {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserDeleteItemResult>;
					public equals(param0: any): boolean;
					public toString(): string;
					public constructor(param0: boolean, param1: string);
					public component2(): string;
					public component1(): boolean;
					public hashCode(): number;
					public getItemId(): string;
					public getSuccess(): boolean;
					public copy(param0: boolean, param1: string): com.arcgismaps.portal.internal.PortalUserDeleteItemResult;
				}
					
				export module PortalUserDeleteItemResult {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalUserDeleteItemResult> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserDeleteItemResult.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalUserDeleteItemResult.serializer;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalUserDeleteItemResult;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalUserDeleteItemResult): void;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserDeleteItemResult.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalUserDeleteItemResult>;
					}
				}
			}
		}
	}


declare module com {
	export module arcgismaps {
		export module portal {
			export module internal {
				export class PortalUserItemSharingResult {
					public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserItemSharingResult>;
					public equals(param0: any): boolean;
					public component1(): com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing;
					public toString(): string;
					public constructor();
					public getSharing(): com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing;
					public constructor(param0: com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing);
					public hashCode(): number;
					public copy(param0: com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing): com.arcgismaps.portal.internal.PortalUserItemSharingResult;
				}
					
				export module PortalUserItemSharingResult {
						export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalUserItemSharingResult> {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserItemSharingResult.serializer>;
							public static INSTANCE: com.arcgismaps.portal.internal.PortalUserItemSharingResult.serializer;
							public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalUserItemSharingResult): void;
							public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
							public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
							public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalUserItemSharingResult;
						}
					}
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserItemSharingResult.Companion>;
						public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalUserItemSharingResult>;
					}
					export class Sharing {
						public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing>;
						public getGroups(): java.util.List<string>;
						public component1(): com.arcgismaps.portal.PortalAccess;
						public component2(): java.util.List<string>;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public constructor(param0: com.arcgismaps.portal.PortalAccess, param1: java.util.List<string>);
						public getAccess(): com.arcgismaps.portal.PortalAccess;
						public copy(param0: com.arcgismaps.portal.PortalAccess, param1: java.util.List<string>): com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing;
						public toString(): string;
					}
						
					export module Sharing {
							export class serializer extends kotlinx.serialization.internal.GeneratedSerializer<com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing> {
								public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing.serializer>;
								public static INSTANCE: com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing.serializer;
								public serialize(param0: kotlinx.serialization.encoding.Encoder, param1: com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing): void;
								public childSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
								public getDescriptor(): kotlinx.serialization.descriptors.SerialDescriptor;
								public typeParametersSerializers(): androidNative.Array<kotlinx.serialization.KSerializer<any>>;
								public deserialize(param0: kotlinx.serialization.encoding.Decoder): com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing;
							}
						}
						export class Companion {
							public static class: java.lang.Class<com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing.Companion>;
							public serializer(): kotlinx.serialization.KSerializer<com.arcgismaps.portal.internal.PortalUserItemSharingResult.Sharing>;
						}
					}
				}
			}
		}



declare module com {
	export module arcgismaps {
		export module raster {
			export abstract class AddRastersParameters {
				public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParameters>;
				public setMaxPixelSizeFactor(param0: number): void;
				public getInputFile(): string;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.raster.AddRastersParametersType;
				public getMaxPixelSizeFactor(): number;
				public setFilter(param0: string): void;
				public setInputFile(param0: string): void;
				public setRasterFunctionTemplateFile(param0: string): void;
				public setInputDirectory(param0: string): void;
				public getMinPixelSizeFactor(): number;
				public setMinPixelSizeFactor(param0: number): void;
				public getFilter(): string;
				public getInputDirectory(): string;
				public getCoreAddRastersParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAddRastersParameters;
				public getRasterFunctionTemplateFile(): string;
			}
			export module AddRastersParameters {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParameters.Companion>;
					public create(): com.arcgismaps.raster.AddRastersParameters;
				}
				export class Factory extends com.arcgismaps.raster.AddRastersParametersFactory {
					public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParameters.Factory>;
					public static INSTANCE: com.arcgismaps.raster.AddRastersParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class AddRastersParametersFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreAddRastersParameters,com.arcgismaps.raster.AddRastersParameters> {
				public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParametersFactory>;
				public convertToPublic(param0: any): any;
				public constructor(param0: any);
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAddRastersParameters): com.arcgismaps.raster.AddRastersParameters;
				public constructor();
			}
			export module AddRastersParametersFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParametersFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class AddRastersParametersImpl extends com.arcgismaps.raster.AddRastersParameters {
				public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParametersImpl>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreAddRastersParameters);
				public constructor();
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export abstract class AddRastersParametersType {
				public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParametersType>;
				public getCoreAddRastersParametersType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAddRastersParametersType;
			}
			export module AddRastersParametersType {
				export class AddRastersParameters extends com.arcgismaps.raster.AddRastersParametersType {
					public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParametersType.AddRastersParameters>;
					public static INSTANCE: com.arcgismaps.raster.AddRastersParametersType.AddRastersParameters;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParametersType.Factory>;
					public static INSTANCE: com.arcgismaps.raster.AddRastersParametersType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAddRastersParametersType): com.arcgismaps.raster.AddRastersParametersType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParametersType.Factory.WhenMappings>;
					}
				}
				export class FrameCameraAddRastersParameters extends com.arcgismaps.raster.AddRastersParametersType {
					public static class: java.lang.Class<com.arcgismaps.raster.AddRastersParametersType.FrameCameraAddRastersParameters>;
					public static INSTANCE: com.arcgismaps.raster.AddRastersParametersType.FrameCameraAddRastersParameters;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class FrameCameraAddRastersParameters extends com.arcgismaps.raster.AddRastersParameters {
				public static class: java.lang.Class<com.arcgismaps.raster.FrameCameraAddRastersParameters>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreFrameCameraAddRastersParameters);
				public setCamerasFile(param0: string): void;
				public getFramesFile(): string;
				public getShareRasterInfo(): boolean;
				public getCamerasFile(): string;
				public getCoreFrameCameraAddRastersParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFrameCameraAddRastersParameters;
				public setFramesFile(param0: string): void;
				public setShareRasterInfo(param0: boolean): void;
				public constructor();
			}
			export module FrameCameraAddRastersParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFrameCameraAddRastersParameters,com.arcgismaps.raster.FrameCameraAddRastersParameters> {
					public static class: java.lang.Class<com.arcgismaps.raster.FrameCameraAddRastersParameters.Factory>;
					public static INSTANCE: com.arcgismaps.raster.FrameCameraAddRastersParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class GeoPackageRaster extends com.arcgismaps.raster.Raster {
				public static class: java.lang.Class<com.arcgismaps.raster.GeoPackageRaster>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreGeoPackageRaster);
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getDescription(): string;
				public getGeoPackage(): com.arcgismaps.data.GeoPackage;
				public "load-IoAF18A"(param0: any): any;
				public getCoreGeoPackageRaster$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoPackageRaster;
			}
			export module GeoPackageRaster {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoPackageRaster,com.arcgismaps.raster.GeoPackageRaster> {
					public static class: java.lang.Class<com.arcgismaps.raster.GeoPackageRaster.Factory>;
					public static INSTANCE: com.arcgismaps.raster.GeoPackageRaster.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class ImageServiceRaster extends com.arcgismaps.raster.Raster {
				public static class: java.lang.Class<com.arcgismaps.raster.ImageServiceRaster>;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getUrl(): string;
				public getCoreImageServiceRaster$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreImageServiceRaster;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
				public getRenderingRule(): com.arcgismaps.raster.RenderingRule;
				public "retryLoad-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreImageServiceRaster);
				public getMosaicRule(): com.arcgismaps.raster.MosaicRule;
				public setRenderingRule(param0: com.arcgismaps.raster.RenderingRule): void;
				public getServiceInfo(): com.arcgismaps.arcgisservices.ArcGISImageServiceInfo;
				public setMosaicRule(param0: com.arcgismaps.raster.MosaicRule): void;
			}
			export module ImageServiceRaster {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreImageServiceRaster,com.arcgismaps.raster.ImageServiceRaster> {
					public static class: java.lang.Class<com.arcgismaps.raster.ImageServiceRaster.Factory>;
					public static INSTANCE: com.arcgismaps.raster.ImageServiceRaster.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class MosaicDatasetRaster extends com.arcgismaps.raster.Raster {
				public static class: java.lang.Class<com.arcgismaps.raster.MosaicDatasetRaster>;
				public "addRasters-gIAlu-s"(param0: com.arcgismaps.raster.AddRastersParameters, param1: any): any;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMosaicDatasetRaster);
				public "load-IoAF18A"(param0: any): any;
				public getCoreMosaicDatasetRaster$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMosaicDatasetRaster;
				public constructor(param0: string, param1: string);
			}
			export module MosaicDatasetRaster {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicDatasetRaster.Companion>;
					public create(param0: com.arcgismaps.data.Geodatabase, param1: string, param2: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.raster.MosaicDatasetRaster;
					public create(param0: string, param1: string, param2: com.arcgismaps.geometry.SpatialReference): com.arcgismaps.raster.MosaicDatasetRaster;
					public remove(param0: com.arcgismaps.data.Geodatabase, param1: string): void;
					public getNames(param0: string): java.util.List<string>;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMosaicDatasetRaster,com.arcgismaps.raster.MosaicDatasetRaster> {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicDatasetRaster.Factory>;
					public static INSTANCE: com.arcgismaps.raster.MosaicDatasetRaster.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export abstract class MosaicMethod {
				public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod>;
				public getCoreMosaicMethod$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMosaicMethod;
			}
			export module MosaicMethod {
				export class Attribute extends com.arcgismaps.raster.MosaicMethod {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.Attribute>;
					public static INSTANCE: com.arcgismaps.raster.MosaicMethod.Attribute;
				}
				export class Center extends com.arcgismaps.raster.MosaicMethod {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.Center>;
					public static INSTANCE: com.arcgismaps.raster.MosaicMethod.Center;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.Factory>;
					public static INSTANCE: com.arcgismaps.raster.MosaicMethod.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMosaicMethod): com.arcgismaps.raster.MosaicMethod;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.Factory.WhenMappings>;
					}
				}
				export class LockRaster extends com.arcgismaps.raster.MosaicMethod {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.LockRaster>;
					public static INSTANCE: com.arcgismaps.raster.MosaicMethod.LockRaster;
				}
				export class Nadir extends com.arcgismaps.raster.MosaicMethod {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.Nadir>;
					public static INSTANCE: com.arcgismaps.raster.MosaicMethod.Nadir;
				}
				export class None extends com.arcgismaps.raster.MosaicMethod {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.None>;
					public static INSTANCE: com.arcgismaps.raster.MosaicMethod.None;
				}
				export class Northwest extends com.arcgismaps.raster.MosaicMethod {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.Northwest>;
					public static INSTANCE: com.arcgismaps.raster.MosaicMethod.Northwest;
				}
				export class Seamline extends com.arcgismaps.raster.MosaicMethod {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.Seamline>;
					public static INSTANCE: com.arcgismaps.raster.MosaicMethod.Seamline;
				}
				export class Viewpoint extends com.arcgismaps.raster.MosaicMethod {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicMethod.Viewpoint>;
					public static INSTANCE: com.arcgismaps.raster.MosaicMethod.Viewpoint;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export abstract class MosaicOperation {
				public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation>;
				public getCoreMosaicOperation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMosaicOperation;
			}
			export module MosaicOperation {
				export class Blend extends com.arcgismaps.raster.MosaicOperation {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation.Blend>;
					public static INSTANCE: com.arcgismaps.raster.MosaicOperation.Blend;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation.Factory>;
					public static INSTANCE: com.arcgismaps.raster.MosaicOperation.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreMosaicOperation): com.arcgismaps.raster.MosaicOperation;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation.Factory.WhenMappings>;
					}
				}
				export class First extends com.arcgismaps.raster.MosaicOperation {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation.First>;
					public static INSTANCE: com.arcgismaps.raster.MosaicOperation.First;
				}
				export class Last extends com.arcgismaps.raster.MosaicOperation {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation.Last>;
					public static INSTANCE: com.arcgismaps.raster.MosaicOperation.Last;
				}
				export class Max extends com.arcgismaps.raster.MosaicOperation {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation.Max>;
					public static INSTANCE: com.arcgismaps.raster.MosaicOperation.Max;
				}
				export class Mean extends com.arcgismaps.raster.MosaicOperation {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation.Mean>;
					public static INSTANCE: com.arcgismaps.raster.MosaicOperation.Mean;
				}
				export class Min extends com.arcgismaps.raster.MosaicOperation {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation.Min>;
					public static INSTANCE: com.arcgismaps.raster.MosaicOperation.Min;
				}
				export class Sum extends com.arcgismaps.raster.MosaicOperation {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicOperation.Sum>;
					public static INSTANCE: com.arcgismaps.raster.MosaicOperation.Sum;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class MosaicRule {
				public static class: java.lang.Class<com.arcgismaps.raster.MosaicRule>;
				public setSortValue(param0: string): void;
				public setItemRenderingRule(param0: com.arcgismaps.raster.RenderingRule): void;
				public getViewpoint(): com.arcgismaps.mapping.Viewpoint;
				public getWhereClause(): string;
				public setMosaicMethod(param0: com.arcgismaps.raster.MosaicMethod): void;
				public getRasterIds(): java.util.List<java.lang.Long>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreMosaicRule);
				public getMosaicMethod(): com.arcgismaps.raster.MosaicMethod;
				public setSortField(param0: string): void;
				public getLockRasterIds(): java.util.List<java.lang.Long>;
				public constructor();
				public getCoreMosaicRule$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreMosaicRule;
				public getSortField(): string;
				public setViewpoint(param0: com.arcgismaps.mapping.Viewpoint): void;
				public getItemRenderingRule(): com.arcgismaps.raster.RenderingRule;
				public isAscending(): boolean;
				public setWhereClause(param0: string): void;
				public getSortValue(): string;
				public setMosaicOperation(param0: com.arcgismaps.raster.MosaicOperation): void;
				public setAscending(param0: boolean): void;
				public getMosaicOperation(): com.arcgismaps.raster.MosaicOperation;
			}
			export module MosaicRule {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreMosaicRule,com.arcgismaps.raster.MosaicRule> {
					public static class: java.lang.Class<com.arcgismaps.raster.MosaicRule.Factory>;
					public static INSTANCE: com.arcgismaps.raster.MosaicRule.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export abstract class Raster extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.raster.Raster>;
				public getCoreRaster$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRaster;
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.raster.RasterType;
				public getPath(): string;
				public "load-IoAF18A"(param0: any): any;
				public getFunction(): com.arcgismaps.raster.RasterFunction;
				public handleResponse$arcgis_maps_any_release(param0: number, param1: androidNative.Array<number>, param2: any): void;
			}
			export module Raster {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.raster.Raster.Companion>;
					public createWithPath(param0: string): com.arcgismaps.raster.Raster;
					public createWithRasterFunction(param0: com.arcgismaps.raster.RasterFunction): com.arcgismaps.raster.Raster;
				}
				export class Factory extends com.arcgismaps.raster.RasterFactory {
					public static class: java.lang.Class<com.arcgismaps.raster.Raster.Factory>;
					public static INSTANCE: com.arcgismaps.raster.Raster.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class RasterFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRaster,com.arcgismaps.raster.Raster> {
				public static class: java.lang.Class<com.arcgismaps.raster.RasterFactory>;
				public convertToPublic(param0: any): any;
				public constructor(param0: any);
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRaster): com.arcgismaps.raster.Raster;
				public constructor();
			}
			export module RasterFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class RasterFunction {
				public static class: java.lang.Class<com.arcgismaps.raster.RasterFunction>;
				public getCoreRasterFunction$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRasterFunction;
				public getArguments(): com.arcgismaps.raster.RasterFunctionArguments;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRasterFunction);
				public constructor(param0: string);
			}
			export module RasterFunction {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterFunction.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.raster.RasterFunction;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRasterFunction,com.arcgismaps.raster.RasterFunction> {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterFunction.Factory>;
					public static INSTANCE: com.arcgismaps.raster.RasterFunction.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class RasterFunctionArguments {
				public static class: java.lang.Class<com.arcgismaps.raster.RasterFunctionArguments>;
				public getCoreRasterFunctionArguments$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRasterFunctionArguments;
				public setArgument(param0: string, param1: string): void;
				public getRasterNames(): java.util.List<string>;
				public setRaster(param0: string, param1: com.arcgismaps.raster.Raster): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRasterFunctionArguments);
				public getArgumentNames(): java.util.List<string>;
				public constructor();
			}
			export module RasterFunctionArguments {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRasterFunctionArguments,com.arcgismaps.raster.RasterFunctionArguments> {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterFunctionArguments.Factory>;
					public static INSTANCE: com.arcgismaps.raster.RasterFunctionArguments.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class RasterImpl extends com.arcgismaps.raster.Raster {
				public static class: java.lang.Class<com.arcgismaps.raster.RasterImpl>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreRaster);
				public "retryLoad-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.raster.RasterFunction);
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export abstract class RasterType {
				public static class: java.lang.Class<com.arcgismaps.raster.RasterType>;
				public getCoreRasterType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRasterType;
			}
			export module RasterType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterType.Factory>;
					public static INSTANCE: com.arcgismaps.raster.RasterType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRasterType): com.arcgismaps.raster.RasterType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.raster.RasterType.Factory.WhenMappings>;
					}
				}
				export class GeoPackageRaster extends com.arcgismaps.raster.RasterType {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterType.GeoPackageRaster>;
					public static INSTANCE: com.arcgismaps.raster.RasterType.GeoPackageRaster;
				}
				export class ImageServiceRaster extends com.arcgismaps.raster.RasterType {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterType.ImageServiceRaster>;
					public static INSTANCE: com.arcgismaps.raster.RasterType.ImageServiceRaster;
				}
				export class MosaicDatasetRaster extends com.arcgismaps.raster.RasterType {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterType.MosaicDatasetRaster>;
					public static INSTANCE: com.arcgismaps.raster.RasterType.MosaicDatasetRaster;
				}
				export class Raster extends com.arcgismaps.raster.RasterType {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterType.Raster>;
					public static INSTANCE: com.arcgismaps.raster.RasterType.Raster;
				}
				export class Unknown extends com.arcgismaps.raster.RasterType {
					public static class: java.lang.Class<com.arcgismaps.raster.RasterType.Unknown>;
					public static INSTANCE: com.arcgismaps.raster.RasterType.Unknown;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export class RenderingRule {
				public static class: java.lang.Class<com.arcgismaps.raster.RenderingRule>;
				public constructor(param0: com.arcgismaps.arcgisservices.RenderingRuleInfo);
				public getCoreRenderingRule$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRenderingRule;
				public getRenderingRuleInfo(): com.arcgismaps.arcgisservices.RenderingRuleInfo;
				public getRenderingRuleJson(): string;
				public constructor(param0: string);
				public constructor(param0: com.arcgismaps.internal.jni.CoreRenderingRule);
			}
			export module RenderingRule {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRenderingRule,com.arcgismaps.raster.RenderingRule> {
					public static class: java.lang.Class<com.arcgismaps.raster.RenderingRule.Factory>;
					public static INSTANCE: com.arcgismaps.raster.RenderingRule.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module raster {
			export abstract class SlopeType {
				public static class: java.lang.Class<com.arcgismaps.raster.SlopeType>;
				public getCoreSlopeType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSlopeType;
			}
			export module SlopeType {
				export class Degree extends com.arcgismaps.raster.SlopeType {
					public static class: java.lang.Class<com.arcgismaps.raster.SlopeType.Degree>;
					public static INSTANCE: com.arcgismaps.raster.SlopeType.Degree;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.raster.SlopeType.Factory>;
					public static INSTANCE: com.arcgismaps.raster.SlopeType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSlopeType): com.arcgismaps.raster.SlopeType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.raster.SlopeType.Factory.WhenMappings>;
					}
				}
				export class None extends com.arcgismaps.raster.SlopeType {
					public static class: java.lang.Class<com.arcgismaps.raster.SlopeType.None>;
					public static INSTANCE: com.arcgismaps.raster.SlopeType.None;
				}
				export class PercentRise extends com.arcgismaps.raster.SlopeType {
					public static class: java.lang.Class<com.arcgismaps.raster.SlopeType.PercentRise>;
					public static INSTANCE: com.arcgismaps.raster.SlopeType.PercentRise;
				}
				export class Scaled extends com.arcgismaps.raster.SlopeType {
					public static class: java.lang.Class<com.arcgismaps.raster.SlopeType.Scaled>;
					public static INSTANCE: com.arcgismaps.raster.SlopeType.Scaled;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class ArcGISStreamService extends com.arcgismaps.realtime.DynamicEntityDataSource {
				public static class: java.lang.Class<com.arcgismaps.realtime.ArcGISStreamService>;
				public pushData$arcgis_maps_any_release(param0: androidNative.Array<number>): void;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getCoreArcGISStreamService$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISStreamService;
				public getUrl(): string;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: string);
				public getInfo(): com.arcgismaps.realtime.ArcGISStreamServiceInfo;
				public pushString$arcgis_maps_any_release(param0: string): void;
				public "retryLoad-IoAF18A"(param0: any): any;
				public setFilter(param0: com.arcgismaps.realtime.ArcGISStreamServiceFilter): void;
				public getWebSocketSubscribeUrl$arcgis_maps_any_release(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISStreamService, param1: boolean);
				public getFilter(): com.arcgismaps.realtime.ArcGISStreamServiceFilter;
			}
			export module ArcGISStreamService {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreArcGISStreamService,com.arcgismaps.realtime.ArcGISStreamService> {
					public static class: java.lang.Class<com.arcgismaps.realtime.ArcGISStreamService.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.ArcGISStreamService.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class ArcGISStreamServiceFilter {
				public static class: java.lang.Class<com.arcgismaps.realtime.ArcGISStreamServiceFilter>;
				public setGeometry(param0: com.arcgismaps.geometry.Geometry): void;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public getWhereClause(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISStreamServiceFilter);
				public setOutSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
				public setWhereClause(param0: string): void;
				public getOutFields(): java.util.List<string>;
				public getOutSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getCoreArcGISStreamServiceFilter$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISStreamServiceFilter;
				public constructor();
			}
			export module ArcGISStreamServiceFilter {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISStreamServiceFilter,com.arcgismaps.realtime.ArcGISStreamServiceFilter> {
					public static class: java.lang.Class<com.arcgismaps.realtime.ArcGISStreamServiceFilter.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.ArcGISStreamServiceFilter.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class ArcGISStreamServiceInfo {
				public static class: java.lang.Class<com.arcgismaps.realtime.ArcGISStreamServiceInfo>;
				public getToken$arcgis_maps_any_release(): string;
				public getDrawingInfo(): com.arcgismaps.arcgisservices.DrawingInfo;
				public getObjectIdField(): string;
				public getWebSocketUrl$arcgis_maps_any_release(): string;
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getGeometryField(): string;
				public getDescription(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreArcGISStreamServiceInfo);
				public getArchiveMaximumFeatureAge(): number;
				public getStartTimeField(): string;
				public getRelatedFeaturesUrl(): string;
				public getRelatedFeaturesJoinField(): string;
				public getArchiveServiceUrl(): string;
				public getTrackIdField(): string;
				public getArchiveUpdateInterval(): number;
				public getGeometryType(): com.arcgismaps.geometry.GeometryType;
				public getGlobalIdField(): string;
				public getCurrentVersion(): string;
				public getCoreArcGISStreamServiceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreArcGISStreamServiceInfo;
				public getEndTimeField(): string;
			}
			export module ArcGISStreamServiceInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreArcGISStreamServiceInfo,com.arcgismaps.realtime.ArcGISStreamServiceInfo> {
					public static class: java.lang.Class<com.arcgismaps.realtime.ArcGISStreamServiceInfo.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.ArcGISStreamServiceInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export abstract class ConnectionStatus {
				public static class: java.lang.Class<com.arcgismaps.realtime.ConnectionStatus>;
				public getCoreConnectionStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreConnectionStatus;
			}
			export module ConnectionStatus {
				export class Connected extends com.arcgismaps.realtime.ConnectionStatus {
					public static class: java.lang.Class<com.arcgismaps.realtime.ConnectionStatus.Connected>;
					public static INSTANCE: com.arcgismaps.realtime.ConnectionStatus.Connected;
				}
				export class Connecting extends com.arcgismaps.realtime.ConnectionStatus {
					public static class: java.lang.Class<com.arcgismaps.realtime.ConnectionStatus.Connecting>;
					public equals(param0: any): boolean;
					public toString(): string;
					public getPreviousConnectionError(): java.lang.Throwable;
					public component1(): java.lang.Throwable;
					public constructor(param0: java.lang.Throwable);
					public copy(param0: java.lang.Throwable): com.arcgismaps.realtime.ConnectionStatus.Connecting;
					public hashCode(): number;
				}
				export class Disconnected extends com.arcgismaps.realtime.ConnectionStatus {
					public static class: java.lang.Class<com.arcgismaps.realtime.ConnectionStatus.Disconnected>;
					public static INSTANCE: com.arcgismaps.realtime.ConnectionStatus.Disconnected;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.realtime.ConnectionStatus.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.ConnectionStatus.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreConnectionStatus, param1: java.lang.Throwable): com.arcgismaps.realtime.ConnectionStatus;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.realtime.ConnectionStatus.Factory.WhenMappings>;
					}
				}
				export class Failed extends com.arcgismaps.realtime.ConnectionStatus {
					public static class: java.lang.Class<com.arcgismaps.realtime.ConnectionStatus.Failed>;
					public equals(param0: any): boolean;
					public getConnectionError(): java.lang.Throwable;
					public toString(): string;
					public component1(): java.lang.Throwable;
					public copy(param0: java.lang.Throwable): com.arcgismaps.realtime.ConnectionStatus.Failed;
					public constructor(param0: java.lang.Throwable);
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class CustomDynamicEntityDataSource extends com.arcgismaps.realtime.DynamicEntityDataSource {
				public static class: java.lang.Class<com.arcgismaps.realtime.CustomDynamicEntityDataSource>;
				public constructor(param0: com.arcgismaps.realtime.CustomDynamicEntityDataSource.EntityFeedProvider);
				public "retryLoad-IoAF18A"(param0: any): any;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getFeedProvider(): com.arcgismaps.realtime.CustomDynamicEntityDataSource.EntityFeedProvider;
				public "load-IoAF18A"(param0: any): any;
			}
			export module CustomDynamicEntityDataSource {
				export class EntityFeedProvider {
					public static class: java.lang.Class<com.arcgismaps.realtime.CustomDynamicEntityDataSource.EntityFeedProvider>;
					/**
					 * Constructs a new instance of the com.arcgismaps.realtime.CustomDynamicEntityDataSource$EntityFeedProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getFeed(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent>;
						onLoad(param0: any): any;
						onConnect(param0: any): any;
						onDisconnect(param0: any): any;
					});
					public constructor();
					public onConnect(param0: any): any;
					public onLoad(param0: any): any;
					public getFeed(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent>;
					public onDisconnect(param0: any): any;
				}
				export abstract class FeedEvent {
					public static class: java.lang.Class<com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent>;
				}
				export module FeedEvent {
					export class ConnectionFailure extends com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent {
						public static class: java.lang.Class<com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent.ConnectionFailure>;
						public constructor(param0: java.lang.Exception, param1: boolean);
						public component2(): boolean;
						public getCause(): java.lang.Exception;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public copy(param0: java.lang.Exception, param1: boolean): com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent.ConnectionFailure;
						public getReconnect(): boolean;
						public toString(): string;
						public component1(): java.lang.Exception;
					}
					export class EntityDeletion extends com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent {
						public static class: java.lang.Class<com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent.EntityDeletion>;
						public component1(): string;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public copy(param0: string): com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent.EntityDeletion;
						public getEntityId(): string;
						public toString(): string;
						public constructor(param0: string);
					}
					export class NewObservation extends com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent {
						public static class: java.lang.Class<com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent.NewObservation>;
						public constructor(param0: com.arcgismaps.geometry.Geometry, param1: java.util.Map<string,any>);
						public copy(param0: com.arcgismaps.geometry.Geometry, param1: java.util.Map<string,any>): com.arcgismaps.realtime.CustomDynamicEntityDataSource.FeedEvent.NewObservation;
						public component1(): com.arcgismaps.geometry.Geometry;
						public getGeometry(): com.arcgismaps.geometry.Geometry;
						public hashCode(): number;
						public equals(param0: any): boolean;
						public component2(): java.util.Map<string,any>;
						public toString(): string;
						public getAttributes(): java.util.Map<string,any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class DynamicEntity extends com.arcgismaps.mapping.GeoElement {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntity>;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public getCoreDynamicEntity$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntity;
				public getId(): number;
				public getLatestObservation(): com.arcgismaps.realtime.DynamicEntityObservation;
				public getObservations(param0: number): java.util.List<com.arcgismaps.realtime.DynamicEntityObservation>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreDynamicEntity, param1: boolean);
				public getDynamicEntityChangedEvent(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.realtime.DynamicEntityChangedInfo>;
				public getAttributes(): java.util.Map<string,any>;
			}
			export module DynamicEntity {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreDynamicEntity,com.arcgismaps.realtime.DynamicEntity> {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntity.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntity.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class DynamicEntityChangedInfo {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityChangedInfo>;
				public getPurgedObservation(): com.arcgismaps.realtime.DynamicEntityObservation;
				public getDynamicEntityPurged(): boolean;
				public getCoreDynamicEntityChangedInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntityChangedInfo;
				public constructor(param0: com.arcgismaps.internal.jni.CoreDynamicEntityChangedInfo);
				public getReceivedObservation(): com.arcgismaps.realtime.DynamicEntityObservation;
			}
			export module DynamicEntityChangedInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDynamicEntityChangedInfo,com.arcgismaps.realtime.DynamicEntityChangedInfo> {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityChangedInfo.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityChangedInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export abstract class DynamicEntityDataSource extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSource>;
				public setLoadInfoAndError$arcgis_maps_any_release(param0: com.arcgismaps.realtime.DynamicEntityDataSourceInfo, param1: any): void;
				public setConnectionStatusAndError$arcgis_maps_any_release(param0: com.arcgismaps.realtime.ConnectionStatus, param1: number): void;
				public cancelLoad(): void;
				public getConnectionRequestedEvent$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<any>;
				public getLoadRequestedEvent$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<any>;
				public getDisconnectionRequestedEvent$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<any>;
				public getDynamicEntityPurgedEvent(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.realtime.DynamicEntityInfo>;
				public getDynamicEntityReceivedEvent(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.realtime.DynamicEntityInfo>;
				public getReconnectionInterval(): number;
				public "disconnect-IoAF18A"(param0: any): any;
				public addObservation(param0: com.arcgismaps.geometry.Geometry, param1: java.util.Map<string,any>): void;
				public getCoreDynamicEntityDataSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntityDataSource;
				public getMaximumReconnectionAttempts(): number;
				public getPurgeOptions(): com.arcgismaps.realtime.DynamicEntityDataSourcePurgeOptions;
				public getDynamicEntityObservationReceivedEvent(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.realtime.DynamicEntityObservationInfo>;
				public getDynamicEntityObservationPurgedEvent(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.realtime.DynamicEntityObservationInfo>;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public getConnectionStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.realtime.ConnectionStatus>;
				public "deleteEntity-gIAlu-s"(param0: string, param1: any): any;
				public "connect-IoAF18A"(param0: any): any;
				public "load-IoAF18A"(param0: any): any;
				public setReconnectionInterval(param0: number): void;
				public "purgeAll-IoAF18A"(param0: any): any;
				public "retryLoad-IoAF18A"(param0: any): any;
				public setMaximumReconnectionAttempts(param0: number): void;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.realtime.DynamicEntityDataSourceType;
				public setConnectionStatusAndError$arcgis_maps_any_release(param0: com.arcgismaps.realtime.ConnectionStatus, param1: boolean): void;
			}
			export module DynamicEntityDataSource {
				export class Factory extends com.arcgismaps.realtime.DynamicEntityDataSourceFactory {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSource.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityDataSource.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class DynamicEntityDataSourceFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreDynamicEntityDataSource,com.arcgismaps.realtime.DynamicEntityDataSource> {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourceFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDynamicEntityDataSource): com.arcgismaps.realtime.DynamicEntityDataSource;
				public constructor();
			}
			export module DynamicEntityDataSourceFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourceFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class DynamicEntityDataSourceInfo {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourceInfo>;
				public getFullExtent(): com.arcgismaps.geometry.Envelope;
				public constructor(param0: string, param1: java.lang.Iterable<com.arcgismaps.data.Field>);
				public setDescription(param0: string): void;
				public getEntityIdFieldName(): string;
				public getFields(): java.util.List<com.arcgismaps.data.Field>;
				public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
				public getCoreDynamicEntityDataSourceInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceInfo;
				public setFullExtent(param0: com.arcgismaps.geometry.Envelope): void;
				public getDescription(): string;
				public setSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceInfo);
			}
			export module DynamicEntityDataSourceInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceInfo,com.arcgismaps.realtime.DynamicEntityDataSourceInfo> {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourceInfo.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityDataSourceInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class DynamicEntityDataSourcePurgeOptions {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourcePurgeOptions>;
				public setMaximumObservations(param0: java.lang.Long): void;
				public getMaximumDuration(): java.lang.Double;
				public getMaximumObservationsPerTrack(): java.lang.Integer;
				public setMaximumDuration(param0: java.lang.Double): void;
				public constructor(param0: com.arcgismaps.internal.jni.CoreDynamicEntityDataSourcePurgeOptions);
				public setMaximumObservationsPerTrack(param0: java.lang.Integer): void;
				public getMaximumObservations(): java.lang.Long;
				public getCoreDynamicEntityDataSourcePurgeOptions$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntityDataSourcePurgeOptions;
			}
			export module DynamicEntityDataSourcePurgeOptions {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDynamicEntityDataSourcePurgeOptions,com.arcgismaps.realtime.DynamicEntityDataSourcePurgeOptions> {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourcePurgeOptions.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityDataSourcePurgeOptions.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export abstract class DynamicEntityDataSourceType {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourceType>;
				public getCoreDynamicEntityDataSourceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceType;
			}
			export module DynamicEntityDataSourceType {
				export class ArcGISStreamService extends com.arcgismaps.realtime.DynamicEntityDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourceType.ArcGISStreamService>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityDataSourceType.ArcGISStreamService;
				}
				export class DynamicEntityDataSource extends com.arcgismaps.realtime.DynamicEntityDataSourceType {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourceType.DynamicEntityDataSource>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityDataSourceType.DynamicEntityDataSource;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourceType.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityDataSourceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDynamicEntityDataSourceType): com.arcgismaps.realtime.DynamicEntityDataSourceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityDataSourceType.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class DynamicEntityInfo {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityInfo>;
				public getDynamicEntity(): com.arcgismaps.realtime.DynamicEntity;
				public constructor(param0: com.arcgismaps.internal.jni.CoreDynamicEntityInfo);
				public getCoreDynamicEntityInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntityInfo;
			}
			export module DynamicEntityInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDynamicEntityInfo,com.arcgismaps.realtime.DynamicEntityInfo> {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityInfo.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class DynamicEntityObservation extends com.arcgismaps.mapping.GeoElement {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityObservation>;
				public getDynamicEntity(): com.arcgismaps.realtime.DynamicEntity;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public constructor(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservation);
				public getId(): number;
				public getCoreDynamicEntityObservation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntityObservation;
				public getAttributes(): java.util.Map<string,any>;
			}
			export module DynamicEntityObservation {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDynamicEntityObservation,com.arcgismaps.realtime.DynamicEntityObservation> {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityObservation.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityObservation.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module realtime {
			export class DynamicEntityObservationInfo {
				public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityObservationInfo>;
				public getObservation(): com.arcgismaps.realtime.DynamicEntityObservation;
				public constructor(param0: com.arcgismaps.internal.jni.CoreDynamicEntityObservationInfo);
				public getCoreDynamicEntityObservationInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDynamicEntityObservationInfo;
			}
			export module DynamicEntityObservationInfo {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDynamicEntityObservationInfo,com.arcgismaps.realtime.DynamicEntityObservationInfo> {
					public static class: java.lang.Class<com.arcgismaps.realtime.DynamicEntityObservationInfo.Factory>;
					public static INSTANCE: com.arcgismaps.realtime.DynamicEntityObservationInfo.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export class Job<T>  extends com.arcgismaps.io.JsonSerializable {
				public static class: java.lang.Class<com.arcgismaps.tasks.Job<any>>;
				/**
				 * Constructs a new instance of the com.arcgismaps.tasks.Job<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getServerJobId(): string;
					getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
					getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					start(): boolean;
					pause(): boolean;
					"result-IoAF18A"(param0: any): any;
					"cancel-IoAF18A"(param0: any): any;
					"checkStatus-IoAF18A"(param0: any): any;
					"<clinit>"(): void;
					toJson(): string;
				});
				public constructor();
				public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
				public "result-IoAF18A"(param0: any): any;
				public start(): boolean;
				public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
				public pause(): boolean;
				public "cancel-IoAF18A"(param0: any): any;
				public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
				public toJson(): string;
				public "checkStatus-IoAF18A"(param0: any): any;
				public getServerJobId(): string;
			}
			export module Job {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.tasks.Job.Companion>;
					public fromJsonOrNull(param0: string): com.arcgismaps.tasks.Job<any>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export class JobFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreJob,com.arcgismaps.tasks.Job<any>> {
				public static class: java.lang.Class<com.arcgismaps.tasks.JobFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreJob): com.arcgismaps.tasks.Job<any>;
				public constructor();
			}
			export module JobFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export class JobImpl<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.arcgismaps.tasks.JobImpl<any>>;
				public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
				public pause(): boolean;
				public getCoreJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreJob;
				public "cancel-IoAF18A"(param0: any): any;
				public toJson(): string;
				public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
				public "checkStatus-IoAF18A"(param0: any): any;
				public getJobDone(): kotlinx.coroutines.flow.SharedFlow<any>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreJob, param1: any);
				public "result-IoAF18A"(param0: any): any;
				public start(): boolean;
				public getError(): java.lang.Throwable;
				public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
				public getServerJobId(): string;
			}
			export module JobImpl {
				export class Factory extends com.arcgismaps.tasks.JobFactory {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobImpl.Factory>;
					public static INSTANCE: com.arcgismaps.tasks.JobImpl.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export class JobMessage {
				public static class: java.lang.Class<com.arcgismaps.tasks.JobMessage>;
				public getSource(): com.arcgismaps.tasks.JobMessageSource;
				public getTimestamp(): java.time.Instant;
				public getSeverity(): com.arcgismaps.tasks.JobMessageSeverity;
				public constructor(param0: com.arcgismaps.internal.jni.CoreJobMessage);
				public getMessage(): string;
				public getCoreJobMessage$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreJobMessage;
			}
			export module JobMessage {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreJobMessage,com.arcgismaps.tasks.JobMessage> {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobMessage.Factory>;
					public static INSTANCE: com.arcgismaps.tasks.JobMessage.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export abstract class JobMessageSeverity {
				public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSeverity>;
				public getCoreJobMessageSeverity$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreJobMessageSeverity;
			}
			export module JobMessageSeverity {
				export class Error extends com.arcgismaps.tasks.JobMessageSeverity {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSeverity.Error>;
					public static INSTANCE: com.arcgismaps.tasks.JobMessageSeverity.Error;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSeverity.Factory>;
					public static INSTANCE: com.arcgismaps.tasks.JobMessageSeverity.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreJobMessageSeverity): com.arcgismaps.tasks.JobMessageSeverity;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSeverity.Factory.WhenMappings>;
					}
				}
				export class Info extends com.arcgismaps.tasks.JobMessageSeverity {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSeverity.Info>;
					public static INSTANCE: com.arcgismaps.tasks.JobMessageSeverity.Info;
				}
				export class Warning extends com.arcgismaps.tasks.JobMessageSeverity {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSeverity.Warning>;
					public static INSTANCE: com.arcgismaps.tasks.JobMessageSeverity.Warning;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export abstract class JobMessageSource {
				public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSource>;
				public getCoreJobMessageSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreJobMessageSource;
			}
			export module JobMessageSource {
				export class Client extends com.arcgismaps.tasks.JobMessageSource {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSource.Client>;
					public static INSTANCE: com.arcgismaps.tasks.JobMessageSource.Client;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSource.Factory>;
					public static INSTANCE: com.arcgismaps.tasks.JobMessageSource.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreJobMessageSource): com.arcgismaps.tasks.JobMessageSource;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSource.Factory.WhenMappings>;
					}
				}
				export class Service extends com.arcgismaps.tasks.JobMessageSource {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobMessageSource.Service>;
					public static INSTANCE: com.arcgismaps.tasks.JobMessageSource.Service;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export abstract class JobStatus {
				public static class: java.lang.Class<com.arcgismaps.tasks.JobStatus>;
				public getCoreJobStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreJobStatus;
			}
			export module JobStatus {
				export class Canceling extends com.arcgismaps.tasks.JobStatus {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobStatus.Canceling>;
					public static INSTANCE: com.arcgismaps.tasks.JobStatus.Canceling;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobStatus.Factory>;
					public static INSTANCE: com.arcgismaps.tasks.JobStatus.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreJobStatus): com.arcgismaps.tasks.JobStatus;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.tasks.JobStatus.Factory.WhenMappings>;
					}
				}
				export class Failed extends com.arcgismaps.tasks.JobStatus {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobStatus.Failed>;
					public static INSTANCE: com.arcgismaps.tasks.JobStatus.Failed;
				}
				export class NotStarted extends com.arcgismaps.tasks.JobStatus {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobStatus.NotStarted>;
					public static INSTANCE: com.arcgismaps.tasks.JobStatus.NotStarted;
				}
				export class Paused extends com.arcgismaps.tasks.JobStatus {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobStatus.Paused>;
					public static INSTANCE: com.arcgismaps.tasks.JobStatus.Paused;
				}
				export class Started extends com.arcgismaps.tasks.JobStatus {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobStatus.Started>;
					public static INSTANCE: com.arcgismaps.tasks.JobStatus.Started;
				}
				export class Succeeded extends com.arcgismaps.tasks.JobStatus {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobStatus.Succeeded>;
					public static INSTANCE: com.arcgismaps.tasks.JobStatus.Succeeded;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export abstract class JobType {
				public static class: java.lang.Class<com.arcgismaps.tasks.JobType>;
				public getCoreJobType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreJobType;
			}
			export module JobType {
				export class DownloadPreplannedOfflineMapJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.DownloadPreplannedOfflineMapJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.DownloadPreplannedOfflineMapJob;
				}
				export class EstimateTileCacheSizeJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.EstimateTileCacheSizeJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.EstimateTileCacheSizeJob;
				}
				export class ExportTileCacheJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.ExportTileCacheJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.ExportTileCacheJob;
				}
				export class ExportVectorTilesJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.ExportVectorTilesJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.ExportVectorTilesJob;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.Factory>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreJobType): com.arcgismaps.tasks.JobType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.tasks.JobType.Factory.WhenMappings>;
					}
				}
				export class GenerateGeodatabaseJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.GenerateGeodatabaseJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.GenerateGeodatabaseJob;
				}
				export class GenerateOfflineMapJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.GenerateOfflineMapJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.GenerateOfflineMapJob;
				}
				export class GeoprocessingJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.GeoprocessingJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.GeoprocessingJob;
				}
				export class OfflineMapSyncJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.OfflineMapSyncJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.OfflineMapSyncJob;
				}
				export class SyncGeodatabaseJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.SyncGeodatabaseJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.SyncGeodatabaseJob;
				}
				export class Unknown extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.Unknown>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.Unknown;
				}
				export class UtilityNetworkValidationJob extends com.arcgismaps.tasks.JobType {
					public static class: java.lang.Class<com.arcgismaps.tasks.JobType.UtilityNetworkValidationJob>;
					public static INSTANCE: com.arcgismaps.tasks.JobType.UtilityNetworkValidationJob;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export abstract class ServicePollingDelay {
				public static class: java.lang.Class<com.arcgismaps.tasks.ServicePollingDelay>;
				public getCoreServicePollingDelay$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServicePollingDelay;
			}
			export module ServicePollingDelay {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.tasks.ServicePollingDelay.Factory>;
					public static INSTANCE: com.arcgismaps.tasks.ServicePollingDelay.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreServicePollingDelay): com.arcgismaps.tasks.ServicePollingDelay;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.tasks.ServicePollingDelay.Factory.WhenMappings>;
					}
				}
				export class IncreasingDelay extends com.arcgismaps.tasks.ServicePollingDelay {
					public static class: java.lang.Class<com.arcgismaps.tasks.ServicePollingDelay.IncreasingDelay>;
					public static INSTANCE: com.arcgismaps.tasks.ServicePollingDelay.IncreasingDelay;
				}
				export class NoDelay extends com.arcgismaps.tasks.ServicePollingDelay {
					public static class: java.lang.Class<com.arcgismaps.tasks.ServicePollingDelay.NoDelay>;
					public static INSTANCE: com.arcgismaps.tasks.ServicePollingDelay.NoDelay;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module exportvectortiles {
				export abstract class EsriVectorTilesDownloadOption {
					public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption>;
					public getCoreEsriVectorTilesDownloadOption$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption;
				}
				export module EsriVectorTilesDownloadOption {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreEsriVectorTilesDownloadOption): com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption.Factory.WhenMappings>;
						}
					}
					export class UseOriginalService extends com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption.UseOriginalService>;
						public static INSTANCE: com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption.UseOriginalService;
					}
					export class UseReducedFontsService extends com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption.UseReducedFontsService>;
						public static INSTANCE: com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption.UseReducedFontsService;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module exportvectortiles {
				export class ExportVectorTilesJob extends com.arcgismaps.tasks.Job<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesResult> {
					public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesJob>;
					public pause(): boolean;
					public toJson(): string;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public getCoreExportVectorTilesJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExportVectorTilesJob;
					public "result-IoAF18A"(param0: any): any;
					public getItemResourceCachePath(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreExportVectorTilesJob, param1: boolean);
					public getParameters(): com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesParameters;
					public getServerJobId(): string;
					public start(): boolean;
					public "cancel-IoAF18A"(param0: any): any;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public getPortalItem$arcgis_maps_any_release(): com.arcgismaps.mapping.PortalItem;
					public getVectorTileCachePath(): string;
					public "checkStatus-IoAF18A"(param0: any): any;
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
				}
				export module ExportVectorTilesJob {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesJob.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesJob;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreExportVectorTilesJob,com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module exportvectortiles {
				export class ExportVectorTilesParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesParameters>;
					public getCoreExportVectorTilesParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExportVectorTilesParameters;
					public constructor(param0: com.arcgismaps.internal.jni.CoreExportVectorTilesParameters, param1: boolean);
					public constructor();
					public clone(): com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesParameters;
					public setAreaOfInterest(param0: com.arcgismaps.geometry.Geometry): void;
					public getEsriVectorTilesDownloadOption(): com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption;
					public getAreaOfInterest(): com.arcgismaps.geometry.Geometry;
					public setEsriVectorTilesDownloadOption(param0: com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption): void;
					public getMaxLevel(): number;
					public setMaxLevel(param0: number): void;
				}
				export module ExportVectorTilesParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreExportVectorTilesParameters,com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module exportvectortiles {
				export class ExportVectorTilesResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesResult>;
					public getVectorTileCache(): com.arcgismaps.mapping.layers.vectortiles.VectorTileCache;
					public constructor(param0: com.arcgismaps.internal.jni.CoreExportVectorTilesResult);
					public getCoreExportVectorTilesResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExportVectorTilesResult;
					public getItemResourceCache(): com.arcgismaps.tasks.exportvectortiles.ItemResourceCache;
				}
				export module ExportVectorTilesResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreExportVectorTilesResult,com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module exportvectortiles {
				export class ExportVectorTilesTask implements com.arcgismaps.ApiKeyResource, com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesTask>;
					public constructor(param0: com.arcgismaps.mapping.PortalItem);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public "createDefaultExportVectorTilesParameters-0E7RQCE"(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: any): any;
					public "getApiKey-6IiKQno"(): string;
					public getVectorTileSourceInfo(): com.arcgismaps.mapping.layers.vectortiles.VectorTileSourceInfo;
					public createExportVectorTilesJob(param0: com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesParameters, param1: string, param2: string): com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesJob;
					public cancelLoad(): void;
					public getPortalItem(): com.arcgismaps.mapping.PortalItem;
					public constructor(param0: com.arcgismaps.internal.jni.CoreExportVectorTilesTask);
					public getHasStyleResources(): boolean;
					public createExportStyleResourceCacheJob(param0: string): com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesJob;
					public "setApiKey-lGpodAQ"(param0: string): void;
					public getCoreExportVectorTilesTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExportVectorTilesTask;
					public getUrl(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "load-IoAF18A"(param0: any): any;
					public createExportVectorTilesJob(param0: com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesParameters, param1: string): com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesJob;
				}
				export module ExportVectorTilesTask {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreExportVectorTilesTask,com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module exportvectortiles {
				export class ItemResourceCache extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ItemResourceCache>;
					public getPath(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreItemResourceCache);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getItem(): com.arcgismaps.mapping.LocalItem;
					public constructor(param0: string);
					public getCoreItemResourceCache$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreItemResourceCache;
					public "retryLoad-IoAF18A"(param0: any): any;
					public cancelLoad(): void;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ItemResourceCache {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreItemResourceCache,com.arcgismaps.tasks.exportvectortiles.ItemResourceCache> {
						public static class: java.lang.Class<com.arcgismaps.tasks.exportvectortiles.ItemResourceCache.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.exportvectortiles.ItemResourceCache.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geocode {
				export class GeocodeParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.geocode.GeocodeParameters>;
					public setOutputSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
					public getCoreGeocodeParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeocodeParameters;
					public getCountryCode(): string;
					public getSearchArea(): com.arcgismaps.geometry.Geometry;
					public getOutputLanguageCode(): string;
					public setForStorage(param0: boolean): void;
					public setMaxResults(param0: number): void;
					public getMinScore(): number;
					public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getResultAttributeNames(): java.util.List<string>;
					public getForStorage(): boolean;
					public setPreferredSearchLocation(param0: com.arcgismaps.geometry.Point): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeocodeParameters);
					public setSearchArea(param0: com.arcgismaps.geometry.Geometry): void;
					public constructor();
					public setOutputLanguageCode(param0: string): void;
					public getCategories(): java.util.List<string>;
					public setCountryCode(param0: string): void;
					public getPreferredSearchLocation(): com.arcgismaps.geometry.Point;
					public getMaxResults(): number;
					public setMinScore(param0: number): void;
				}
				export module GeocodeParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeocodeParameters,com.arcgismaps.tasks.geocode.GeocodeParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geocode.GeocodeParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geocode.GeocodeParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geocode {
				export class GeocodeResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.geocode.GeocodeResult>;
					public getLabel(): string;
					public getScore(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeocodeResult);
					public getExtent(): com.arcgismaps.geometry.Envelope;
					public getCoreGeocodeResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeocodeResult;
					public getInputLocation(): com.arcgismaps.geometry.Point;
					public getDisplayLocation(): com.arcgismaps.geometry.Point;
					public getAttributes(): java.util.Map<string,any>;
					public getRouteLocation(): com.arcgismaps.geometry.Point;
				}
				export module GeocodeResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeocodeResult,com.arcgismaps.tasks.geocode.GeocodeResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geocode.GeocodeResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geocode.GeocodeResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geocode {
				export class LocatorAttribute {
					public static class: java.lang.Class<com.arcgismaps.tasks.geocode.LocatorAttribute>;
					public getCoreLocatorAttribute$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocatorAttribute;
					public getDisplayName(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLocatorAttribute);
					public getName(): string;
					public getRequired(): boolean;
					public getType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreElementType;
				}
				export module LocatorAttribute {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLocatorAttribute,com.arcgismaps.tasks.geocode.LocatorAttribute> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geocode.LocatorAttribute.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geocode.LocatorAttribute.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geocode {
				export class LocatorInfo {
					public static class: java.lang.Class<com.arcgismaps.tasks.geocode.LocatorInfo>;
					public getResultAttributes(): java.util.List<com.arcgismaps.tasks.geocode.LocatorAttribute>;
					public getSupportsPoi(): boolean;
					public getVersion(): string;
					public getSupportsAddresses(): boolean;
					public getCoreLocatorInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocatorInfo;
					public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getProperties(): java.util.Map<string,string>;
					public getIntersectionResultAttributes(): java.util.List<com.arcgismaps.tasks.geocode.LocatorAttribute>;
					public getSearchAttributes(): java.util.List<com.arcgismaps.tasks.geocode.LocatorAttribute>;
					public getSupportsIntersections(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLocatorInfo);
					public getName(): string;
					public getSupportsSuggestions(): boolean;
					public getDescription(): string;
				}
				export module LocatorInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLocatorInfo,com.arcgismaps.tasks.geocode.LocatorInfo> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geocode.LocatorInfo.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geocode.LocatorInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geocode {
				export class LocatorTask implements com.arcgismaps.ApiKeyResource, com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.tasks.geocode.LocatorTask>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getCoreLocatorTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocatorTask;
					public constructor(param0: string);
					public "suggest-0E7RQCE"(param0: string, param1: com.arcgismaps.tasks.geocode.SuggestParameters, param2: any): any;
					public getLocatorInfo(): com.arcgismaps.tasks.geocode.LocatorInfo;
					public "getApiKey-6IiKQno"(): string;
					public cancelLoad(): void;
					public "setApiKey-lGpodAQ"(param0: string): void;
					public getUri(): string;
					public "geocode-0E7RQCE"(param0: com.arcgismaps.tasks.geocode.SuggestResult, param1: com.arcgismaps.tasks.geocode.GeocodeParameters, param2: any): any;
					public "reverseGeocode-0E7RQCE"(param0: com.arcgismaps.geometry.Point, param1: com.arcgismaps.tasks.geocode.ReverseGeocodeParameters, param2: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreLocatorTask);
					public "geocode-0E7RQCE"(param0: java.util.Map<string,string>, param1: com.arcgismaps.tasks.geocode.GeocodeParameters, param2: any): any;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "load-IoAF18A"(param0: any): any;
					public "geocode-0E7RQCE"(param0: string, param1: com.arcgismaps.tasks.geocode.GeocodeParameters, param2: any): any;
				}
				export module LocatorTask {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreLocatorTask,com.arcgismaps.tasks.geocode.LocatorTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geocode.LocatorTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geocode.LocatorTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geocode {
				export class ReverseGeocodeParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.geocode.ReverseGeocodeParameters>;
					public setOutputSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
					public getCoreReverseGeocodeParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreReverseGeocodeParameters;
					public setMaxDistance(param0: java.lang.Double): void;
					public getOutputLanguageCode(): string;
					public setForStorage(param0: boolean): void;
					public getFeatureTypes(): java.util.List<string>;
					public setMaxResults(param0: number): void;
					public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getResultAttributeNames(): java.util.List<string>;
					public getForStorage(): boolean;
					public constructor();
					public setOutputLanguageCode(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreReverseGeocodeParameters);
					public getMaxDistance(): java.lang.Double;
					public getMaxResults(): number;
				}
				export module ReverseGeocodeParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreReverseGeocodeParameters,com.arcgismaps.tasks.geocode.ReverseGeocodeParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geocode.ReverseGeocodeParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geocode.ReverseGeocodeParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geocode {
				export class SuggestParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.geocode.SuggestParameters>;
					public setPreferredSearchLocation(param0: com.arcgismaps.geometry.Point): void;
					public getCountryCode(): string;
					public setSearchArea(param0: com.arcgismaps.geometry.Geometry): void;
					public constructor();
					public getCategories(): java.util.List<string>;
					public setCountryCode(param0: string): void;
					public getPreferredSearchLocation(): com.arcgismaps.geometry.Point;
					public getMaxResults(): number;
					public getSearchArea(): com.arcgismaps.geometry.Geometry;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSuggestParameters);
					public setMaxResults(param0: number): void;
					public getCoreSuggestParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSuggestParameters;
				}
				export module SuggestParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSuggestParameters,com.arcgismaps.tasks.geocode.SuggestParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geocode.SuggestParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geocode.SuggestParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geocode {
				export class SuggestResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.geocode.SuggestResult>;
					public getLabel(): string;
					public isCollection(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSuggestResult);
					public getCoreSuggestResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSuggestResult;
				}
				export module SuggestResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSuggestResult,com.arcgismaps.tasks.geocode.SuggestResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geocode.SuggestResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geocode.SuggestResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export abstract class AttachmentSyncDirection {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection>;
					public getCoreAttachmentSyncDirection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAttachmentSyncDirection;
				}
				export module AttachmentSyncDirection {
					export class Bidirectional extends com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection.Bidirectional>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection.Bidirectional;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAttachmentSyncDirection): com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection.None>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection.None;
					}
					export class Upload extends com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection.Upload>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection.Upload;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export class GenerateGeodatabaseJob extends com.arcgismaps.tasks.Job<com.arcgismaps.data.Geodatabase> {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseJob>;
					public pause(): boolean;
					public start(): boolean;
					public toJson(): string;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public "cancel-IoAF18A"(param0: any): any;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGenerateGeodatabaseJob, param1: boolean);
					public "checkStatus-IoAF18A"(param0: any): any;
					public "result-IoAF18A"(param0: any): any;
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
					public getCoreGenerateGeodatabaseJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGenerateGeodatabaseJob;
					public getServerJobId(): string;
				}
				export module GenerateGeodatabaseJob {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseJob.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseJob;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGenerateGeodatabaseJob,com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export class GenerateGeodatabaseParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseParameters>;
					public getSyncAnnotations(): boolean;
					public getSyncContingentValues(): boolean;
					public setSyncModel(param0: com.arcgismaps.tasks.geodatabase.SyncModel): void;
					public setSyncAnnotations(param0: boolean): void;
					public getExtent(): com.arcgismaps.geometry.Geometry;
					public getSyncModel(): com.arcgismaps.tasks.geodatabase.SyncModel;
					public getAttachmentSyncDirection(): com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection;
					public setOutSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
					public setUtilityNetworkSyncMode(param0: com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode): void;
					public setAttachmentSyncDirection(param0: com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection): void;
					public setReturnAttachments(param0: boolean): void;
					public getUtilityNetworkSyncMode(): com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode;
					public clone(): com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseParameters;
					public setExtent(param0: com.arcgismaps.geometry.Geometry): void;
					public getOutSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getReturnAttachments(): boolean;
					public constructor();
					public getSyncDimensions(): boolean;
					public getCoreGenerateGeodatabaseParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters;
					public getLayerOptions(): java.util.List<com.arcgismaps.tasks.geodatabase.GenerateLayerOption>;
					public setSyncContingentValues(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters, param1: boolean);
					public setSyncDimensions(param0: boolean): void;
				}
				export module GenerateGeodatabaseParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGenerateGeodatabaseParameters,com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export class GenerateLayerOption {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateLayerOption>;
					public clone(): com.arcgismaps.tasks.geodatabase.GenerateLayerOption;
					public getWhereClause(): string;
					public setQueryOption(param0: com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption): void;
					public constructor(param0: number, param1: string);
					public getCoreGenerateLayerOption$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGenerateLayerOption;
					public constructor(param0: number, param1: boolean);
					public getLayerId(): number;
					public setLayerId(param0: number): void;
					public getIncludeRelated(): boolean;
					public setUseGeometry(param0: boolean): void;
					public setIncludeRelated(param0: boolean): void;
					public setWhereClause(param0: string): void;
					public getUseGeometry(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGenerateLayerOption);
					public getQueryOption(): com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption;
					public constructor(param0: number);
				}
				export module GenerateLayerOption {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGenerateLayerOption,com.arcgismaps.tasks.geodatabase.GenerateLayerOption> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateLayerOption.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.GenerateLayerOption.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export abstract class GenerateLayerQueryOption {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption>;
					public getCoreGenerateLayerQueryOption$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption;
				}
				export module GenerateLayerQueryOption {
					export class All extends com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption.All>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption.All;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGenerateLayerQueryOption): com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption.None>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption.None;
					}
					export class UseFilter extends com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption.UseFilter>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.GenerateLayerQueryOption.UseFilter;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export class GeodatabaseDeltaInfo {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GeodatabaseDeltaInfo>;
					public getDownloadDeltaPath(): string;
					public getGeodatabasePath(): string;
					public getUploadDeltaPath(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeodatabaseDeltaInfo);
					public getCoreGeodatabaseDeltaInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodatabaseDeltaInfo;
					public getFeatureServiceUrl(): string;
				}
				export module GeodatabaseDeltaInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeodatabaseDeltaInfo,com.arcgismaps.tasks.geodatabase.GeodatabaseDeltaInfo> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GeodatabaseDeltaInfo.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.GeodatabaseDeltaInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export class GeodatabaseSyncTask implements com.arcgismaps.ApiKeyResource, com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GeodatabaseSyncTask>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeodatabaseSyncTask);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public "createDefaultGenerateGeodatabaseParameters-gIAlu-s"(param0: com.arcgismaps.geometry.Geometry, param1: any): any;
					public constructor(param0: string);
					public createGenerateGeodatabaseJob(param0: com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseParameters, param1: string): com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseJob;
					public "createDefaultSyncGeodatabaseParameters-0E7RQCE"(param0: com.arcgismaps.data.Geodatabase, param1: com.arcgismaps.tasks.geodatabase.SyncDirection, param2: any): any;
					public "getApiKey-6IiKQno"(): string;
					public cancelLoad(): void;
					public "setApiKey-lGpodAQ"(param0: string): void;
					public getFeatureServiceInfo(): com.arcgismaps.arcgisservices.ArcGISFeatureServiceInfo;
					public createSyncGeodatabaseJob(param0: com.arcgismaps.tasks.geodatabase.SyncGeodatabaseParameters, param1: com.arcgismaps.data.Geodatabase): com.arcgismaps.tasks.geodatabase.SyncGeodatabaseJob;
					public "unregisterGeodatabase-gIAlu-s"(param0: com.arcgismaps.data.Geodatabase, param1: any): any;
					public getUrl(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public createSyncGeodatabaseJob(param0: com.arcgismaps.tasks.geodatabase.SyncDirection, param1: boolean, param2: com.arcgismaps.data.Geodatabase): com.arcgismaps.tasks.geodatabase.SyncGeodatabaseJob;
					public getCoreGeodatabaseSyncTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeodatabaseSyncTask;
					public "load-IoAF18A"(param0: any): any;
					public "registerSyncEnabledGeodatabase-gIAlu-s"(param0: com.arcgismaps.data.Geodatabase, param1: any): any;
					public "unregisterGeodatabase-Q-jhaHI"(param0: string, param1: any): any;
				}
				export module GeodatabaseSyncTask {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GeodatabaseSyncTask.Companion>;
						public "exportDelta-0E7RQCE"(param0: com.arcgismaps.data.Geodatabase, param1: string, param2: any): any;
						public "importDelta-0E7RQCE"(param0: com.arcgismaps.data.Geodatabase, param1: string, param2: any): any;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeodatabaseSyncTask,com.arcgismaps.tasks.geodatabase.GeodatabaseSyncTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.GeodatabaseSyncTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.GeodatabaseSyncTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export abstract class SyncDirection {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncDirection>;
					public getCoreSyncDirection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSyncDirection;
				}
				export module SyncDirection {
					export class Bidirectional extends com.arcgismaps.tasks.geodatabase.SyncDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncDirection.Bidirectional>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncDirection.Bidirectional;
					}
					export class Download extends com.arcgismaps.tasks.geodatabase.SyncDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncDirection.Download>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncDirection.Download;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncDirection.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncDirection.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSyncDirection): com.arcgismaps.tasks.geodatabase.SyncDirection;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncDirection.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.tasks.geodatabase.SyncDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncDirection.None>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncDirection.None;
					}
					export class Upload extends com.arcgismaps.tasks.geodatabase.SyncDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncDirection.Upload>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncDirection.Upload;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export class SyncGeodatabaseJob extends com.arcgismaps.tasks.Job<java.util.List<any>> {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncGeodatabaseJob>;
					public pause(): boolean;
					public toJson(): string;
					public getCoreSyncGeodatabaseJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSyncGeodatabaseJob;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public "result-IoAF18A"(param0: any): any;
					public getServerJobId(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSyncGeodatabaseJob, param1: boolean);
					public start(): boolean;
					public "cancel-IoAF18A"(param0: any): any;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public getGeodatabaseDeltaInfo(): com.arcgismaps.tasks.geodatabase.GeodatabaseDeltaInfo;
					public "checkStatus-IoAF18A"(param0: any): any;
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
				}
				export module SyncGeodatabaseJob {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncGeodatabaseJob.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.tasks.geodatabase.SyncGeodatabaseJob;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreSyncGeodatabaseJob,com.arcgismaps.tasks.geodatabase.SyncGeodatabaseJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncGeodatabaseJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncGeodatabaseJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export class SyncGeodatabaseParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncGeodatabaseParameters>;
					public getLayerOptions(): java.util.List<com.arcgismaps.tasks.geodatabase.SyncLayerOption>;
					public setGeodatabaseSyncDirection(param0: com.arcgismaps.tasks.geodatabase.SyncDirection): void;
					public constructor();
					public getCoreSyncGeodatabaseParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSyncGeodatabaseParameters;
					public getKeepGeodatabaseDeltas(): boolean;
					public setShouldRollbackOnFailure(param0: boolean): void;
					public getShouldRollbackOnFailure(): boolean;
					public getGeodatabaseSyncDirection(): com.arcgismaps.tasks.geodatabase.SyncDirection;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSyncGeodatabaseParameters);
					public setKeepGeodatabaseDeltas(param0: boolean): void;
				}
				export module SyncGeodatabaseParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSyncGeodatabaseParameters,com.arcgismaps.tasks.geodatabase.SyncGeodatabaseParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncGeodatabaseParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncGeodatabaseParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export class SyncLayerOption {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncLayerOption>;
					public setLayerId(param0: number): void;
					public setSyncDirection(param0: com.arcgismaps.tasks.geodatabase.SyncDirection): void;
					public constructor(param0: number, param1: com.arcgismaps.tasks.geodatabase.SyncDirection);
					public getCoreSyncLayerOption$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSyncLayerOption;
					public getSyncDirection(): com.arcgismaps.tasks.geodatabase.SyncDirection;
					public clone(): com.arcgismaps.tasks.geodatabase.SyncLayerOption;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSyncLayerOption);
					public constructor(param0: number);
					public getLayerId(): number;
				}
				export module SyncLayerOption {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSyncLayerOption,com.arcgismaps.tasks.geodatabase.SyncLayerOption> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncLayerOption.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncLayerOption.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export class SyncLayerResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncLayerResult>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreSyncLayerResult);
					public getTableName(): string;
					public getCoreSyncLayerResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSyncLayerResult;
					public getEditResults(): java.util.List<com.arcgismaps.data.FeatureEditResult>;
					public getLayerId(): java.lang.Long;
				}
				export module SyncLayerResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSyncLayerResult,com.arcgismaps.tasks.geodatabase.SyncLayerResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncLayerResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncLayerResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export abstract class SyncModel {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncModel>;
					public getCoreSyncModel$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSyncModel;
				}
				export module SyncModel {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncModel.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncModel.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreSyncModel): com.arcgismaps.tasks.geodatabase.SyncModel;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncModel.Factory.WhenMappings>;
						}
					}
					export class Geodatabase extends com.arcgismaps.tasks.geodatabase.SyncModel {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncModel.Geodatabase>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncModel.Geodatabase;
					}
					export class Layer extends com.arcgismaps.tasks.geodatabase.SyncModel {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncModel.Layer>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncModel.Layer;
					}
					export class None extends com.arcgismaps.tasks.geodatabase.SyncModel {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.SyncModel.None>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.SyncModel.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geodatabase {
				export abstract class UtilityNetworkSyncMode {
					public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode>;
					public getCoreUtilityNetworkSyncMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode;
				}
				export module UtilityNetworkSyncMode {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkSyncMode): com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode.None>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode.None;
					}
					export class SyncSystemAndTopologyTables extends com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode.SyncSystemAndTopologyTables>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode.SyncSystemAndTopologyTables;
					}
					export class SyncSystemTables extends com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode {
						public static class: java.lang.Class<com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode.SyncSystemTables>;
						public static INSTANCE: com.arcgismaps.tasks.geodatabase.UtilityNetworkSyncMode.SyncSystemTables;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export abstract class GeoprocessingExecutionType {
					public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType>;
					public getCoreGeoprocessingExecutionType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType;
				}
				export module GeoprocessingExecutionType {
					export class AsynchronousSubmit extends com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType.AsynchronousSubmit>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType.AsynchronousSubmit;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeoprocessingExecutionType): com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType.Factory.WhenMappings>;
						}
					}
					export class SynchronousExecute extends com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType.SynchronousExecute>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType.SynchronousExecute;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export class GeoprocessingJob extends com.arcgismaps.tasks.Job<com.arcgismaps.tasks.geoprocessing.GeoprocessingResult> {
					public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingJob>;
					public pause(): boolean;
					public toJson(): string;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingJob, param1: boolean);
					public getParameters(): com.arcgismaps.tasks.geoprocessing.GeoprocessingParameters;
					public "result-IoAF18A"(param0: any): any;
					public getServerJobId(): string;
					public start(): boolean;
					public "cancel-IoAF18A"(param0: any): any;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public getCoreGeoprocessingJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingJob;
					public "checkStatus-IoAF18A"(param0: any): any;
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
				}
				export module GeoprocessingJob {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingJob.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.tasks.geoprocessing.GeoprocessingJob;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingJob,com.arcgismaps.tasks.geoprocessing.GeoprocessingJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export abstract class GeoprocessingParameterDirection {
					public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection>;
					public getCoreGeoprocessingParameterDirection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingParameterDirection;
				}
				export module GeoprocessingParameterDirection {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameterDirection): com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection.Factory.WhenMappings>;
						}
					}
					export class Input extends com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection.Input>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection.Input;
					}
					export class Output extends com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection.Output>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection.Output;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export class GeoprocessingParameterInfo {
					public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterInfo>;
					public getDisplayName(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameterInfo);
					public getCategory(): string;
					public getChoiceList(): java.util.List<string>;
					public getDataType(): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType;
					public getFeaturesRequireGeometry(): boolean;
					public isRequired(): boolean;
					public getDefaultParameter(): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter;
					public getName(): string;
					public getCoreGeoprocessingParameterInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingParameterInfo;
					public getDescription(): string;
					public getMultiValueDataType(): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType;
					public getDirection(): com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterDirection;
				}
				export module GeoprocessingParameterInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingParameterInfo,com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterInfo> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterInfo.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export class GeoprocessingParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameters>;
					public setOutputSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
					public getInputs(): java.util.Map<string,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter>;
					public getReturnM(): boolean;
					public constructor(param0: com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType);
					public getReturnZ(): boolean;
					public getExecutionType(): com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType;
					public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public setReturnZ(param0: boolean): void;
					public getProcessSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public setProcessSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
					public getCoreGeoprocessingParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingParameters;
					public setReturnM(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameters);
				}
				export module GeoprocessingParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingParameters,com.arcgismaps.tasks.geoprocessing.GeoprocessingParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export class GeoprocessingResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingResult>;
					public getCoreGeoprocessingResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingResult;
					public getMapImageLayer(): com.arcgismaps.mapping.layers.ArcGISMapImageLayer;
					public getOutputs(): java.util.Map<string,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingResult);
				}
				export module GeoprocessingResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingResult,com.arcgismaps.tasks.geoprocessing.GeoprocessingResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export class GeoprocessingTask extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingTask>;
					public getGeoprocessingTaskInfo(): com.arcgismaps.tasks.geoprocessing.GeoprocessingTaskInfo;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public getUrl(): string;
					public constructor(param0: string);
					public createJob(param0: com.arcgismaps.tasks.geoprocessing.GeoprocessingParameters): com.arcgismaps.tasks.geoprocessing.GeoprocessingJob;
					public getCoreGeoprocessingTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingTask;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingTask);
					public "retryLoad-IoAF18A"(param0: any): any;
					public cancelLoad(): void;
					public "load-IoAF18A"(param0: any): any;
					public "createDefaultParameters-IoAF18A"(param0: any): any;
				}
				export module GeoprocessingTask {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingTask,com.arcgismaps.tasks.geoprocessing.GeoprocessingTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export class GeoprocessingTaskInfo {
					public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingTaskInfo>;
					public getDisplayName(): string;
					public getParameterInfos(): java.util.List<com.arcgismaps.tasks.geoprocessing.GeoprocessingParameterInfo>;
					public getUrl(): string;
					public getName(): string;
					public getHelpUrl(): string;
					public getCategory(): string;
					public getCoreGeoprocessingTaskInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingTaskInfo;
					public getDescription(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingTaskInfo);
					public getExecutionType(): com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType;
				}
				export module GeoprocessingTaskInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingTaskInfo,com.arcgismaps.tasks.geoprocessing.GeoprocessingTaskInfo> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.GeoprocessingTaskInfo.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.geoprocessing.GeoprocessingTaskInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingBoolean extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingBoolean>;
						public setValue(param0: boolean): void;
						public constructor();
						public getValue(): boolean;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingBoolean);
						public getCoreGeoprocessingBoolean$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingBoolean;
						public constructor(param0: boolean);
					}
					export module GeoprocessingBoolean {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingBoolean,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingBoolean> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingBoolean.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingBoolean.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export abstract class GeoprocessingDataFile extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile>;
						public getInputFilePath(): string;
						public setUploadId(param0: string): void;
						public setInputFilePath(param0: string): void;
						public getUrl(): string;
						public getCoreGeoprocessingDataFile$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingDataFile;
						public getUploadId(): string;
						public setUrl(param0: string): void;
						public "fetchFile-gIAlu-s"(param0: string, param1: any): any;
					}
					export module GeoprocessingDataFile {
						export class Companion {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile.Companion>;
							public create(): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile;
							public createWithUrl(param0: string): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile;
						}
						export class Factory extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFileFactory {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingDataFileFactory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingDataFile,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFileFactory>;
						public constructor();
						public constructor(param0: any);
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeoprocessingDataFile): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile;
						public convertToPublic(param0: any): any;
					}
					export module GeoprocessingDataFileFactory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFileFactory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingDataFileImpl extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFileImpl>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingDataFile);
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingDate extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDate>;
						public getValue(): java.time.Instant;
						public constructor(param0: java.time.Instant);
						public constructor();
						public setValue(param0: java.time.Instant): void;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingDate);
						public getCoreGeoprocessingDate$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingDate;
					}
					export module GeoprocessingDate {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingDate,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDate> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDate.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDate.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingDouble extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDouble>;
						public constructor();
						public constructor(param0: number);
						public getCoreGeoprocessingDouble$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingDouble;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingDouble);
						public setValue(param0: number): void;
						public getValue(): number;
					}
					export module GeoprocessingDouble {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingDouble,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDouble> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDouble.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDouble.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingFeatureSet extends com.arcgismaps.data.FeatureSet {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingFeatureSet>;
						public getCoreGeoprocessingFeatureSet$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingFeatureSet;
						public getSpatialReference(): com.arcgismaps.geometry.SpatialReference;
						public iterator(): java.util.Iterator<com.arcgismaps.data.Feature>;
						public getFields(): java.util.List<com.arcgismaps.data.Field>;
						public isTransferLimitExceeded(): boolean;
						public getGeometryType(): com.arcgismaps.geometry.GeometryType;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingFeatureSet);
					}
					export module GeoprocessingFeatureSet {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingFeatureSet,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingFeatureSet> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingFeatureSet.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingFeatureSet.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingFeatures extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingFeatures>;
						public constructor();
						public constructor(param0: com.arcgismaps.data.FeatureSet);
						public setFeatures(param0: com.arcgismaps.data.FeatureSet): void;
						public "fetchOutputFeatures-IoAF18A"(param0: any): any;
						public getUrl(): string;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingFeatures);
						public getCoreGeoprocessingFeatures$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingFeatures;
						public getFeatures(): com.arcgismaps.data.FeatureSet;
						public getCanFetchOutputFeatures(): boolean;
						public setUrl(param0: string): void;
						public constructor(param0: string);
					}
					export module GeoprocessingFeatures {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingFeatures,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingFeatures> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingFeatures.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingFeatures.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingLinearUnit extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnit>;
						public getUnit(): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits;
						public setUnit(param0: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits): void;
						public setDistance(param0: number): void;
						public constructor();
						public constructor(param0: number, param1: com.arcgismaps.geometry.LinearUnitId);
						public constructor(param0: number);
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnit);
						public constructor(param0: number, param1: com.arcgismaps.geometry.LinearUnit);
						public getLinearUnit(): com.arcgismaps.geometry.LinearUnit;
						public getDistance(): number;
						public constructor(param0: number, param1: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits);
						public getCoreGeoprocessingLinearUnit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnit;
					}
					export module GeoprocessingLinearUnit {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnit,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnit> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnit.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnit.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export abstract class GeoprocessingLinearUnits {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits>;
						public getCoreGeoprocessingLinearUnits$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits;
					}
					export module GeoprocessingLinearUnits {
						export class Centimeter extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Centimeter>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Centimeter;
						}
						export class Decimeter extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Decimeter>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Decimeter;
						}
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeoprocessingLinearUnits): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Factory.WhenMappings>;
							}
						}
						export class Kilometer extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Kilometer>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Kilometer;
						}
						export class Meter extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Meter>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Meter;
						}
						export class Millimeter extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Millimeter>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Millimeter;
						}
						export class Point extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Point>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.Point;
						}
						export class UsNauticalMile extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsNauticalMile>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsNauticalMile;
						}
						export class UsSurveyFoot extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsSurveyFoot>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsSurveyFoot;
						}
						export class UsSurveyInch extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsSurveyInch>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsSurveyInch;
						}
						export class UsSurveyMile extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsSurveyMile>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsSurveyMile;
						}
						export class UsSurveyYard extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsSurveyYard>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLinearUnits.UsSurveyYard;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingLong extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLong>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingLong);
						public getCoreGeoprocessingLong$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingLong;
						public constructor(param0: number);
						public setValue(param0: number): void;
						public getValue(): number;
					}
					export module GeoprocessingLong {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingLong,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLong> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLong.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingLong.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingMultiValue extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingMultiValue>;
						public getValues(): java.util.List<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingMultiValue);
						public getCoreGeoprocessingMultiValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingMultiValue;
						public getValueParameterType(): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType;
						public constructor(param0: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType, param1: java.lang.Iterable<any>);
					}
					export module GeoprocessingMultiValue {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingMultiValue,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingMultiValue> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingMultiValue.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingMultiValue.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export abstract class GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter>;
						public getObjectType$arcgis_maps_any_release(): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType;
						public getCoreGeoprocessingParameter$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingParameter;
					}
					export module GeoprocessingParameter {
						export class Factory extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterFactory {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingParameterFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreGeoprocessingParameter,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter> {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterFactory>;
						public constructor();
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameter): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter;
						public convertToPublic(param0: any): any;
					}
					export module GeoprocessingParameterFactory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterFactory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export abstract class GeoprocessingParameterType {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType>;
						public getCoreGeoprocessingParameterType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingParameterType;
					}
					export module GeoprocessingParameterType {
						export class Factory {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.Factory;
							public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGeoprocessingParameterType): com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType;
						}
						export module Factory {
							export class WhenMappings {
								public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.Factory.WhenMappings>;
							}
						}
						export class GeoprocessingBoolean extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingBoolean>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingBoolean;
						}
						export class GeoprocessingDataFile extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingDataFile>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingDataFile;
						}
						export class GeoprocessingDate extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingDate>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingDate;
						}
						export class GeoprocessingDouble extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingDouble>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingDouble;
						}
						export class GeoprocessingFeatures extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingFeatures>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingFeatures;
						}
						export class GeoprocessingLinearUnit extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingLinearUnit>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingLinearUnit;
						}
						export class GeoprocessingLong extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingLong>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingLong;
						}
						export class GeoprocessingMultiValue extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingMultiValue>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingMultiValue;
						}
						export class GeoprocessingRaster extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingRaster>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingRaster;
						}
						export class GeoprocessingString extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingString>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingString;
						}
						export class GeoprocessingUnknownParameter extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingUnknownParameter>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameterType.GeoprocessingUnknownParameter;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingRaster extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingDataFile {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingRaster>;
						public constructor();
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingRaster);
						public setFormat(param0: string): void;
						public getCoreGeoprocessingRaster$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingRaster;
						public getFormat(): string;
						public constructor(param0: string, param1: string);
					}
					export module GeoprocessingRaster {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingRaster,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingRaster> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingRaster.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingRaster.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingString extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingString>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingString);
						public constructor();
						public setValue(param0: string): void;
						public getValue(): string;
						public getCoreGeoprocessingString$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingString;
						public constructor(param0: string);
					}
					export module GeoprocessingString {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingString,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingString> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingString.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingString.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module geoprocessing {
				export module geoprocessingparameters {
					export class GeoprocessingUnknownParameter extends com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingParameter {
						public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingUnknownParameter>;
						public constructor(param0: com.arcgismaps.internal.jni.CoreGeoprocessingUnknownParameter);
						public getCoreGeoprocessingUnknownParameter$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGeoprocessingUnknownParameter;
					}
					export module GeoprocessingUnknownParameter {
						export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGeoprocessingUnknownParameter,com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingUnknownParameter> {
							public static class: java.lang.Class<com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingUnknownParameter.Factory>;
							public static INSTANCE: com.arcgismaps.tasks.geoprocessing.geoprocessingparameters.GeoprocessingUnknownParameter.Factory;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class AttributeParameterValue {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeParameterValue>;
					public getCoreAttributeParameterValue$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAttributeParameterValue;
					public setParameterValue(param0: any): void;
					public setAttributeName(param0: string): void;
					public getAttributeName(): string;
					public constructor();
					public setParameterName(param0: string): void;
					public getParameterName(): string;
					public getParameterValue(): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreAttributeParameterValue);
				}
				export module AttributeParameterValue {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreAttributeParameterValue,com.arcgismaps.tasks.networkanalysis.AttributeParameterValue> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeParameterValue.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeParameterValue.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class AttributeUnit {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit>;
					public getCoreAttributeUnit$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreAttributeUnit;
				}
				export module AttributeUnit {
					export class Centimeters extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Centimeters>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Centimeters;
					}
					export class Days extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Days>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Days;
					}
					export class DecimalDegrees extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.DecimalDegrees>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.DecimalDegrees;
					}
					export class Decimeters extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Decimeters>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Decimeters;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreAttributeUnit): com.arcgismaps.tasks.networkanalysis.AttributeUnit;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Factory.WhenMappings>;
						}
					}
					export class Feet extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Feet>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Feet;
					}
					export class Hours extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Hours>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Hours;
					}
					export class Inches extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Inches>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Inches;
					}
					export class Kilometers extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Kilometers>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Kilometers;
					}
					export class Meters extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Meters>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Meters;
					}
					export class Miles extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Miles>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Miles;
					}
					export class Millimeters extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Millimeters>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Millimeters;
					}
					export class Minutes extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Minutes>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Minutes;
					}
					export class NauticalMiles extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.NauticalMiles>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.NauticalMiles;
					}
					export class Seconds extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Seconds>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Seconds;
					}
					export class Unknown extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Unknown>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Unknown;
					}
					export class Yards extends com.arcgismaps.tasks.networkanalysis.AttributeUnit {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.AttributeUnit.Yards>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.AttributeUnit.Yards;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class BarrierType {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.BarrierType>;
					public getCoreBarrierType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreBarrierType;
				}
				export module BarrierType {
					export class CostAdjustment extends com.arcgismaps.tasks.networkanalysis.BarrierType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.BarrierType.CostAdjustment>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.BarrierType.CostAdjustment;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.BarrierType.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.BarrierType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreBarrierType): com.arcgismaps.tasks.networkanalysis.BarrierType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.BarrierType.Factory.WhenMappings>;
						}
					}
					export class Restriction extends com.arcgismaps.tasks.networkanalysis.BarrierType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.BarrierType.Restriction>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.BarrierType.Restriction;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ClosestFacilityParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityParameters>;
					public setReturnPointBarriers(param0: boolean): void;
					public getReturnPolylineBarriers(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreClosestFacilityParameters);
					public getDirectionsStyle(): com.arcgismaps.tasks.networkanalysis.DirectionsStyle;
					public setTravelMode(param0: com.arcgismaps.tasks.networkanalysis.TravelMode): void;
					public setStartTimeUsage(param0: com.arcgismaps.tasks.networkanalysis.StartTimeUsage): void;
					public getTravelDirection(): com.arcgismaps.tasks.networkanalysis.TravelDirection;
					public getReturnRoutes(): boolean;
					public setPolygonBarriers(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.PolygonBarrier>): void;
					public setPointBarriers(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.PointBarrier>): void;
					public clone(): com.arcgismaps.tasks.networkanalysis.ClosestFacilityParameters;
					public setFacilities(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setOutputSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
					public clearFacilities(): void;
					public setReturnDirections(param0: boolean): void;
					public setRouteShapeType(param0: com.arcgismaps.tasks.networkanalysis.RouteShapeType): void;
					public getStartTimeUsage(): com.arcgismaps.tasks.networkanalysis.StartTimeUsage;
					public setDefaultImpedanceCutoff(param0: number): void;
					public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public clearPolygonBarriers(): void;
					public getDirectionsDistanceUnits(): com.arcgismaps.UnitSystem;
					public setIncidents(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setDirectionsDistanceUnits(param0: com.arcgismaps.UnitSystem): void;
					public getRouteShapeType(): com.arcgismaps.tasks.networkanalysis.RouteShapeType;
					public getReturnPolygonBarriers(): boolean;
					public clearIncidents(): void;
					public setReturnPolygonBarriers(param0: boolean): void;
					public setReturnPolylineBarriers(param0: boolean): void;
					public getDirectionsLanguage(): string;
					public setIncidents(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.Incident>): void;
					public setDefaultTargetFacilityCount(param0: number): void;
					public clearPolylineBarriers(): void;
					public getStartTime(): java.time.Instant;
					public setPolygonBarriers(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setDirectionsStyle(param0: com.arcgismaps.tasks.networkanalysis.DirectionsStyle): void;
					public setSearchWhereClause(param0: string, param1: string): void;
					public getReturnPointBarriers(): boolean;
					public setTravelDirection(param0: com.arcgismaps.tasks.networkanalysis.TravelDirection): void;
					public getReturnDirections(): boolean;
					public setStartTime(param0: java.time.Instant): void;
					public setReturnRoutes(param0: boolean): void;
					public clearPointBarriers(): void;
					public getDefaultImpedanceCutoff(): number;
					public getCoreClosestFacilityParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClosestFacilityParameters;
					public getTravelMode(): com.arcgismaps.tasks.networkanalysis.TravelMode;
					public setPolylineBarriers(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setDirectionsLanguage(param0: string): void;
					public getAccumulateAttributeNames(): java.util.List<string>;
					public getDefaultTargetFacilityCount(): number;
					public setPointBarriers(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setFacilities(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.Facility>): void;
					public getSearchWhereClause(param0: string): string;
					public setPolylineBarriers(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.PolylineBarrier>): void;
				}
				export module ClosestFacilityParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreClosestFacilityParameters,com.arcgismaps.tasks.networkanalysis.ClosestFacilityParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ClosestFacilityParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ClosestFacilityResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityResult>;
					public getPolygonBarriers(): java.util.List<com.arcgismaps.tasks.networkanalysis.PolygonBarrier>;
					public getFacilities(): java.util.List<com.arcgismaps.tasks.networkanalysis.Facility>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreClosestFacilityResult);
					public getDirectionsLanguage(): string;
					public getFacilityCosts(param0: string, param1: number): java.util.List<java.lang.Double>;
					public getPolylineBarriers(): java.util.List<com.arcgismaps.tasks.networkanalysis.PolylineBarrier>;
					public getRankedFacilityIndexes(param0: number): java.util.List<java.lang.Integer>;
					public getCoreClosestFacilityResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClosestFacilityResult;
					public getMessages(): java.util.List<string>;
					public getIncidents(): java.util.List<com.arcgismaps.tasks.networkanalysis.Incident>;
					public getRoute(param0: number, param1: number): com.arcgismaps.tasks.networkanalysis.ClosestFacilityRoute;
					public getPointBarriers(): java.util.List<com.arcgismaps.tasks.networkanalysis.PointBarrier>;
				}
				export module ClosestFacilityResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreClosestFacilityResult,com.arcgismaps.tasks.networkanalysis.ClosestFacilityResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ClosestFacilityResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ClosestFacilityRoute {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityRoute>;
					public getDirectionManeuvers(): java.util.List<com.arcgismaps.tasks.networkanalysis.DirectionManeuver>;
					public getDepartureCurbApproach(): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					public getTravelTime(): number;
					public getEndTimeShift(): number;
					public getStartTimeShift(): number;
					public getStartTime(): java.time.Instant;
					public constructor(param0: com.arcgismaps.internal.jni.CoreClosestFacilityRoute);
					public getRouteGeometry(): com.arcgismaps.geometry.Polyline;
					public getTotalLength(): number;
					public getCoreClosestFacilityRoute$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClosestFacilityRoute;
					public getEndTime(): java.time.Instant;
					public getArrivalCurbApproach(): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					public getTotalTime(): number;
					public getCost(param0: string): number;
				}
				export module ClosestFacilityRoute {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreClosestFacilityRoute,com.arcgismaps.tasks.networkanalysis.ClosestFacilityRoute> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityRoute.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ClosestFacilityRoute.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ClosestFacilityTask implements com.arcgismaps.ApiKeyResource, com.arcgismaps.Loadable, com.arcgismaps.Resourceable {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityTask>;
					public getCoreClosestFacilityTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClosestFacilityTask;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public constructor(param0: com.arcgismaps.internal.jni.CoreClosestFacilityTask);
					public "getApiKey-6IiKQno"(): string;
					public getClosestFacilityTaskInfo(): com.arcgismaps.tasks.networkanalysis.ClosestFacilityTaskInfo;
					public cancelLoad(): void;
					public "setApiKey-lGpodAQ"(param0: string): void;
					public "createDefaultParameters-IoAF18A"(param0: any): any;
					public getTransportationNetworkDataset(): com.arcgismaps.data.TransportationNetworkDataset;
					public constructor(param0: string, param1: string);
					public "solveClosestFacility-gIAlu-s"(param0: com.arcgismaps.tasks.networkanalysis.ClosestFacilityParameters, param1: any): any;
					public constructor(param0: com.arcgismaps.data.TransportationNetworkDataset);
					public getUrl(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ClosestFacilityTask {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreClosestFacilityTask,com.arcgismaps.tasks.networkanalysis.ClosestFacilityTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ClosestFacilityTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ClosestFacilityTaskInfo {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityTaskInfo>;
					public getCostAttributes(): java.util.Map<string,com.arcgismaps.tasks.networkanalysis.CostAttribute>;
					public getDirectionsLanguage(): string;
					public getDirectionsSupport(): com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport;
					public getRestrictionAttributes(): java.util.Map<string,com.arcgismaps.tasks.networkanalysis.RestrictionAttribute>;
					public getDefaultImpedanceCutoff(): number;
					public getSupportedRestrictionUsageParameterValues(): java.util.List<string>;
					public getStartTimeUsage(): com.arcgismaps.tasks.networkanalysis.StartTimeUsage;
					public getDirectionsStyle(): com.arcgismaps.tasks.networkanalysis.DirectionsStyle;
					public getTravelModes(): java.util.List<com.arcgismaps.tasks.networkanalysis.TravelMode>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreClosestFacilityTaskInfo);
					public getStartTime(): java.time.Instant;
					public getCoreClosestFacilityTaskInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreClosestFacilityTaskInfo;
					public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getDirectionsDistanceUnits(): com.arcgismaps.UnitSystem;
					public getNetworkName(): string;
					public getAccumulateAttributeNames(): java.util.List<string>;
					public getDefaultTargetFacilityCount(): number;
					public getMaxLocatingDistance(): number;
					public getTravelDirection(): com.arcgismaps.tasks.networkanalysis.TravelDirection;
					public getDefaultTravelModeName(): string;
					public getRouteShapeType(): com.arcgismaps.tasks.networkanalysis.RouteShapeType;
					public getSupportedLanguages(): java.util.List<string>;
				}
				export module ClosestFacilityTaskInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreClosestFacilityTaskInfo,com.arcgismaps.tasks.networkanalysis.ClosestFacilityTaskInfo> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ClosestFacilityTaskInfo.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ClosestFacilityTaskInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class CostAttribute {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CostAttribute>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreCostAttribute);
					public getCoreCostAttribute$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCostAttribute;
					public getUnit(): com.arcgismaps.tasks.networkanalysis.AttributeUnit;
					public getParameterValues(): java.util.Map<string,any>;
				}
				export module CostAttribute {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreCostAttribute,com.arcgismaps.tasks.networkanalysis.CostAttribute> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CostAttribute.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.CostAttribute.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class CurbApproach {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CurbApproach>;
					public getCoreCurbApproach$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreCurbApproach;
				}
				export module CurbApproach {
					export class EitherSide extends com.arcgismaps.tasks.networkanalysis.CurbApproach {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CurbApproach.EitherSide>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.CurbApproach.EitherSide;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CurbApproach.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.CurbApproach.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreCurbApproach): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CurbApproach.Factory.WhenMappings>;
						}
					}
					export class LeftSide extends com.arcgismaps.tasks.networkanalysis.CurbApproach {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CurbApproach.LeftSide>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.CurbApproach.LeftSide;
					}
					export class NoUTurn extends com.arcgismaps.tasks.networkanalysis.CurbApproach {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CurbApproach.NoUTurn>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.CurbApproach.NoUTurn;
					}
					export class RightSide extends com.arcgismaps.tasks.networkanalysis.CurbApproach {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CurbApproach.RightSide>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.CurbApproach.RightSide;
					}
					export class Unknown extends com.arcgismaps.tasks.networkanalysis.CurbApproach {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.CurbApproach.Unknown>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.CurbApproach.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class DirectionEvent {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionEvent>;
					public getEstimatedArrivalTimeShift(): number;
					public getEventMessages(): java.util.List<string>;
					public getEventText(): string;
					public getEstimatedArrivalTime(): java.time.Instant;
					public getGeometry(): com.arcgismaps.geometry.Point;
					public getCoreDirectionEvent$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDirectionEvent;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDirectionEvent);
				}
				export module DirectionEvent {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDirectionEvent,com.arcgismaps.tasks.networkanalysis.DirectionEvent> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionEvent.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionEvent.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class DirectionManeuver {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuver>;
					public getEstimatedArrivalTimeShift(): number;
					public getFromLevel(): number;
					public getLength(): number;
					public getManeuverType(): com.arcgismaps.tasks.networkanalysis.DirectionManeuverType;
					public getDirectionText(): string;
					public getCoreDirectionManeuver$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDirectionManeuver;
					public getDuration(): number;
					public getGeometry(): com.arcgismaps.geometry.Geometry;
					public getEstimatedArrivalTime(): java.time.Instant;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDirectionManeuver);
					public getManeuverMessages(): java.util.List<com.arcgismaps.tasks.networkanalysis.DirectionMessage>;
					public getToLevel(): number;
					public getDirectionEvents(): java.util.List<com.arcgismaps.tasks.networkanalysis.DirectionEvent>;
				}
				export module DirectionManeuver {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDirectionManeuver,com.arcgismaps.tasks.networkanalysis.DirectionManeuver> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuver.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuver.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class DirectionManeuverType {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType>;
					public getCoreDirectionManeuverType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDirectionManeuverType;
				}
				export module DirectionManeuverType {
					export class BearLeft extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.BearLeft>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.BearLeft;
					}
					export class BearRight extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.BearRight>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.BearRight;
					}
					export class Depart extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Depart>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Depart;
					}
					export class DoorPassage extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.DoorPassage>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.DoorPassage;
					}
					export class Elevator extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Elevator>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Elevator;
					}
					export class EndOfFerry extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.EndOfFerry>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.EndOfFerry;
					}
					export class Escalator extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Escalator>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Escalator;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDirectionManeuverType): com.arcgismaps.tasks.networkanalysis.DirectionManeuverType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Factory.WhenMappings>;
						}
					}
					export class Ferry extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Ferry>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Ferry;
					}
					export class ForkCenter extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.ForkCenter>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.ForkCenter;
					}
					export class ForkLeft extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.ForkLeft>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.ForkLeft;
					}
					export class ForkRight extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.ForkRight>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.ForkRight;
					}
					export class HighwayChange extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.HighwayChange>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.HighwayChange;
					}
					export class HighwayExit extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.HighwayExit>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.HighwayExit;
					}
					export class HighwayMerge extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.HighwayMerge>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.HighwayMerge;
					}
					export class PedestrianRamp extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.PedestrianRamp>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.PedestrianRamp;
					}
					export class RampLeft extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.RampLeft>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.RampLeft;
					}
					export class RampRight extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.RampRight>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.RampRight;
					}
					export class Roundabout extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Roundabout>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Roundabout;
					}
					export class SharpLeft extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.SharpLeft>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.SharpLeft;
					}
					export class SharpRight extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.SharpRight>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.SharpRight;
					}
					export class Stairs extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Stairs>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Stairs;
					}
					export class Stop extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Stop>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Stop;
					}
					export class Straight extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Straight>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Straight;
					}
					export class TripItem extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TripItem>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TripItem;
					}
					export class TurnLeft extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnLeft>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnLeft;
					}
					export class TurnLeftLeft extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnLeftLeft>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnLeftLeft;
					}
					export class TurnLeftRight extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnLeftRight>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnLeftRight;
					}
					export class TurnRight extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnRight>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnRight;
					}
					export class TurnRightLeft extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnRightLeft>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnRightLeft;
					}
					export class TurnRightRight extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnRightRight>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.TurnRightRight;
					}
					export class UTurn extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.UTurn>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.UTurn;
					}
					export class Unknown extends com.arcgismaps.tasks.networkanalysis.DirectionManeuverType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Unknown>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionManeuverType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class DirectionMessage {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessage>;
					public getType(): com.arcgismaps.tasks.networkanalysis.DirectionMessageType;
					public getText(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDirectionMessage);
					public getCoreDirectionMessage$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDirectionMessage;
				}
				export module DirectionMessage {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDirectionMessage,com.arcgismaps.tasks.networkanalysis.DirectionMessage> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessage.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionMessage.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class DirectionMessageType {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessageType>;
					public getCoreDirectionMessageType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDirectionMessageType;
				}
				export module DirectionMessageType {
					export class AlternativeName extends com.arcgismaps.tasks.networkanalysis.DirectionMessageType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessageType.AlternativeName>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionMessageType.AlternativeName;
					}
					export class Branch extends com.arcgismaps.tasks.networkanalysis.DirectionMessageType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessageType.Branch>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionMessageType.Branch;
					}
					export class CrossStreet extends com.arcgismaps.tasks.networkanalysis.DirectionMessageType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessageType.CrossStreet>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionMessageType.CrossStreet;
					}
					export class Exit extends com.arcgismaps.tasks.networkanalysis.DirectionMessageType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessageType.Exit>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionMessageType.Exit;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessageType.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionMessageType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDirectionMessageType): com.arcgismaps.tasks.networkanalysis.DirectionMessageType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessageType.Factory.WhenMappings>;
						}
					}
					export class StreetName extends com.arcgismaps.tasks.networkanalysis.DirectionMessageType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessageType.StreetName>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionMessageType.StreetName;
					}
					export class Toward extends com.arcgismaps.tasks.networkanalysis.DirectionMessageType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionMessageType.Toward>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionMessageType.Toward;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class DirectionsStyle {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionsStyle>;
					public getCoreDirectionsStyle$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDirectionsStyle;
				}
				export module DirectionsStyle {
					export class Campus extends com.arcgismaps.tasks.networkanalysis.DirectionsStyle {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionsStyle.Campus>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionsStyle.Campus;
					}
					export class Desktop extends com.arcgismaps.tasks.networkanalysis.DirectionsStyle {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionsStyle.Desktop>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionsStyle.Desktop;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionsStyle.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionsStyle.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDirectionsStyle): com.arcgismaps.tasks.networkanalysis.DirectionsStyle;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionsStyle.Factory.WhenMappings>;
						}
					}
					export class Navigation extends com.arcgismaps.tasks.networkanalysis.DirectionsStyle {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.DirectionsStyle.Navigation>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.DirectionsStyle.Navigation;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class Facility {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.Facility>;
					public getCurrentBearingTolerance(): number;
					public setNavigationSpeed(param0: number): void;
					public getCoreFacility$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreFacility;
					public setCurbApproach(param0: com.arcgismaps.tasks.networkanalysis.CurbApproach): void;
					public setNavigationLatency(param0: number): void;
					public getNetworkLocation(): com.arcgismaps.tasks.networkanalysis.NetworkLocation;
					public getFacilityId(): number;
					public setImpedanceCutoff(param0: number): void;
					public getImpedanceCutoff(): number;
					public setNetworkLocation(param0: com.arcgismaps.tasks.networkanalysis.NetworkLocation): void;
					public getNavigationSpeed(): number;
					public clone(): com.arcgismaps.tasks.networkanalysis.Facility;
					public getCurrentBearing(): number;
					public setCurrentBearingTolerance(param0: number): void;
					public getLocationStatus(): com.arcgismaps.tasks.networkanalysis.LocationStatus;
					public getDistanceToNetworkLocation(): number;
					public setFacilityId(param0: number): void;
					public setName(param0: string): void;
					public setCurrentBearing(param0: number): void;
					public getCurbApproach(): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					public getName(): string;
					public getNavigationLatency(): number;
					public setAddedCost(param0: string, param1: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreFacility);
					public getAddedCost(param0: string): number;
					public constructor(param0: com.arcgismaps.geometry.Point);
					public getGeometry(): com.arcgismaps.geometry.Point;
				}
				export module Facility {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreFacility,com.arcgismaps.tasks.networkanalysis.Facility> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.Facility.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.Facility.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class Incident {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.Incident>;
					public getCurrentBearingTolerance(): number;
					public setNavigationSpeed(param0: number): void;
					public setTargetFacilityCount(param0: number): void;
					public getTargetFacilityCount(): number;
					public setCurbApproach(param0: com.arcgismaps.tasks.networkanalysis.CurbApproach): void;
					public getIncidentId(): number;
					public setNavigationLatency(param0: number): void;
					public getNetworkLocation(): com.arcgismaps.tasks.networkanalysis.NetworkLocation;
					public constructor(param0: com.arcgismaps.internal.jni.CoreIncident);
					public setImpedanceCutoff(param0: number): void;
					public getImpedanceCutoff(): number;
					public setNetworkLocation(param0: com.arcgismaps.tasks.networkanalysis.NetworkLocation): void;
					public clone(): com.arcgismaps.tasks.networkanalysis.Incident;
					public getNavigationSpeed(): number;
					public getCurrentBearing(): number;
					public setCurrentBearingTolerance(param0: number): void;
					public getLocationStatus(): com.arcgismaps.tasks.networkanalysis.LocationStatus;
					public getDistanceToNetworkLocation(): number;
					public setName(param0: string): void;
					public setCurrentBearing(param0: number): void;
					public setIncidentId(param0: number): void;
					public getCurbApproach(): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					public getName(): string;
					public getNavigationLatency(): number;
					public setAddedCost(param0: string, param1: number): void;
					public getAddedCost(param0: string): number;
					public getCoreIncident$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreIncident;
					public constructor(param0: com.arcgismaps.geometry.Point);
					public getGeometry(): com.arcgismaps.geometry.Point;
				}
				export module Incident {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreIncident,com.arcgismaps.tasks.networkanalysis.Incident> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.Incident.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.Incident.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class LocationStatus {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.LocationStatus>;
					public getCoreLocationStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreLocationStatus;
				}
				export module LocationStatus {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.LocationStatus.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.LocationStatus.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreLocationStatus): com.arcgismaps.tasks.networkanalysis.LocationStatus;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.LocationStatus.Factory.WhenMappings>;
						}
					}
					export class NotLocated extends com.arcgismaps.tasks.networkanalysis.LocationStatus {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.LocationStatus.NotLocated>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.LocationStatus.NotLocated;
					}
					export class NotReached extends com.arcgismaps.tasks.networkanalysis.LocationStatus {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.LocationStatus.NotReached>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.LocationStatus.NotReached;
					}
					export class OnClosest extends com.arcgismaps.tasks.networkanalysis.LocationStatus {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.LocationStatus.OnClosest>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.LocationStatus.OnClosest;
					}
					export class OnClosestNotRestricted extends com.arcgismaps.tasks.networkanalysis.LocationStatus {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.LocationStatus.OnClosestNotRestricted>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.LocationStatus.OnClosestNotRestricted;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class NetworkDirectionsSupport {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport>;
					public getCoreNetworkDirectionsSupport$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport;
				}
				export module NetworkDirectionsSupport {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreNetworkDirectionsSupport): com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport.Factory.WhenMappings>;
						}
					}
					export class Supported extends com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport.Supported>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport.Supported;
					}
					export class Unknown extends com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport.Unknown>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport.Unknown;
					}
					export class Unsupported extends com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport.Unsupported>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport.Unsupported;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class NetworkLocation {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.NetworkLocation>;
					public setOnRightSideOfSource(param0: boolean): void;
					public getOnRightSideOfSource(): boolean;
					public getSourceObjectPosition(): com.arcgismaps.tasks.networkanalysis.SourceObjectPosition;
					public constructor();
					public setSourceName(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreNetworkLocation);
					public getCoreNetworkLocation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreNetworkLocation;
					public setSourceObjectPosition(param0: com.arcgismaps.tasks.networkanalysis.SourceObjectPosition): void;
					public getSourceName(): string;
				}
				export module NetworkLocation {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreNetworkLocation,com.arcgismaps.tasks.networkanalysis.NetworkLocation> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.NetworkLocation.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.NetworkLocation.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class PointBarrier {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.PointBarrier>;
					public setBarrierId(param0: number): void;
					public clone(): com.arcgismaps.tasks.networkanalysis.PointBarrier;
					public getLocationStatus(): com.arcgismaps.tasks.networkanalysis.LocationStatus;
					public getType(): com.arcgismaps.tasks.networkanalysis.BarrierType;
					public setCurbApproach(param0: com.arcgismaps.tasks.networkanalysis.CurbApproach): void;
					public setName(param0: string): void;
					public getCurbApproach(): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					public setGeometry(param0: com.arcgismaps.geometry.Point): void;
					public getName(): string;
					public setAddedCost(param0: string, param1: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePointBarrier);
					public setType(param0: com.arcgismaps.tasks.networkanalysis.BarrierType): void;
					public getBarrierId(): number;
					public getAddedCost(param0: string): number;
					public getCorePointBarrier$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePointBarrier;
					public constructor(param0: com.arcgismaps.geometry.Point);
					public getGeometry(): com.arcgismaps.geometry.Point;
				}
				export module PointBarrier {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePointBarrier,com.arcgismaps.tasks.networkanalysis.PointBarrier> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.PointBarrier.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.PointBarrier.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class PolygonBarrier {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.PolygonBarrier>;
					public getCorePolygonBarrier$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePolygonBarrier;
					public getGeometry(): com.arcgismaps.geometry.Polygon;
					public setGeometry(param0: com.arcgismaps.geometry.Polygon): void;
					public setBarrierId(param0: number): void;
					public constructor(param0: com.arcgismaps.internal.jni.CorePolygonBarrier);
					public getType(): com.arcgismaps.tasks.networkanalysis.BarrierType;
					public setScaleFactorForCost(param0: string, param1: number): void;
					public setName(param0: string): void;
					public constructor(param0: com.arcgismaps.geometry.Polygon);
					public getScaleFactorForCost(param0: string): number;
					public getName(): string;
					public setType(param0: com.arcgismaps.tasks.networkanalysis.BarrierType): void;
					public getBarrierId(): number;
					public clone(): com.arcgismaps.tasks.networkanalysis.PolygonBarrier;
				}
				export module PolygonBarrier {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePolygonBarrier,com.arcgismaps.tasks.networkanalysis.PolygonBarrier> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.PolygonBarrier.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.PolygonBarrier.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class PolylineBarrier {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.PolylineBarrier>;
					public constructor(param0: com.arcgismaps.internal.jni.CorePolylineBarrier);
					public constructor(param0: com.arcgismaps.geometry.Polyline);
					public setBarrierId(param0: number): void;
					public getType(): com.arcgismaps.tasks.networkanalysis.BarrierType;
					public getCorePolylineBarrier$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePolylineBarrier;
					public setScaleFactorForCost(param0: string, param1: number): void;
					public setName(param0: string): void;
					public getScaleFactorForCost(param0: string): number;
					public setGeometry(param0: com.arcgismaps.geometry.Polyline): void;
					public getGeometry(): com.arcgismaps.geometry.Polyline;
					public getName(): string;
					public clone(): com.arcgismaps.tasks.networkanalysis.PolylineBarrier;
					public setType(param0: com.arcgismaps.tasks.networkanalysis.BarrierType): void;
					public getBarrierId(): number;
				}
				export module PolylineBarrier {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CorePolylineBarrier,com.arcgismaps.tasks.networkanalysis.PolylineBarrier> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.PolylineBarrier.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.PolylineBarrier.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class RestrictionAttribute {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RestrictionAttribute>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRestrictionAttribute);
					public getRestrictionUsageParameterName(): string;
					public getCoreRestrictionAttribute$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRestrictionAttribute;
					public getParameterValues(): java.util.Map<string,any>;
				}
				export module RestrictionAttribute {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRestrictionAttribute,com.arcgismaps.tasks.networkanalysis.RestrictionAttribute> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RestrictionAttribute.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.RestrictionAttribute.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class Route {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.Route>;
					public getDirectionManeuvers(): java.util.List<com.arcgismaps.tasks.networkanalysis.DirectionManeuver>;
					public getTravelTime(): number;
					public getViolationTime(): number;
					public getWaitTime(): number;
					public getEndTimeShift(): number;
					public getStartTimeShift(): number;
					public getStops(): java.util.List<com.arcgismaps.tasks.networkanalysis.Stop>;
					public getStartTime(): java.time.Instant;
					public getCoreRoute$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRoute;
					public getRouteGeometry(): com.arcgismaps.geometry.Polyline;
					public getTotalLength(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRoute);
					public getEndTime(): java.time.Instant;
					public getRouteName(): string;
					public getTotalTime(): number;
					public getCost(param0: string): number;
				}
				export module Route {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRoute,com.arcgismaps.tasks.networkanalysis.Route> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.Route.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.Route.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class RouteParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteParameters>;
					public setReturnPointBarriers(param0: boolean): void;
					public getReturnPolylineBarriers(): boolean;
					public setStops(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public getDirectionsStyle(): com.arcgismaps.tasks.networkanalysis.DirectionsStyle;
					public setTravelMode(param0: com.arcgismaps.tasks.networkanalysis.TravelMode): void;
					public constructor();
					public getPreserveFirstStop(): boolean;
					public getReturnRoutes(): boolean;
					public getCoreRouteParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRouteParameters;
					public setReturnStops(param0: boolean): void;
					public setPolygonBarriers(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.PolygonBarrier>): void;
					public setPointBarriers(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.PointBarrier>): void;
					public setOutputSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
					public setReturnDirections(param0: boolean): void;
					public clearStops(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRouteParameters);
					public setRouteShapeType(param0: com.arcgismaps.tasks.networkanalysis.RouteShapeType): void;
					public setFindBestSequence(param0: boolean): void;
					public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public clearPolygonBarriers(): void;
					public setPreserveLastStop(param0: boolean): void;
					public getDirectionsDistanceUnits(): com.arcgismaps.UnitSystem;
					public setStops(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.Stop>): void;
					public setDirectionsDistanceUnits(param0: com.arcgismaps.UnitSystem): void;
					public getRouteShapeType(): com.arcgismaps.tasks.networkanalysis.RouteShapeType;
					public getReturnPolygonBarriers(): boolean;
					public setReturnPolygonBarriers(param0: boolean): void;
					public setReturnPolylineBarriers(param0: boolean): void;
					public getDirectionsLanguage(): string;
					public clearPolylineBarriers(): void;
					public getStartTime(): java.time.Instant;
					public setPolygonBarriers(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setDirectionsStyle(param0: com.arcgismaps.tasks.networkanalysis.DirectionsStyle): void;
					public setSearchWhereClause(param0: string, param1: string): void;
					public getFindBestSequence(): boolean;
					public getReturnPointBarriers(): boolean;
					public getReturnDirections(): boolean;
					public setStartTime(param0: java.time.Instant): void;
					public setReturnRoutes(param0: boolean): void;
					public clearPointBarriers(): void;
					public getTravelMode(): com.arcgismaps.tasks.networkanalysis.TravelMode;
					public getPreserveLastStop(): boolean;
					public setPolylineBarriers(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public clone(): com.arcgismaps.tasks.networkanalysis.RouteParameters;
					public setDirectionsLanguage(param0: string): void;
					public getAccumulateAttributeNames(): java.util.List<string>;
					public setPointBarriers(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setPreserveFirstStop(param0: boolean): void;
					public getSearchWhereClause(param0: string): string;
					public getReturnStops(): boolean;
					public setPolylineBarriers(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.PolylineBarrier>): void;
				}
				export module RouteParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRouteParameters,com.arcgismaps.tasks.networkanalysis.RouteParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.RouteParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class RouteResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteResult>;
					public getPolygonBarriers(): java.util.List<com.arcgismaps.tasks.networkanalysis.PolygonBarrier>;
					public getDirectionsLanguage(): string;
					public getPolylineBarriers(): java.util.List<com.arcgismaps.tasks.networkanalysis.PolylineBarrier>;
					public getMessages(): java.util.List<string>;
					public getCoreRouteResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRouteResult;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRouteResult);
					public getRoutes(): java.util.List<com.arcgismaps.tasks.networkanalysis.Route>;
					public getPointBarriers(): java.util.List<com.arcgismaps.tasks.networkanalysis.PointBarrier>;
				}
				export module RouteResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRouteResult,com.arcgismaps.tasks.networkanalysis.RouteResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.RouteResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class RouteShapeType {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteShapeType>;
					public getCoreRouteShapeType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRouteShapeType;
				}
				export module RouteShapeType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteShapeType.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.RouteShapeType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreRouteShapeType): com.arcgismaps.tasks.networkanalysis.RouteShapeType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteShapeType.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.tasks.networkanalysis.RouteShapeType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteShapeType.None>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.RouteShapeType.None;
					}
					export class StraightLine extends com.arcgismaps.tasks.networkanalysis.RouteShapeType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteShapeType.StraightLine>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.RouteShapeType.StraightLine;
					}
					export class TrueShapeWithMeasures extends com.arcgismaps.tasks.networkanalysis.RouteShapeType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteShapeType.TrueShapeWithMeasures>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.RouteShapeType.TrueShapeWithMeasures;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class RouteTask implements com.arcgismaps.ApiKeyResource, com.arcgismaps.Loadable, com.arcgismaps.Resourceable {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteTask>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public getCoreRouteTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRouteTask;
					public "getApiKey-6IiKQno"(): string;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRouteTask);
					public "createParameters-gIAlu-s"(param0: com.arcgismaps.data.FeatureCollection, param1: any): any;
					public "setApiKey-lGpodAQ"(param0: string): void;
					public "createDefaultParameters-IoAF18A"(param0: any): any;
					public getTransportationNetworkDataset(): com.arcgismaps.data.TransportationNetworkDataset;
					public constructor(param0: string, param1: string);
					public constructor(param0: com.arcgismaps.data.TransportationNetworkDataset);
					public getRouteTaskInfo(): com.arcgismaps.tasks.networkanalysis.RouteTaskInfo;
					public "solveRoute-gIAlu-s"(param0: com.arcgismaps.tasks.networkanalysis.RouteParameters, param1: any): any;
					public getUrl(): string;
					public "refreshRoute-bMdYcbs$arcgis_maps_any_release"(param0: com.arcgismaps.tasks.networkanalysis.RouteResult, param1: number, param2: com.arcgismaps.tasks.networkanalysis.TravelMode, param3: number, param4: com.arcgismaps.location.Location, param5: java.time.Instant, param6: any): any;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "load-IoAF18A"(param0: any): any;
					public "createParameters-gIAlu-s"(param0: com.arcgismaps.mapping.PortalItem, param1: any): any;
				}
				export module RouteTask {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteTask.Companion>;
						public "createRouteResult-gIAlu-s"(param0: com.arcgismaps.data.FeatureCollection, param1: any): any;
						public "createRouteResult-gIAlu-s"(param0: com.arcgismaps.mapping.PortalItem, param1: any): any;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRouteTask,com.arcgismaps.tasks.networkanalysis.RouteTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.RouteTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class RouteTaskInfo {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteTaskInfo>;
					public getCostAttributes(): java.util.Map<string,com.arcgismaps.tasks.networkanalysis.CostAttribute>;
					public getDirectionsLanguage(): string;
					public getDirectionsSupport(): com.arcgismaps.tasks.networkanalysis.NetworkDirectionsSupport;
					public getRestrictionAttributes(): java.util.Map<string,com.arcgismaps.tasks.networkanalysis.RestrictionAttribute>;
					public getSupportedRestrictionUsageParameterValues(): java.util.List<string>;
					public getDirectionsStyle(): com.arcgismaps.tasks.networkanalysis.DirectionsStyle;
					public getTravelModes(): java.util.List<com.arcgismaps.tasks.networkanalysis.TravelMode>;
					public getCoreRouteTaskInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreRouteTaskInfo;
					public getStartTime(): java.time.Instant;
					public getPreserveLastStop(): boolean;
					public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getDirectionsDistanceUnits(): com.arcgismaps.UnitSystem;
					public getNetworkName(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreRouteTaskInfo);
					public getAccumulateAttributeNames(): java.util.List<string>;
					public getMaxLocatingDistance(): number;
					public getFindBestSequence(): boolean;
					public getPreserveFirstStop(): boolean;
					public getDefaultTravelModeName(): string;
					public getRouteShapeType(): com.arcgismaps.tasks.networkanalysis.RouteShapeType;
					public getSupportedLanguages(): java.util.List<string>;
					public getSupportsRerouting(): boolean;
				}
				export module RouteTaskInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreRouteTaskInfo,com.arcgismaps.tasks.networkanalysis.RouteTaskInfo> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.RouteTaskInfo.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.RouteTaskInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ServiceAreaFacility {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaFacility>;
					public getCurrentBearingTolerance(): number;
					public setNavigationSpeed(param0: number): void;
					public setCurbApproach(param0: com.arcgismaps.tasks.networkanalysis.CurbApproach): void;
					public setNavigationLatency(param0: number): void;
					public getNetworkLocation(): com.arcgismaps.tasks.networkanalysis.NetworkLocation;
					public getFacilityId(): number;
					public setNetworkLocation(param0: com.arcgismaps.tasks.networkanalysis.NetworkLocation): void;
					public getNavigationSpeed(): number;
					public getImpedanceCutoffs(): java.util.List<java.lang.Double>;
					public getCurrentBearing(): number;
					public setCurrentBearingTolerance(param0: number): void;
					public getLocationStatus(): com.arcgismaps.tasks.networkanalysis.LocationStatus;
					public getDistanceToNetworkLocation(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreServiceAreaFacility);
					public setFacilityId(param0: number): void;
					public setName(param0: string): void;
					public setCurrentBearing(param0: number): void;
					public getCurbApproach(): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					public getName(): string;
					public getNavigationLatency(): number;
					public setAddedCost(param0: string, param1: number): void;
					public getCoreServiceAreaFacility$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaFacility;
					public getAddedCost(param0: string): number;
					public constructor(param0: com.arcgismaps.geometry.Point);
					public getGeometry(): com.arcgismaps.geometry.Point;
					public clone(): com.arcgismaps.tasks.networkanalysis.ServiceAreaFacility;
				}
				export module ServiceAreaFacility {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceAreaFacility,com.arcgismaps.tasks.networkanalysis.ServiceAreaFacility> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaFacility.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaFacility.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class ServiceAreaOverlapGeometry {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry>;
					public getCoreServiceAreaOverlapGeometry$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry;
				}
				export module ServiceAreaOverlapGeometry {
					export class Dissolve extends com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry.Dissolve>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry.Dissolve;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreServiceAreaOverlapGeometry): com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry.Factory.WhenMappings>;
						}
					}
					export class Overlap extends com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry.Overlap>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry.Overlap;
					}
					export class Split extends com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry.Split>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry.Split;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ServiceAreaParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaParameters>;
					public setReturnPolygonBarriers(param0: boolean): void;
					public setReturnPolygons(param0: boolean): void;
					public setReturnPolylineBarriers(param0: boolean): void;
					public getGeometryAtOverlap(): com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry;
					public setReturnPointBarriers(param0: boolean): void;
					public getReturnPolylineBarriers(): boolean;
					public getPolygonBufferDistance(): number;
					public setReturnPolylines(param0: boolean): void;
					public clearPolylineBarriers(): void;
					public getStartTime(): java.time.Instant;
					public setTravelMode(param0: com.arcgismaps.tasks.networkanalysis.TravelMode): void;
					public setPolygonBarriers(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setSearchWhereClause(param0: string, param1: string): void;
					public getReturnPointBarriers(): boolean;
					public getReturnPolylines(): boolean;
					public getTravelDirection(): com.arcgismaps.tasks.networkanalysis.TravelDirection;
					public setTravelDirection(param0: com.arcgismaps.tasks.networkanalysis.TravelDirection): void;
					public setGeometryAtCutoff(param0: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry): void;
					public getCoreServiceAreaParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaParameters;
					public setStartTime(param0: java.time.Instant): void;
					public clone(): com.arcgismaps.tasks.networkanalysis.ServiceAreaParameters;
					public setPolygonBarriers(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.PolygonBarrier>): void;
					public setGeometryAtOverlap(param0: com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry): void;
					public setPointBarriers(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.PointBarrier>): void;
					public getPolygonDetail(): com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail;
					public setFacilities(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setPolygonDetail(param0: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail): void;
					public setOutputSpatialReference(param0: com.arcgismaps.geometry.SpatialReference): void;
					public clearFacilities(): void;
					public getDefaultImpedanceCutoffs(): java.util.List<java.lang.Double>;
					public clearPointBarriers(): void;
					public setPolygonBufferDistance(param0: number): void;
					public getReturnPolygons(): boolean;
					public getTravelMode(): com.arcgismaps.tasks.networkanalysis.TravelMode;
					public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public clearPolygonBarriers(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreServiceAreaParameters);
					public setPolylineBarriers(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public getGeometryAtCutoff(): com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry;
					public getAccumulateAttributeNames(): java.util.List<string>;
					public setPointBarriers(param0: com.arcgismaps.data.ArcGISFeatureTable, param1: com.arcgismaps.data.QueryParameters): void;
					public setFacilities(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.ServiceAreaFacility>): void;
					public getSearchWhereClause(param0: string): string;
					public setPolylineBarriers(param0: java.lang.Iterable<com.arcgismaps.tasks.networkanalysis.PolylineBarrier>): void;
					public getReturnPolygonBarriers(): boolean;
				}
				export module ServiceAreaParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceAreaParameters,com.arcgismaps.tasks.networkanalysis.ServiceAreaParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ServiceAreaPolygon {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygon>;
					public getGeometry(): com.arcgismaps.geometry.Polygon;
					public getCoreServiceAreaPolygon$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaPolygon;
					public constructor(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolygon);
					public getFromImpedanceCutoff(): number;
					public getToImpedanceCutoff(): number;
				}
				export module ServiceAreaPolygon {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceAreaPolygon,com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygon> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygon.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygon.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class ServiceAreaPolygonCutoffGeometry {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry>;
					public getCoreServiceAreaPolygonCutoffGeometry$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry;
				}
				export module ServiceAreaPolygonCutoffGeometry {
					export class Disks extends com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry.Disks>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry.Disks;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolygonCutoffGeometry): com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry.Factory.WhenMappings>;
						}
					}
					export class Rings extends com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry.Rings>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry.Rings;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class ServiceAreaPolygonDetail {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail>;
					public getCoreServiceAreaPolygonDetail$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail;
				}
				export module ServiceAreaPolygonDetail {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolygonDetail): com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail.Factory.WhenMappings>;
						}
					}
					export class Generalized extends com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail.Generalized>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail.Generalized;
					}
					export class High extends com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail.High>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail.High;
					}
					export class Standard extends com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail.Standard>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail.Standard;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ServiceAreaPolyline {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolyline>;
					public getFromCumulativeCost(param0: string): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreServiceAreaPolyline);
					public getFromNetworkLocation(): com.arcgismaps.tasks.networkanalysis.NetworkLocation;
					public getGeometry(): com.arcgismaps.geometry.Polyline;
					public getToNetworkLocation(): com.arcgismaps.tasks.networkanalysis.NetworkLocation;
					public getToCumulativeCost(param0: string): number;
					public getCoreServiceAreaPolyline$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaPolyline;
				}
				export module ServiceAreaPolyline {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceAreaPolyline,com.arcgismaps.tasks.networkanalysis.ServiceAreaPolyline> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolyline.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaPolyline.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ServiceAreaResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaResult>;
					public getPolygonBarriers(): java.util.List<com.arcgismaps.tasks.networkanalysis.PolygonBarrier>;
					public getPolylineBarriers(): java.util.List<com.arcgismaps.tasks.networkanalysis.PolylineBarrier>;
					public getResultPolylines(param0: number): java.util.List<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolyline>;
					public getCoreServiceAreaResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaResult;
					public getMessages(): java.util.List<string>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreServiceAreaResult);
					public getFacilities(): java.util.List<com.arcgismaps.tasks.networkanalysis.ServiceAreaFacility>;
					public getResultPolygons(param0: number): java.util.List<com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygon>;
					public getPointBarriers(): java.util.List<com.arcgismaps.tasks.networkanalysis.PointBarrier>;
				}
				export module ServiceAreaResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceAreaResult,com.arcgismaps.tasks.networkanalysis.ServiceAreaResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ServiceAreaTask implements com.arcgismaps.ApiKeyResource, com.arcgismaps.Loadable, com.arcgismaps.Resourceable {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaTask>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public getServiceAreaTaskInfo(): com.arcgismaps.tasks.networkanalysis.ServiceAreaTaskInfo;
					public "getApiKey-6IiKQno"(): string;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreServiceAreaTask);
					public "setApiKey-lGpodAQ"(param0: string): void;
					public "createDefaultParameters-IoAF18A"(param0: any): any;
					public getTransportationNetworkDataset(): com.arcgismaps.data.TransportationNetworkDataset;
					public constructor(param0: string, param1: string);
					public constructor(param0: com.arcgismaps.data.TransportationNetworkDataset);
					public "solveServiceArea-gIAlu-s"(param0: com.arcgismaps.tasks.networkanalysis.ServiceAreaParameters, param1: any): any;
					public getCoreServiceAreaTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaTask;
					public getUrl(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public "load-IoAF18A"(param0: any): any;
				}
				export module ServiceAreaTask {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceAreaTask,com.arcgismaps.tasks.networkanalysis.ServiceAreaTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class ServiceAreaTaskInfo {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaTaskInfo>;
					public getCoreServiceAreaTaskInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreServiceAreaTaskInfo;
					public getCostAttributes(): java.util.Map<string,com.arcgismaps.tasks.networkanalysis.CostAttribute>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreServiceAreaTaskInfo);
					public getDefaultImpedanceCutoffs(): java.util.List<java.lang.Double>;
					public getRestrictionAttributes(): java.util.Map<string,com.arcgismaps.tasks.networkanalysis.RestrictionAttribute>;
					public getGeometryAtOverlap(): com.arcgismaps.tasks.networkanalysis.ServiceAreaOverlapGeometry;
					public getSupportedRestrictionUsageParameterValues(): java.util.List<string>;
					public getPolygonBufferDistance(): number;
					public getReturnPolygons(): boolean;
					public getTravelModes(): java.util.List<com.arcgismaps.tasks.networkanalysis.TravelMode>;
					public getStartTime(): java.time.Instant;
					public getOutputSpatialReference(): com.arcgismaps.geometry.SpatialReference;
					public getGeometryAtCutoff(): com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonCutoffGeometry;
					public getNetworkName(): string;
					public getAccumulateAttributeNames(): java.util.List<string>;
					public getMaxLocatingDistance(): number;
					public getReturnPolylines(): boolean;
					public getTravelDirection(): com.arcgismaps.tasks.networkanalysis.TravelDirection;
					public getDefaultTravelModeName(): string;
					public getPolygonDetail(): com.arcgismaps.tasks.networkanalysis.ServiceAreaPolygonDetail;
				}
				export module ServiceAreaTaskInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreServiceAreaTaskInfo,com.arcgismaps.tasks.networkanalysis.ServiceAreaTaskInfo> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.ServiceAreaTaskInfo.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.ServiceAreaTaskInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class SourceObjectPosition {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.SourceObjectPosition>;
					public setSourceObjectId(param0: number): void;
					public getSourceIndex(): number;
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: com.arcgismaps.internal.jni.CoreSourceObjectPosition);
					public setPosition(param0: number): void;
					public getPosition(): number;
					public getSourceObjectId(): number;
					public setSourceIndex(param0: number): void;
					public getCoreSourceObjectPosition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreSourceObjectPosition;
				}
				export module SourceObjectPosition {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreSourceObjectPosition,com.arcgismaps.tasks.networkanalysis.SourceObjectPosition> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.SourceObjectPosition.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.SourceObjectPosition.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class StartTimeUsage {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StartTimeUsage>;
					public getCoreStartTimeUsage$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStartTimeUsage;
				}
				export module StartTimeUsage {
					export class ArrivalTime extends com.arcgismaps.tasks.networkanalysis.StartTimeUsage {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StartTimeUsage.ArrivalTime>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.StartTimeUsage.ArrivalTime;
					}
					export class DepartureTime extends com.arcgismaps.tasks.networkanalysis.StartTimeUsage {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StartTimeUsage.DepartureTime>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.StartTimeUsage.DepartureTime;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StartTimeUsage.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.StartTimeUsage.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreStartTimeUsage): com.arcgismaps.tasks.networkanalysis.StartTimeUsage;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StartTimeUsage.Factory.WhenMappings>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class Stop {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.Stop>;
					public getCurrentBearingTolerance(): number;
					public getDepartureTimeShift(): number;
					public setNavigationSpeed(param0: number): void;
					public getArrivalTimeShift(): number;
					public getViolationTime(): number;
					public getWaitTime(): number;
					public getArrivalTime(): java.time.Instant;
					public setCurbApproach(param0: com.arcgismaps.tasks.networkanalysis.CurbApproach): void;
					public getTimeWindowEnd(): java.time.Instant;
					public setNavigationLatency(param0: number): void;
					public getNetworkLocation(): com.arcgismaps.tasks.networkanalysis.NetworkLocation;
					public setRouteName(param0: string): void;
					public getStopId(): number;
					public getSequence(): number;
					public setTimeWindowEnd(param0: java.time.Instant): void;
					public getArrivalCurbApproach(): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					public setNetworkLocation(param0: com.arcgismaps.tasks.networkanalysis.NetworkLocation): void;
					public setStopId(param0: number): void;
					public setStopType(param0: com.arcgismaps.tasks.networkanalysis.StopType): void;
					public getNavigationSpeed(): number;
					public getDepartureTime(): java.time.Instant;
					public getDepartureCurbApproach(): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					public getCurrentBearing(): number;
					public setCurrentBearingTolerance(param0: number): void;
					public getLocationStatus(): com.arcgismaps.tasks.networkanalysis.LocationStatus;
					public getDistanceToNetworkLocation(): number;
					public getStopType(): com.arcgismaps.tasks.networkanalysis.StopType;
					public getCoreStop$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStop;
					public setName(param0: string): void;
					public setCurrentBearing(param0: number): void;
					public getTimeWindowStart(): java.time.Instant;
					public getCurbApproach(): com.arcgismaps.tasks.networkanalysis.CurbApproach;
					public setGeometry(param0: com.arcgismaps.geometry.Point): void;
					public getName(): string;
					public getNavigationLatency(): number;
					public getCumulativeCost(param0: string): number;
					public setAddedCost(param0: string, param1: number): void;
					public clone(): com.arcgismaps.tasks.networkanalysis.Stop;
					public getAddedCost(param0: string): number;
					public setTimeWindowStart(param0: java.time.Instant): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreStop);
					public getRouteName(): string;
					public constructor(param0: com.arcgismaps.geometry.Point);
					public getGeometry(): com.arcgismaps.geometry.Point;
				}
				export module Stop {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreStop,com.arcgismaps.tasks.networkanalysis.Stop> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.Stop.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.Stop.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class StopType {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StopType>;
					public getCoreStopType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreStopType;
				}
				export module StopType {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StopType.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.StopType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreStopType): com.arcgismaps.tasks.networkanalysis.StopType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StopType.Factory.WhenMappings>;
						}
					}
					export class RestBreak extends com.arcgismaps.tasks.networkanalysis.StopType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StopType.RestBreak>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.StopType.RestBreak;
					}
					export class Stop extends com.arcgismaps.tasks.networkanalysis.StopType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StopType.Stop>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.StopType.Stop;
					}
					export class Waypoint extends com.arcgismaps.tasks.networkanalysis.StopType {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.StopType.Waypoint>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.StopType.Waypoint;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class TravelDirection {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.TravelDirection>;
					public getCoreTravelDirection$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTravelDirection;
				}
				export module TravelDirection {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.TravelDirection.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.TravelDirection.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreTravelDirection): com.arcgismaps.tasks.networkanalysis.TravelDirection;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.TravelDirection.Factory.WhenMappings>;
						}
					}
					export class FromFacility extends com.arcgismaps.tasks.networkanalysis.TravelDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.TravelDirection.FromFacility>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.TravelDirection.FromFacility;
					}
					export class ToFacility extends com.arcgismaps.tasks.networkanalysis.TravelDirection {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.TravelDirection.ToFacility>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.TravelDirection.ToFacility;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export class TravelMode {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.TravelMode>;
					public setDescription(param0: string): void;
					public getRestrictionAttributeNames(): java.util.List<string>;
					public setDistanceAttributeName(param0: string): void;
					public getDistanceAttributeName(): string;
					public getTimeAttributeName(): string;
					public setType(param0: string): void;
					public setOutputGeometryPrecision(param0: number): void;
					public setTimeAttributeName(param0: string): void;
					public setImpedanceAttributeName(param0: string): void;
					public setName(param0: string): void;
					public setUseHierarchy(param0: boolean): void;
					public getAttributeParameterValues(): java.util.List<com.arcgismaps.tasks.networkanalysis.AttributeParameterValue>;
					public setUTurnPolicy(param0: com.arcgismaps.tasks.networkanalysis.UTurnPolicy): void;
					public getName(): string;
					public constructor();
					public getCoreTravelMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreTravelMode;
					public getOutputGeometryPrecision(): number;
					public getDescription(): string;
					public getType(): string;
					public getUTurnPolicy(): com.arcgismaps.tasks.networkanalysis.UTurnPolicy;
					public getImpedanceAttributeName(): string;
					public constructor(param0: com.arcgismaps.internal.jni.CoreTravelMode);
					public getUseHierarchy(): boolean;
				}
				export module TravelMode {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreTravelMode,com.arcgismaps.tasks.networkanalysis.TravelMode> {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.TravelMode.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.TravelMode.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module networkanalysis {
				export abstract class UTurnPolicy {
					public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.UTurnPolicy>;
					public getCoreUTurnPolicy$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUTurnPolicy;
				}
				export module UTurnPolicy {
					export class AllowedAtDeadEnds extends com.arcgismaps.tasks.networkanalysis.UTurnPolicy {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.UTurnPolicy.AllowedAtDeadEnds>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.UTurnPolicy.AllowedAtDeadEnds;
					}
					export class AllowedAtDeadEndsAndIntersections extends com.arcgismaps.tasks.networkanalysis.UTurnPolicy {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.UTurnPolicy.AllowedAtDeadEndsAndIntersections>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.UTurnPolicy.AllowedAtDeadEndsAndIntersections;
					}
					export class AllowedAtIntersections extends com.arcgismaps.tasks.networkanalysis.UTurnPolicy {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.UTurnPolicy.AllowedAtIntersections>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.UTurnPolicy.AllowedAtIntersections;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.UTurnPolicy.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.UTurnPolicy.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUTurnPolicy): com.arcgismaps.tasks.networkanalysis.UTurnPolicy;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.UTurnPolicy.Factory.WhenMappings>;
						}
					}
					export class NotAllowed extends com.arcgismaps.tasks.networkanalysis.UTurnPolicy {
						public static class: java.lang.Class<com.arcgismaps.tasks.networkanalysis.UTurnPolicy.NotAllowed>;
						public static INSTANCE: com.arcgismaps.tasks.networkanalysis.UTurnPolicy.NotAllowed;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export abstract class DestinationTableRowFilter {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter>;
					public getCoreDestinationTableRowFilter$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDestinationTableRowFilter;
				}
				export module DestinationTableRowFilter {
					export class All extends com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter.All>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter.All;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreDestinationTableRowFilter): com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter.Factory.WhenMappings>;
						}
					}
					export class RelatedOnly extends com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter.RelatedOnly>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter.RelatedOnly;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class DownloadPreplannedOfflineMapJob extends com.arcgismaps.tasks.Job<com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapResult> {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapJob>;
					public pause(): boolean;
					public toJson(): string;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public "result-IoAF18A"(param0: any): any;
					public getParameters(): com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapParameters;
					public getCoreDownloadPreplannedOfflineMapJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapJob;
					public getServerJobId(): string;
					public start(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapJob, param1: boolean);
					public "cancel-IoAF18A"(param0: any): any;
					public getTask$arcgis_maps_any_release(): com.arcgismaps.tasks.offlinemaptask.OfflineMapTask;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public getOnlineMap(): com.arcgismaps.mapping.ArcGISMap;
					public getDownloadDirectoryPath(): string;
					public "checkStatus-IoAF18A"(param0: any): any;
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
				}
				export module DownloadPreplannedOfflineMapJob {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapJob.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapJob;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapJob,com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class DownloadPreplannedOfflineMapParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapParameters>;
					public setReferenceBasemapDirectory(param0: string): void;
					public setPreplannedMapArea(param0: com.arcgismaps.tasks.offlinemaptask.PreplannedMapArea): void;
					public setIncludeBasemap(param0: boolean): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters);
					public getPreplannedMapArea(): com.arcgismaps.tasks.offlinemaptask.PreplannedMapArea;
					public getReferenceBasemapDirectory(): string;
					public getUpdateMode(): com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode;
					public setReferenceBasemapFilename(param0: string): void;
					public setUpdateMode(param0: com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode): void;
					public constructor();
					public setContinueOnErrors(param0: boolean): void;
					public getIncludeBasemap(): boolean;
					public getCoreDownloadPreplannedOfflineMapParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters;
					public getContinueOnErrors(): boolean;
					public constructor(param0: com.arcgismaps.tasks.offlinemaptask.PreplannedMapArea);
					public getReferenceBasemapFilename(): string;
				}
				export module DownloadPreplannedOfflineMapParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapParameters,com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class DownloadPreplannedOfflineMapResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapResult>;
					public getTableErrors(): java.util.Map<com.arcgismaps.data.FeatureTable,java.lang.Throwable>;
					public getCoreDownloadPreplannedOfflineMapResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapResult;
					public getOfflineMap(): com.arcgismaps.mapping.ArcGISMap;
					public constructor(param0: com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapResult);
					public getLayerErrors(): java.util.Map<com.arcgismaps.mapping.layers.Layer,java.lang.Throwable>;
					public getMobileMapPackage(): com.arcgismaps.mapping.MobileMapPackage;
					public getHasErrors(): boolean;
				}
				export module DownloadPreplannedOfflineMapResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreDownloadPreplannedOfflineMapResult,com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class GenerateOfflineMapJob extends com.arcgismaps.tasks.Job<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapResult> {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapJob>;
					public pause(): boolean;
					public toJson(): string;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public "result-IoAF18A"(param0: any): any;
					public getParameters(): com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameters;
					public getCoreGenerateOfflineMapJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapJob;
					public getServerJobId(): string;
					public start(): boolean;
					public "cancel-IoAF18A"(param0: any): any;
					public getParameterOverrides(): com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameterOverrides;
					public getTask$arcgis_maps_any_release(): com.arcgismaps.tasks.offlinemaptask.OfflineMapTask;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public getOnlineMap(): com.arcgismaps.mapping.ArcGISMap;
					public getDownloadDirectoryPath(): string;
					public "checkStatus-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapJob, param1: boolean);
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
				}
				export module GenerateOfflineMapJob {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapJob.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapJob;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreGenerateOfflineMapJob,com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class GenerateOfflineMapParameterOverrides {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameterOverrides>;
					public getCoreGenerateOfflineMapParameterOverrides$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides;
					public getExportTileCacheParameters(): java.util.Map<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersKey,com.arcgismaps.tasks.tilecache.ExportTileCacheParameters>;
					public getOnlineLayers(): java.util.List<com.arcgismaps.mapping.layers.Layer>;
					public getExportVectorTilesParameters(): java.util.Map<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersKey,com.arcgismaps.tasks.exportvectortiles.ExportVectorTilesParameters>;
					public getGenerateGeodatabaseParameters(): java.util.Map<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersKey,com.arcgismaps.tasks.geodatabase.GenerateGeodatabaseParameters>;
					public getOnlineTables(): java.util.List<com.arcgismaps.data.ServiceFeatureTable>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides);
				}
				export module GenerateOfflineMapParameterOverrides {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameterOverrides,com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameterOverrides> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameterOverrides.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameterOverrides.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class GenerateOfflineMapParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameters>;
					public setReferenceBasemapDirectory(param0: string): void;
					public setAreaOfInterest(param0: com.arcgismaps.geometry.Geometry): void;
					public getAreaOfInterest(): com.arcgismaps.geometry.Geometry;
					public setEsriVectorTilesDownloadOption(param0: com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption): void;
					public getCoreGenerateOfflineMapParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters;
					public setAttachmentSyncDirection(param0: com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection): void;
					public setUpdateMode(param0: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode): void;
					public constructor();
					public setContinueOnErrors(param0: boolean): void;
					public getEsriVectorTilesDownloadOption(): com.arcgismaps.tasks.exportvectortiles.EsriVectorTilesDownloadOption;
					public getOnlineOnlyServicesOption(): com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption;
					public getReferenceBasemapFilename(): string;
					public setItemInfo(param0: com.arcgismaps.tasks.offlinemaptask.OfflineMapItemInfo): void;
					public getMinScale(): java.lang.Double;
					public setMinScale(param0: java.lang.Double): void;
					public setDefinitionExpressionFilterEnabled(param0: boolean): void;
					public setIncludeBasemap(param0: boolean): void;
					public getItemInfo(): com.arcgismaps.tasks.offlinemaptask.OfflineMapItemInfo;
					public getReturnLayerAttachmentOption(): com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption;
					public setReturnSchemaOnlyForEditableLayers(param0: boolean): void;
					public getUpdateMode(): com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode;
					public getDestinationTableRowFilter(): com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters);
					public getAttachmentSyncDirection(): com.arcgismaps.tasks.geodatabase.AttachmentSyncDirection;
					public setOnlineOnlyServicesOption(param0: com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption): void;
					public getMaxScale(): java.lang.Double;
					public setMaxScale(param0: java.lang.Double): void;
					public getReturnSchemaOnlyForEditableLayers(): boolean;
					public getReferenceBasemapDirectory(): string;
					public setReferenceBasemapFilename(param0: string): void;
					public getIncludeBasemap(): boolean;
					public isDefinitionExpressionFilterEnabled(): boolean;
					public setReturnLayerAttachmentOption(param0: com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption): void;
					public setDestinationTableRowFilter(param0: com.arcgismaps.tasks.offlinemaptask.DestinationTableRowFilter): void;
					public constructor(param0: com.arcgismaps.geometry.Geometry, param1: java.lang.Double, param2: java.lang.Double);
					public getContinueOnErrors(): boolean;
				}
				export module GenerateOfflineMapParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGenerateOfflineMapParameters,com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class GenerateOfflineMapResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapResult>;
					public getTableErrors(): java.util.Map<com.arcgismaps.data.FeatureTable,java.lang.Throwable>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapResult);
					public getCoreGenerateOfflineMapResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapResult;
					public getOfflineMap(): com.arcgismaps.mapping.ArcGISMap;
					public getLayerErrors(): java.util.Map<com.arcgismaps.mapping.layers.Layer,java.lang.Throwable>;
					public getMobileMapPackage(): com.arcgismaps.mapping.MobileMapPackage;
					public getHasErrors(): boolean;
				}
				export module GenerateOfflineMapResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreGenerateOfflineMapResult,com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export abstract class GenerateOfflineMapUpdateMode {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode>;
					public getCoreGenerateOfflineMapUpdateMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode;
				}
				export module GenerateOfflineMapUpdateMode {
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreGenerateOfflineMapUpdateMode): com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode.Factory.WhenMappings>;
						}
					}
					export class NoUpdates extends com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode.NoUpdates>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode.NoUpdates;
					}
					export class SyncWithFeatureServices extends com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode.SyncWithFeatureServices>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapUpdateMode.SyncWithFeatureServices;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineCapability {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineCapability>;
					public getCoreOfflineCapability$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineCapability;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineCapability);
					public getRemainsOnline(): boolean;
					public getError(): java.lang.Throwable;
					public getSupportsOffline(): boolean;
				}
				export module OfflineCapability {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineCapability,com.arcgismaps.tasks.offlinemaptask.OfflineCapability> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineCapability.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineCapability.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapCapabilities {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapCapabilities>;
					public getCoreOfflineMapCapabilities$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapCapabilities;
					public getLayerCapabilities(): java.util.Map<com.arcgismaps.mapping.layers.Layer,com.arcgismaps.tasks.offlinemaptask.OfflineCapability>;
					public getTableCapabilities(): java.util.Map<com.arcgismaps.data.FeatureTable,com.arcgismaps.tasks.offlinemaptask.OfflineCapability>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapCapabilities);
					public getHasErrors(): boolean;
				}
				export module OfflineMapCapabilities {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineMapCapabilities,com.arcgismaps.tasks.offlinemaptask.OfflineMapCapabilities> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapCapabilities.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapCapabilities.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapItemInfo {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapItemInfo>;
					public getTitle(): string;
					public setDescription(param0: string): void;
					public setTitle(param0: string): void;
					public getTermsOfUse(): string;
					public setThumbnail(param0: globalAndroid.graphics.drawable.BitmapDrawable): void;
					public setSnippet(param0: string): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapItemInfo);
					public setAccessInformation(param0: string): void;
					public getCoreOfflineMapItemInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapItemInfo;
					public getSnippet(): string;
					public getTags(): java.util.List<string>;
					public constructor();
					public getAccessInformation(): string;
					public setTermsOfUse(param0: string): void;
					public getThumbnail(): globalAndroid.graphics.drawable.BitmapDrawable;
					public getDescription(): string;
				}
				export module OfflineMapItemInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineMapItemInfo,com.arcgismaps.tasks.offlinemaptask.OfflineMapItemInfo> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapItemInfo.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapItemInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapParametersKey {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersKey>;
					public clone(): com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersKey;
					public equals(param0: any): boolean;
					public getCoreOfflineMapParametersKey$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapParametersKey;
					public constructor(param0: com.arcgismaps.utilitynetworks.UtilityNetwork);
					public getServiceUrl(): string;
					public constructor(param0: com.arcgismaps.mapping.layers.Layer);
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapParametersKey, param1: boolean);
					public getType(): com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType;
					public hashCode(): number;
					public constructor(param0: com.arcgismaps.data.ServiceFeatureTable);
				}
				export module OfflineMapParametersKey {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreOfflineMapParametersKey,com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersKey> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersKey.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersKey.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export abstract class OfflineMapParametersType {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType>;
					public getCoreOfflineMapParametersType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapParametersType;
				}
				export module OfflineMapParametersType {
					export class ExportTileCache extends com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.ExportTileCache>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.ExportTileCache;
					}
					export class ExportVectorTiles extends com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.ExportVectorTiles>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.ExportVectorTiles;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreOfflineMapParametersType): com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.Factory.WhenMappings>;
						}
					}
					export class GenerateGeodatabase extends com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.GenerateGeodatabase>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.GenerateGeodatabase;
					}
					export class Unknown extends com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.Unknown>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapParametersType.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapSyncJob extends com.arcgismaps.tasks.Job<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncResult> {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncJob>;
					public pause(): boolean;
					public toJson(): string;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public getCoreOfflineMapSyncJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapSyncJob;
					public "result-IoAF18A"(param0: any): any;
					public getParameters(): com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncParameters;
					public getServerJobId(): string;
					public start(): boolean;
					public getGeodatabaseDeltaInfos(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.tasks.geodatabase.GeodatabaseDeltaInfo>>;
					public "cancel-IoAF18A"(param0: any): any;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncJob, param1: boolean);
					public "checkStatus-IoAF18A"(param0: any): any;
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
					public getPortalItems$arcgis_maps_any_release(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.PortalItem>>;
				}
				export module OfflineMapSyncJob {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncJob.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncJob;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreOfflineMapSyncJob,com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapSyncLayerResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncLayerResult>;
					public getEditErrors(): java.util.List<com.arcgismaps.data.FeatureEditResult>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncLayerResult);
					public getCoreOfflineMapSyncLayerResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapSyncLayerResult;
					public getError(): java.lang.Throwable;
					public getHasErrors(): boolean;
				}
				export module OfflineMapSyncLayerResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineMapSyncLayerResult,com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncLayerResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncLayerResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncLayerResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapSyncParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncParameters>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters);
					public setPreplannedScheduledUpdatesOption(param0: com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption): void;
					public setSyncDirection(param0: com.arcgismaps.tasks.geodatabase.SyncDirection): void;
					public constructor();
					public getPreplannedScheduledUpdatesOption(): com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption;
					public getRollbackOnFailure(): boolean;
					public getKeepGeodatabaseDeltas(): boolean;
					public setRollbackOnFailure(param0: boolean): void;
					public getCoreOfflineMapSyncParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters;
					public getSyncDirection(): com.arcgismaps.tasks.geodatabase.SyncDirection;
					public setKeepGeodatabaseDeltas(param0: boolean): void;
				}
				export module OfflineMapSyncParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineMapSyncParameters,com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapSyncResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncResult>;
					public getLayerResults(): java.util.Map<com.arcgismaps.mapping.layers.Layer,com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncLayerResult>;
					public getTableResults(): java.util.Map<com.arcgismaps.data.FeatureTable,com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncLayerResult>;
					public isMobileMapPackageReopenRequired(): boolean;
					public getCoreOfflineMapSyncResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapSyncResult;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncResult);
					public getHasErrors(): boolean;
				}
				export module OfflineMapSyncResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineMapSyncResult,com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapSyncTask extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncTask>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public "createDefaultOfflineMapSyncParameters-IoAF18A"(param0: any): any;
					public getUpdateCapabilities(): com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdateCapabilities;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.mapping.ArcGISMap);
					public getMap(): com.arcgismaps.mapping.ArcGISMap;
					public getCoreOfflineMapSyncTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapSyncTask;
					public "checkForUpdates-IoAF18A"(param0: any): any;
					public "retryLoad-IoAF18A"(param0: any): any;
					public createOfflineMapSyncJob(param0: com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncParameters): com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncJob;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapSyncTask);
					public "load-IoAF18A"(param0: any): any;
					public getPortalItems$arcgis_maps_any_release(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.PortalItem>>;
				}
				export module OfflineMapSyncTask {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineMapSyncTask,com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapSyncTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapTask extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapTask>;
					public constructor(param0: com.arcgismaps.mapping.PortalItem);
					public "createDefaultDownloadPreplannedOfflineMapParameters-gIAlu-s"(param0: com.arcgismaps.tasks.offlinemaptask.PreplannedMapArea, param1: any): any;
					public "createDefaultGenerateOfflineMapParameters-BWLJW6A"(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: number, param3: any): any;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public "getPreplannedMapAreas-IoAF18A"(param0: any): any;
					public "createGenerateOfflineMapParameterOverrides-gIAlu-s"(param0: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameters, param1: any): any;
					public cancelLoad(): void;
					public getPortalItem(): com.arcgismaps.mapping.PortalItem;
					public "getOfflineMapCapabilities-gIAlu-s"(param0: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameters, param1: any): any;
					public constructor(param0: com.arcgismaps.mapping.ArcGISMap);
					public getCoreOfflineMapTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapTask;
					public getOnlineMap(): com.arcgismaps.mapping.ArcGISMap;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapTask);
					public "retryLoad-IoAF18A"(param0: any): any;
					public createDownloadPreplannedOfflineMapJob(param0: com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapParameters, param1: string): com.arcgismaps.tasks.offlinemaptask.DownloadPreplannedOfflineMapJob;
					public createGenerateOfflineMapJob(param0: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameters, param1: string, param2: com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapParameterOverrides): com.arcgismaps.tasks.offlinemaptask.GenerateOfflineMapJob;
					public "load-IoAF18A"(param0: any): any;
					public getEnsureOnlineMapHasRequestHandler$arcgis_maps_any_release(): kotlinx.coroutines.flow.SharedFlow<any>;
				}
				export module OfflineMapTask {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineMapTask,com.arcgismaps.tasks.offlinemaptask.OfflineMapTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapUpdateCapabilities {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdateCapabilities>;
					public getSupportsSyncWithFeatureServices(): boolean;
					public getCoreOfflineMapUpdateCapabilities$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapUpdateCapabilities;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapUpdateCapabilities);
					public getSupportsScheduledUpdatesForFeatures(): boolean;
				}
				export module OfflineMapUpdateCapabilities {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineMapUpdateCapabilities,com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdateCapabilities> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdateCapabilities.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdateCapabilities.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class OfflineMapUpdatesInfo {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdatesInfo>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreOfflineMapUpdatesInfo);
					public getCoreOfflineMapUpdatesInfo$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineMapUpdatesInfo;
					public isMobileMapPackageReopenRequired(): boolean;
					public getScheduledUpdatesDownloadSize(): number;
					public getUploadAvailability(): com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability;
					public getDownloadAvailability(): com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability;
				}
				export module OfflineMapUpdatesInfo {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreOfflineMapUpdatesInfo,com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdatesInfo> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdatesInfo.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdatesInfo.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export abstract class OfflineUpdateAvailability {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability>;
					public getCoreOfflineUpdateAvailability$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability;
				}
				export module OfflineUpdateAvailability {
					export class Available extends com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability.Available>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability.Available;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreOfflineUpdateAvailability): com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability.Factory.WhenMappings>;
						}
					}
					export class Indeterminate extends com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability.Indeterminate>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability.Indeterminate;
					}
					export class None extends com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability.None>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OfflineUpdateAvailability.None;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export abstract class OnlineOnlyServicesOption {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption>;
					public getCoreOnlineOnlyServicesOption$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption;
				}
				export module OnlineOnlyServicesOption {
					export class Exclude extends com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption.Exclude>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption.Exclude;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreOnlineOnlyServicesOption): com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption.Factory.WhenMappings>;
						}
					}
					export class Include extends com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption.Include>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption.Include;
					}
					export class UseAuthoredSettings extends com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption.UseAuthoredSettings>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.OnlineOnlyServicesOption.UseAuthoredSettings;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export class PreplannedMapArea extends com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedMapArea>;
					public constructor(param0: com.arcgismaps.mapping.PortalItem);
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: com.arcgismaps.internal.jni.CorePreplannedMapArea, param1: boolean);
					public "retryLoad-IoAF18A"(param0: any): any;
					public getPackageItems(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.mapping.PortalItem>>;
					public getUpdateCapabilities(): com.arcgismaps.tasks.offlinemaptask.OfflineMapUpdateCapabilities;
					public getCorePreplannedMapArea$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePreplannedMapArea;
					public cancelLoad(): void;
					public getPortalItem(): com.arcgismaps.mapping.PortalItem;
					public getAreaOfInterest(): com.arcgismaps.geometry.Geometry;
					public "load-IoAF18A"(param0: any): any;
					public getPackagingStatus(): com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus;
				}
				export module PreplannedMapArea {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CorePreplannedMapArea,com.arcgismaps.tasks.offlinemaptask.PreplannedMapArea> {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedMapArea.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedMapArea.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export abstract class PreplannedPackagingStatus {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus>;
					public getCorePreplannedPackagingStatus$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePreplannedPackagingStatus;
				}
				export module PreplannedPackagingStatus {
					export class Complete extends com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Complete>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Complete;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePreplannedPackagingStatus): com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Factory.WhenMappings>;
						}
					}
					export class Failed extends com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Failed>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Failed;
					}
					export class Processing extends com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Processing>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Processing;
					}
					export class Unknown extends com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Unknown>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedPackagingStatus.Unknown;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export abstract class PreplannedScheduledUpdatesOption {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption>;
					public getCorePreplannedScheduledUpdatesOption$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption;
				}
				export module PreplannedScheduledUpdatesOption {
					export class DownloadAllUpdates extends com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption.DownloadAllUpdates>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption.DownloadAllUpdates;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePreplannedScheduledUpdatesOption): com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption.Factory.WhenMappings>;
						}
					}
					export class NoUpdates extends com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption.NoUpdates>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedScheduledUpdatesOption.NoUpdates;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export abstract class PreplannedUpdateMode {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode>;
					public getCorePreplannedUpdateMode$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CorePreplannedUpdateMode;
				}
				export module PreplannedUpdateMode {
					export class DownloadScheduledUpdates extends com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.DownloadScheduledUpdates>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.DownloadScheduledUpdates;
					}
					export class DownloadScheduledUpdatesAndUploadNewFeatures extends com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.DownloadScheduledUpdatesAndUploadNewFeatures>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.DownloadScheduledUpdatesAndUploadNewFeatures;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CorePreplannedUpdateMode): com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.Factory.WhenMappings>;
						}
					}
					export class NoUpdates extends com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.NoUpdates>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.NoUpdates;
					}
					export class SyncWithFeatureServices extends com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.SyncWithFeatureServices>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.PreplannedUpdateMode.SyncWithFeatureServices;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module offlinemaptask {
				export abstract class ReturnLayerAttachmentOption {
					public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption>;
					public getCoreReturnLayerAttachmentOption$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption;
				}
				export module ReturnLayerAttachmentOption {
					export class AllLayers extends com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.AllLayers>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.AllLayers;
					}
					export class EditableLayers extends com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.EditableLayers>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.EditableLayers;
					}
					export class Factory {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.Factory;
						public convertToPublic(param0: com.arcgismaps.internal.jni.CoreReturnLayerAttachmentOption): com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption;
					}
					export module Factory {
						export class WhenMappings {
							public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.Factory.WhenMappings>;
						}
					}
					export class None extends com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.None>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.None;
					}
					export class ReadOnlyLayers extends com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption {
						public static class: java.lang.Class<com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.ReadOnlyLayers>;
						public static INSTANCE: com.arcgismaps.tasks.offlinemaptask.ReturnLayerAttachmentOption.ReadOnlyLayers;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module tilecache {
				export class EstimateTileCacheSizeJob extends com.arcgismaps.tasks.Job<com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeResult> {
					public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeJob>;
					public pause(): boolean;
					public start(): boolean;
					public toJson(): string;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public "cancel-IoAF18A"(param0: any): any;
					public getCoreEstimateTileCacheSizeJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeJob;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public "checkStatus-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeJob, param1: boolean);
					public "result-IoAF18A"(param0: any): any;
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
					public getServerJobId(): string;
				}
				export module EstimateTileCacheSizeJob {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeJob.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeJob;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeJob,com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module tilecache {
				export class EstimateTileCacheSizeResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeResult>;
					public getTileCount(): number;
					public getCoreEstimateTileCacheSizeResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeResult;
					public getFileSize(): number;
					public constructor(param0: com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeResult);
				}
				export module EstimateTileCacheSizeResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreEstimateTileCacheSizeResult,com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module tilecache {
				export class ExportTileCacheJob extends com.arcgismaps.tasks.Job<com.arcgismaps.mapping.layers.TileCache> {
					public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.ExportTileCacheJob>;
					public pause(): boolean;
					public start(): boolean;
					public toJson(): string;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public "cancel-IoAF18A"(param0: any): any;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public getCoreExportTileCacheJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExportTileCacheJob;
					public "checkStatus-IoAF18A"(param0: any): any;
					public "result-IoAF18A"(param0: any): any;
					public constructor(param0: com.arcgismaps.internal.jni.CoreExportTileCacheJob, param1: boolean);
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
					public getServerJobId(): string;
				}
				export module ExportTileCacheJob {
					export class Companion {
						public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.ExportTileCacheJob.Companion>;
						public fromJsonOrNull(param0: string): com.arcgismaps.tasks.tilecache.ExportTileCacheJob;
					}
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreExportTileCacheJob,com.arcgismaps.tasks.tilecache.ExportTileCacheJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.ExportTileCacheJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.tilecache.ExportTileCacheJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module tilecache {
				export class ExportTileCacheParameters {
					public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.ExportTileCacheParameters>;
					public getCompressionQuality(): number;
					public setCompressionQuality(param0: number): void;
					public constructor();
					public getCoreExportTileCacheParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExportTileCacheParameters;
					public setAreaOfInterest(param0: com.arcgismaps.geometry.Geometry): void;
					public clone(): com.arcgismaps.tasks.tilecache.ExportTileCacheParameters;
					public getAreaOfInterest(): com.arcgismaps.geometry.Geometry;
					public getLevelIds(): java.util.List<java.lang.Integer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreExportTileCacheParameters, param1: boolean);
				}
				export module ExportTileCacheParameters {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreExportTileCacheParameters,com.arcgismaps.tasks.tilecache.ExportTileCacheParameters> {
						public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.ExportTileCacheParameters.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.tilecache.ExportTileCacheParameters.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module tilecache {
				export class ExportTileCacheTask implements com.arcgismaps.ApiKeyResource, com.arcgismaps.Loadable {
					public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.ExportTileCacheTask>;
					public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
					public constructor(param0: string);
					public "getApiKey-6IiKQno"(): string;
					public cancelLoad(): void;
					public constructor(param0: com.arcgismaps.internal.jni.CoreExportTileCacheTask);
					public "setApiKey-lGpodAQ"(param0: string): void;
					public getUrl(): string;
					public "retryLoad-IoAF18A"(param0: any): any;
					public createExportTileCacheJob(param0: com.arcgismaps.tasks.tilecache.ExportTileCacheParameters, param1: string): com.arcgismaps.tasks.tilecache.ExportTileCacheJob;
					public createEstimateTileCacheSizeJob(param0: com.arcgismaps.tasks.tilecache.ExportTileCacheParameters): com.arcgismaps.tasks.tilecache.EstimateTileCacheSizeJob;
					public getCoreExportTileCacheTask$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreExportTileCacheTask;
					public "load-IoAF18A"(param0: any): any;
					public getMapServiceInfo(): com.arcgismaps.arcgisservices.ArcGISMapServiceInfo;
					public "createDefaultExportTileCacheParameters-BWLJW6A"(param0: com.arcgismaps.geometry.Geometry, param1: number, param2: number, param3: any): any;
				}
				export module ExportTileCacheTask {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreExportTileCacheTask,com.arcgismaps.tasks.tilecache.ExportTileCacheTask> {
						public static class: java.lang.Class<com.arcgismaps.tasks.tilecache.ExportTileCacheTask.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.tilecache.ExportTileCacheTask.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module utilitynetworks {
				export class UtilityNetworkValidationJob extends com.arcgismaps.tasks.Job<com.arcgismaps.tasks.utilitynetworks.UtilityValidationResult> {
					public static class: java.lang.Class<com.arcgismaps.tasks.utilitynetworks.UtilityNetworkValidationJob>;
					public pause(): boolean;
					public start(): boolean;
					public toJson(): string;
					public getMessages(): kotlinx.coroutines.flow.SharedFlow<com.arcgismaps.tasks.JobMessage>;
					public "cancel-IoAF18A"(param0: any): any;
					public getProgress(): kotlinx.coroutines.flow.StateFlow<java.lang.Integer>;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkValidationJob, param1: boolean);
					public "checkStatus-IoAF18A"(param0: any): any;
					public getCoreUtilityNetworkValidationJob$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkValidationJob;
					public "result-IoAF18A"(param0: any): any;
					public getStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.tasks.JobStatus>;
					public getServerJobId(): string;
				}
				export module UtilityNetworkValidationJob {
					export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityNetworkValidationJob,com.arcgismaps.tasks.utilitynetworks.UtilityNetworkValidationJob> {
						public static class: java.lang.Class<com.arcgismaps.tasks.utilitynetworks.UtilityNetworkValidationJob.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.utilitynetworks.UtilityNetworkValidationJob.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module tasks {
			export module utilitynetworks {
				export class UtilityValidationResult {
					public static class: java.lang.Class<com.arcgismaps.tasks.utilitynetworks.UtilityValidationResult>;
					public getHasDirtyAreas(): boolean;
					public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityValidationResult);
					public getCoreUtilityValidationResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityValidationResult;
					public getHasErrors(): boolean;
				}
				export module UtilityValidationResult {
					export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityValidationResult,com.arcgismaps.tasks.utilitynetworks.UtilityValidationResult> {
						public static class: java.lang.Class<com.arcgismaps.tasks.utilitynetworks.UtilityValidationResult.Factory>;
						public static INSTANCE: com.arcgismaps.tasks.utilitynetworks.UtilityValidationResult.Factory;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityAssetGroup {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssetGroup>;
				public getAssetType(param0: string): com.arcgismaps.utilitynetworks.UtilityAssetType;
				public getCode(): number;
				public getName(): string;
				public getCoreUtilityAssetGroup$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityAssetGroup;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityAssetGroup, param1: boolean);
				public getAssetTypes(): java.util.List<com.arcgismaps.utilitynetworks.UtilityAssetType>;
			}
			export module UtilityAssetGroup {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityAssetGroup,com.arcgismaps.utilitynetworks.UtilityAssetGroup> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssetGroup.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssetGroup.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityAssetType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssetType>;
				public getCategories(): java.util.List<com.arcgismaps.utilitynetworks.UtilityCategory>;
				public getAssociationDeletionSemantics(): com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics;
				public getContainerViewScale(): number;
				public getCode(): number;
				public getName(): string;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityAssetType, param1: boolean);
				public getAssociationRole(): com.arcgismaps.utilitynetworks.UtilityAssociationRole;
				public getTerminalConfiguration(): com.arcgismaps.utilitynetworks.UtilityTerminalConfiguration;
				public getCoreUtilityAssetType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityAssetType;
			}
			export module UtilityAssetType {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityAssetType,com.arcgismaps.utilitynetworks.UtilityAssetType> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssetType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssetType.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityAssociation {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociation>;
				public getCoreUtilityAssociation$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityAssociation;
				public getToElement(): com.arcgismaps.utilitynetworks.UtilityElement;
				public getFromElement(): com.arcgismaps.utilitynetworks.UtilityElement;
				public getGeometry(): com.arcgismaps.geometry.Geometry;
				public getAssociationType(): com.arcgismaps.utilitynetworks.UtilityAssociationType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityAssociation);
				public getFractionAlongEdge(): number;
				public isContainmentVisible(): boolean;
				public "getGlobalId-72i0bdE"(): string;
			}
			export module UtilityAssociation {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityAssociation,com.arcgismaps.utilitynetworks.UtilityAssociation> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociation.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociation.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityAssociationDeletionSemantics {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics>;
				public getCoreUtilityAssociationDeletionSemantics$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics;
			}
			export module UtilityAssociationDeletionSemantics {
				export class Cascade extends com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics.Cascade>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics.Cascade;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityAssociationDeletionSemantics): com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics.Factory.WhenMappings>;
					}
				}
				export class None extends com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics.None>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics.None;
				}
				export class Restricted extends com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics.Restricted>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationDeletionSemantics.Restricted;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityAssociationRole {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationRole>;
				public getCoreUtilityAssociationRole$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityAssociationRole;
			}
			export module UtilityAssociationRole {
				export class Container extends com.arcgismaps.utilitynetworks.UtilityAssociationRole {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationRole.Container>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationRole.Container;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationRole.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationRole.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityAssociationRole): com.arcgismaps.utilitynetworks.UtilityAssociationRole;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationRole.Factory.WhenMappings>;
					}
				}
				export class None extends com.arcgismaps.utilitynetworks.UtilityAssociationRole {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationRole.None>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationRole.None;
				}
				export class Structure extends com.arcgismaps.utilitynetworks.UtilityAssociationRole {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationRole.Structure>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationRole.Structure;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityAssociationType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationType>;
				public getCoreUtilityAssociationType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityAssociationType;
			}
			export module UtilityAssociationType {
				export class Attachment extends com.arcgismaps.utilitynetworks.UtilityAssociationType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationType.Attachment>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationType.Attachment;
				}
				export class Connectivity extends com.arcgismaps.utilitynetworks.UtilityAssociationType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationType.Connectivity>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationType.Connectivity;
				}
				export class Containment extends com.arcgismaps.utilitynetworks.UtilityAssociationType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationType.Containment>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationType.Containment;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityAssociationType): com.arcgismaps.utilitynetworks.UtilityAssociationType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationType.Factory.WhenMappings>;
					}
				}
				export class JunctionEdgeObjectConnectivityFromSide extends com.arcgismaps.utilitynetworks.UtilityAssociationType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationType.JunctionEdgeObjectConnectivityFromSide>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationType.JunctionEdgeObjectConnectivityFromSide;
				}
				export class JunctionEdgeObjectConnectivityMidspan extends com.arcgismaps.utilitynetworks.UtilityAssociationType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationType.JunctionEdgeObjectConnectivityMidspan>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationType.JunctionEdgeObjectConnectivityMidspan;
				}
				export class JunctionEdgeObjectConnectivityToSide extends com.arcgismaps.utilitynetworks.UtilityAssociationType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAssociationType.JunctionEdgeObjectConnectivityToSide>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAssociationType.JunctionEdgeObjectConnectivityToSide;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityAttributeComparisonOperator {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator>;
				public getCoreUtilityAttributeComparisonOperator$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator;
			}
			export module UtilityAttributeComparisonOperator {
				export class DoesNotIncludeAny extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.DoesNotIncludeAny>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.DoesNotIncludeAny;
				}
				export class DoesNotIncludeTheValues extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.DoesNotIncludeTheValues>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.DoesNotIncludeTheValues;
				}
				export class Equal extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.Equal>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.Equal;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityAttributeComparisonOperator): com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.Factory.WhenMappings>;
					}
				}
				export class GreaterThan extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.GreaterThan>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.GreaterThan;
				}
				export class GreaterThanEqual extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.GreaterThanEqual>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.GreaterThanEqual;
				}
				export class IncludesAny extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.IncludesAny>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.IncludesAny;
				}
				export class IncludesTheValues extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.IncludesTheValues>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.IncludesTheValues;
				}
				export class LessThan extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.LessThan>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.LessThan;
				}
				export class LessThanEqual extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.LessThanEqual>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.LessThanEqual;
				}
				export class NotEqual extends com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.NotEqual>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator.NotEqual;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityCategory {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityCategory>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityCategory);
				public getCoreUtilityCategory$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityCategory;
				public getName(): string;
			}
			export module UtilityCategory {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityCategory,com.arcgismaps.utilitynetworks.UtilityCategory> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityCategory.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityCategory.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityCategoryComparison extends com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityCategoryComparison>;
				public getCoreUtilityCategoryComparison$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityCategoryComparison;
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityCategory, param1: com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator);
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityCategoryComparison);
				public getComparisonOperator(): com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator;
				public constructor(param0: string, param1: com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator);
				public getCategory(): com.arcgismaps.utilitynetworks.UtilityCategory;
			}
			export module UtilityCategoryComparison {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityCategoryComparison,com.arcgismaps.utilitynetworks.UtilityCategoryComparison> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityCategoryComparison.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityCategoryComparison.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityCategoryComparisonOperator {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator>;
				public getCoreUtilityCategoryComparisonOperator$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator;
			}
			export module UtilityCategoryComparisonOperator {
				export class DoesNotExist extends com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator.DoesNotExist>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator.DoesNotExist;
				}
				export class Exists extends com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator.Exists>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator.Exists;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityCategoryComparisonOperator): com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityCategoryComparisonOperator.Factory.WhenMappings>;
					}
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityDomainNetwork {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityDomainNetwork>;
				public isStructureNetwork(): boolean;
				public getNetworkSources(): java.util.List<com.arcgismaps.utilitynetworks.UtilityNetworkSource>;
				public getAlias(): string;
				public getTierType(): com.arcgismaps.utilitynetworks.UtilityTierType;
				public getCoreUtilityDomainNetwork$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityDomainNetwork;
				public getDomainNetworkId(): number;
				public getSubnetworkControllerType(): com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType;
				public getTier(param0: string): com.arcgismaps.utilitynetworks.UtilityTier;
				public getName(): string;
				public getTierGroup(param0: string): com.arcgismaps.utilitynetworks.UtilityTierGroup;
				public getTiers(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTier>;
				public getTierGroups(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTierGroup>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityDomainNetwork, param1: boolean);
			}
			export module UtilityDomainNetwork {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityDomainNetwork,com.arcgismaps.utilitynetworks.UtilityDomainNetwork> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityDomainNetwork.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityDomainNetwork.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityElement {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityElement>;
				public getTerminal(): com.arcgismaps.utilitynetworks.UtilityTerminal;
				public getCoreUtilityElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityElement;
				public getAssetType(): com.arcgismaps.utilitynetworks.UtilityAssetType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityElement);
				public getObjectId(): number;
				public getFractionAlongEdge(): number;
				public isValid(): boolean;
				public getAssetGroup(): com.arcgismaps.utilitynetworks.UtilityAssetGroup;
				public setFractionAlongEdge(param0: number): void;
				public "getGlobalId-72i0bdE"(): string;
				public getNetworkSource(): com.arcgismaps.utilitynetworks.UtilityNetworkSource;
				public setTerminal(param0: com.arcgismaps.utilitynetworks.UtilityTerminal): void;
			}
			export module UtilityElement {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityElement,com.arcgismaps.utilitynetworks.UtilityElement> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityElement.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityElement.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityElementTraceResult extends com.arcgismaps.utilitynetworks.UtilityTraceResult {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityElementTraceResult>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityElementTraceResult);
				public getCoreUtilityElementTraceResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityElementTraceResult;
				public getElements(): java.util.List<com.arcgismaps.utilitynetworks.UtilityElement>;
			}
			export module UtilityElementTraceResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityElementTraceResult,com.arcgismaps.utilitynetworks.UtilityElementTraceResult> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityElementTraceResult.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityElementTraceResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityFunctionTraceResult extends com.arcgismaps.utilitynetworks.UtilityTraceResult {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityFunctionTraceResult>;
				public getCoreUtilityFunctionTraceResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityFunctionTraceResult;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityFunctionTraceResult);
				public getFunctionOutputs(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTraceFunctionOutput>;
			}
			export module UtilityFunctionTraceResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityFunctionTraceResult,com.arcgismaps.utilitynetworks.UtilityFunctionTraceResult> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityFunctionTraceResult.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityFunctionTraceResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityGeometryTraceResult extends com.arcgismaps.utilitynetworks.UtilityTraceResult {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityGeometryTraceResult>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityGeometryTraceResult);
				public getPolyline(): com.arcgismaps.geometry.Polyline;
				public getMultipoint(): com.arcgismaps.geometry.Multipoint;
				public getCoreUtilityGeometryTraceResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityGeometryTraceResult;
				public getPolygon(): com.arcgismaps.geometry.Polygon;
			}
			export module UtilityGeometryTraceResult {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityGeometryTraceResult,com.arcgismaps.utilitynetworks.UtilityGeometryTraceResult> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityGeometryTraceResult.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityGeometryTraceResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityMinimumStartingLocations {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations>;
				public getCoreUtilityMinimumStartingLocations$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityMinimumStartingLocations;
			}
			export module UtilityMinimumStartingLocations {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityMinimumStartingLocations): com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations.Factory.WhenMappings>;
					}
				}
				export class Many extends com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations.Many>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations.Many;
				}
				export class One extends com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations.One>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations.One;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNamedTraceConfiguration {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNamedTraceConfiguration>;
				public getCoreUtilityNamedTraceConfiguration$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfiguration;
				public getResultTypes(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTraceResultType>;
				public getTags(): java.util.List<string>;
				public getMinimumStartingLocations(): com.arcgismaps.utilitynetworks.UtilityMinimumStartingLocations;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfiguration);
				public getCreator(): string;
				public getDescription(): string;
				public getName(): string;
				public getTraceType(): com.arcgismaps.utilitynetworks.UtilityTraceType;
				public "getGlobalId-72i0bdE"(): string;
				public getDefaultTraceConfiguration(): com.arcgismaps.utilitynetworks.UtilityTraceConfiguration;
			}
			export module UtilityNamedTraceConfiguration {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfiguration,com.arcgismaps.utilitynetworks.UtilityNamedTraceConfiguration> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNamedTraceConfiguration.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNamedTraceConfiguration.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNamedTraceConfigurationQueryParameters {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNamedTraceConfigurationQueryParameters>;
				public getCreators(): java.util.List<string>;
				public getTags(): java.util.List<string>;
				public getCoreUtilityNamedTraceConfigurationQueryParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfigurationQueryParameters;
				public getNames(): java.util.List<string>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfigurationQueryParameters);
				public getGlobalIds(): java.util.List<com.arcgismaps.Guid>;
				public constructor();
			}
			export module UtilityNamedTraceConfigurationQueryParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityNamedTraceConfigurationQueryParameters,com.arcgismaps.utilitynetworks.UtilityNamedTraceConfigurationQueryParameters> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNamedTraceConfigurationQueryParameters.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNamedTraceConfigurationQueryParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNearestNeighbor {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNearestNeighbor>;
				public getCategories(): java.util.List<com.arcgismaps.utilitynetworks.UtilityCategory>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor);
				public getCount(): number;
				public getCostNetworkAttribute(): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
				public getCoreUtilityNearestNeighbor$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor;
				public getAssetTypes(): java.util.List<com.arcgismaps.utilitynetworks.UtilityAssetType>;
			}
			export module UtilityNearestNeighbor {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNearestNeighbor.Companion>;
					public createWithAssetTypes(param0: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute, param1: number, param2: java.lang.Iterable<com.arcgismaps.utilitynetworks.UtilityAssetType>): com.arcgismaps.utilitynetworks.UtilityNearestNeighbor;
					public createWithAssetTypesAndCategories(param0: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute, param1: number, param2: java.lang.Iterable<com.arcgismaps.utilitynetworks.UtilityAssetType>, param3: java.lang.Iterable<com.arcgismaps.utilitynetworks.UtilityCategory>): com.arcgismaps.utilitynetworks.UtilityNearestNeighbor;
					public createWithCategories(param0: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute, param1: number, param2: java.lang.Iterable<com.arcgismaps.utilitynetworks.UtilityCategory>): com.arcgismaps.utilitynetworks.UtilityNearestNeighbor;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityNearestNeighbor,com.arcgismaps.utilitynetworks.UtilityNearestNeighbor> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNearestNeighbor.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNearestNeighbor.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityNearestNeighborResult {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult>;
				public getCoreUtilityNearestNeighborResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult;
			}
			export module UtilityNearestNeighborResult {
				export class AllRequestedNeighborsFound extends com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult.AllRequestedNeighborsFound>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult.AllRequestedNeighborsFound;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityNearestNeighborResult): com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult.Factory.WhenMappings>;
					}
				}
				export class FewerNeighborsFound extends com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult.FewerNeighborsFound>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult.FewerNeighborsFound;
				}
				export class NotApplicable extends com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult.NotApplicable>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult.NotApplicable;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNetwork extends com.arcgismaps.Loadable {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetwork>;
				public getLoadStatus(): kotlinx.coroutines.flow.StateFlow<com.arcgismaps.LoadStatus>;
				public cancelLoad(): void;
				public getServiceGeodatabase(): com.arcgismaps.data.ServiceGeodatabase;
				public getName(): string;
				public getGeodatabase(): com.arcgismaps.data.Geodatabase;
				public getCoreUtilityNetwork$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetwork;
				public "trace-gIAlu-s"(param0: com.arcgismaps.utilitynetworks.UtilityTraceParameters, param1: any): any;
				public validateNetworkTopology(param0: com.arcgismaps.geometry.Envelope, param1: com.arcgismaps.tasks.geoprocessing.GeoprocessingExecutionType): com.arcgismaps.tasks.utilitynetworks.UtilityNetworkValidationJob;
				public "load-IoAF18A"(param0: any): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetwork, param1: boolean);
				public constructor(param0: string);
				public createElementOrNull(param0: com.arcgismaps.data.ArcGISFeature, param1: com.arcgismaps.utilitynetworks.UtilityTerminal): com.arcgismaps.utilitynetworks.UtilityElement;
				public getDefinition(): com.arcgismaps.utilitynetworks.UtilityNetworkDefinition;
				public getUri(): string;
				public "retryLoad-IoAF18A"(param0: any): any;
				public constructor(param0: string, param1: com.arcgismaps.mapping.ArcGISMap);
				public "getFeaturesForElements-gIAlu-s"(param0: java.lang.Iterable<com.arcgismaps.utilitynetworks.UtilityElement>, param1: any): any;
				public getDirtyAreaTable(): com.arcgismaps.data.ArcGISFeatureTable;
				public "getAssociations-0E7RQCE"(param0: com.arcgismaps.utilitynetworks.UtilityElement, param1: com.arcgismaps.utilitynetworks.UtilityAssociationType, param2: any): any;
				public "getState-IoAF18A"(param0: any): any;
				public "queryNamedTraceConfigurations-gIAlu-s"(param0: com.arcgismaps.utilitynetworks.UtilityNamedTraceConfigurationQueryParameters, param1: any): any;
				public "getAssociations-0E7RQCE"(param0: com.arcgismaps.geometry.Envelope, param1: com.arcgismaps.utilitynetworks.UtilityAssociationType, param2: any): any;
				public "createElementOrNull-2wbRojc"(param0: com.arcgismaps.utilitynetworks.UtilityAssetType, param1: string, param2: com.arcgismaps.utilitynetworks.UtilityTerminal): com.arcgismaps.utilitynetworks.UtilityElement;
			}
			export module UtilityNetwork {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityNetwork,com.arcgismaps.utilitynetworks.UtilityNetwork> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetwork.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetwork.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNetworkAttribute {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttribute>;
				public getDataType(): com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType;
				public isApportionable(): boolean;
				public getCoreUtilityNetworkAttribute$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute;
				public isSystemDefined(): boolean;
				public getDomain(): com.arcgismaps.data.Domain;
				public isSubstitution(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute, param1: boolean);
				public getNetworkAttributeToSubstitute(): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
				public getName(): string;
			}
			export module UtilityNetworkAttribute {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityNetworkAttribute,com.arcgismaps.utilitynetworks.UtilityNetworkAttribute> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttribute.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNetworkAttributeComparison extends com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttributeComparison>;
				public getCoreUtilityNetworkAttributeComparison$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeComparison;
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute, param1: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator, param2: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute);
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute, param1: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator, param2: any);
				public getNetworkAttribute(): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
				public getValue(): any;
				public getComparisonOperator(): com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeComparison);
				public getOtherNetworkAttribute(): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
			}
			export module UtilityNetworkAttributeComparison {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeComparison,com.arcgismaps.utilitynetworks.UtilityNetworkAttributeComparison> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttributeComparison.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkAttributeComparison.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityNetworkAttributeDataType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType>;
				public getCoreUtilityNetworkAttributeDataType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType;
			}
			export module UtilityNetworkAttributeDataType {
				export class Boolean extends com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Boolean>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Boolean;
				}
				export class Double extends com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Double>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Double;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkAttributeDataType): com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Factory.WhenMappings>;
					}
				}
				export class Float extends com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Float>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Float;
				}
				export class Integer extends com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Integer>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkAttributeDataType.Integer;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNetworkCapabilities {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkCapabilities>;
				public getCoreUtilityNetworkCapabilities$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkCapabilities;
				public getSupportsNetworkState(): boolean;
				public getSupportsTrace(): boolean;
				public getSupportsValidateNetworkTopology(): boolean;
				public getSupportsQueryAssociations(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkCapabilities);
			}
			export module UtilityNetworkCapabilities {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityNetworkCapabilities,com.arcgismaps.utilitynetworks.UtilityNetworkCapabilities> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkCapabilities.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkCapabilities.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNetworkDefinition {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkDefinition>;
				public getCapabilities(): com.arcgismaps.utilitynetworks.UtilityNetworkCapabilities;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkDefinition);
				public getDomainNetworks(): java.util.List<com.arcgismaps.utilitynetworks.UtilityDomainNetwork>;
				public getExtent(): com.arcgismaps.geometry.Envelope;
				public "getRules-gIAlu-s"(param0: java.lang.Iterable<com.arcgismaps.utilitynetworks.UtilityAssetType>, param1: any): any;
				public getCategories(): java.util.List<com.arcgismaps.utilitynetworks.UtilityCategory>;
				public getDomainNetwork(param0: string): com.arcgismaps.utilitynetworks.UtilityDomainNetwork;
				public getCoreUtilityNetworkDefinition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkDefinition;
				public getTerminalConfigurations(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTerminalConfiguration>;
				public getNetworkSources(): kotlinx.coroutines.flow.StateFlow<java.util.List<com.arcgismaps.utilitynetworks.UtilityNetworkSource>>;
				public getNetworkAttribute(param0: string): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
				public getNetworkSource(param0: string): com.arcgismaps.utilitynetworks.UtilityNetworkSource;
				public getNetworkAttributes(): java.util.List<com.arcgismaps.utilitynetworks.UtilityNetworkAttribute>;
				public getSchemaVersion(): number;
			}
			export module UtilityNetworkDefinition {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityNetworkDefinition,com.arcgismaps.utilitynetworks.UtilityNetworkDefinition> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkDefinition.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkDefinition.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNetworkSource {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSource>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkSource, param1: boolean);
				public getSourceType(): com.arcgismaps.utilitynetworks.UtilityNetworkSourceType;
				public getSourceUsageType(): com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType;
				public getAssetGroups(): java.util.List<com.arcgismaps.utilitynetworks.UtilityAssetGroup>;
				public getSourceId(): number;
				public getAssetGroup(param0: string): com.arcgismaps.utilitynetworks.UtilityAssetGroup;
				public getName(): string;
				public getCoreUtilityNetworkSource$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkSource;
				public getFeatureTable(): com.arcgismaps.data.ArcGISFeatureTable;
			}
			export module UtilityNetworkSource {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityNetworkSource,com.arcgismaps.utilitynetworks.UtilityNetworkSource> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSource.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSource.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityNetworkSourceType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceType>;
				public getCoreUtilityNetworkSourceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkSourceType;
			}
			export module UtilityNetworkSourceType {
				export class Edge extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceType.Edge>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceType.Edge;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceType): com.arcgismaps.utilitynetworks.UtilityNetworkSourceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceType.Factory.WhenMappings>;
					}
				}
				export class Junction extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceType.Junction>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceType.Junction;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityNetworkSourceUsageType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType>;
				public getCoreUtilityNetworkSourceUsageType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType;
			}
			export module UtilityNetworkSourceUsageType {
				export class Assembly extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Assembly>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Assembly;
				}
				export class Device extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Device>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Device;
				}
				export class EdgeObject extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.EdgeObject>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.EdgeObject;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkSourceUsageType): com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Factory.WhenMappings>;
					}
				}
				export class Junction extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Junction>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Junction;
				}
				export class JunctionObject extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.JunctionObject>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.JunctionObject;
				}
				export class Line extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Line>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.Line;
				}
				export class StructureBoundary extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureBoundary>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureBoundary;
				}
				export class StructureEdgeObject extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureEdgeObject>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureEdgeObject;
				}
				export class StructureJunction extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureJunction>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureJunction;
				}
				export class StructureJunctionObject extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureJunctionObject>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureJunctionObject;
				}
				export class StructureLine extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureLine>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.StructureLine;
				}
				export class SubnetLine extends com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.SubnetLine>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkSourceUsageType.SubnetLine;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityNetworkState {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkState>;
				public isNetworkTopologyEnabled(): boolean;
				public getHasDirtyAreas(): boolean;
				public getCoreUtilityNetworkState$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityNetworkState;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityNetworkState);
				public getHasErrors(): boolean;
			}
			export module UtilityNetworkState {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityNetworkState,com.arcgismaps.utilitynetworks.UtilityNetworkState> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityNetworkState.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityNetworkState.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityPropagator {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityPropagator>;
				public getPropagatorFunctionType(): com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType;
				public getNetworkAttribute(): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
				public getValue(): any;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityPropagator);
				public getCoreUtilityPropagator$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityPropagator;
				public getComparisonOperator(): com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator;
				public getSubstitutionNetworkAttribute(): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute, param1: com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType, param2: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator, param3: any, param4: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute);
			}
			export module UtilityPropagator {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityPropagator.Companion>;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityPropagator,com.arcgismaps.utilitynetworks.UtilityPropagator> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityPropagator.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityPropagator.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityPropagatorFunctionType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType>;
				public getCoreUtilityPropagatorFunctionType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType;
			}
			export module UtilityPropagatorFunctionType {
				export class BitwiseAnd extends com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType.BitwiseAnd>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType.BitwiseAnd;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityPropagatorFunctionType): com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType.Factory.WhenMappings>;
					}
				}
				export class Max extends com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType.Max>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType.Max;
				}
				export class Min extends com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType.Min>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityPropagatorFunctionType.Min;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityRule {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRule>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityRule);
				public getRuleId(): number;
				public getCoreUtilityRule$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityRule;
				public getFromElement(): com.arcgismaps.utilitynetworks.UtilityRuleElement;
				public getViaElement(): com.arcgismaps.utilitynetworks.UtilityRuleElement;
				public getRuleType(): com.arcgismaps.utilitynetworks.UtilityRuleType;
				public getToElement(): com.arcgismaps.utilitynetworks.UtilityRuleElement;
			}
			export module UtilityRule {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityRule,com.arcgismaps.utilitynetworks.UtilityRule> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRule.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityRule.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityRuleElement {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleElement>;
				public getTerminal(): com.arcgismaps.utilitynetworks.UtilityTerminal;
				public getAssetType(): com.arcgismaps.utilitynetworks.UtilityAssetType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityRuleElement);
				public getCoreUtilityRuleElement$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityRuleElement;
				public getAssetGroup(): com.arcgismaps.utilitynetworks.UtilityAssetGroup;
				public getNetworkSource(): com.arcgismaps.utilitynetworks.UtilityNetworkSource;
			}
			export module UtilityRuleElement {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityRuleElement,com.arcgismaps.utilitynetworks.UtilityRuleElement> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleElement.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityRuleElement.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityRuleType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleType>;
				public getCoreUtilityRuleType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityRuleType;
			}
			export module UtilityRuleType {
				export class Attachment extends com.arcgismaps.utilitynetworks.UtilityRuleType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleType.Attachment>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityRuleType.Attachment;
				}
				export class Containment extends com.arcgismaps.utilitynetworks.UtilityRuleType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleType.Containment>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityRuleType.Containment;
				}
				export class EdgeJunctionEdgeConnectivity extends com.arcgismaps.utilitynetworks.UtilityRuleType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleType.EdgeJunctionEdgeConnectivity>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityRuleType.EdgeJunctionEdgeConnectivity;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityRuleType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityRuleType): com.arcgismaps.utilitynetworks.UtilityRuleType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleType.Factory.WhenMappings>;
					}
				}
				export class JunctionEdgeConnectivity extends com.arcgismaps.utilitynetworks.UtilityRuleType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleType.JunctionEdgeConnectivity>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityRuleType.JunctionEdgeConnectivity;
				}
				export class JunctionJunctionConnectivity extends com.arcgismaps.utilitynetworks.UtilityRuleType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityRuleType.JunctionJunctionConnectivity>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityRuleType.JunctionJunctionConnectivity;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilitySubnetworkControllerType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType>;
				public getCoreUtilitySubnetworkControllerType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType;
			}
			export module UtilitySubnetworkControllerType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilitySubnetworkControllerType): com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType.Factory.WhenMappings>;
					}
				}
				export class None extends com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType.None>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType.None;
				}
				export class Sink extends com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType.Sink>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType.Sink;
				}
				export class Source extends com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType.Source>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilitySubnetworkControllerType.Source;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTerminal {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminal>;
				public getCoreUtilityTerminal$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTerminal;
				public isUpstreamTerminal(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTerminal, param1: boolean);
				public getName(): string;
				public getTerminalId(): number;
			}
			export module UtilityTerminal {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityTerminal,com.arcgismaps.utilitynetworks.UtilityTerminal> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminal.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTerminal.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTerminalConfiguration {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalConfiguration>;
				public getDirectionality(): com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality;
				public getCoreUtilityTerminalConfiguration$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTerminalConfiguration;
				public getDefaultConfigurationPath(): com.arcgismaps.utilitynetworks.UtilityTerminalConfigurationPath;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTerminalConfiguration);
				public getConfigurationPaths(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTerminalConfigurationPath>;
				public getName(): string;
				public getTerminalConfigurationId(): number;
				public getTerminals(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTerminal>;
			}
			export module UtilityTerminalConfiguration {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTerminalConfiguration,com.arcgismaps.utilitynetworks.UtilityTerminalConfiguration> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalConfiguration.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTerminalConfiguration.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTerminalConfigurationPath {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalConfigurationPath>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTerminalConfigurationPath);
				public getCoreUtilityTerminalConfigurationPath$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTerminalConfigurationPath;
				public getTerminalPaths(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTerminalPath>;
				public getDescription(): string;
				public getName(): string;
			}
			export module UtilityTerminalConfigurationPath {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTerminalConfigurationPath,com.arcgismaps.utilitynetworks.UtilityTerminalConfigurationPath> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalConfigurationPath.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTerminalConfigurationPath.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTerminalDirectionality {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality>;
				public getCoreUtilityTerminalDirectionality$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTerminalDirectionality;
			}
			export module UtilityTerminalDirectionality {
				export class Bidirectional extends com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality.Bidirectional>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality.Bidirectional;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTerminalDirectionality): com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality.Factory.WhenMappings>;
					}
				}
				export class Unidirectional extends com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality.Unidirectional>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTerminalDirectionality.Unidirectional;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTerminalPath {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalPath>;
				public getCoreUtilityTerminalPath$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTerminalPath;
				public getToTerminal(): com.arcgismaps.utilitynetworks.UtilityTerminal;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTerminalPath);
				public getFromTerminal(): com.arcgismaps.utilitynetworks.UtilityTerminal;
			}
			export module UtilityTerminalPath {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTerminalPath,com.arcgismaps.utilitynetworks.UtilityTerminalPath> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTerminalPath.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTerminalPath.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTier {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTier>;
				public getTopologyType(): com.arcgismaps.utilitynetworks.UtilityTierTopologyType;
				public getCoreUtilityTier$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTier;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTier, param1: boolean);
				public getRank(): number;
				public getName(): string;
				public getDefaultTraceConfiguration(): com.arcgismaps.utilitynetworks.UtilityTraceConfiguration;
			}
			export module UtilityTier {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityTier,com.arcgismaps.utilitynetworks.UtilityTier> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTier.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTier.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTierGroup {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierGroup>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTierGroup, param1: boolean);
				public getCoreUtilityTierGroup$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTierGroup;
				public getTiers(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTier>;
				public getTier(param0: string): com.arcgismaps.utilitynetworks.UtilityTier;
				public getName(): string;
			}
			export module UtilityTierGroup {
				export class Factory extends com.arcgismaps.internal.wrapping.WrapperCachingFactory<com.arcgismaps.internal.jni.CoreUtilityTierGroup,com.arcgismaps.utilitynetworks.UtilityTierGroup> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierGroup.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTierGroup.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTierTopologyType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierTopologyType>;
				public getCoreUtilityTierTopologyType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTierTopologyType;
			}
			export module UtilityTierTopologyType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierTopologyType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTierTopologyType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTierTopologyType): com.arcgismaps.utilitynetworks.UtilityTierTopologyType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierTopologyType.Factory.WhenMappings>;
					}
				}
				export class Mesh extends com.arcgismaps.utilitynetworks.UtilityTierTopologyType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierTopologyType.Mesh>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTierTopologyType.Mesh;
				}
				export class Radial extends com.arcgismaps.utilitynetworks.UtilityTierTopologyType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierTopologyType.Radial>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTierTopologyType.Radial;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTierType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierType>;
				public getCoreUtilityTierType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTierType;
			}
			export module UtilityTierType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTierType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTierType): com.arcgismaps.utilitynetworks.UtilityTierType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierType.Factory.WhenMappings>;
					}
				}
				export class Hierarchical extends com.arcgismaps.utilitynetworks.UtilityTierType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierType.Hierarchical>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTierType.Hierarchical;
				}
				export class Partitioned extends com.arcgismaps.utilitynetworks.UtilityTierType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTierType.Partitioned>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTierType.Partitioned;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceAndCondition extends com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceAndCondition>;
				public getLeftExpression(): com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression;
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression, param1: com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression);
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceAndCondition);
				public getRightExpression(): com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression;
				public getCoreUtilityTraceAndCondition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceAndCondition;
			}
			export module UtilityTraceAndCondition {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTraceAndCondition,com.arcgismaps.utilitynetworks.UtilityTraceAndCondition> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceAndCondition.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceAndCondition.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTraceCondition {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceCondition>;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.utilitynetworks.UtilityTraceConditionType;
				public getCoreUtilityTraceCondition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceCondition;
			}
			export module UtilityTraceCondition {
				export class Factory extends com.arcgismaps.utilitynetworks.UtilityTraceConditionFactory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceCondition.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceCondition.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceConditionFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreUtilityTraceCondition,com.arcgismaps.utilitynetworks.UtilityTraceCondition> {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTraceCondition): com.arcgismaps.utilitynetworks.UtilityTraceCondition;
				public constructor();
			}
			export module UtilityTraceConditionFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTraceConditionType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionType>;
				public getCoreUtilityTraceConditionType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceConditionType;
			}
			export module UtilityTraceConditionType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceConditionType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTraceConditionType): com.arcgismaps.utilitynetworks.UtilityTraceConditionType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionType.Factory.WhenMappings>;
					}
				}
				export class UtilityCategoryComparison extends com.arcgismaps.utilitynetworks.UtilityTraceConditionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionType.UtilityCategoryComparison>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceConditionType.UtilityCategoryComparison;
				}
				export class UtilityNetworkAttributeComparison extends com.arcgismaps.utilitynetworks.UtilityTraceConditionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionType.UtilityNetworkAttributeComparison>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceConditionType.UtilityNetworkAttributeComparison;
				}
				export class UtilityTraceAndCondition extends com.arcgismaps.utilitynetworks.UtilityTraceConditionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionType.UtilityTraceAndCondition>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceConditionType.UtilityTraceAndCondition;
				}
				export class UtilityTraceOrCondition extends com.arcgismaps.utilitynetworks.UtilityTraceConditionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionType.UtilityTraceOrCondition>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceConditionType.UtilityTraceOrCondition;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTraceConditionalExpression extends com.arcgismaps.utilitynetworks.UtilityTraceCondition {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression>;
				public getCoreUtilityTraceConditionalExpression$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression;
			}
			export module UtilityTraceConditionalExpression {
				export class Factory extends com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpressionFactory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceConditionalExpressionFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression,com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression> {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpressionFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTraceConditionalExpression): com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression;
				public constructor();
			}
			export module UtilityTraceConditionalExpressionFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpressionFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceConfiguration {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConfiguration>;
				public setShortestPathNetworkAttribute(param0: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute): void;
				public setSourceTier(param0: com.arcgismaps.utilitynetworks.UtilityTier): void;
				public setTraversability(param0: com.arcgismaps.utilitynetworks.UtilityTraversability): void;
				public getIncludeContainers(): boolean;
				public getOutputAssetTypes(): java.util.List<com.arcgismaps.utilitynetworks.UtilityAssetType>;
				public getIncludeStructures(): boolean;
				public getValidateConsistency(): boolean;
				public setIncludeUpToFirstSpatialContainer(param0: boolean): void;
				public setDomainNetwork(param0: com.arcgismaps.utilitynetworks.UtilityDomainNetwork): void;
				public constructor();
				public getIncludeUpToFirstSpatialContainer(): boolean;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceConfiguration);
				public getShortestPathNetworkAttribute(): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
				public getValidateLocatability(): boolean;
				public setOutputCondition(param0: com.arcgismaps.utilitynetworks.UtilityTraceCondition): void;
				public getTraversability(): com.arcgismaps.utilitynetworks.UtilityTraversability;
				public getFilter(): com.arcgismaps.utilitynetworks.UtilityTraceFilter;
				public getTargetTier(): com.arcgismaps.utilitynetworks.UtilityTier;
				public getIncludeBarriers(): boolean;
				public getAllowIndeterminateFlow(): boolean;
				public getDomainNetwork(): com.arcgismaps.utilitynetworks.UtilityDomainNetwork;
				public setIncludeContainers(param0: boolean): void;
				public setIgnoreBarriersAtStartingPoints(param0: boolean): void;
				public setIncludeIsolatedFeatures(param0: boolean): void;
				public getIgnoreBarriersAtStartingPoints(): boolean;
				public setIncludeStructures(param0: boolean): void;
				public getSourceTier(): com.arcgismaps.utilitynetworks.UtilityTier;
				public setIncludeContent(param0: boolean): void;
				public getIncludeIsolatedFeatures(): boolean;
				public getIncludeContent(): boolean;
				public getPropagators(): java.util.List<com.arcgismaps.utilitynetworks.UtilityPropagator>;
				public getCoreUtilityTraceConfiguration$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceConfiguration;
				public getFunctions(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTraceFunction>;
				public getOutputCondition(): com.arcgismaps.utilitynetworks.UtilityTraceCondition;
				public setValidateConsistency(param0: boolean): void;
				public setIncludeBarriers(param0: boolean): void;
				public setFilter(param0: com.arcgismaps.utilitynetworks.UtilityTraceFilter): void;
				public setAllowIndeterminateFlow(param0: boolean): void;
				public setTargetTier(param0: com.arcgismaps.utilitynetworks.UtilityTier): void;
				public setValidateLocatability(param0: boolean): void;
			}
			export module UtilityTraceConfiguration {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTraceConfiguration,com.arcgismaps.utilitynetworks.UtilityTraceConfiguration> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceConfiguration.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceConfiguration.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceFilter {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFilter>;
				public getCoreUtilityTraceFilter$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceFilter;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFilter);
				public getScope(): com.arcgismaps.utilitynetworks.UtilityTraversabilityScope;
				public setBarriers(param0: com.arcgismaps.utilitynetworks.UtilityTraceCondition): void;
				public setBitsetNetworkAttribute(param0: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute): void;
				public getNearestNeighbor(): com.arcgismaps.utilitynetworks.UtilityNearestNeighbor;
				public getBitsetNetworkAttribute(): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
				public getFunctionBarriers(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTraceFunctionBarrier>;
				public setNearestNeighbor(param0: com.arcgismaps.utilitynetworks.UtilityNearestNeighbor): void;
				public setScope(param0: com.arcgismaps.utilitynetworks.UtilityTraversabilityScope): void;
				public getBarriers(): com.arcgismaps.utilitynetworks.UtilityTraceCondition;
				public constructor();
			}
			export module UtilityTraceFilter {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTraceFilter,com.arcgismaps.utilitynetworks.UtilityTraceFilter> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFilter.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFilter.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceFunction {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunction>;
				public getFunctionType(): com.arcgismaps.utilitynetworks.UtilityTraceFunctionType;
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityTraceFunctionType, param1: com.arcgismaps.utilitynetworks.UtilityNetworkAttribute, param2: com.arcgismaps.utilitynetworks.UtilityTraceCondition);
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunction);
				public getCoreUtilityTraceFunction$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceFunction;
				public getNetworkAttribute(): com.arcgismaps.utilitynetworks.UtilityNetworkAttribute;
				public getCondition(): com.arcgismaps.utilitynetworks.UtilityTraceCondition;
				public setCondition(param0: com.arcgismaps.utilitynetworks.UtilityTraceCondition): void;
			}
			export module UtilityTraceFunction {
				export class Companion {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunction.Companion>;
				}
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTraceFunction,com.arcgismaps.utilitynetworks.UtilityTraceFunction> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunction.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunction.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceFunctionBarrier {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionBarrier>;
				public getTraceFunction(): com.arcgismaps.utilitynetworks.UtilityTraceFunction;
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityTraceFunction, param1: com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator, param2: any);
				public getCoreUtilityTraceFunctionBarrier$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionBarrier;
				public getValue(): any;
				public getComparisonOperator(): com.arcgismaps.utilitynetworks.UtilityAttributeComparisonOperator;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionBarrier);
			}
			export module UtilityTraceFunctionBarrier {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTraceFunctionBarrier,com.arcgismaps.utilitynetworks.UtilityTraceFunctionBarrier> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionBarrier.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunctionBarrier.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceFunctionOutput {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionOutput>;
				public getFunction(): com.arcgismaps.utilitynetworks.UtilityTraceFunction;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionOutput);
				public getResult(): any;
				public getCoreUtilityTraceFunctionOutput$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionOutput;
			}
			export module UtilityTraceFunctionOutput {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTraceFunctionOutput,com.arcgismaps.utilitynetworks.UtilityTraceFunctionOutput> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionOutput.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunctionOutput.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTraceFunctionType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionType>;
				public getCoreUtilityTraceFunctionType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType;
			}
			export module UtilityTraceFunctionType {
				export class Add extends com.arcgismaps.utilitynetworks.UtilityTraceFunctionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Add>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Add;
				}
				export class Average extends com.arcgismaps.utilitynetworks.UtilityTraceFunctionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Average>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Average;
				}
				export class Count extends com.arcgismaps.utilitynetworks.UtilityTraceFunctionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Count>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Count;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTraceFunctionType): com.arcgismaps.utilitynetworks.UtilityTraceFunctionType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Factory.WhenMappings>;
					}
				}
				export class Max extends com.arcgismaps.utilitynetworks.UtilityTraceFunctionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Max>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Max;
				}
				export class Min extends com.arcgismaps.utilitynetworks.UtilityTraceFunctionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Min>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Min;
				}
				export class Subtract extends com.arcgismaps.utilitynetworks.UtilityTraceFunctionType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Subtract>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceFunctionType.Subtract;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceOrCondition extends com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceOrCondition>;
				public getCoreUtilityTraceOrCondition$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceOrCondition;
				public getLeftExpression(): com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression;
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression, param1: com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression);
				public getRightExpression(): com.arcgismaps.utilitynetworks.UtilityTraceConditionalExpression;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceOrCondition);
			}
			export module UtilityTraceOrCondition {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTraceOrCondition,com.arcgismaps.utilitynetworks.UtilityTraceOrCondition> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceOrCondition.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceOrCondition.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceParameters {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceParameters>;
				public getResultTypes(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTraceResultType>;
				public getStartingLocations(): java.util.List<com.arcgismaps.utilitynetworks.UtilityElement>;
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityTraceType, param1: java.lang.Iterable<com.arcgismaps.utilitynetworks.UtilityElement>);
				public constructor(param0: com.arcgismaps.utilitynetworks.UtilityNamedTraceConfiguration, param1: java.lang.Iterable<com.arcgismaps.utilitynetworks.UtilityElement>);
				public getTraceConfiguration(): com.arcgismaps.utilitynetworks.UtilityTraceConfiguration;
				public getCoreUtilityTraceParameters$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceParameters;
				public getBarriers(): java.util.List<com.arcgismaps.utilitynetworks.UtilityElement>;
				public getFilterBarriers(): java.util.List<com.arcgismaps.utilitynetworks.UtilityElement>;
				public getTraceType(): com.arcgismaps.utilitynetworks.UtilityTraceType;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraceParameters);
				public setTraceConfiguration(param0: com.arcgismaps.utilitynetworks.UtilityTraceConfiguration): void;
			}
			export module UtilityTraceParameters {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTraceParameters,com.arcgismaps.utilitynetworks.UtilityTraceParameters> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceParameters.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceParameters.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTraceResult {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResult>;
				public getWarnings(): java.util.List<string>;
				public getCoreUtilityTraceResult$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceResult;
				public getNearestNeighborResult(): com.arcgismaps.utilitynetworks.UtilityNearestNeighborResult;
				public getObjectType$arcgis_maps_any_release(): com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType;
			}
			export module UtilityTraceResult {
				export class Factory extends com.arcgismaps.utilitynetworks.UtilityTraceResultFactory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResult.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceResult.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraceResultFactory extends com.arcgismaps.internal.wrapping.ArcGISFactory<com.arcgismaps.internal.jni.CoreUtilityTraceResult,com.arcgismaps.utilitynetworks.UtilityTraceResult> {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultFactory>;
				public convertToPublic(param0: any): any;
				public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTraceResult): com.arcgismaps.utilitynetworks.UtilityTraceResult;
				public constructor();
			}
			export module UtilityTraceResultFactory {
				export class WhenMappings {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultFactory.WhenMappings>;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTraceResultObjectType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType>;
				public getCoreUtilityTraceResultObjectType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType;
			}
			export module UtilityTraceResultObjectType {
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTraceResultObjectType): com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType.Factory.WhenMappings>;
					}
				}
				export class UtilityElementTraceResult extends com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType.UtilityElementTraceResult>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType.UtilityElementTraceResult;
				}
				export class UtilityFunctionTraceResult extends com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType.UtilityFunctionTraceResult>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType.UtilityFunctionTraceResult;
				}
				export class UtilityGeometryTraceResult extends com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType.UtilityGeometryTraceResult>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceResultObjectType.UtilityGeometryTraceResult;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTraceResultType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultType>;
				public getCoreUtilityTraceResultType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceResultType;
			}
			export module UtilityTraceResultType {
				export class Elements extends com.arcgismaps.utilitynetworks.UtilityTraceResultType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultType.Elements>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceResultType.Elements;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceResultType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTraceResultType): com.arcgismaps.utilitynetworks.UtilityTraceResultType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultType.Factory.WhenMappings>;
					}
				}
				export class FunctionOutputs extends com.arcgismaps.utilitynetworks.UtilityTraceResultType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultType.FunctionOutputs>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceResultType.FunctionOutputs;
				}
				export class Geometry extends com.arcgismaps.utilitynetworks.UtilityTraceResultType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceResultType.Geometry>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceResultType.Geometry;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTraceType {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType>;
				public getCoreUtilityTraceType$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraceType;
			}
			export module UtilityTraceType {
				export class Connected extends com.arcgismaps.utilitynetworks.UtilityTraceType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType.Connected>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceType.Connected;
				}
				export class Downstream extends com.arcgismaps.utilitynetworks.UtilityTraceType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType.Downstream>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceType.Downstream;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceType.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTraceType): com.arcgismaps.utilitynetworks.UtilityTraceType;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType.Factory.WhenMappings>;
					}
				}
				export class Isolation extends com.arcgismaps.utilitynetworks.UtilityTraceType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType.Isolation>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceType.Isolation;
				}
				export class Loops extends com.arcgismaps.utilitynetworks.UtilityTraceType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType.Loops>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceType.Loops;
				}
				export class ShortestPath extends com.arcgismaps.utilitynetworks.UtilityTraceType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType.ShortestPath>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceType.ShortestPath;
				}
				export class Subnetwork extends com.arcgismaps.utilitynetworks.UtilityTraceType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType.Subnetwork>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceType.Subnetwork;
				}
				export class Upstream extends com.arcgismaps.utilitynetworks.UtilityTraceType {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraceType.Upstream>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraceType.Upstream;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export class UtilityTraversability {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraversability>;
				public getScope(): com.arcgismaps.utilitynetworks.UtilityTraversabilityScope;
				public getCoreUtilityTraversability$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraversability;
				public setBarriers(param0: com.arcgismaps.utilitynetworks.UtilityTraceCondition): void;
				public getFunctionBarriers(): java.util.List<com.arcgismaps.utilitynetworks.UtilityTraceFunctionBarrier>;
				public constructor(param0: com.arcgismaps.internal.jni.CoreUtilityTraversability);
				public setScope(param0: com.arcgismaps.utilitynetworks.UtilityTraversabilityScope): void;
				public getBarriers(): com.arcgismaps.utilitynetworks.UtilityTraceCondition;
				public constructor();
			}
			export module UtilityTraversability {
				export class Factory extends com.arcgismaps.internal.wrapping.WrappingFactory<com.arcgismaps.internal.jni.CoreUtilityTraversability,com.arcgismaps.utilitynetworks.UtilityTraversability> {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraversability.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraversability.Factory;
				}
			}
		}
	}
}

declare module com {
	export module arcgismaps {
		export module utilitynetworks {
			export abstract class UtilityTraversabilityScope {
				public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraversabilityScope>;
				public getCoreUtilityTraversabilityScope$arcgis_maps_any_release(): com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope;
			}
			export module UtilityTraversabilityScope {
				export class Edges extends com.arcgismaps.utilitynetworks.UtilityTraversabilityScope {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraversabilityScope.Edges>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraversabilityScope.Edges;
				}
				export class Factory {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraversabilityScope.Factory>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraversabilityScope.Factory;
					public convertToPublic(param0: com.arcgismaps.internal.jni.CoreUtilityTraversabilityScope): com.arcgismaps.utilitynetworks.UtilityTraversabilityScope;
				}
				export module Factory {
					export class WhenMappings {
						public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraversabilityScope.Factory.WhenMappings>;
					}
				}
				export class Junctions extends com.arcgismaps.utilitynetworks.UtilityTraversabilityScope {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraversabilityScope.Junctions>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraversabilityScope.Junctions;
				}
				export class JunctionsAndEdges extends com.arcgismaps.utilitynetworks.UtilityTraversabilityScope {
					public static class: java.lang.Class<com.arcgismaps.utilitynetworks.UtilityTraversabilityScope.JunctionsAndEdges>;
					public static INSTANCE: com.arcgismaps.utilitynetworks.UtilityTraversabilityScope.JunctionsAndEdges;
				}
			}
		}
	}
}

//Generics information:
//com.arcgismaps.LoadableImplWithData:1
//com.arcgismaps.geometry.GeometryBuilder:1
//com.arcgismaps.geometry.MultipartBuilder:1
//com.arcgismaps.internal.collections.CoreElementConverter:1
//com.arcgismaps.internal.collections.ListImpl:1
//com.arcgismaps.internal.collections.MutableDictionaryImpl:2
//com.arcgismaps.internal.collections.MutableListImpl:1
//com.arcgismaps.internal.collections.ObservableListFlow:1
//com.arcgismaps.internal.collections.ObservableListImpl:1
//com.arcgismaps.internal.collections.ResettableIterator:1
//com.arcgismaps.internal.io.ListOrSingletonSerializer:1
//com.arcgismaps.internal.io.LockableStringSerializer:2
//com.arcgismaps.internal.io.SealedClassStringDecoder:1
//com.arcgismaps.internal.io.SealedClassStringDecoderWithUnknownEncoding:1
//com.arcgismaps.internal.io.SealedClassStringSerializer:1
//com.arcgismaps.internal.io.StringTransformingSerializer:1
//com.arcgismaps.internal.wrapping.ArcGISFactory:2
//com.arcgismaps.internal.wrapping.WeakRefWrapperCache:2
//com.arcgismaps.internal.wrapping.WrapperCachingFactory:2
//com.arcgismaps.internal.wrapping.WrappingFactory:2
//com.arcgismaps.portal.PortalQueryResultSet:1
//com.arcgismaps.tasks.Job:1
//com.arcgismaps.tasks.JobImpl:1

